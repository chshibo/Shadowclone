	.text
	.file	"mv-search.c"
	.globl	InitializeFastFullIntegerSearch # -- Begin function InitializeFastFullIntegerSearch
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch,@function
InitializeFastFullIntegerSearch:        # @InitializeFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_5
# %bb.1:                                # %func_InitializeFastFullIntegerSearch.12
	callq	InitializeFastFullIntegerSearch.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_InitializeFastFullIntegerSearch.24
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_InitializeFastFullIntegerSearch.50
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_InitializeFastFullIntegerSearch.53
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.53
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
	jmp	.LBB0_4
.Lfunc_end0:
	.size	InitializeFastFullIntegerSearch, .Lfunc_end0-InitializeFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch # -- Begin function ClearFastFullIntegerSearch
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch,@function
ClearFastFullIntegerSearch:             # @ClearFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_5
# %bb.1:                                # %func_ClearFastFullIntegerSearch.57
	callq	ClearFastFullIntegerSearch.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_ClearFastFullIntegerSearch.70
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.70
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_ClearFastFullIntegerSearch.74
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_ClearFastFullIntegerSearch.83
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
	jmp	.LBB1_4
.Lfunc_end1:
	.size	ClearFastFullIntegerSearch, .Lfunc_end1-ClearFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch # -- Begin function ResetFastFullIntegerSearch
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch,@function
ResetFastFullIntegerSearch:             # @ResetFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_ResetFastFullIntegerSearch.64
	callq	ResetFastFullIntegerSearch.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_ResetFastFullIntegerSearch.95
	.cfi_def_cfa %rbp, 16
	callq	ResetFastFullIntegerSearch.95
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	ResetFastFullIntegerSearch, .Lfunc_end2-ResetFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks       # -- Begin function SetupLargerBlocks
	.p2align	4, 0x90
	.type	SetupLargerBlocks,@function
SetupLargerBlocks:                      # @SetupLargerBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_SetupLargerBlocks.7
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_SetupLargerBlocks.14
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_SetupLargerBlocks.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_SetupLargerBlocks.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	SetupLargerBlocks, .Lfunc_end3-SetupLargerBlocks
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch  # -- Begin function SetupFastFullPelSearch
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch,@function
SetupFastFullPelSearch:                 # @SetupFastFullPelSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_SetupFastFullPelSearch.2
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_SetupFastFullPelSearch.15
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_SetupFastFullPelSearch.62
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_SetupFastFullPelSearch.65
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	SetupFastFullPelSearch, .Lfunc_end4-SetupFastFullPelSearch
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor # -- Begin function SetMotionVectorPredictor
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor,@function
SetMotionVectorPredictor:               # @SetMotionVectorPredictor
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_SetMotionVectorPredictor.10
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	callq	SetMotionVectorPredictor.10
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_SetMotionVectorPredictor.72
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.72
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_SetMotionVectorPredictor.82
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.82
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_SetMotionVectorPredictor.90
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.90
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	24(%rbp), %r11d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	32(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	16(%rbp), %eax
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	SetMotionVectorPredictor, .Lfunc_end5-SetMotionVectorPredictor
	.cfi_endproc
                                        # -- End function
	.globl	Init_Motion_Search_Module # -- Begin function Init_Motion_Search_Module
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module,@function
Init_Motion_Search_Module:              # @Init_Motion_Search_Module
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Init_Motion_Search_Module.17
	callq	Init_Motion_Search_Module.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Init_Motion_Search_Module.52
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Init_Motion_Search_Module.63
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Init_Motion_Search_Module.71
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.71
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Init_Motion_Search_Module, .Lfunc_end6-Init_Motion_Search_Module
	.cfi_endproc
                                        # -- End function
	.globl	Clear_Motion_Search_Module # -- Begin function Clear_Motion_Search_Module
	.p2align	4, 0x90
	.type	Clear_Motion_Search_Module,@function
Clear_Motion_Search_Module:             # @Clear_Motion_Search_Module
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movl	max_mvd, %ecx
	movq	mvbits, %rdx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	shlq	$2, %rax
	addq	%rax, %rdx
	movq	%rdx, mvbits
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB7_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	jmp	.LBB7_3
.LBB7_2:                                # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
.LBB7_3:                                # %cond.end
	xorl	%ecx, %ecx
	movq	byte_abs, %rdx
	cltq
	subq	%rax, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rdx
	movq	%rdx, byte_abs
	movq	spiral_search_x, %rdi
	callq	free
	movq	spiral_search_y, %rdi
	callq	free
	movq	mvbits, %rdi
	callq	free
	movq	refbits, %rdi
	callq	free
	movq	byte_abs, %rdi
	callq	free
	movq	motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	callq	free_mem4Dint
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB7_5
# %bb.4:                                # %if.then
	callq	ClearFastFullIntegerSearch
.LBB7_5:                                # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	Clear_Motion_Search_Module, .Lfunc_end7-Clear_Motion_Search_Module
	.cfi_endproc
                                        # -- End function
	.globl	FullPelBlockMotionSearch # -- Begin function FullPelBlockMotionSearch
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch,@function
FullPelBlockMotionSearch:               # @FullPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_FullPelBlockMotionSearch.55
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FullPelBlockMotionSearch.55
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_FullPelBlockMotionSearch.76
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.76
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_FullPelBlockMotionSearch.80
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.80
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_FullPelBlockMotionSearch.87
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.87
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	48(%rbp), %r11d
	movl	56(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	FullPelBlockMotionSearch, .Lfunc_end8-FullPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	FastFullPelBlockMotionSearch # -- Begin function FastFullPelBlockMotionSearch
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch,@function
FastFullPelBlockMotionSearch:           # @FastFullPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_FastFullPelBlockMotionSearch.18
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FastFullPelBlockMotionSearch.18
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_FastFullPelBlockMotionSearch.32
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.32
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_FastFullPelBlockMotionSearch.42
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.42
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_FastFullPelBlockMotionSearch.89
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.89
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	48(%rbp), %r11d
	movl	56(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	FastFullPelBlockMotionSearch, .Lfunc_end9-FastFullPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	SATD                    # -- Begin function SATD
	.p2align	4, 0x90
	.type	SATD,@function
SATD:                                   # @SATD
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_5
# %bb.1:                                # %func_SATD.25
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_SATD.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_SATD.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.48
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_SATD.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.68
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
	jmp	.LBB10_4
.Lfunc_end10:
	.size	SATD, .Lfunc_end10-SATD
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8                 # -- Begin function SATD8X8
	.p2align	4, 0x90
	.type	SATD8X8,@function
SATD8X8:                                # @SATD8X8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SATD8X8.4
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SATD8X8.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SATD8X8.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.79
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SATD8X8.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.86
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SATD8X8, .Lfunc_end11-SATD8X8
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD               # -- Begin function find_SATD
	.p2align	4, 0x90
	.type	find_SATD,@function
find_SATD:                              # @find_SATD
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_find_SATD.19
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_find_SATD.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_find_SATD.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_find_SATD.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	find_SATD, .Lfunc_end12-find_SATD
	.cfi_endproc
                                        # -- End function
	.globl	SubPelBlockMotionSearch # -- Begin function SubPelBlockMotionSearch
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch,@function
SubPelBlockMotionSearch:                # @SubPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SubPelBlockMotionSearch.22
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	SubPelBlockMotionSearch.22
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SubPelBlockMotionSearch.46
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%r15d, 48(%rsp)
	callq	SubPelBlockMotionSearch.46
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SubPelBlockMotionSearch.61
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%ebx, 48(%rsp)
	callq	SubPelBlockMotionSearch.61
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SubPelBlockMotionSearch.98
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%ebx, 48(%rsp)
	callq	SubPelBlockMotionSearch.98
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%ebx, %edx
	movw	16(%rbp), %r11w
	movl	%r12d, %r8d
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	56(%rbp), %r12d
	movl	64(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %ebx
	movl	%r13d, %ecx
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SubPelBlockMotionSearch, .Lfunc_end13-SubPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	FullPelBlockMotionBiPred # -- Begin function FullPelBlockMotionBiPred
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred,@function
FullPelBlockMotionBiPred:               # @FullPelBlockMotionBiPred
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_FullPelBlockMotionBiPred.51
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	88(%rbp), %eax
	movl	%eax, 72(%rsp)
	movl	96(%rbp), %eax
	movl	%eax, 80(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FullPelBlockMotionBiPred.51
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_FullPelBlockMotionBiPred.77
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.77
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_FullPelBlockMotionBiPred.91
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.91
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_FullPelBlockMotionBiPred.92
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.92
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	16(%rbp), %r11d
	movl	%ebx, %edx
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	88(%rbp), %ebx
	movl	96(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	FullPelBlockMotionBiPred, .Lfunc_end14-FullPelBlockMotionBiPred
	.cfi_endproc
                                        # -- End function
	.globl	SubPelBlockSearchBiPred # -- Begin function SubPelBlockSearchBiPred
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred,@function
SubPelBlockSearchBiPred:                # @SubPelBlockSearchBiPred
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_SubPelBlockSearchBiPred.1
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	72(%rbp), %eax
	movl	%eax, 56(%rsp)
	movl	80(%rbp), %eax
	movl	%eax, 64(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	SubPelBlockSearchBiPred.1
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_SubPelBlockSearchBiPred.13
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r15d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.13
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_SubPelBlockSearchBiPred.21
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r12d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.21
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_SubPelBlockSearchBiPred.23
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r12d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.23
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r11w
	movl	%ebx, %edx
	movl	%r12d, %r8d
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	72(%rbp), %ebx
	movl	80(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %r12d
	movl	%r13d, %ecx
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	SubPelBlockSearchBiPred, .Lfunc_end15-SubPelBlockSearchBiPred
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost      # -- Begin function BPredPartitionCost
	.p2align	4, 0x90
	.type	BPredPartitionCost,@function
BPredPartitionCost:                     # @BPredPartitionCost
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_BPredPartitionCost.3
	movl	%r15d, %edi
	movl	%r14d, %esi
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	BPredPartitionCost.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_BPredPartitionCost.5
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	callq	BPredPartitionCost.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_BPredPartitionCost.11
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	callq	BPredPartitionCost.11
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_BPredPartitionCost.39
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	callq	BPredPartitionCost.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	BPredPartitionCost, .Lfunc_end16-BPredPartitionCost
	.cfi_endproc
                                        # -- End function
	.globl	BlockMotionSearch       # -- Begin function BlockMotionSearch
	.p2align	4, 0x90
	.type	BlockMotionSearch,@function
BlockMotionSearch:                      # @BlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_BlockMotionSearch.27
	movswl	%r15w, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	BlockMotionSearch.27
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_BlockMotionSearch.36
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	BlockMotionSearch.36
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_BlockMotionSearch.81
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	callq	BlockMotionSearch.81
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_BlockMotionSearch.84
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	callq	BlockMotionSearch.84
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	BlockMotionSearch, .Lfunc_end17-BlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB           # -- Begin function GetSkipCostMB
	.p2align	4, 0x90
	.type	GetSkipCostMB,@function
GetSkipCostMB:                          # @GetSkipCostMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	vmovsd	%xmm0, -8(%rbp)         # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_GetSkipCostMB.30
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	GetSkipCostMB.30
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_GetSkipCostMB.40
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.40
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_GetSkipCostMB.47
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.47
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_GetSkipCostMB.49
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.49
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	GetSkipCostMB, .Lfunc_end18-GetSkipCostMB
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost        # -- Begin function BIDPartitionCost
	.p2align	4, 0x90
	.type	BIDPartitionCost,@function
BIDPartitionCost:                       # @BIDPartitionCost
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_BIDPartitionCost.16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_BIDPartitionCost.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_BIDPartitionCost.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_BIDPartitionCost.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	BIDPartitionCost, .Lfunc_end19-BIDPartitionCost
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector # -- Begin function FindSkipModeMotionVector
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector,@function
FindSkipModeMotionVector:               # @FindSkipModeMotionVector
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_FindSkipModeMotionVector.6
	callq	FindSkipModeMotionVector.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_FindSkipModeMotionVector.28
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_FindSkipModeMotionVector.29
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.29
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_FindSkipModeMotionVector.43
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	FindSkipModeMotionVector, .Lfunc_end20-FindSkipModeMotionVector
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8      # -- Begin function Get_Direct_Cost8x8
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8,@function
Get_Direct_Cost8x8:                     # @Get_Direct_Cost8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_5
# %bb.1:                                # %func_Get_Direct_Cost8x8.88
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_Get_Direct_Cost8x8.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_Get_Direct_Cost8x8.96
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_Get_Direct_Cost8x8.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.97
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
	jmp	.LBB21_4
.Lfunc_end21:
	.size	Get_Direct_Cost8x8, .Lfunc_end21-Get_Direct_Cost8x8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB       # -- Begin function Get_Direct_CostMB
	.p2align	4, 0x90
	.type	Get_Direct_CostMB,@function
Get_Direct_CostMB:                      # @Get_Direct_CostMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	vmovsd	%xmm0, -8(%rbp)         # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_Get_Direct_CostMB.9
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB.9
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_Get_Direct_CostMB.37
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.37
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_Get_Direct_CostMB.66
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.66
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_Get_Direct_CostMB.73
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.73
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	Get_Direct_CostMB, .Lfunc_end22-Get_Direct_CostMB
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch   # -- Begin function PartitionMotionSearch
	.p2align	4, 0x90
	.type	PartitionMotionSearch,@function
PartitionMotionSearch:                  # @PartitionMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_PartitionMotionSearch.20
	movl	%ebx, %edi
	movl	%r14d, %esi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	PartitionMotionSearch.20
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_PartitionMotionSearch.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.54
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_PartitionMotionSearch.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.75
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_PartitionMotionSearch.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.78
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	PartitionMotionSearch, .Lfunc_end23-PartitionMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors # -- Begin function Get_Direct_Motion_Vectors
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors,@function
Get_Direct_Motion_Vectors:              # @Get_Direct_Motion_Vectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_Get_Direct_Motion_Vectors.38
	callq	Get_Direct_Motion_Vectors.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_Get_Direct_Motion_Vectors.45
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_Get_Direct_Motion_Vectors.85
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.85
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_Get_Direct_Motion_Vectors.94
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.94
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	Get_Direct_Motion_Vectors, .Lfunc_end24-Get_Direct_Motion_Vectors
	.cfi_endproc
                                        # -- End function
	.globl	sign                    # -- Begin function sign
	.p2align	4, 0x90
	.type	sign,@function
sign:                                   # @sign
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_sign.8
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_sign.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_sign.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_sign.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	sign, .Lfunc_end25-sign
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.1
.LCPI26_0:
	.quad	4602678819172646912     # double 0.5
.LCPI26_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.1
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.1,@function
SubPelBlockSearchBiPred.1:              # @SubPelBlockSearchBiPred.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI26_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI26_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$979925675, -196(%rbp)  # imm = 0x3A687AAB
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -122(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -150(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB26_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB26_4
.LBB26_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB26_4:                               # %cond.end
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB26_6:                               # %cond.end18
	movw	%ax, -174(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB26_10
.LBB26_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB26_10
.LBB26_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -118(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB26_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB26_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB26_14
.LBB26_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB26_14:                              # %cond.end55
	jmp	.LBB26_16
.LBB26_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB26_16
.LBB26_16:                              # %cond.end58
	movw	%ax, -36(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB26_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB26_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB26_20
.LBB26_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB26_20:                              # %cond.end82
	jmp	.LBB26_22
.LBB26_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB26_22
.LBB26_22:                              # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB26_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB26_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB26_26
.LBB26_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB26_26:                              # %cond.end106
	jmp	.LBB26_28
.LBB26_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB26_28
.LBB26_28:                              # %cond.end109
	movw	%ax, -170(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB26_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB26_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB26_32
.LBB26_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB26_32:                              # %cond.end130
	jmp	.LBB26_34
.LBB26_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB26_34
.LBB26_34:                              # %cond.end133
	movw	%ax, -172(%rbp)
	movswl	-172(%rbp), %eax
	movswl	-170(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -34(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB26_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB26_37
.LBB26_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB26_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB26_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB26_40
.LBB26_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB26_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-122(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-150(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB26_45
# %bb.41:                               # %land.lhs.true197
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_45
# %bb.42:                               # %land.lhs.true205
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB26_45
# %bb.43:                               # %land.lhs.true211
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB26_46
.LBB26_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB26_46:                              # %if.end
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB26_51
# %bb.47:                               # %land.lhs.true224
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_51
# %bb.48:                               # %land.lhs.true232
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB26_51
# %bb.49:                               # %land.lhs.true238
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB26_52
.LBB26_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB26_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-176(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB26_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_55 Depth 2
                                        #       Child Loop BB26_60 Depth 3
                                        #         Child Loop BB26_162 Depth 4
                                        #           Child Loop BB26_164 Depth 5
                                        #       Child Loop BB26_175 Depth 3
                                        #         Child Loop BB26_181 Depth 4
                                        #           Child Loop BB26_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-174(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB26_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB26_55:                              # %for.cond283
                                        #   Parent Loop BB26_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_60 Depth 3
                                        #         Child Loop BB26_162 Depth 4
                                        #           Child Loop BB26_164 Depth 5
                                        #       Child Loop BB26_175 Depth 3
                                        #         Child Loop BB26_181 Depth 4
                                        #           Child Loop BB26_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB26_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB26_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_57:                              # %land.end
                                        #   in Loop: Header=BB26_55 Depth=2
	testb	$1, %al
	jne	.LBB26_58
	jmp	.LBB26_195
.LBB26_58:                              # %for.body289
                                        #   in Loop: Header=BB26_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB26_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB26_55 Depth=2
	movw	$0, -40(%rbp)
.LBB26_60:                              # %for.cond304
                                        #   Parent Loop BB26_53 Depth=1
                                        #     Parent Loop BB26_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_162 Depth 4
                                        #           Child Loop BB26_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB26_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_67
.LBB26_63:                              # %cond.false345
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_66
.LBB26_65:                              # %cond.false369
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_66:                              # %cond.end389
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_67:                              # %cond.end391
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_73
.LBB26_69:                              # %cond.false421
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_72
.LBB26_71:                              # %cond.false448
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_72:                              # %cond.end470
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_73:                              # %cond.end472
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_79
.LBB26_75:                              # %cond.false505
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_78
.LBB26_77:                              # %cond.false532
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_78:                              # %cond.end554
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_79:                              # %cond.end556
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_85
.LBB26_81:                              # %cond.false589
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_84
.LBB26_83:                              # %cond.false616
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_84:                              # %cond.end638
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_85:                              # %cond.end640
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_91
.LBB26_87:                              # %cond.false681
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_90
.LBB26_89:                              # %cond.false706
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_90:                              # %cond.end726
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_91:                              # %cond.end728
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_97
.LBB26_93:                              # %cond.false759
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_96
.LBB26_95:                              # %cond.false786
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_96:                              # %cond.end808
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_97:                              # %cond.end810
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_103
.LBB26_99:                              # %cond.false843
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_102
.LBB26_101:                             # %cond.false870
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_102:                             # %cond.end892
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_103:                             # %cond.end894
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_109
.LBB26_105:                             # %cond.false927
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_108
.LBB26_107:                             # %cond.false954
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_108:                             # %cond.end976
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_109:                             # %cond.end978
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_115
.LBB26_111:                             # %cond.false1019
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_114
.LBB26_113:                             # %cond.false1044
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_114:                             # %cond.end1064
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_115:                             # %cond.end1066
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_121
.LBB26_117:                             # %cond.false1097
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_120
.LBB26_119:                             # %cond.false1124
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_120:                             # %cond.end1146
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_121:                             # %cond.end1148
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_127
.LBB26_123:                             # %cond.false1181
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_126
.LBB26_125:                             # %cond.false1208
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_126:                             # %cond.end1230
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_127:                             # %cond.end1232
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_133
.LBB26_129:                             # %cond.false1265
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_132
.LBB26_131:                             # %cond.false1292
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_132:                             # %cond.end1314
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_133:                             # %cond.end1316
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_139
.LBB26_135:                             # %cond.false1357
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_138
.LBB26_137:                             # %cond.false1382
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_138:                             # %cond.end1402
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_139:                             # %cond.end1404
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_145
.LBB26_141:                             # %cond.false1435
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_144
.LBB26_143:                             # %cond.false1462
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_144:                             # %cond.end1484
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_145:                             # %cond.end1486
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_151
.LBB26_147:                             # %cond.false1519
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_150
.LBB26_149:                             # %cond.false1546
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_150:                             # %cond.end1568
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_151:                             # %cond.end1570
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB26_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_157
.LBB26_153:                             # %cond.false1603
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB26_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_156
.LBB26_155:                             # %cond.false1630
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_156:                             # %cond.end1652
                                        #   in Loop: Header=BB26_60 Depth=3
.LBB26_157:                             # %cond.end1654
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB26_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB26_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB26_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB26_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB26_173
.LBB26_160:                             # %if.end1673
                                        #   in Loop: Header=BB26_60 Depth=3
	jmp	.LBB26_170
.LBB26_161:                             # %if.else1674
                                        #   in Loop: Header=BB26_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB26_162:                             # %for.cond1675
                                        #   Parent Loop BB26_53 Depth=1
                                        #     Parent Loop BB26_55 Depth=2
                                        #       Parent Loop BB26_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB26_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB26_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB26_162 Depth=4
	movl	$0, -100(%rbp)
.LBB26_164:                             # %for.cond1679
                                        #   Parent Loop BB26_53 Depth=1
                                        #     Parent Loop BB26_55 Depth=2
                                        #       Parent Loop BB26_60 Depth=3
                                        #         Parent Loop BB26_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB26_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB26_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB26_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB26_164
.LBB26_167:                             # %for.end
                                        #   in Loop: Header=BB26_162 Depth=4
	jmp	.LBB26_168
.LBB26_168:                             # %for.inc1694
                                        #   in Loop: Header=BB26_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB26_162
.LBB26_169:                             # %for.end1696
                                        #   in Loop: Header=BB26_60 Depth=3
	jmp	.LBB26_170
.LBB26_170:                             # %if.end1697
                                        #   in Loop: Header=BB26_60 Depth=3
	jmp	.LBB26_171
.LBB26_171:                             # %for.inc1698
                                        #   in Loop: Header=BB26_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB26_60
.LBB26_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB26_55 Depth=2
	jmp	.LBB26_173
.LBB26_173:                             # %for.end1702
                                        #   in Loop: Header=BB26_55 Depth=2
	jmp	.LBB26_193
.LBB26_174:                             # %if.else1703
                                        #   in Loop: Header=BB26_55 Depth=2
	movw	$0, -40(%rbp)
.LBB26_175:                             # %for.cond1704
                                        #   Parent Loop BB26_53 Depth=1
                                        #     Parent Loop BB26_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_181 Depth 4
                                        #           Child Loop BB26_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB26_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB26_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB26_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB26_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB26_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB26_192
.LBB26_179:                             # %if.end2054
                                        #   in Loop: Header=BB26_175 Depth=3
	jmp	.LBB26_189
.LBB26_180:                             # %if.else2055
                                        #   in Loop: Header=BB26_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB26_181:                             # %for.cond2056
                                        #   Parent Loop BB26_53 Depth=1
                                        #     Parent Loop BB26_55 Depth=2
                                        #       Parent Loop BB26_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB26_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB26_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB26_181 Depth=4
	movl	$0, -100(%rbp)
.LBB26_183:                             # %for.cond2060
                                        #   Parent Loop BB26_53 Depth=1
                                        #     Parent Loop BB26_55 Depth=2
                                        #       Parent Loop BB26_175 Depth=3
                                        #         Parent Loop BB26_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB26_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB26_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB26_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB26_183
.LBB26_186:                             # %for.end2077
                                        #   in Loop: Header=BB26_181 Depth=4
	jmp	.LBB26_187
.LBB26_187:                             # %for.inc2078
                                        #   in Loop: Header=BB26_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB26_181
.LBB26_188:                             # %for.end2080
                                        #   in Loop: Header=BB26_175 Depth=3
	jmp	.LBB26_189
.LBB26_189:                             # %if.end2081
                                        #   in Loop: Header=BB26_175 Depth=3
	jmp	.LBB26_190
.LBB26_190:                             # %for.inc2082
                                        #   in Loop: Header=BB26_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB26_175
.LBB26_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB26_55 Depth=2
	jmp	.LBB26_192
.LBB26_192:                             # %for.end2086
                                        #   in Loop: Header=BB26_55 Depth=2
	jmp	.LBB26_193
.LBB26_193:                             # %if.end2087
                                        #   in Loop: Header=BB26_55 Depth=2
	jmp	.LBB26_194
.LBB26_194:                             # %for.inc2088
                                        #   in Loop: Header=BB26_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB26_55
.LBB26_195:                             # %for.end2092
                                        #   in Loop: Header=BB26_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB26_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB26_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB26_197:                             # %if.end2101
                                        #   in Loop: Header=BB26_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB26_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB26_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB26_199:                             # %if.end2107
                                        #   in Loop: Header=BB26_53 Depth=1
	jmp	.LBB26_200
.LBB26_200:                             # %for.inc2108
                                        #   in Loop: Header=BB26_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB26_53
.LBB26_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB26_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB26_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB26_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB26_205:                             # %if.end2129
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB26_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB26_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB26_211
.LBB26_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB26_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB26_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_214 Depth 2
                                        #       Child Loop BB26_219 Depth 3
                                        #         Child Loop BB26_321 Depth 4
                                        #           Child Loop BB26_323 Depth 5
                                        #       Child Loop BB26_334 Depth 3
                                        #         Child Loop BB26_340 Depth 4
                                        #           Child Loop BB26_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB26_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB26_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB26_214:                             # %for.cond2194
                                        #   Parent Loop BB26_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_219 Depth 3
                                        #         Child Loop BB26_321 Depth 4
                                        #           Child Loop BB26_323 Depth 5
                                        #       Child Loop BB26_334 Depth 3
                                        #         Child Loop BB26_340 Depth 4
                                        #           Child Loop BB26_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB26_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB26_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB26_216:                             # %land.end2202
                                        #   in Loop: Header=BB26_214 Depth=2
	testb	$1, %al
	jne	.LBB26_217
	jmp	.LBB26_354
.LBB26_217:                             # %for.body2203
                                        #   in Loop: Header=BB26_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB26_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB26_214 Depth=2
	movw	$0, -40(%rbp)
.LBB26_219:                             # %for.cond2218
                                        #   Parent Loop BB26_212 Depth=1
                                        #     Parent Loop BB26_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_321 Depth 4
                                        #           Child Loop BB26_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB26_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_226
.LBB26_222:                             # %cond.false2261
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_225
.LBB26_224:                             # %cond.false2286
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_225:                             # %cond.end2306
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_226:                             # %cond.end2308
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_232
.LBB26_228:                             # %cond.false2339
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_231
.LBB26_230:                             # %cond.false2366
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_231:                             # %cond.end2388
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_232:                             # %cond.end2390
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_238
.LBB26_234:                             # %cond.false2423
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_237
.LBB26_236:                             # %cond.false2450
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_237:                             # %cond.end2472
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_238:                             # %cond.end2474
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_244
.LBB26_240:                             # %cond.false2507
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_243
.LBB26_242:                             # %cond.false2534
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_243:                             # %cond.end2556
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_244:                             # %cond.end2558
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_250
.LBB26_246:                             # %cond.false2599
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_249
.LBB26_248:                             # %cond.false2624
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_249:                             # %cond.end2644
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_250:                             # %cond.end2646
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_256
.LBB26_252:                             # %cond.false2677
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_255
.LBB26_254:                             # %cond.false2704
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_255:                             # %cond.end2726
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_256:                             # %cond.end2728
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_262
.LBB26_258:                             # %cond.false2761
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_261
.LBB26_260:                             # %cond.false2788
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_261:                             # %cond.end2810
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_262:                             # %cond.end2812
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_268
.LBB26_264:                             # %cond.false2845
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_267
.LBB26_266:                             # %cond.false2872
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_267:                             # %cond.end2894
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_268:                             # %cond.end2896
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_274
.LBB26_270:                             # %cond.false2937
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_273
.LBB26_272:                             # %cond.false2962
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_273:                             # %cond.end2982
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_274:                             # %cond.end2984
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_280
.LBB26_276:                             # %cond.false3015
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_279
.LBB26_278:                             # %cond.false3042
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_279:                             # %cond.end3064
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_280:                             # %cond.end3066
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_286
.LBB26_282:                             # %cond.false3099
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_285
.LBB26_284:                             # %cond.false3126
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_285:                             # %cond.end3148
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_286:                             # %cond.end3150
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_292
.LBB26_288:                             # %cond.false3183
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_291
.LBB26_290:                             # %cond.false3210
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_291:                             # %cond.end3232
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_292:                             # %cond.end3234
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_298
.LBB26_294:                             # %cond.false3275
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_297
.LBB26_296:                             # %cond.false3300
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_297:                             # %cond.end3320
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_298:                             # %cond.end3322
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_304
.LBB26_300:                             # %cond.false3353
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_303
.LBB26_302:                             # %cond.false3380
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_303:                             # %cond.end3402
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_304:                             # %cond.end3404
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_310
.LBB26_306:                             # %cond.false3437
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_309
.LBB26_308:                             # %cond.false3464
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_309:                             # %cond.end3486
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_310:                             # %cond.end3488
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB26_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB26_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB26_316
.LBB26_312:                             # %cond.false3521
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB26_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB26_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB26_315
.LBB26_314:                             # %cond.false3548
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB26_315:                             # %cond.end3570
                                        #   in Loop: Header=BB26_219 Depth=3
.LBB26_316:                             # %cond.end3572
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB26_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB26_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB26_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB26_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB26_332
.LBB26_319:                             # %if.end3593
                                        #   in Loop: Header=BB26_219 Depth=3
	jmp	.LBB26_329
.LBB26_320:                             # %if.else3594
                                        #   in Loop: Header=BB26_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB26_321:                             # %for.cond3595
                                        #   Parent Loop BB26_212 Depth=1
                                        #     Parent Loop BB26_214 Depth=2
                                        #       Parent Loop BB26_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB26_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB26_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB26_321 Depth=4
	movl	$0, -100(%rbp)
.LBB26_323:                             # %for.cond3599
                                        #   Parent Loop BB26_212 Depth=1
                                        #     Parent Loop BB26_214 Depth=2
                                        #       Parent Loop BB26_219 Depth=3
                                        #         Parent Loop BB26_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB26_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB26_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB26_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB26_323
.LBB26_326:                             # %for.end3616
                                        #   in Loop: Header=BB26_321 Depth=4
	jmp	.LBB26_327
.LBB26_327:                             # %for.inc3617
                                        #   in Loop: Header=BB26_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB26_321
.LBB26_328:                             # %for.end3619
                                        #   in Loop: Header=BB26_219 Depth=3
	jmp	.LBB26_329
.LBB26_329:                             # %if.end3620
                                        #   in Loop: Header=BB26_219 Depth=3
	jmp	.LBB26_330
.LBB26_330:                             # %for.inc3621
                                        #   in Loop: Header=BB26_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB26_219
.LBB26_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB26_214 Depth=2
	jmp	.LBB26_332
.LBB26_332:                             # %for.end3625
                                        #   in Loop: Header=BB26_214 Depth=2
	jmp	.LBB26_352
.LBB26_333:                             # %if.else3626
                                        #   in Loop: Header=BB26_214 Depth=2
	movw	$0, -40(%rbp)
.LBB26_334:                             # %for.cond3627
                                        #   Parent Loop BB26_212 Depth=1
                                        #     Parent Loop BB26_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_340 Depth 4
                                        #           Child Loop BB26_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB26_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB26_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB26_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB26_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB26_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB26_351
.LBB26_338:                             # %if.end3978
                                        #   in Loop: Header=BB26_334 Depth=3
	jmp	.LBB26_348
.LBB26_339:                             # %if.else3979
                                        #   in Loop: Header=BB26_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB26_340:                             # %for.cond3980
                                        #   Parent Loop BB26_212 Depth=1
                                        #     Parent Loop BB26_214 Depth=2
                                        #       Parent Loop BB26_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB26_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB26_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB26_340 Depth=4
	movl	$0, -100(%rbp)
.LBB26_342:                             # %for.cond3984
                                        #   Parent Loop BB26_212 Depth=1
                                        #     Parent Loop BB26_214 Depth=2
                                        #       Parent Loop BB26_334 Depth=3
                                        #         Parent Loop BB26_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB26_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB26_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB26_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB26_342
.LBB26_345:                             # %for.end4001
                                        #   in Loop: Header=BB26_340 Depth=4
	jmp	.LBB26_346
.LBB26_346:                             # %for.inc4002
                                        #   in Loop: Header=BB26_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB26_340
.LBB26_347:                             # %for.end4004
                                        #   in Loop: Header=BB26_334 Depth=3
	jmp	.LBB26_348
.LBB26_348:                             # %if.end4005
                                        #   in Loop: Header=BB26_334 Depth=3
	jmp	.LBB26_349
.LBB26_349:                             # %for.inc4006
                                        #   in Loop: Header=BB26_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB26_334
.LBB26_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB26_214 Depth=2
	jmp	.LBB26_351
.LBB26_351:                             # %for.end4010
                                        #   in Loop: Header=BB26_214 Depth=2
	jmp	.LBB26_352
.LBB26_352:                             # %if.end4011
                                        #   in Loop: Header=BB26_214 Depth=2
	jmp	.LBB26_353
.LBB26_353:                             # %for.inc4012
                                        #   in Loop: Header=BB26_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB26_214
.LBB26_354:                             # %for.end4016
                                        #   in Loop: Header=BB26_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB26_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB26_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB26_356:                             # %if.end4026
                                        #   in Loop: Header=BB26_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB26_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB26_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB26_358:                             # %if.end4032
                                        #   in Loop: Header=BB26_212 Depth=1
	jmp	.LBB26_359
.LBB26_359:                             # %for.inc4033
                                        #   in Loop: Header=BB26_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB26_212
.LBB26_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB26_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB26_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$979925675, -196(%rbp)  # imm = 0x3A687AAB
	jne	.LBB26_364
.LBB26_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_363
.Lfunc_end26:
	.size	SubPelBlockSearchBiPred.1, .Lfunc_end26-SubPelBlockSearchBiPred.1
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.2 # -- Begin function SetupFastFullPelSearch.2
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.2,@function
SetupFastFullPelSearch.2:               # @SetupFastFullPelSearch.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$977221964, -152(%rbp)  # imm = 0x3A3F394C
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB27_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB27_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB27_4
.LBB27_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB27_4
.LBB27_4:                               # %cond.end
	movl	%ecx, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB27_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB27_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB27_10
.LBB27_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB27_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB27_9:                               # %land.end
.LBB27_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movl	-8(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB27_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB27_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB27_14
.LBB27_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB27_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -156(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB27_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB27_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB27_18
.LBB27_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB27_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB27_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB27_24
.LBB27_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB27_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB27_23
.LBB27_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB27_23:                              # %cond.end82
.LBB27_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB27_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB27_27
.LBB27_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB27_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB27_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB27_33
.LBB27_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB27_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB27_32
.LBB27_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB27_32:                              # %cond.end122
.LBB27_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB27_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB27_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_37 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB27_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -68(%rbp)
.LBB27_37:                              # %for.cond155
                                        #   Parent Loop BB27_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB27_37 Depth=2
	movq	imgY_org, %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB27_37 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB27_37
.LBB27_40:                              # %for.end
                                        #   in Loop: Header=BB27_35 Depth=1
	jmp	.LBB27_41
.LBB27_41:                              # %for.inc165
                                        #   in Loop: Header=BB27_35 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB27_35
.LBB27_42:                              # %for.end167
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB27_47
# %bb.43:                               # %land.lhs.true170
	movl	-80(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB27_47
# %bb.44:                               # %land.lhs.true174
	movl	-72(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB27_47
# %bb.45:                               # %land.lhs.true177
	movl	-72(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB27_47
# %bb.46:                               # %if.then181
	movl	$0, -108(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB27_48
.LBB27_47:                              # %if.else182
	movl	$1, -108(%rbp)
.LBB27_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB27_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB27_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB27_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB27_50 Depth=1
	movl	-136(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB27_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB27_50 Depth=1
	movl	-140(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB27_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB27_57
.LBB27_54:                              # %if.end209
                                        #   in Loop: Header=BB27_50 Depth=1
	jmp	.LBB27_55
.LBB27_55:                              # %for.inc210
                                        #   in Loop: Header=BB27_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_50
.LBB27_56:                              # %for.end212.loopexit
	jmp	.LBB27_57
.LBB27_57:                              # %for.end212
	jmp	.LBB27_58
.LBB27_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB27_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_69 Depth 2
                                        #       Child Loop BB27_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB27_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-72(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB27_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB27_59 Depth=1
	cmpl	$0, -76(%rbp)
	jl	.LBB27_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB27_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB27_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB27_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB27_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB27_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB27_67
.LBB27_66:                              # %if.else238
                                        #   in Loop: Header=BB27_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB27_67:                              # %if.end239
                                        #   in Loop: Header=BB27_59 Depth=1
	jmp	.LBB27_68
.LBB27_68:                              # %if.end240
                                        #   in Loop: Header=BB27_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
.LBB27_69:                              # %for.cond242
                                        #   Parent Loop BB27_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_71 Depth 3
	cmpl	$4, -92(%rbp)
	jge	.LBB27_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB27_69 Depth=2
	movl	$0, -48(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -64(%rbp)
.LBB27_71:                              # %for.cond246
                                        #   Parent Loop BB27_59 Depth=1
                                        #     Parent Loop BB27_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -64(%rbp)
	jge	.LBB27_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB27_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-76(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -76(%rbp)
	movl	-88(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-156(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB27_71 Depth=3
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB27_71
.LBB27_74:                              # %for.end381
                                        #   in Loop: Header=BB27_69 Depth=2
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB27_69 Depth=2
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB27_69
.LBB27_76:                              # %for.end404
                                        #   in Loop: Header=BB27_59 Depth=1
	jmp	.LBB27_77
.LBB27_77:                              # %for.inc405
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_59
.LBB27_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$977221964, -152(%rbp)  # imm = 0x3A3F394C
	jne	.LBB27_80
.LBB27_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_79
.Lfunc_end27:
	.size	SetupFastFullPelSearch.2, .Lfunc_end27-SetupFastFullPelSearch.2
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.3    # -- Begin function BPredPartitionCost.3
	.p2align	4, 0x90
	.type	BPredPartitionCost.3,@function
BPredPartitionCost.3:                   # @BPredPartitionCost.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$2141209505, -104(%rbp) # imm = 0x7FA043A1
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -120(%rbp)
	movl	%r9d, -68(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB28_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB28_3
.LBB28_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB28_3
.LBB28_3:                               # %cond.end
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB28_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB28_6
.LBB28_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB28_6
.LBB28_6:                               # %cond.end17
	movl	%eax, -124(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB28_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB28_9
.LBB28_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB28_9
.LBB28_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB28_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB28_12
.LBB28_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB28_12:                              # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB28_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_15 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB28_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB28_15:                              # %for.cond56
                                        #   Parent Loop BB28_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB28_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB28_15 Depth=2
	movl	-112(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_15
.LBB28_18:                              # %for.end
                                        #   in Loop: Header=BB28_13 Depth=1
	jmp	.LBB28_19
.LBB28_19:                              # %for.inc167
                                        #   in Loop: Header=BB28_13 Depth=1
	movl	-108(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_13
.LBB28_20:                              # %for.end169
	movl	-120(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB28_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_23 Depth 2
                                        #       Child Loop BB28_25 Depth 3
                                        #         Child Loop BB28_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB28_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB28_23:                              # %for.cond188
                                        #   Parent Loop BB28_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_25 Depth 3
                                        #         Child Loop BB28_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB28_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-68(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB28_25:                              # %for.cond199
                                        #   Parent Loop BB28_21 Depth=1
                                        #     Parent Loop BB28_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_27 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB28_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB28_25 Depth=3
	movl	$0, -32(%rbp)
.LBB28_27:                              # %for.cond203
                                        #   Parent Loop BB28_21 Depth=1
                                        #     Parent Loop BB28_23 Depth=2
                                        #       Parent Loop BB28_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB28_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB28_27 Depth=4
	movq	imgY_org, %rax
	movl	-116(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB28_27 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB28_27
.LBB28_30:                              # %for.end232
                                        #   in Loop: Header=BB28_25 Depth=3
	jmp	.LBB28_31
.LBB28_31:                              # %for.inc233
                                        #   in Loop: Header=BB28_25 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB28_25
.LBB28_32:                              # %for.end235
                                        #   in Loop: Header=BB28_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB28_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB28_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB28_35
.LBB28_34:                              # %if.then
                                        #   in Loop: Header=BB28_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB28_35:                              # %if.end
                                        #   in Loop: Header=BB28_23 Depth=2
	jmp	.LBB28_36
.LBB28_36:                              # %for.inc240
                                        #   in Loop: Header=BB28_23 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_23
.LBB28_37:                              # %for.end243
                                        #   in Loop: Header=BB28_21 Depth=1
	jmp	.LBB28_38
.LBB28_38:                              # %for.inc244
                                        #   in Loop: Header=BB28_21 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_21
.LBB28_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB28_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB28_58
# %bb.41:                               # %if.then252
	movl	$0, -48(%rbp)
.LBB28_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_44 Depth 2
                                        #       Child Loop BB28_46 Depth 3
                                        #         Child Loop BB28_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB28_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB28_42 Depth=1
	movl	$0, -52(%rbp)
.LBB28_44:                              # %for.cond261
                                        #   Parent Loop BB28_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_46 Depth 3
                                        #         Child Loop BB28_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB28_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB28_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB28_46:                              # %for.cond269
                                        #   Parent Loop BB28_42 Depth=1
                                        #     Parent Loop BB28_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_48 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB28_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB28_46 Depth=3
	movl	$0, -28(%rbp)
.LBB28_48:                              # %for.cond273
                                        #   Parent Loop BB28_42 Depth=1
                                        #     Parent Loop BB28_44 Depth=2
                                        #       Parent Loop BB28_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB28_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB28_48 Depth=4
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB28_48 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB28_48
.LBB28_51:                              # %for.end288
                                        #   in Loop: Header=BB28_46 Depth=3
	jmp	.LBB28_52
.LBB28_52:                              # %for.inc289
                                        #   in Loop: Header=BB28_46 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB28_46
.LBB28_53:                              # %for.end291
                                        #   in Loop: Header=BB28_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB28_44 Depth=2
	movl	-128(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB28_44
.LBB28_55:                              # %for.end298
                                        #   in Loop: Header=BB28_42 Depth=1
	jmp	.LBB28_56
.LBB28_56:                              # %for.inc299
                                        #   in Loop: Header=BB28_42 Depth=1
	movl	-124(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB28_42
.LBB28_57:                              # %for.end301
	jmp	.LBB28_58
.LBB28_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$2141209505, -104(%rbp) # imm = 0x7FA043A1
	jne	.LBB28_60
.LBB28_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_59
.Lfunc_end28:
	.size	BPredPartitionCost.3, .Lfunc_end28-BPredPartitionCost.3
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.4               # -- Begin function SATD8X8.4
	.p2align	4, 0x90
	.type	SATD8X8.4,@function
SATD8X8.4:                              # @SATD8X8.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1288468757, -32(%rbp)  # imm = 0x4CCC7915
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB29_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB29_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB29_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_2
.LBB29_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB29_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB29_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB29_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB29_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_6
.LBB29_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB29_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB29_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB29_10 Depth=1
	movl	$0, -12(%rbp)
.LBB29_12:                              # %for.cond499
                                        #   Parent Loop BB29_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB29_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB29_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB29_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB29_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB29_16
.LBB29_15:                              # %cond.false
                                        #   in Loop: Header=BB29_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB29_16:                              # %cond.end
                                        #   in Loop: Header=BB29_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB29_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_12
.LBB29_18:                              # %for.end519
                                        #   in Loop: Header=BB29_10 Depth=1
	jmp	.LBB29_19
.LBB29_19:                              # %for.inc520
                                        #   in Loop: Header=BB29_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_10
.LBB29_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_26
.LBB29_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB29_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB29_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB29_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB29_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_22
.LBB29_25:                              # %for.end534
	jmp	.LBB29_26
.LBB29_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1288468757, -32(%rbp)  # imm = 0x4CCC7915
	jne	.LBB29_28
.LBB29_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_27
.Lfunc_end29:
	.size	SATD8X8.4, .Lfunc_end29-SATD8X8.4
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.5    # -- Begin function BPredPartitionCost.5
	.p2align	4, 0x90
	.type	BPredPartitionCost.5,@function
BPredPartitionCost.5:                   # @BPredPartitionCost.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$2064671263, -112(%rbp) # imm = 0x7B10621F
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -104(%rbp)
	movl	%r9d, -80(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB30_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB30_3
.LBB30_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB30_3
.LBB30_3:                               # %cond.end
	movl	%eax, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB30_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB30_6
.LBB30_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB30_6
.LBB30_6:                               # %cond.end17
	movl	%eax, -100(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB30_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB30_9
.LBB30_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB30_9
.LBB30_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	cmpl	$0, -80(%rbp)
	je	.LBB30_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB30_12
.LBB30_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB30_12:                              # %cond.end41
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB30_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB30_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB30_15:                              # %for.cond56
                                        #   Parent Loop BB30_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB30_15 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB30_15 Depth=2
	movl	-120(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_15
.LBB30_18:                              # %for.end
                                        #   in Loop: Header=BB30_13 Depth=1
	jmp	.LBB30_19
.LBB30_19:                              # %for.inc167
                                        #   in Loop: Header=BB30_13 Depth=1
	movl	-128(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_13
.LBB30_20:                              # %for.end169
	movl	-104(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB30_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_23 Depth 2
                                        #       Child Loop BB30_25 Depth 3
                                        #         Child Loop BB30_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB30_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB30_23:                              # %for.cond188
                                        #   Parent Loop BB30_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_25 Depth 3
                                        #         Child Loop BB30_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB30_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	-72(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movw	-34(%rbp), %bx
	movl	-80(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB30_25:                              # %for.cond199
                                        #   Parent Loop BB30_21 Depth=1
                                        #     Parent Loop BB30_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_27 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB30_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB30_25 Depth=3
	movl	$0, -28(%rbp)
.LBB30_27:                              # %for.cond203
                                        #   Parent Loop BB30_21 Depth=1
                                        #     Parent Loop BB30_23 Depth=2
                                        #       Parent Loop BB30_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB30_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB30_27 Depth=4
	movq	imgY_org, %rax
	movl	-108(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB30_27 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB30_27
.LBB30_30:                              # %for.end232
                                        #   in Loop: Header=BB30_25 Depth=3
	jmp	.LBB30_31
.LBB30_31:                              # %for.inc233
                                        #   in Loop: Header=BB30_25 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_25
.LBB30_32:                              # %for.end235
                                        #   in Loop: Header=BB30_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB30_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB30_35
.LBB30_34:                              # %if.then
                                        #   in Loop: Header=BB30_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB30_35:                              # %if.end
                                        #   in Loop: Header=BB30_23 Depth=2
	jmp	.LBB30_36
.LBB30_36:                              # %for.inc240
                                        #   in Loop: Header=BB30_23 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_23
.LBB30_37:                              # %for.end243
                                        #   in Loop: Header=BB30_21 Depth=1
	jmp	.LBB30_38
.LBB30_38:                              # %for.inc244
                                        #   in Loop: Header=BB30_21 Depth=1
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_21
.LBB30_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB30_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB30_58
# %bb.41:                               # %if.then252
	movl	$0, -44(%rbp)
.LBB30_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_44 Depth 2
                                        #       Child Loop BB30_46 Depth 3
                                        #         Child Loop BB30_48 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB30_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB30_42 Depth=1
	movl	$0, -48(%rbp)
.LBB30_44:                              # %for.cond261
                                        #   Parent Loop BB30_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_46 Depth 3
                                        #         Child Loop BB30_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB30_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB30_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB30_46:                              # %for.cond269
                                        #   Parent Loop BB30_42 Depth=1
                                        #     Parent Loop BB30_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_48 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB30_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB30_46 Depth=3
	movl	$0, -32(%rbp)
.LBB30_48:                              # %for.cond273
                                        #   Parent Loop BB30_42 Depth=1
                                        #     Parent Loop BB30_44 Depth=2
                                        #       Parent Loop BB30_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB30_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB30_48 Depth=4
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB30_48 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_48
.LBB30_51:                              # %for.end288
                                        #   in Loop: Header=BB30_46 Depth=3
	jmp	.LBB30_52
.LBB30_52:                              # %for.inc289
                                        #   in Loop: Header=BB30_46 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_46
.LBB30_53:                              # %for.end291
                                        #   in Loop: Header=BB30_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB30_44 Depth=2
	movl	-124(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB30_44
.LBB30_55:                              # %for.end298
                                        #   in Loop: Header=BB30_42 Depth=1
	jmp	.LBB30_56
.LBB30_56:                              # %for.inc299
                                        #   in Loop: Header=BB30_42 Depth=1
	movl	-100(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB30_42
.LBB30_57:                              # %for.end301
	jmp	.LBB30_58
.LBB30_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$2064671263, -112(%rbp) # imm = 0x7B10621F
	jne	.LBB30_60
.LBB30_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_59
.Lfunc_end30:
	.size	BPredPartitionCost.5, .Lfunc_end30-BPredPartitionCost.5
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.6 # -- Begin function FindSkipModeMotionVector.6
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.6,@function
FindSkipModeMotionVector.6:             # @FindSkipModeMotionVector.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$908445443, -56(%rbp)   # imm = 0x3625C703
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB31_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB31_4
# %bb.3:                                # %if.then24
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
.LBB31_4:                               # %if.end
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB31_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_7
# %bb.6:                                # %if.then34
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB31_7:                               # %if.end36
	jmp	.LBB31_8
.LBB31_8:                               # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB31_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB31_12
# %bb.11:                               # %if.then69
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
.LBB31_12:                              # %if.end72
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB31_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_15
# %bb.14:                               # %if.then82
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB31_15:                              # %if.end85
	jmp	.LBB31_16
.LBB31_16:                              # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB31_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB31_22
.LBB31_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -16(%rbp)
	jne	.LBB31_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB31_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB31_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB31_22:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB31_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB31_28
.LBB31_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -12(%rbp)
	jne	.LBB31_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB31_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -24(%rbp)
	sete	%al
.LBB31_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB31_28:                              # %cond.end130
	movl	%ecx, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB31_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	je	.LBB31_39
.LBB31_30:                              # %if.then134
	movl	$0, -8(%rbp)
.LBB31_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB31_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB31_31 Depth=1
	movl	$0, -4(%rbp)
.LBB31_33:                              # %for.cond137
                                        #   Parent Loop BB31_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB31_33 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB31_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_33
.LBB31_36:                              # %for.end
                                        #   in Loop: Header=BB31_31 Depth=1
	jmp	.LBB31_37
.LBB31_37:                              # %for.inc157
                                        #   in Loop: Header=BB31_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_31
.LBB31_38:                              # %for.end159
	jmp	.LBB31_48
.LBB31_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB31_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB31_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB31_40 Depth=1
	movl	$0, -4(%rbp)
.LBB31_42:                              # %for.cond166
                                        #   Parent Loop BB31_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB31_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB31_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_42
.LBB31_45:                              # %for.end190
                                        #   in Loop: Header=BB31_40 Depth=1
	jmp	.LBB31_46
.LBB31_46:                              # %for.inc191
                                        #   in Loop: Header=BB31_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_40
.LBB31_47:                              # %for.end193
	jmp	.LBB31_48
.LBB31_48:                              # %if.end194
	cmpl	$908445443, -56(%rbp)   # imm = 0x3625C703
	jne	.LBB31_50
.LBB31_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_49
.Lfunc_end31:
	.size	FindSkipModeMotionVector.6, .Lfunc_end31-FindSkipModeMotionVector.6
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.7     # -- Begin function SetupLargerBlocks.7
	.p2align	4, 0x90
	.type	SetupLargerBlocks.7,@function
SetupLargerBlocks.7:                    # @SetupLargerBlocks.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2038829255, -76(%rbp)  # imm = 0x798610C7
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_4:                               # %for.end
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB32_5 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB32_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_5
.LBB32_8:                               # %for.end30
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB32_9 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB32_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_9
.LBB32_12:                              # %for.end46
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB32_13 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB32_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_13
.LBB32_16:                              # %for.end62
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB32_17 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_17
.LBB32_20:                              # %for.end78
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB32_21 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB32_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_21
.LBB32_24:                              # %for.end94
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB32_25 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_25
.LBB32_28:                              # %for.end110
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB32_29 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB32_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_29
.LBB32_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB32_33 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB32_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_33
.LBB32_36:                              # %for.end150
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB32_37 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB32_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_37
.LBB32_40:                              # %for.end166
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_41
.LBB32_44:                              # %for.end182
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB32_45 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB32_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_45
.LBB32_48:                              # %for.end198
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB32_49 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB32_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_49
.LBB32_52:                              # %for.end214
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB32_53 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB32_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_53
.LBB32_56:                              # %for.end230
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB32_57 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB32_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_57
.LBB32_60:                              # %for.end246
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB32_61 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB32_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_61
.LBB32_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB32_65 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB32_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_65
.LBB32_68:                              # %for.end286
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB32_69 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB32_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_69
.LBB32_72:                              # %for.end302
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB32_73 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB32_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_73
.LBB32_76:                              # %for.end318
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB32_77 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB32_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_77
.LBB32_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB32_81 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB32_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_81
.LBB32_84:                              # %for.end358
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB32_85 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB32_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_85
.LBB32_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB32_89 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB32_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_89
.LBB32_92:                              # %for.end398
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB32_93 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB32_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_93
.LBB32_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB32_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB32_97 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB32_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_97
.LBB32_100:                             # %for.end438
	cmpl	$2038829255, -76(%rbp)  # imm = 0x798610C7
	jne	.LBB32_102
.LBB32_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_101
.Lfunc_end32:
	.size	SetupLargerBlocks.7, .Lfunc_end32-SetupLargerBlocks.7
	.cfi_endproc
                                        # -- End function
	.globl	sign.8                  # -- Begin function sign.8
	.p2align	4, 0x90
	.type	sign.8,@function
sign.8:                                 # @sign.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$282264369, -28(%rbp)   # imm = 0x10D30331
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB33_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB33_3
.LBB33_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB33_3:                               # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB33_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_6
.LBB33_5:                               # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB33_6:                               # %return
	movl	-20(%rbp), %ebx
	cmpl	$282264369, -28(%rbp)   # imm = 0x10D30331
	jne	.LBB33_8
.LBB33_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_7
.Lfunc_end33:
	.size	sign.8, .Lfunc_end33-sign.8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.9     # -- Begin function Get_Direct_CostMB.9
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.9,@function
Get_Direct_CostMB.9:                    # @Get_Direct_CostMB.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1652581114, -28(%rbp)  # imm = 0x628062FA
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB34_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB34_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB34_5
.LBB34_4:                               # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_18
.LBB34_5:                               # %if.end
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_6
.LBB34_6:                               # %for.inc
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_1
.LBB34_7:                               # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB34_9
	jmp	.LBB34_8
.LBB34_8:                               # %for.end
	subl	$2, %eax
	je	.LBB34_15
	jmp	.LBB34_16
.LBB34_9:                               # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB34_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB34_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB34_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB34_14
.LBB34_13:                              # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_14:                              # %if.end9
	jmp	.LBB34_17
.LBB34_15:                              # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_17
.LBB34_16:                              # %sw.default
	jmp	.LBB34_17
.LBB34_17:                              # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB34_18:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$1652581114, -28(%rbp)  # imm = 0x628062FA
	jne	.LBB34_20
.LBB34_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_19
.Lfunc_end34:
	.size	Get_Direct_CostMB.9, .Lfunc_end34-Get_Direct_CostMB.9
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.10 # -- Begin function SetMotionVectorPredictor.10
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.10,@function
SetMotionVectorPredictor.10:            # @SetMotionVectorPredictor.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$2130653863, -180(%rbp) # imm = 0x7EFF32A7
	movq	%rdi, -216(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -164(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB35_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB35_2:                               # %if.end
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB35_19
# %bb.3:                                # %if.then2
	cmpl	$8, -160(%rbp)
	jge	.LBB35_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB35_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB35_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB35_8
.LBB35_7:                               # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB35_8:                               # %if.end10
	jmp	.LBB35_13
.LBB35_9:                               # %if.else11
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB35_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB35_12
.LBB35_11:                              # %if.else16
	movl	$0, -56(%rbp)
.LBB35_12:                              # %if.end18
	jmp	.LBB35_13
.LBB35_13:                              # %if.end19
	jmp	.LBB35_18
.LBB35_14:                              # %if.else20
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB35_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB35_17
.LBB35_16:                              # %if.else26
	movl	$0, -56(%rbp)
.LBB35_17:                              # %if.end28
	jmp	.LBB35_18
.LBB35_18:                              # %if.end29
	jmp	.LBB35_19
.LBB35_19:                              # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB35_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB35_21:                              # %if.end34
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB35_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB35_24
# %bb.23:                               # %cond.true
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_25
.LBB35_24:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_25
.LBB35_25:                              # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB35_27
# %bb.26:                               # %cond.true45
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_28
.LBB35_27:                              # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_28
.LBB35_28:                              # %cond.end56
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB35_30
# %bb.29:                               # %cond.true60
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_31
.LBB35_30:                              # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_31
.LBB35_31:                              # %cond.end71
	movl	%eax, -84(%rbp)
	jmp	.LBB35_72
.LBB35_32:                              # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB35_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_36
# %bb.35:                               # %cond.true87
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_37
.LBB35_36:                              # %cond.false97
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB35_37:                              # %cond.end108
	jmp	.LBB35_39
.LBB35_38:                              # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_39
.LBB35_39:                              # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB35_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_42
# %bb.41:                               # %cond.true122
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_43
.LBB35_42:                              # %cond.false132
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB35_43:                              # %cond.end143
	jmp	.LBB35_45
.LBB35_44:                              # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_45
.LBB35_45:                              # %cond.end146
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB35_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_48
# %bb.47:                               # %cond.true157
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_49
.LBB35_48:                              # %cond.false167
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB35_49:                              # %cond.end178
	jmp	.LBB35_51
.LBB35_50:                              # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_51
.LBB35_51:                              # %cond.end181
	movl	%eax, -84(%rbp)
	jmp	.LBB35_71
.LBB35_52:                              # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB35_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_55
# %bb.54:                               # %cond.true193
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB35_56
.LBB35_55:                              # %cond.false203
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB35_56:                              # %cond.end213
	jmp	.LBB35_58
.LBB35_57:                              # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_58
.LBB35_58:                              # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB35_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_61
# %bb.60:                               # %cond.true227
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB35_62
.LBB35_61:                              # %cond.false238
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB35_62:                              # %cond.end248
	jmp	.LBB35_64
.LBB35_63:                              # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_64
.LBB35_64:                              # %cond.end251
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB35_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_67
# %bb.66:                               # %cond.true262
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB35_68
.LBB35_67:                              # %cond.false273
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB35_68:                              # %cond.end283
	jmp	.LBB35_70
.LBB35_69:                              # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB35_70
.LBB35_70:                              # %cond.end286
	movl	%eax, -84(%rbp)
.LBB35_71:                              # %if.end288
	jmp	.LBB35_72
.LBB35_72:                              # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB35_76
# %bb.73:                               # %land.lhs.true
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB35_76
# %bb.74:                               # %land.lhs.true296
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB35_76
# %bb.75:                               # %if.then300
	movl	$1, -32(%rbp)
	jmp	.LBB35_86
.LBB35_76:                              # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB35_80
# %bb.77:                               # %land.lhs.true305
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB35_80
# %bb.78:                               # %land.lhs.true309
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB35_80
# %bb.79:                               # %if.then313
	movl	$2, -32(%rbp)
	jmp	.LBB35_85
.LBB35_80:                              # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB35_84
# %bb.81:                               # %land.lhs.true318
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB35_84
# %bb.82:                               # %land.lhs.true322
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB35_84
# %bb.83:                               # %if.then326
	movl	$3, -32(%rbp)
.LBB35_84:                              # %if.end327
	jmp	.LBB35_85
.LBB35_85:                              # %if.end328
	jmp	.LBB35_86
.LBB35_86:                              # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB35_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB35_96
# %bb.88:                               # %if.then335
	cmpl	$0, -160(%rbp)
	jne	.LBB35_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB35_91
# %bb.90:                               # %if.then342
	movl	$1, -32(%rbp)
.LBB35_91:                              # %if.end343
	jmp	.LBB35_95
.LBB35_92:                              # %if.else344
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB35_94
# %bb.93:                               # %if.then348
	movl	$3, -32(%rbp)
.LBB35_94:                              # %if.end349
	jmp	.LBB35_95
.LBB35_95:                              # %if.end350
	jmp	.LBB35_107
.LBB35_96:                              # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB35_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB35_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB35_102
# %bb.99:                               # %if.then360
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB35_101
# %bb.100:                              # %if.then364
	movl	$2, -32(%rbp)
.LBB35_101:                             # %if.end365
	jmp	.LBB35_105
.LBB35_102:                             # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB35_104
# %bb.103:                              # %if.then370
	movl	$1, -32(%rbp)
.LBB35_104:                             # %if.end371
	jmp	.LBB35_105
.LBB35_105:                             # %if.end372
	jmp	.LBB35_106
.LBB35_106:                             # %if.end373
	jmp	.LBB35_107
.LBB35_107:                             # %if.end374
	movl	$0, -12(%rbp)
.LBB35_108:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB35_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB35_121
.LBB35_111:                             # %if.then381
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB35_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_114
.LBB35_113:                             # %cond.false396
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_114
.LBB35_114:                             # %cond.end397
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB35_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_117
.LBB35_116:                             # %cond.false413
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_117
.LBB35_117:                             # %cond.end414
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB35_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_120
.LBB35_119:                             # %cond.false430
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_120
.LBB35_120:                             # %cond.end431
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB35_161
.LBB35_121:                             # %if.else433
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB35_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_126
.LBB35_125:                             # %cond.false462
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB35_126:                             # %cond.end474
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_128
.LBB35_127:                             # %cond.false476
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_128
.LBB35_128:                             # %cond.end477
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB35_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_132
.LBB35_131:                             # %cond.false500
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB35_132:                             # %cond.end513
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_134
.LBB35_133:                             # %cond.false515
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_134
.LBB35_134:                             # %cond.end516
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB35_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB35_138
.LBB35_137:                             # %cond.false539
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB35_138:                             # %cond.end552
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_140
.LBB35_139:                             # %cond.false554
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_140
.LBB35_140:                             # %cond.end555
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB35_160
.LBB35_141:                             # %if.else557
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB35_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB35_145
.LBB35_144:                             # %cond.false580
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB35_145:                             # %cond.end592
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_147
.LBB35_146:                             # %cond.false594
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_147
.LBB35_147:                             # %cond.end595
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB35_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB35_151
.LBB35_150:                             # %cond.false619
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB35_151:                             # %cond.end631
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_153
.LBB35_152:                             # %cond.false633
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_153
.LBB35_153:                             # %cond.end634
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB35_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB35_157
.LBB35_156:                             # %cond.false658
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB35_157:                             # %cond.end670
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_159
.LBB35_158:                             # %cond.false672
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_159
.LBB35_159:                             # %cond.end673
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB35_160:                             # %if.end675
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_161
.LBB35_161:                             # %if.end676
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB35_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB35_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB35_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB35_166
.LBB35_165:                             # %cond.false696
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB35_166:                             # %cond.end708
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_168
.LBB35_167:                             # %cond.false710
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_168
.LBB35_168:                             # %cond.end711
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB35_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB35_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB35_172
.LBB35_171:                             # %cond.false729
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB35_172:                             # %cond.end741
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_174
.LBB35_173:                             # %cond.false743
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_174
.LBB35_174:                             # %cond.end744
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -156(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB35_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB35_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB35_178
.LBB35_177:                             # %cond.false762
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB35_178:                             # %cond.end774
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_180
.LBB35_179:                             # %cond.false776
                                        #   in Loop: Header=BB35_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB35_180
.LBB35_180:                             # %cond.end777
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB35_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB35_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB35_184
.LBB35_183:                             # %cond.false795
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB35_184:                             # %cond.end807
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_186
.LBB35_185:                             # %cond.false809
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-176(%rbp), %eax
.LBB35_186:                             # %cond.end810
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB35_187:                             # %if.end812
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-32(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB35_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	.LJTI35_0(,%rax,8), %rax
	jmpq	*%rax
.LBB35_189:                             # %sw.bb
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB35_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB35_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB35_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB35_193:                             # %if.end824
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_213
.LBB35_194:                             # %if.else825
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB35_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB35_197
.LBB35_196:                             # %cond.false831
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-20(%rbp), %edx
.LBB35_197:                             # %cond.end832
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB35_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB35_203
.LBB35_199:                             # %cond.false837
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB35_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB35_202
.LBB35_201:                             # %cond.false841
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB35_202:                             # %cond.end842
                                        #   in Loop: Header=BB35_108 Depth=1
.LBB35_203:                             # %cond.end844
                                        #   in Loop: Header=BB35_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB35_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB35_206
.LBB35_205:                             # %cond.false849
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-20(%rbp), %edx
.LBB35_206:                             # %cond.end850
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB35_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB35_212
.LBB35_208:                             # %cond.false855
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB35_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB35_211
.LBB35_210:                             # %cond.false859
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB35_211:                             # %cond.end860
                                        #   in Loop: Header=BB35_108 Depth=1
.LBB35_212:                             # %cond.end862
                                        #   in Loop: Header=BB35_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
.LBB35_213:                             # %if.end865
                                        #   in Loop: Header=BB35_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB35_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB35_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB35_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB35_222
.LBB35_217:                             # %if.else877
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB35_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB35_108 Depth=1
	cmpl	$0, -156(%rbp)
	je	.LBB35_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB35_221
.LBB35_220:                             # %if.else886
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB35_221:                             # %if.end889
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_222
.LBB35_222:                             # %if.end890
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_223
.LBB35_223:                             # %if.end891
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_234
.LBB35_224:                             # %sw.bb892
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB35_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB35_226:                             # %if.end898
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_234
.LBB35_227:                             # %sw.bb899
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB35_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB35_229:                             # %if.end905
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_234
.LBB35_230:                             # %sw.bb906
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB35_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB35_232:                             # %if.end912
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_234
.LBB35_233:                             # %sw.default
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_234
.LBB35_234:                             # %sw.epilog
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_108
.LBB35_236:                             # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB35_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB35_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB35_240
.LBB35_239:                             # %cond.false925
	movl	-152(%rbp), %eax
.LBB35_240:                             # %cond.end927
	movl	%eax, pred_SAD_space
.LBB35_241:                             # %if.end929
	cmpl	$2130653863, -180(%rbp) # imm = 0x7EFF32A7
	jne	.LBB35_243
.LBB35_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_243:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_242
.Lfunc_end35:
	.size	SetMotionVectorPredictor.10, .Lfunc_end35-SetMotionVectorPredictor.10
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI35_0:
	.quad	.LBB35_189
	.quad	.LBB35_224
	.quad	.LBB35_227
	.quad	.LBB35_230
                                        # -- End function
	.text
	.globl	BPredPartitionCost.11   # -- Begin function BPredPartitionCost.11
	.p2align	4, 0x90
	.type	BPredPartitionCost.11,@function
BPredPartitionCost.11:                  # @BPredPartitionCost.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$78067535, -124(%rbp)   # imm = 0x4A7374F
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -116(%rbp)
	movl	%r9d, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB36_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB36_3
.LBB36_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB36_3
.LBB36_3:                               # %cond.end
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB36_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB36_6
.LBB36_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB36_6
.LBB36_6:                               # %cond.end17
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB36_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB36_9
.LBB36_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB36_9
.LBB36_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -80(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB36_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB36_12
.LBB36_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB36_12:                              # %cond.end41
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB36_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB36_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB36_15:                              # %for.cond56
                                        #   Parent Loop BB36_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB36_15 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB36_15 Depth=2
	movl	-128(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_15
.LBB36_18:                              # %for.end
                                        #   in Loop: Header=BB36_13 Depth=1
	jmp	.LBB36_19
.LBB36_19:                              # %for.inc167
                                        #   in Loop: Header=BB36_13 Depth=1
	movl	-108(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_13
.LBB36_20:                              # %for.end169
	movl	-116(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB36_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_23 Depth 2
                                        #       Child Loop BB36_25 Depth 3
                                        #         Child Loop BB36_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB36_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB36_23:                              # %for.cond188
                                        #   Parent Loop BB36_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_25 Depth 3
                                        #         Child Loop BB36_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB36_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	-72(%rbp), %edi
	movl	-68(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-64(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB36_25:                              # %for.cond199
                                        #   Parent Loop BB36_21 Depth=1
                                        #     Parent Loop BB36_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_27 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB36_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB36_25 Depth=3
	movl	$0, -28(%rbp)
.LBB36_27:                              # %for.cond203
                                        #   Parent Loop BB36_21 Depth=1
                                        #     Parent Loop BB36_23 Depth=2
                                        #       Parent Loop BB36_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB36_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB36_27 Depth=4
	movq	imgY_org, %rax
	movl	-100(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-112(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB36_27 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB36_27
.LBB36_30:                              # %for.end232
                                        #   in Loop: Header=BB36_25 Depth=3
	jmp	.LBB36_31
.LBB36_31:                              # %for.inc233
                                        #   in Loop: Header=BB36_25 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_25
.LBB36_32:                              # %for.end235
                                        #   in Loop: Header=BB36_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB36_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB36_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB36_35
.LBB36_34:                              # %if.then
                                        #   in Loop: Header=BB36_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB36_35:                              # %if.end
                                        #   in Loop: Header=BB36_23 Depth=2
	jmp	.LBB36_36
.LBB36_36:                              # %for.inc240
                                        #   in Loop: Header=BB36_23 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_23
.LBB36_37:                              # %for.end243
                                        #   in Loop: Header=BB36_21 Depth=1
	jmp	.LBB36_38
.LBB36_38:                              # %for.inc244
                                        #   in Loop: Header=BB36_21 Depth=1
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_21
.LBB36_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB36_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB36_58
# %bb.41:                               # %if.then252
	movl	$0, -44(%rbp)
.LBB36_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_44 Depth 2
                                        #       Child Loop BB36_46 Depth 3
                                        #         Child Loop BB36_48 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB36_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB36_42 Depth=1
	movl	$0, -48(%rbp)
.LBB36_44:                              # %for.cond261
                                        #   Parent Loop BB36_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_46 Depth 3
                                        #         Child Loop BB36_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB36_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB36_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB36_46:                              # %for.cond269
                                        #   Parent Loop BB36_42 Depth=1
                                        #     Parent Loop BB36_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_48 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB36_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB36_46 Depth=3
	movl	$0, -32(%rbp)
.LBB36_48:                              # %for.cond273
                                        #   Parent Loop BB36_42 Depth=1
                                        #     Parent Loop BB36_44 Depth=2
                                        #       Parent Loop BB36_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB36_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB36_48 Depth=4
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB36_48 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_48
.LBB36_51:                              # %for.end288
                                        #   in Loop: Header=BB36_46 Depth=3
	jmp	.LBB36_52
.LBB36_52:                              # %for.inc289
                                        #   in Loop: Header=BB36_46 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_46
.LBB36_53:                              # %for.end291
                                        #   in Loop: Header=BB36_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB36_44 Depth=2
	movl	-120(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB36_44
.LBB36_55:                              # %for.end298
                                        #   in Loop: Header=BB36_42 Depth=1
	jmp	.LBB36_56
.LBB36_56:                              # %for.inc299
                                        #   in Loop: Header=BB36_42 Depth=1
	movl	-104(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB36_42
.LBB36_57:                              # %for.end301
	jmp	.LBB36_58
.LBB36_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$78067535, -124(%rbp)   # imm = 0x4A7374F
	jne	.LBB36_60
.LBB36_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_59
.Lfunc_end36:
	.size	BPredPartitionCost.11, .Lfunc_end36-BPredPartitionCost.11
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.12 # -- Begin function InitializeFastFullIntegerSearch.12
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.12,@function
InitializeFastFullIntegerSearch.12:     # @InitializeFastFullIntegerSearch.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$398292482, -28(%rbp)   # imm = 0x17BD7602
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB37_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB37_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB37_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_7 Depth 2
                                        #       Child Loop BB37_11 Depth 3
                                        #         Child Loop BB37_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB37_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB37_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB37_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB37_6:                               # %if.end12
                                        #   in Loop: Header=BB37_3 Depth=1
	movl	$0, -8(%rbp)
.LBB37_7:                               # %for.cond13
                                        #   Parent Loop BB37_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_11 Depth 3
                                        #         Child Loop BB37_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB37_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB37_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB37_10:                              # %if.end26
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	$1, -12(%rbp)
.LBB37_11:                              # %for.cond27
                                        #   Parent Loop BB37_3 Depth=1
                                        #     Parent Loop BB37_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB37_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB37_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB37_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB37_14:                              # %if.end41
                                        #   in Loop: Header=BB37_11 Depth=3
	movl	$0, -20(%rbp)
.LBB37_15:                              # %for.cond42
                                        #   Parent Loop BB37_3 Depth=1
                                        #     Parent Loop BB37_7 Depth=2
                                        #       Parent Loop BB37_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB37_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB37_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB37_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB37_18:                              # %if.end60
                                        #   in Loop: Header=BB37_15 Depth=4
	jmp	.LBB37_19
.LBB37_19:                              # %for.inc
                                        #   in Loop: Header=BB37_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_15
.LBB37_20:                              # %for.end
                                        #   in Loop: Header=BB37_11 Depth=3
	jmp	.LBB37_21
.LBB37_21:                              # %for.inc61
                                        #   in Loop: Header=BB37_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_11
.LBB37_22:                              # %for.end63
                                        #   in Loop: Header=BB37_7 Depth=2
	jmp	.LBB37_23
.LBB37_23:                              # %for.inc64
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_7
.LBB37_24:                              # %for.end66
                                        #   in Loop: Header=BB37_3 Depth=1
	jmp	.LBB37_25
.LBB37_25:                              # %for.inc67
                                        #   in Loop: Header=BB37_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_3
.LBB37_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB37_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB37_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB37_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB37_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB37_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB37_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB37_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB37_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB37_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB37_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB37_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB37_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB37_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB37_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB37_40:                              # %if.end109
                                        #   in Loop: Header=BB37_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB37_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB37_42:                              # %if.end120
                                        #   in Loop: Header=BB37_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB37_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB37_44:                              # %if.end131
                                        #   in Loop: Header=BB37_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB37_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB37_46:                              # %if.end142
                                        #   in Loop: Header=BB37_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB37_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB37_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB37_48:                              # %if.end153
                                        #   in Loop: Header=BB37_37 Depth=1
	jmp	.LBB37_49
.LBB37_49:                              # %for.inc154
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_37
.LBB37_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB37_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB37_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB37_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	$0, -8(%rbp)
.LBB37_54:                              # %for.cond164
                                        #   Parent Loop BB37_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB37_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB37_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB37_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_54
.LBB37_57:                              # %for.end175
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_58
.LBB37_58:                              # %for.inc176
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_52
.LBB37_59:                              # %for.end178
	jmp	.LBB37_69
.LBB37_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB37_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB37_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB37_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB37_63:                              # %for.cond191
                                        #   Parent Loop BB37_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB37_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB37_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB37_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_63
.LBB37_66:                              # %for.end202
                                        #   in Loop: Header=BB37_61 Depth=1
	jmp	.LBB37_67
.LBB37_67:                              # %for.inc203
                                        #   in Loop: Header=BB37_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_61
.LBB37_68:                              # %for.end205
	jmp	.LBB37_69
.LBB37_69:                              # %if.end206
	cmpl	$398292482, -28(%rbp)   # imm = 0x17BD7602
	jne	.LBB37_71
.LBB37_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_70
.Lfunc_end37:
	.size	InitializeFastFullIntegerSearch.12, .Lfunc_end37-InitializeFastFullIntegerSearch.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.13
.LCPI38_0:
	.quad	4602678819172646912     # double 0.5
.LCPI38_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.13
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.13,@function
SubPelBlockSearchBiPred.13:             # @SubPelBlockSearchBiPred.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI38_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI38_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$521553501, -196(%rbp)  # imm = 0x1F16465D
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -120(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -150(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB38_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB38_4
.LBB38_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB38_4:                               # %cond.end
	jmp	.LBB38_6
.LBB38_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB38_6:                               # %cond.end18
	movw	%ax, -174(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB38_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB38_10
.LBB38_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB38_10
.LBB38_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -116(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB38_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB38_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB38_14
.LBB38_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB38_14:                              # %cond.end55
	jmp	.LBB38_16
.LBB38_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB38_16
.LBB38_16:                              # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB38_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB38_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB38_20
.LBB38_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB38_20:                              # %cond.end82
	jmp	.LBB38_22
.LBB38_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB38_22
.LBB38_22:                              # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB38_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB38_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB38_26
.LBB38_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB38_26:                              # %cond.end106
	jmp	.LBB38_28
.LBB38_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB38_28
.LBB38_28:                              # %cond.end109
	movw	%ax, -170(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB38_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB38_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB38_32
.LBB38_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB38_32:                              # %cond.end130
	jmp	.LBB38_34
.LBB38_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB38_34
.LBB38_34:                              # %cond.end133
	movw	%ax, -172(%rbp)
	movswl	-172(%rbp), %eax
	movswl	-170(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB38_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB38_37
.LBB38_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB38_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB38_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB38_40
.LBB38_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB38_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-120(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-150(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB38_45
# %bb.41:                               # %land.lhs.true197
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_45
# %bb.42:                               # %land.lhs.true205
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB38_45
# %bb.43:                               # %land.lhs.true211
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB38_46
.LBB38_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB38_46:                              # %if.end
	movswl	-118(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB38_51
# %bb.47:                               # %land.lhs.true224
	movswl	-118(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_51
# %bb.48:                               # %land.lhs.true232
	movswl	-114(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB38_51
# %bb.49:                               # %land.lhs.true238
	movswl	-114(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB38_52
.LBB38_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB38_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-176(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB38_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_55 Depth 2
                                        #       Child Loop BB38_60 Depth 3
                                        #         Child Loop BB38_162 Depth 4
                                        #           Child Loop BB38_164 Depth 5
                                        #       Child Loop BB38_175 Depth 3
                                        #         Child Loop BB38_181 Depth 4
                                        #           Child Loop BB38_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-174(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB38_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB38_55:                              # %for.cond283
                                        #   Parent Loop BB38_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_60 Depth 3
                                        #         Child Loop BB38_162 Depth 4
                                        #           Child Loop BB38_164 Depth 5
                                        #       Child Loop BB38_175 Depth 3
                                        #         Child Loop BB38_181 Depth 4
                                        #           Child Loop BB38_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB38_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB38_55 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_57:                              # %land.end
                                        #   in Loop: Header=BB38_55 Depth=2
	testb	$1, %al
	jne	.LBB38_58
	jmp	.LBB38_195
.LBB38_58:                              # %for.body289
                                        #   in Loop: Header=BB38_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB38_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB38_55 Depth=2
	movw	$0, -40(%rbp)
.LBB38_60:                              # %for.cond304
                                        #   Parent Loop BB38_53 Depth=1
                                        #     Parent Loop BB38_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_162 Depth 4
                                        #           Child Loop BB38_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB38_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_67
.LBB38_63:                              # %cond.false345
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_66
.LBB38_65:                              # %cond.false369
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_66:                              # %cond.end389
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_67:                              # %cond.end391
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_73
.LBB38_69:                              # %cond.false421
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_72
.LBB38_71:                              # %cond.false448
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_72:                              # %cond.end470
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_73:                              # %cond.end472
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_79
.LBB38_75:                              # %cond.false505
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_78
.LBB38_77:                              # %cond.false532
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_78:                              # %cond.end554
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_79:                              # %cond.end556
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_85
.LBB38_81:                              # %cond.false589
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_84
.LBB38_83:                              # %cond.false616
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_84:                              # %cond.end638
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_85:                              # %cond.end640
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_91
.LBB38_87:                              # %cond.false681
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_90
.LBB38_89:                              # %cond.false706
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_90:                              # %cond.end726
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_91:                              # %cond.end728
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_97
.LBB38_93:                              # %cond.false759
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_96
.LBB38_95:                              # %cond.false786
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_96:                              # %cond.end808
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_97:                              # %cond.end810
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_103
.LBB38_99:                              # %cond.false843
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_102
.LBB38_101:                             # %cond.false870
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_102:                             # %cond.end892
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_103:                             # %cond.end894
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_109
.LBB38_105:                             # %cond.false927
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_108
.LBB38_107:                             # %cond.false954
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_108:                             # %cond.end976
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_109:                             # %cond.end978
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_115
.LBB38_111:                             # %cond.false1019
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_114
.LBB38_113:                             # %cond.false1044
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_114:                             # %cond.end1064
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_115:                             # %cond.end1066
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_121
.LBB38_117:                             # %cond.false1097
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_120
.LBB38_119:                             # %cond.false1124
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_120:                             # %cond.end1146
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_121:                             # %cond.end1148
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_127
.LBB38_123:                             # %cond.false1181
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_126
.LBB38_125:                             # %cond.false1208
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_126:                             # %cond.end1230
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_127:                             # %cond.end1232
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_133
.LBB38_129:                             # %cond.false1265
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_132
.LBB38_131:                             # %cond.false1292
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_132:                             # %cond.end1314
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_133:                             # %cond.end1316
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_139
.LBB38_135:                             # %cond.false1357
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_138
.LBB38_137:                             # %cond.false1382
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_138:                             # %cond.end1402
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_139:                             # %cond.end1404
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_145
.LBB38_141:                             # %cond.false1435
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_144
.LBB38_143:                             # %cond.false1462
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_144:                             # %cond.end1484
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_145:                             # %cond.end1486
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_151
.LBB38_147:                             # %cond.false1519
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_150
.LBB38_149:                             # %cond.false1546
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_150:                             # %cond.end1568
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_151:                             # %cond.end1570
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB38_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_157
.LBB38_153:                             # %cond.false1603
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB38_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_156
.LBB38_155:                             # %cond.false1630
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_156:                             # %cond.end1652
                                        #   in Loop: Header=BB38_60 Depth=3
.LBB38_157:                             # %cond.end1654
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB38_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB38_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB38_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB38_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB38_173
.LBB38_160:                             # %if.end1673
                                        #   in Loop: Header=BB38_60 Depth=3
	jmp	.LBB38_170
.LBB38_161:                             # %if.else1674
                                        #   in Loop: Header=BB38_60 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB38_162:                             # %for.cond1675
                                        #   Parent Loop BB38_53 Depth=1
                                        #     Parent Loop BB38_55 Depth=2
                                        #       Parent Loop BB38_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB38_164 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB38_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB38_162 Depth=4
	movl	$0, -96(%rbp)
.LBB38_164:                             # %for.cond1679
                                        #   Parent Loop BB38_53 Depth=1
                                        #     Parent Loop BB38_55 Depth=2
                                        #       Parent Loop BB38_60 Depth=3
                                        #         Parent Loop BB38_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB38_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB38_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB38_164 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB38_164
.LBB38_167:                             # %for.end
                                        #   in Loop: Header=BB38_162 Depth=4
	jmp	.LBB38_168
.LBB38_168:                             # %for.inc1694
                                        #   in Loop: Header=BB38_162 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB38_162
.LBB38_169:                             # %for.end1696
                                        #   in Loop: Header=BB38_60 Depth=3
	jmp	.LBB38_170
.LBB38_170:                             # %if.end1697
                                        #   in Loop: Header=BB38_60 Depth=3
	jmp	.LBB38_171
.LBB38_171:                             # %for.inc1698
                                        #   in Loop: Header=BB38_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB38_60
.LBB38_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB38_55 Depth=2
	jmp	.LBB38_173
.LBB38_173:                             # %for.end1702
                                        #   in Loop: Header=BB38_55 Depth=2
	jmp	.LBB38_193
.LBB38_174:                             # %if.else1703
                                        #   in Loop: Header=BB38_55 Depth=2
	movw	$0, -40(%rbp)
.LBB38_175:                             # %for.cond1704
                                        #   Parent Loop BB38_53 Depth=1
                                        #     Parent Loop BB38_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_181 Depth 4
                                        #           Child Loop BB38_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB38_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB38_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB38_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB38_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB38_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB38_192
.LBB38_179:                             # %if.end2054
                                        #   in Loop: Header=BB38_175 Depth=3
	jmp	.LBB38_189
.LBB38_180:                             # %if.else2055
                                        #   in Loop: Header=BB38_175 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB38_181:                             # %for.cond2056
                                        #   Parent Loop BB38_53 Depth=1
                                        #     Parent Loop BB38_55 Depth=2
                                        #       Parent Loop BB38_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB38_183 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB38_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB38_181 Depth=4
	movl	$0, -96(%rbp)
.LBB38_183:                             # %for.cond2060
                                        #   Parent Loop BB38_53 Depth=1
                                        #     Parent Loop BB38_55 Depth=2
                                        #       Parent Loop BB38_175 Depth=3
                                        #         Parent Loop BB38_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB38_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB38_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB38_183 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB38_183
.LBB38_186:                             # %for.end2077
                                        #   in Loop: Header=BB38_181 Depth=4
	jmp	.LBB38_187
.LBB38_187:                             # %for.inc2078
                                        #   in Loop: Header=BB38_181 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB38_181
.LBB38_188:                             # %for.end2080
                                        #   in Loop: Header=BB38_175 Depth=3
	jmp	.LBB38_189
.LBB38_189:                             # %if.end2081
                                        #   in Loop: Header=BB38_175 Depth=3
	jmp	.LBB38_190
.LBB38_190:                             # %for.inc2082
                                        #   in Loop: Header=BB38_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB38_175
.LBB38_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB38_55 Depth=2
	jmp	.LBB38_192
.LBB38_192:                             # %for.end2086
                                        #   in Loop: Header=BB38_55 Depth=2
	jmp	.LBB38_193
.LBB38_193:                             # %if.end2087
                                        #   in Loop: Header=BB38_55 Depth=2
	jmp	.LBB38_194
.LBB38_194:                             # %for.inc2088
                                        #   in Loop: Header=BB38_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB38_55
.LBB38_195:                             # %for.end2092
                                        #   in Loop: Header=BB38_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB38_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB38_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB38_197:                             # %if.end2101
                                        #   in Loop: Header=BB38_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB38_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB38_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB38_199:                             # %if.end2107
                                        #   in Loop: Header=BB38_53 Depth=1
	jmp	.LBB38_200
.LBB38_200:                             # %for.inc2108
                                        #   in Loop: Header=BB38_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB38_53
.LBB38_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB38_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB38_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB38_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB38_205:                             # %if.end2129
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB38_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB38_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB38_211
.LBB38_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB38_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB38_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_214 Depth 2
                                        #       Child Loop BB38_219 Depth 3
                                        #         Child Loop BB38_321 Depth 4
                                        #           Child Loop BB38_323 Depth 5
                                        #       Child Loop BB38_334 Depth 3
                                        #         Child Loop BB38_340 Depth 4
                                        #           Child Loop BB38_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB38_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB38_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB38_214:                             # %for.cond2194
                                        #   Parent Loop BB38_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_219 Depth 3
                                        #         Child Loop BB38_321 Depth 4
                                        #           Child Loop BB38_323 Depth 5
                                        #       Child Loop BB38_334 Depth 3
                                        #         Child Loop BB38_340 Depth 4
                                        #           Child Loop BB38_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB38_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB38_214 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_216:                             # %land.end2202
                                        #   in Loop: Header=BB38_214 Depth=2
	testb	$1, %al
	jne	.LBB38_217
	jmp	.LBB38_354
.LBB38_217:                             # %for.body2203
                                        #   in Loop: Header=BB38_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB38_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB38_214 Depth=2
	movw	$0, -40(%rbp)
.LBB38_219:                             # %for.cond2218
                                        #   Parent Loop BB38_212 Depth=1
                                        #     Parent Loop BB38_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_321 Depth 4
                                        #           Child Loop BB38_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB38_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_226
.LBB38_222:                             # %cond.false2261
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_225
.LBB38_224:                             # %cond.false2286
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_225:                             # %cond.end2306
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_226:                             # %cond.end2308
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_232
.LBB38_228:                             # %cond.false2339
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_231
.LBB38_230:                             # %cond.false2366
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_231:                             # %cond.end2388
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_232:                             # %cond.end2390
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_238
.LBB38_234:                             # %cond.false2423
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_237
.LBB38_236:                             # %cond.false2450
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_237:                             # %cond.end2472
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_238:                             # %cond.end2474
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_244
.LBB38_240:                             # %cond.false2507
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_243
.LBB38_242:                             # %cond.false2534
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_243:                             # %cond.end2556
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_244:                             # %cond.end2558
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_250
.LBB38_246:                             # %cond.false2599
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_249
.LBB38_248:                             # %cond.false2624
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_249:                             # %cond.end2644
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_250:                             # %cond.end2646
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_256
.LBB38_252:                             # %cond.false2677
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_255
.LBB38_254:                             # %cond.false2704
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_255:                             # %cond.end2726
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_256:                             # %cond.end2728
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_262
.LBB38_258:                             # %cond.false2761
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_261
.LBB38_260:                             # %cond.false2788
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_261:                             # %cond.end2810
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_262:                             # %cond.end2812
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_268
.LBB38_264:                             # %cond.false2845
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_267
.LBB38_266:                             # %cond.false2872
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_267:                             # %cond.end2894
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_268:                             # %cond.end2896
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_274
.LBB38_270:                             # %cond.false2937
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_273
.LBB38_272:                             # %cond.false2962
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_273:                             # %cond.end2982
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_274:                             # %cond.end2984
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_280
.LBB38_276:                             # %cond.false3015
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_279
.LBB38_278:                             # %cond.false3042
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_279:                             # %cond.end3064
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_280:                             # %cond.end3066
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_286
.LBB38_282:                             # %cond.false3099
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_285
.LBB38_284:                             # %cond.false3126
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_285:                             # %cond.end3148
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_286:                             # %cond.end3150
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_292
.LBB38_288:                             # %cond.false3183
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_291
.LBB38_290:                             # %cond.false3210
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_291:                             # %cond.end3232
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_292:                             # %cond.end3234
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_298
.LBB38_294:                             # %cond.false3275
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_297
.LBB38_296:                             # %cond.false3300
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_297:                             # %cond.end3320
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_298:                             # %cond.end3322
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_304
.LBB38_300:                             # %cond.false3353
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_303
.LBB38_302:                             # %cond.false3380
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_303:                             # %cond.end3402
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_304:                             # %cond.end3404
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_310
.LBB38_306:                             # %cond.false3437
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_309
.LBB38_308:                             # %cond.false3464
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_309:                             # %cond.end3486
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_310:                             # %cond.end3488
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB38_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB38_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB38_316
.LBB38_312:                             # %cond.false3521
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB38_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB38_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB38_315
.LBB38_314:                             # %cond.false3548
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB38_315:                             # %cond.end3570
                                        #   in Loop: Header=BB38_219 Depth=3
.LBB38_316:                             # %cond.end3572
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB38_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB38_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB38_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB38_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB38_332
.LBB38_319:                             # %if.end3593
                                        #   in Loop: Header=BB38_219 Depth=3
	jmp	.LBB38_329
.LBB38_320:                             # %if.else3594
                                        #   in Loop: Header=BB38_219 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB38_321:                             # %for.cond3595
                                        #   Parent Loop BB38_212 Depth=1
                                        #     Parent Loop BB38_214 Depth=2
                                        #       Parent Loop BB38_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB38_323 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB38_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB38_321 Depth=4
	movl	$0, -96(%rbp)
.LBB38_323:                             # %for.cond3599
                                        #   Parent Loop BB38_212 Depth=1
                                        #     Parent Loop BB38_214 Depth=2
                                        #       Parent Loop BB38_219 Depth=3
                                        #         Parent Loop BB38_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB38_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB38_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB38_323 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB38_323
.LBB38_326:                             # %for.end3616
                                        #   in Loop: Header=BB38_321 Depth=4
	jmp	.LBB38_327
.LBB38_327:                             # %for.inc3617
                                        #   in Loop: Header=BB38_321 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB38_321
.LBB38_328:                             # %for.end3619
                                        #   in Loop: Header=BB38_219 Depth=3
	jmp	.LBB38_329
.LBB38_329:                             # %if.end3620
                                        #   in Loop: Header=BB38_219 Depth=3
	jmp	.LBB38_330
.LBB38_330:                             # %for.inc3621
                                        #   in Loop: Header=BB38_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB38_219
.LBB38_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB38_214 Depth=2
	jmp	.LBB38_332
.LBB38_332:                             # %for.end3625
                                        #   in Loop: Header=BB38_214 Depth=2
	jmp	.LBB38_352
.LBB38_333:                             # %if.else3626
                                        #   in Loop: Header=BB38_214 Depth=2
	movw	$0, -40(%rbp)
.LBB38_334:                             # %for.cond3627
                                        #   Parent Loop BB38_212 Depth=1
                                        #     Parent Loop BB38_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_340 Depth 4
                                        #           Child Loop BB38_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB38_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB38_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB38_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB38_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB38_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB38_351
.LBB38_338:                             # %if.end3978
                                        #   in Loop: Header=BB38_334 Depth=3
	jmp	.LBB38_348
.LBB38_339:                             # %if.else3979
                                        #   in Loop: Header=BB38_334 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB38_340:                             # %for.cond3980
                                        #   Parent Loop BB38_212 Depth=1
                                        #     Parent Loop BB38_214 Depth=2
                                        #       Parent Loop BB38_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB38_342 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB38_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB38_340 Depth=4
	movl	$0, -96(%rbp)
.LBB38_342:                             # %for.cond3984
                                        #   Parent Loop BB38_212 Depth=1
                                        #     Parent Loop BB38_214 Depth=2
                                        #       Parent Loop BB38_334 Depth=3
                                        #         Parent Loop BB38_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB38_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB38_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB38_342 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB38_342
.LBB38_345:                             # %for.end4001
                                        #   in Loop: Header=BB38_340 Depth=4
	jmp	.LBB38_346
.LBB38_346:                             # %for.inc4002
                                        #   in Loop: Header=BB38_340 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB38_340
.LBB38_347:                             # %for.end4004
                                        #   in Loop: Header=BB38_334 Depth=3
	jmp	.LBB38_348
.LBB38_348:                             # %if.end4005
                                        #   in Loop: Header=BB38_334 Depth=3
	jmp	.LBB38_349
.LBB38_349:                             # %for.inc4006
                                        #   in Loop: Header=BB38_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB38_334
.LBB38_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB38_214 Depth=2
	jmp	.LBB38_351
.LBB38_351:                             # %for.end4010
                                        #   in Loop: Header=BB38_214 Depth=2
	jmp	.LBB38_352
.LBB38_352:                             # %if.end4011
                                        #   in Loop: Header=BB38_214 Depth=2
	jmp	.LBB38_353
.LBB38_353:                             # %for.inc4012
                                        #   in Loop: Header=BB38_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB38_214
.LBB38_354:                             # %for.end4016
                                        #   in Loop: Header=BB38_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB38_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB38_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB38_356:                             # %if.end4026
                                        #   in Loop: Header=BB38_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB38_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB38_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB38_358:                             # %if.end4032
                                        #   in Loop: Header=BB38_212 Depth=1
	jmp	.LBB38_359
.LBB38_359:                             # %for.inc4033
                                        #   in Loop: Header=BB38_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB38_212
.LBB38_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB38_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB38_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$521553501, -196(%rbp)  # imm = 0x1F16465D
	jne	.LBB38_364
.LBB38_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_363
.Lfunc_end38:
	.size	SubPelBlockSearchBiPred.13, .Lfunc_end38-SubPelBlockSearchBiPred.13
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.14    # -- Begin function SetupLargerBlocks.14
	.p2align	4, 0x90
	.type	SetupLargerBlocks.14,@function
SetupLargerBlocks.14:                   # @SetupLargerBlocks.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$596058731, -76(%rbp)   # imm = 0x2387226B
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB39_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB39_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_5
.LBB39_8:                               # %for.end30
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB39_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB39_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_9
.LBB39_12:                              # %for.end46
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB39_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB39_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_13
.LBB39_16:                              # %for.end62
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB39_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_17
.LBB39_20:                              # %for.end78
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB39_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB39_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_21
.LBB39_24:                              # %for.end94
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB39_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_25
.LBB39_28:                              # %for.end110
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB39_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB39_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_29
.LBB39_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB39_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_33
.LBB39_36:                              # %for.end150
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB39_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB39_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_37
.LBB39_40:                              # %for.end166
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB39_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB39_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_41
.LBB39_44:                              # %for.end182
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB39_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB39_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_45
.LBB39_48:                              # %for.end198
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB39_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB39_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_49
.LBB39_52:                              # %for.end214
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB39_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB39_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_53
.LBB39_56:                              # %for.end230
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB39_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB39_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_57
.LBB39_60:                              # %for.end246
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB39_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB39_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_61
.LBB39_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB39_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB39_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_65
.LBB39_68:                              # %for.end286
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB39_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB39_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_69
.LBB39_72:                              # %for.end302
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB39_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB39_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_73
.LBB39_76:                              # %for.end318
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB39_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB39_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_77
.LBB39_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB39_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB39_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_81
.LBB39_84:                              # %for.end358
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB39_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB39_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_85
.LBB39_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB39_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB39_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_89
.LBB39_92:                              # %for.end398
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB39_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB39_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_93
.LBB39_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB39_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB39_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB39_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB39_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_97
.LBB39_100:                             # %for.end438
	cmpl	$596058731, -76(%rbp)   # imm = 0x2387226B
	jne	.LBB39_102
.LBB39_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_101
.Lfunc_end39:
	.size	SetupLargerBlocks.14, .Lfunc_end39-SetupLargerBlocks.14
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.15 # -- Begin function SetupFastFullPelSearch.15
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.15,@function
SetupFastFullPelSearch.15:              # @SetupFastFullPelSearch.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$1465151654, -148(%rbp) # imm = 0x575470A6
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB40_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB40_4
.LBB40_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB40_4
.LBB40_4:                               # %cond.end
	movl	%ecx, -136(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB40_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB40_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB40_10
.LBB40_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB40_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB40_9:                               # %land.end
.LBB40_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movl	-8(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB40_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB40_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB40_14
.LBB40_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB40_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -152(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB40_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB40_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB40_18
.LBB40_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB40_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB40_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB40_24
.LBB40_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB40_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB40_23
.LBB40_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB40_23:                              # %cond.end82
.LBB40_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB40_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB40_27
.LBB40_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB40_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB40_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB40_33
.LBB40_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB40_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB40_32
.LBB40_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB40_32:                              # %cond.end122
.LBB40_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB40_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB40_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB40_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -68(%rbp)
.LBB40_37:                              # %for.cond155
                                        #   Parent Loop BB40_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB40_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB40_37 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB40_37
.LBB40_40:                              # %for.end
                                        #   in Loop: Header=BB40_35 Depth=1
	jmp	.LBB40_41
.LBB40_41:                              # %for.inc165
                                        #   in Loop: Header=BB40_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB40_35
.LBB40_42:                              # %for.end167
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB40_47
# %bb.43:                               # %land.lhs.true170
	movl	-80(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB40_47
# %bb.44:                               # %land.lhs.true174
	movl	-72(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB40_47
# %bb.45:                               # %land.lhs.true177
	movl	-72(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB40_47
# %bb.46:                               # %if.then181
	movl	$0, -112(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB40_48
.LBB40_47:                              # %if.else182
	movl	$1, -112(%rbp)
.LBB40_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB40_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB40_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB40_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB40_50 Depth=1
	movl	-144(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB40_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB40_50 Depth=1
	movl	-140(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB40_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB40_57
.LBB40_54:                              # %if.end209
                                        #   in Loop: Header=BB40_50 Depth=1
	jmp	.LBB40_55
.LBB40_55:                              # %for.inc210
                                        #   in Loop: Header=BB40_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB40_50
.LBB40_56:                              # %for.end212.loopexit
	jmp	.LBB40_57
.LBB40_57:                              # %for.end212
	jmp	.LBB40_58
.LBB40_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB40_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_69 Depth 2
                                        #       Child Loop BB40_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB40_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB40_59 Depth=1
	movl	-72(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB40_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB40_59 Depth=1
	cmpl	$0, -76(%rbp)
	jl	.LBB40_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB40_59 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB40_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB40_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB40_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB40_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB40_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB40_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB40_67
.LBB40_66:                              # %if.else238
                                        #   in Loop: Header=BB40_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB40_67:                              # %if.end239
                                        #   in Loop: Header=BB40_59 Depth=1
	jmp	.LBB40_68
.LBB40_68:                              # %if.end240
                                        #   in Loop: Header=BB40_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -92(%rbp)
.LBB40_69:                              # %for.cond242
                                        #   Parent Loop BB40_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_71 Depth 3
	cmpl	$4, -92(%rbp)
	jge	.LBB40_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB40_69 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -60(%rbp)
.LBB40_71:                              # %for.cond246
                                        #   Parent Loop BB40_59 Depth=1
                                        #     Parent Loop BB40_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB40_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB40_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-76(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -76(%rbp)
	movl	-88(%rbp), %edx
	movl	-152(%rbp), %ecx
	movl	-132(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB40_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB40_71
.LBB40_74:                              # %for.end381
                                        #   in Loop: Header=BB40_69 Depth=2
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB40_69 Depth=2
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB40_69
.LBB40_76:                              # %for.end404
                                        #   in Loop: Header=BB40_59 Depth=1
	jmp	.LBB40_77
.LBB40_77:                              # %for.inc405
                                        #   in Loop: Header=BB40_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB40_59
.LBB40_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$1465151654, -148(%rbp) # imm = 0x575470A6
	jne	.LBB40_80
.LBB40_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_79
.Lfunc_end40:
	.size	SetupFastFullPelSearch.15, .Lfunc_end40-SetupFastFullPelSearch.15
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.16     # -- Begin function BIDPartitionCost.16
	.p2align	4, 0x90
	.type	BIDPartitionCost.16,@function
BIDPartitionCost.16:                    # @BIDPartitionCost.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1507406374, -104(%rbp) # imm = 0x59D93226
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB41_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB41_3
.LBB41_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB41_3
.LBB41_3:                               # %cond.end
	movl	%eax, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB41_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB41_6
.LBB41_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB41_6
.LBB41_6:                               # %cond.end17
	movl	%eax, -112(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB41_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB41_9
.LBB41_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB41_9
.LBB41_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB41_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_12 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB41_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB41_12:                              # %for.cond53
                                        #   Parent Loop BB41_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB41_12 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB41_12 Depth=2
	movl	-108(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_12
.LBB41_15:                              # %for.end
                                        #   in Loop: Header=BB41_10 Depth=1
	jmp	.LBB41_16
.LBB41_16:                              # %for.inc164
                                        #   in Loop: Header=BB41_10 Depth=1
	movl	-120(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_10
.LBB41_17:                              # %for.end166
	movl	-128(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB41_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_20 Depth 2
                                        #       Child Loop BB41_22 Depth 3
                                        #         Child Loop BB41_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB41_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB41_20:                              # %for.cond185
                                        #   Parent Loop BB41_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_22 Depth 3
                                        #         Child Loop BB41_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB41_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	-68(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-36(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB41_22:                              # %for.cond196
                                        #   Parent Loop BB41_18 Depth=1
                                        #     Parent Loop BB41_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB41_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB41_22 Depth=3
	movl	$0, -32(%rbp)
.LBB41_24:                              # %for.cond200
                                        #   Parent Loop BB41_18 Depth=1
                                        #     Parent Loop BB41_20 Depth=2
                                        #       Parent Loop BB41_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB41_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB41_24 Depth=4
	movq	imgY_org, %rax
	movl	-100(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB41_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_24
.LBB41_27:                              # %for.end229
                                        #   in Loop: Header=BB41_22 Depth=3
	jmp	.LBB41_28
.LBB41_28:                              # %for.inc230
                                        #   in Loop: Header=BB41_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_22
.LBB41_29:                              # %for.end232
                                        #   in Loop: Header=BB41_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB41_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB41_32
.LBB41_31:                              # %if.then
                                        #   in Loop: Header=BB41_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_32:                              # %if.end
                                        #   in Loop: Header=BB41_20 Depth=2
	jmp	.LBB41_33
.LBB41_33:                              # %for.inc236
                                        #   in Loop: Header=BB41_20 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_20
.LBB41_34:                              # %for.end239
                                        #   in Loop: Header=BB41_18 Depth=1
	jmp	.LBB41_35
.LBB41_35:                              # %for.inc240
                                        #   in Loop: Header=BB41_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_18
.LBB41_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB41_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB41_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB41_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_41 Depth 2
                                        #       Child Loop BB41_43 Depth 3
                                        #         Child Loop BB41_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB41_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB41_39 Depth=1
	movl	$0, -52(%rbp)
.LBB41_41:                              # %for.cond257
                                        #   Parent Loop BB41_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_43 Depth 3
                                        #         Child Loop BB41_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB41_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB41_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB41_43:                              # %for.cond265
                                        #   Parent Loop BB41_39 Depth=1
                                        #     Parent Loop BB41_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB41_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB41_43 Depth=3
	movl	$0, -28(%rbp)
.LBB41_45:                              # %for.cond269
                                        #   Parent Loop BB41_39 Depth=1
                                        #     Parent Loop BB41_41 Depth=2
                                        #       Parent Loop BB41_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB41_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB41_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB41_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_45
.LBB41_48:                              # %for.end284
                                        #   in Loop: Header=BB41_43 Depth=3
	jmp	.LBB41_49
.LBB41_49:                              # %for.inc285
                                        #   in Loop: Header=BB41_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB41_43
.LBB41_50:                              # %for.end287
                                        #   in Loop: Header=BB41_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB41_41 Depth=2
	movl	-124(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB41_41
.LBB41_52:                              # %for.end294
                                        #   in Loop: Header=BB41_39 Depth=1
	jmp	.LBB41_53
.LBB41_53:                              # %for.inc295
                                        #   in Loop: Header=BB41_39 Depth=1
	movl	-112(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB41_39
.LBB41_54:                              # %for.end297
	jmp	.LBB41_55
.LBB41_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$1507406374, -104(%rbp) # imm = 0x59D93226
	jne	.LBB41_57
.LBB41_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_56
.Lfunc_end41:
	.size	BIDPartitionCost.16, .Lfunc_end41-BIDPartitionCost.16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.17
.LCPI42_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI42_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.17
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.17,@function
Init_Motion_Search_Module.17:           # @Init_Motion_Search_Module.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$811317959, -56(%rbp)   # imm = 0x305BBAC7
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB42_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB42_3
.LBB42_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB42_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB42_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB42_6
.LBB42_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB42_6:                               # %cond.end19
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB42_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB42_9
.LBB42_8:                               # %cond.false24
	movl	-44(%rbp), %eax
	addl	$1, %eax
.LBB42_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI42_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI42_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI42_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI42_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB42_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB42_11:                              # %if.end
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB42_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB42_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB42_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB42_15:                              # %if.end66
	movslq	-60(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB42_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB42_17:                              # %if.end72
	movslq	-32(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB42_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB42_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB42_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB42_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_22:                              # %for.cond90
                                        #   Parent Loop BB42_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB42_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB42_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB42_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_22
.LBB42_25:                              # %for.end
                                        #   in Loop: Header=BB42_20 Depth=1
	jmp	.LBB42_26
.LBB42_26:                              # %for.inc98
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_20
.LBB42_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB42_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB42_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB42_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_30:                              # %for.cond111
                                        #   Parent Loop BB42_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB42_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB42_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB42_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_30
.LBB42_33:                              # %for.end119
                                        #   in Loop: Header=BB42_28 Depth=1
	jmp	.LBB42_34
.LBB42_34:                              # %for.inc120
                                        #   in Loop: Header=BB42_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_28
.LBB42_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB42_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB42_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB42_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB42_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_36
.LBB42_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB42_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_45 Depth 2
                                        #     Child Loop BB42_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB42_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB42_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB42_43
.LBB42_42:                              # %cond.false143
                                        #   in Loop: Header=BB42_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB42_43:                              # %cond.end144
                                        #   in Loop: Header=BB42_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB42_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB42_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB42_45:                              # %for.cond151
                                        #   Parent Loop BB42_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB42_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB42_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB42_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_45
.LBB42_48:                              # %for.end168
                                        #   in Loop: Header=BB42_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB42_49:                              # %for.cond170
                                        #   Parent Loop BB42_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB42_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB42_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB42_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_49
.LBB42_52:                              # %for.end187
                                        #   in Loop: Header=BB42_40 Depth=1
	jmp	.LBB42_53
.LBB42_53:                              # %for.inc188
                                        #   in Loop: Header=BB42_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_40
.LBB42_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB42_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB42_56:                              # %if.end192
	cmpl	$811317959, -56(%rbp)   # imm = 0x305BBAC7
	jne	.LBB42_58
.LBB42_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_57
.Lfunc_end42:
	.size	Init_Motion_Search_Module.17, .Lfunc_end42-Init_Motion_Search_Module.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.18
.LCPI43_0:
	.quad	4602678819172646912     # double 0.5
.LCPI43_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.18
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.18,@function
FastFullPelBlockMotionSearch.18:        # @FastFullPelBlockMotionSearch.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI43_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1049414414, -72(%rbp)  # imm = 0x3E8CCB0E
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -60(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -64(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -80(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB43_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB43_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB43_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-52(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB43_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB43_5:                               # %if.end56
	jmp	.LBB43_6
.LBB43_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB43_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB43_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB43_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB43_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-52(%rbp), %eax
	movq	mvbits, %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-68(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB43_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB43_11:                              # %if.end85
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_12
.LBB43_12:                              # %if.end86
                                        #   in Loop: Header=BB43_7 Depth=1
	jmp	.LBB43_13
.LBB43_13:                              # %for.inc
                                        #   in Loop: Header=BB43_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB43_7
.LBB43_14:                              # %for.end
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1049414414, -72(%rbp)  # imm = 0x3E8CCB0E
	jne	.LBB43_16
.LBB43_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_15
.Lfunc_end43:
	.size	FastFullPelBlockMotionSearch.18, .Lfunc_end43-FastFullPelBlockMotionSearch.18
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.19            # -- Begin function find_SATD.19
	.p2align	4, 0x90
	.type	find_SATD.19,@function
find_SATD.19:                           # @find_SATD.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$915501288, -56(%rbp)   # imm = 0x369170E8
	movq	%rdi, -64(%rbp)
	movl	%esi, -52(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
                                        #       Child Loop BB44_5 Depth 3
                                        #         Child Loop BB44_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -24(%rbp)
.LBB44_3:                               # %for.cond7
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_5 Depth 3
                                        #         Child Loop BB44_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB44_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB44_5:                               # %for.cond10
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB44_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB44_7:                               # %for.cond13
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_3 Depth=2
                                        #       Parent Loop BB44_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB44_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB44_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB44_7
.LBB44_10:                              # %for.end
                                        #   in Loop: Header=BB44_5 Depth=3
	jmp	.LBB44_11
.LBB44_11:                              # %for.inc24
                                        #   in Loop: Header=BB44_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_5
.LBB44_12:                              # %for.end26
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_13
.LBB44_13:                              # %for.inc27
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_3
.LBB44_14:                              # %for.end29
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_15
.LBB44_15:                              # %for.inc30
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_1
.LBB44_16:                              # %for.end32
	cmpl	$0, -52(%rbp)
	je	.LBB44_26
# %bb.17:                               # %if.then
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB44_24
# %bb.18:                               # %if.then
	movq	.LJTI44_0(,%rax,8), %rax
	jmpq	*%rax
.LBB44_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB44_25:                              # %sw.epilog
	jmp	.LBB44_31
.LBB44_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB44_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB44_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB44_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_27
.LBB44_30:                              # %for.end79
	jmp	.LBB44_31
.LBB44_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$915501288, -56(%rbp)   # imm = 0x369170E8
	jne	.LBB44_33
.LBB44_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_32
.Lfunc_end44:
	.size	find_SATD.19, .Lfunc_end44-find_SATD.19
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI44_0:
	.quad	.LBB44_19
	.quad	.LBB44_20
	.quad	.LBB44_20
	.quad	.LBB44_21
	.quad	.LBB44_22
	.quad	.LBB44_22
	.quad	.LBB44_23
                                        # -- End function
	.text
	.globl	PartitionMotionSearch.20 # -- Begin function PartitionMotionSearch.20
	.p2align	4, 0x90
	.type	PartitionMotionSearch.20,@function
PartitionMotionSearch.20:               # @PartitionMotionSearch.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1147098660, -68(%rbp)  # imm = 0x445F5624
	movl	%edi, -8(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB45_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB45_3
.LBB45_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB45_3
.LBB45_3:                               # %cond.end
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB45_6
# %bb.5:                                # %if.then20
	movl	$4, -52(%rbp)
	jmp	.LBB45_7
.LBB45_6:                               # %if.else
	movl	$2, -52(%rbp)
.LBB45_7:                               # %if.end
	jmp	.LBB45_9
.LBB45_8:                               # %if.else21
	movl	$0, -52(%rbp)
.LBB45_9:                               # %if.end22
	movl	-80(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB45_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_12 Depth 2
                                        #       Child Loop BB45_29 Depth 3
                                        #         Child Loop BB45_31 Depth 4
                                        #           Child Loop BB45_33 Depth 5
                                        #             Child Loop BB45_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB45_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB45_10 Depth=1
	movw	$0, -2(%rbp)
.LBB45_12:                              # %for.cond27
                                        #   Parent Loop BB45_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_29 Depth 3
                                        #         Child Loop BB45_31 Depth 4
                                        #           Child Loop BB45_33 Depth 5
                                        #             Child Loop BB45_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB45_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB45_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB45_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB45_28
.LBB45_15:                              # %if.else38
                                        #   in Loop: Header=BB45_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB45_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB45_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB45_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB45_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB45_19
.LBB45_18:                              # %cond.false49
                                        #   in Loop: Header=BB45_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB45_19
.LBB45_19:                              # %cond.end50
                                        #   in Loop: Header=BB45_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	jmp	.LBB45_27
.LBB45_20:                              # %if.else53
                                        #   in Loop: Header=BB45_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB45_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB45_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB45_23
.LBB45_22:                              # %cond.false60
                                        #   in Loop: Header=BB45_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB45_23
.LBB45_23:                              # %cond.end61
                                        #   in Loop: Header=BB45_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB45_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB45_12 Depth=2
	movl	$2, %edx
	jmp	.LBB45_26
.LBB45_25:                              # %cond.false67
                                        #   in Loop: Header=BB45_12 Depth=2
	movl	-8(%rbp), %edx
.LBB45_26:                              # %cond.end68
                                        #   in Loop: Header=BB45_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
.LBB45_27:                              # %if.end71
                                        #   in Loop: Header=BB45_12 Depth=2
	jmp	.LBB45_28
.LBB45_28:                              # %if.end72
                                        #   in Loop: Header=BB45_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB45_29:                              # %for.cond89
                                        #   Parent Loop BB45_10 Depth=1
                                        #     Parent Loop BB45_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_31 Depth 4
                                        #           Child Loop BB45_33 Depth 5
                                        #             Child Loop BB45_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB45_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB45_31:                              # %for.cond103
                                        #   Parent Loop BB45_10 Depth=1
                                        #     Parent Loop BB45_12 Depth=2
                                        #       Parent Loop BB45_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB45_33 Depth 5
                                        #             Child Loop BB45_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB45_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-44(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -24(%rbp)
.LBB45_33:                              # %for.cond123
                                        #   Parent Loop BB45_10 Depth=1
                                        #     Parent Loop BB45_12 Depth=2
                                        #       Parent Loop BB45_29 Depth=3
                                        #         Parent Loop BB45_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB45_35 Depth 6
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB45_33 Depth=5
	movl	$0, -32(%rbp)
.LBB45_35:                              # %for.cond127
                                        #   Parent Loop BB45_10 Depth=1
                                        #     Parent Loop BB45_12 Depth=2
                                        #       Parent Loop BB45_29 Depth=3
                                        #         Parent Loop BB45_31 Depth=4
                                        #           Parent Loop BB45_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-32(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB45_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB45_35 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB45_35
.LBB45_38:                              # %for.end
                                        #   in Loop: Header=BB45_33 Depth=5
	jmp	.LBB45_39
.LBB45_39:                              # %for.inc174
                                        #   in Loop: Header=BB45_33 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_33
.LBB45_40:                              # %for.end176
                                        #   in Loop: Header=BB45_31 Depth=4
	jmp	.LBB45_41
.LBB45_41:                              # %for.inc177
                                        #   in Loop: Header=BB45_31 Depth=4
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_31
.LBB45_42:                              # %for.end179
                                        #   in Loop: Header=BB45_29 Depth=3
	jmp	.LBB45_43
.LBB45_43:                              # %for.inc180
                                        #   in Loop: Header=BB45_29 Depth=3
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_29
.LBB45_44:                              # %for.end182
                                        #   in Loop: Header=BB45_12 Depth=2
	jmp	.LBB45_45
.LBB45_45:                              # %for.inc183
                                        #   in Loop: Header=BB45_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB45_12
.LBB45_46:                              # %for.end185
                                        #   in Loop: Header=BB45_10 Depth=1
	jmp	.LBB45_47
.LBB45_47:                              # %for.inc186
                                        #   in Loop: Header=BB45_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_10
.LBB45_48:                              # %for.end188
	cmpl	$1147098660, -68(%rbp)  # imm = 0x445F5624
	jne	.LBB45_50
.LBB45_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_49
.Lfunc_end45:
	.size	PartitionMotionSearch.20, .Lfunc_end45-PartitionMotionSearch.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.21
.LCPI46_0:
	.quad	4602678819172646912     # double 0.5
.LCPI46_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.21
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.21,@function
SubPelBlockSearchBiPred.21:             # @SubPelBlockSearchBiPred.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI46_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1379179255, -196(%rbp) # imm = 0x52349AF7
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -120(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -154(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB46_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB46_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB46_4
.LBB46_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB46_4:                               # %cond.end
	jmp	.LBB46_6
.LBB46_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB46_6:                               # %cond.end18
	movw	%ax, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB46_10
.LBB46_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB46_10
.LBB46_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -116(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB46_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB46_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_14
.LBB46_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB46_14:                              # %cond.end55
	jmp	.LBB46_16
.LBB46_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB46_16
.LBB46_16:                              # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB46_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB46_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_20
.LBB46_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB46_20:                              # %cond.end82
	jmp	.LBB46_22
.LBB46_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB46_22
.LBB46_22:                              # %cond.end85
	movw	%ax, -36(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB46_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB46_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB46_26
.LBB46_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB46_26:                              # %cond.end106
	jmp	.LBB46_28
.LBB46_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB46_28
.LBB46_28:                              # %cond.end109
	movw	%ax, -170(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB46_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB46_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB46_32
.LBB46_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB46_32:                              # %cond.end130
	jmp	.LBB46_34
.LBB46_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB46_34
.LBB46_34:                              # %cond.end133
	movw	%ax, -174(%rbp)
	movswl	-174(%rbp), %eax
	movswl	-170(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -38(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB46_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB46_37
.LBB46_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB46_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB46_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB46_40
.LBB46_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB46_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-120(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-154(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_45
# %bb.41:                               # %land.lhs.true197
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_45
# %bb.42:                               # %land.lhs.true205
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_45
# %bb.43:                               # %land.lhs.true211
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB46_46
.LBB46_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB46_46:                              # %if.end
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_51
# %bb.47:                               # %land.lhs.true224
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_51
# %bb.48:                               # %land.lhs.true232
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_51
# %bb.49:                               # %land.lhs.true238
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB46_52
.LBB46_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB46_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-172(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB46_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_55 Depth 2
                                        #       Child Loop BB46_60 Depth 3
                                        #         Child Loop BB46_162 Depth 4
                                        #           Child Loop BB46_164 Depth 5
                                        #       Child Loop BB46_175 Depth 3
                                        #         Child Loop BB46_181 Depth 4
                                        #           Child Loop BB46_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-176(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB46_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB46_55:                              # %for.cond283
                                        #   Parent Loop BB46_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_60 Depth 3
                                        #         Child Loop BB46_162 Depth 4
                                        #           Child Loop BB46_164 Depth 5
                                        #       Child Loop BB46_175 Depth 3
                                        #         Child Loop BB46_181 Depth 4
                                        #           Child Loop BB46_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-154(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB46_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB46_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_57:                              # %land.end
                                        #   in Loop: Header=BB46_55 Depth=2
	testb	$1, %al
	jne	.LBB46_58
	jmp	.LBB46_195
.LBB46_58:                              # %for.body289
                                        #   in Loop: Header=BB46_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB46_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB46_55 Depth=2
	movw	$0, -40(%rbp)
.LBB46_60:                              # %for.cond304
                                        #   Parent Loop BB46_53 Depth=1
                                        #     Parent Loop BB46_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_162 Depth 4
                                        #           Child Loop BB46_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB46_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_67
.LBB46_63:                              # %cond.false345
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_66
.LBB46_65:                              # %cond.false369
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_66:                              # %cond.end389
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_67:                              # %cond.end391
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_73
.LBB46_69:                              # %cond.false421
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_72
.LBB46_71:                              # %cond.false448
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_72:                              # %cond.end470
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_73:                              # %cond.end472
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_79
.LBB46_75:                              # %cond.false505
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_78
.LBB46_77:                              # %cond.false532
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_78:                              # %cond.end554
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_79:                              # %cond.end556
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_85
.LBB46_81:                              # %cond.false589
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_84
.LBB46_83:                              # %cond.false616
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_84:                              # %cond.end638
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_85:                              # %cond.end640
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_91
.LBB46_87:                              # %cond.false681
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_90
.LBB46_89:                              # %cond.false706
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_90:                              # %cond.end726
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_91:                              # %cond.end728
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_97
.LBB46_93:                              # %cond.false759
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_96
.LBB46_95:                              # %cond.false786
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_96:                              # %cond.end808
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_97:                              # %cond.end810
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_103
.LBB46_99:                              # %cond.false843
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_102
.LBB46_101:                             # %cond.false870
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_102:                             # %cond.end892
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_103:                             # %cond.end894
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_109
.LBB46_105:                             # %cond.false927
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_108
.LBB46_107:                             # %cond.false954
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_108:                             # %cond.end976
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_109:                             # %cond.end978
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_115
.LBB46_111:                             # %cond.false1019
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_114
.LBB46_113:                             # %cond.false1044
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_114:                             # %cond.end1064
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_115:                             # %cond.end1066
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_121
.LBB46_117:                             # %cond.false1097
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_120
.LBB46_119:                             # %cond.false1124
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_120:                             # %cond.end1146
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_121:                             # %cond.end1148
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_127
.LBB46_123:                             # %cond.false1181
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_126
.LBB46_125:                             # %cond.false1208
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_126:                             # %cond.end1230
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_127:                             # %cond.end1232
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_133
.LBB46_129:                             # %cond.false1265
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_132
.LBB46_131:                             # %cond.false1292
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_132:                             # %cond.end1314
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_133:                             # %cond.end1316
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_139
.LBB46_135:                             # %cond.false1357
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_138
.LBB46_137:                             # %cond.false1382
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_138:                             # %cond.end1402
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_139:                             # %cond.end1404
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_145
.LBB46_141:                             # %cond.false1435
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_144
.LBB46_143:                             # %cond.false1462
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_144:                             # %cond.end1484
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_145:                             # %cond.end1486
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_151
.LBB46_147:                             # %cond.false1519
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_150
.LBB46_149:                             # %cond.false1546
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_150:                             # %cond.end1568
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_151:                             # %cond.end1570
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB46_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_157
.LBB46_153:                             # %cond.false1603
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB46_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_156
.LBB46_155:                             # %cond.false1630
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_156:                             # %cond.end1652
                                        #   in Loop: Header=BB46_60 Depth=3
.LBB46_157:                             # %cond.end1654
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB46_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB46_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB46_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB46_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB46_173
.LBB46_160:                             # %if.end1673
                                        #   in Loop: Header=BB46_60 Depth=3
	jmp	.LBB46_170
.LBB46_161:                             # %if.else1674
                                        #   in Loop: Header=BB46_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB46_162:                             # %for.cond1675
                                        #   Parent Loop BB46_53 Depth=1
                                        #     Parent Loop BB46_55 Depth=2
                                        #       Parent Loop BB46_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB46_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB46_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB46_162 Depth=4
	movl	$0, -100(%rbp)
.LBB46_164:                             # %for.cond1679
                                        #   Parent Loop BB46_53 Depth=1
                                        #     Parent Loop BB46_55 Depth=2
                                        #       Parent Loop BB46_60 Depth=3
                                        #         Parent Loop BB46_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB46_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB46_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB46_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB46_164
.LBB46_167:                             # %for.end
                                        #   in Loop: Header=BB46_162 Depth=4
	jmp	.LBB46_168
.LBB46_168:                             # %for.inc1694
                                        #   in Loop: Header=BB46_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB46_162
.LBB46_169:                             # %for.end1696
                                        #   in Loop: Header=BB46_60 Depth=3
	jmp	.LBB46_170
.LBB46_170:                             # %if.end1697
                                        #   in Loop: Header=BB46_60 Depth=3
	jmp	.LBB46_171
.LBB46_171:                             # %for.inc1698
                                        #   in Loop: Header=BB46_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB46_60
.LBB46_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB46_55 Depth=2
	jmp	.LBB46_173
.LBB46_173:                             # %for.end1702
                                        #   in Loop: Header=BB46_55 Depth=2
	jmp	.LBB46_193
.LBB46_174:                             # %if.else1703
                                        #   in Loop: Header=BB46_55 Depth=2
	movw	$0, -40(%rbp)
.LBB46_175:                             # %for.cond1704
                                        #   Parent Loop BB46_53 Depth=1
                                        #     Parent Loop BB46_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_181 Depth 4
                                        #           Child Loop BB46_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB46_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB46_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB46_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB46_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB46_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB46_192
.LBB46_179:                             # %if.end2054
                                        #   in Loop: Header=BB46_175 Depth=3
	jmp	.LBB46_189
.LBB46_180:                             # %if.else2055
                                        #   in Loop: Header=BB46_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB46_181:                             # %for.cond2056
                                        #   Parent Loop BB46_53 Depth=1
                                        #     Parent Loop BB46_55 Depth=2
                                        #       Parent Loop BB46_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB46_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB46_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB46_181 Depth=4
	movl	$0, -100(%rbp)
.LBB46_183:                             # %for.cond2060
                                        #   Parent Loop BB46_53 Depth=1
                                        #     Parent Loop BB46_55 Depth=2
                                        #       Parent Loop BB46_175 Depth=3
                                        #         Parent Loop BB46_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB46_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB46_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB46_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB46_183
.LBB46_186:                             # %for.end2077
                                        #   in Loop: Header=BB46_181 Depth=4
	jmp	.LBB46_187
.LBB46_187:                             # %for.inc2078
                                        #   in Loop: Header=BB46_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB46_181
.LBB46_188:                             # %for.end2080
                                        #   in Loop: Header=BB46_175 Depth=3
	jmp	.LBB46_189
.LBB46_189:                             # %if.end2081
                                        #   in Loop: Header=BB46_175 Depth=3
	jmp	.LBB46_190
.LBB46_190:                             # %for.inc2082
                                        #   in Loop: Header=BB46_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB46_175
.LBB46_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB46_55 Depth=2
	jmp	.LBB46_192
.LBB46_192:                             # %for.end2086
                                        #   in Loop: Header=BB46_55 Depth=2
	jmp	.LBB46_193
.LBB46_193:                             # %if.end2087
                                        #   in Loop: Header=BB46_55 Depth=2
	jmp	.LBB46_194
.LBB46_194:                             # %for.inc2088
                                        #   in Loop: Header=BB46_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB46_55
.LBB46_195:                             # %for.end2092
                                        #   in Loop: Header=BB46_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB46_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB46_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB46_197:                             # %if.end2101
                                        #   in Loop: Header=BB46_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB46_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB46_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB46_199:                             # %if.end2107
                                        #   in Loop: Header=BB46_53 Depth=1
	jmp	.LBB46_200
.LBB46_200:                             # %for.inc2108
                                        #   in Loop: Header=BB46_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB46_53
.LBB46_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB46_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB46_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB46_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB46_205:                             # %if.end2129
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB46_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB46_211
.LBB46_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB46_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB46_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_214 Depth 2
                                        #       Child Loop BB46_219 Depth 3
                                        #         Child Loop BB46_321 Depth 4
                                        #           Child Loop BB46_323 Depth 5
                                        #       Child Loop BB46_334 Depth 3
                                        #         Child Loop BB46_340 Depth 4
                                        #           Child Loop BB46_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB46_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB46_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB46_214:                             # %for.cond2194
                                        #   Parent Loop BB46_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_219 Depth 3
                                        #         Child Loop BB46_321 Depth 4
                                        #           Child Loop BB46_323 Depth 5
                                        #       Child Loop BB46_334 Depth 3
                                        #         Child Loop BB46_340 Depth 4
                                        #           Child Loop BB46_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-154(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB46_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB46_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_216:                             # %land.end2202
                                        #   in Loop: Header=BB46_214 Depth=2
	testb	$1, %al
	jne	.LBB46_217
	jmp	.LBB46_354
.LBB46_217:                             # %for.body2203
                                        #   in Loop: Header=BB46_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB46_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB46_214 Depth=2
	movw	$0, -40(%rbp)
.LBB46_219:                             # %for.cond2218
                                        #   Parent Loop BB46_212 Depth=1
                                        #     Parent Loop BB46_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_321 Depth 4
                                        #           Child Loop BB46_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB46_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_226
.LBB46_222:                             # %cond.false2261
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_225
.LBB46_224:                             # %cond.false2286
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_225:                             # %cond.end2306
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_226:                             # %cond.end2308
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_232
.LBB46_228:                             # %cond.false2339
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_231
.LBB46_230:                             # %cond.false2366
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_231:                             # %cond.end2388
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_232:                             # %cond.end2390
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_238
.LBB46_234:                             # %cond.false2423
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_237
.LBB46_236:                             # %cond.false2450
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_237:                             # %cond.end2472
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_238:                             # %cond.end2474
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_244
.LBB46_240:                             # %cond.false2507
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_243
.LBB46_242:                             # %cond.false2534
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_243:                             # %cond.end2556
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_244:                             # %cond.end2558
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_250
.LBB46_246:                             # %cond.false2599
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_249
.LBB46_248:                             # %cond.false2624
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_249:                             # %cond.end2644
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_250:                             # %cond.end2646
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_256
.LBB46_252:                             # %cond.false2677
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_255
.LBB46_254:                             # %cond.false2704
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_255:                             # %cond.end2726
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_256:                             # %cond.end2728
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_262
.LBB46_258:                             # %cond.false2761
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_261
.LBB46_260:                             # %cond.false2788
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_261:                             # %cond.end2810
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_262:                             # %cond.end2812
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_268
.LBB46_264:                             # %cond.false2845
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_267
.LBB46_266:                             # %cond.false2872
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_267:                             # %cond.end2894
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_268:                             # %cond.end2896
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_274
.LBB46_270:                             # %cond.false2937
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_273
.LBB46_272:                             # %cond.false2962
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_273:                             # %cond.end2982
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_274:                             # %cond.end2984
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_280
.LBB46_276:                             # %cond.false3015
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_279
.LBB46_278:                             # %cond.false3042
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_279:                             # %cond.end3064
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_280:                             # %cond.end3066
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_286
.LBB46_282:                             # %cond.false3099
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_285
.LBB46_284:                             # %cond.false3126
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_285:                             # %cond.end3148
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_286:                             # %cond.end3150
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_292
.LBB46_288:                             # %cond.false3183
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_291
.LBB46_290:                             # %cond.false3210
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_291:                             # %cond.end3232
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_292:                             # %cond.end3234
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_298
.LBB46_294:                             # %cond.false3275
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_297
.LBB46_296:                             # %cond.false3300
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_297:                             # %cond.end3320
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_298:                             # %cond.end3322
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_304
.LBB46_300:                             # %cond.false3353
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_303
.LBB46_302:                             # %cond.false3380
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_303:                             # %cond.end3402
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_304:                             # %cond.end3404
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_310
.LBB46_306:                             # %cond.false3437
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_309
.LBB46_308:                             # %cond.false3464
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_309:                             # %cond.end3486
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_310:                             # %cond.end3488
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB46_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB46_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB46_316
.LBB46_312:                             # %cond.false3521
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB46_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB46_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB46_315
.LBB46_314:                             # %cond.false3548
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB46_315:                             # %cond.end3570
                                        #   in Loop: Header=BB46_219 Depth=3
.LBB46_316:                             # %cond.end3572
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB46_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB46_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB46_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB46_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB46_332
.LBB46_319:                             # %if.end3593
                                        #   in Loop: Header=BB46_219 Depth=3
	jmp	.LBB46_329
.LBB46_320:                             # %if.else3594
                                        #   in Loop: Header=BB46_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB46_321:                             # %for.cond3595
                                        #   Parent Loop BB46_212 Depth=1
                                        #     Parent Loop BB46_214 Depth=2
                                        #       Parent Loop BB46_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB46_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB46_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB46_321 Depth=4
	movl	$0, -100(%rbp)
.LBB46_323:                             # %for.cond3599
                                        #   Parent Loop BB46_212 Depth=1
                                        #     Parent Loop BB46_214 Depth=2
                                        #       Parent Loop BB46_219 Depth=3
                                        #         Parent Loop BB46_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB46_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB46_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB46_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB46_323
.LBB46_326:                             # %for.end3616
                                        #   in Loop: Header=BB46_321 Depth=4
	jmp	.LBB46_327
.LBB46_327:                             # %for.inc3617
                                        #   in Loop: Header=BB46_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB46_321
.LBB46_328:                             # %for.end3619
                                        #   in Loop: Header=BB46_219 Depth=3
	jmp	.LBB46_329
.LBB46_329:                             # %if.end3620
                                        #   in Loop: Header=BB46_219 Depth=3
	jmp	.LBB46_330
.LBB46_330:                             # %for.inc3621
                                        #   in Loop: Header=BB46_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB46_219
.LBB46_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB46_214 Depth=2
	jmp	.LBB46_332
.LBB46_332:                             # %for.end3625
                                        #   in Loop: Header=BB46_214 Depth=2
	jmp	.LBB46_352
.LBB46_333:                             # %if.else3626
                                        #   in Loop: Header=BB46_214 Depth=2
	movw	$0, -40(%rbp)
.LBB46_334:                             # %for.cond3627
                                        #   Parent Loop BB46_212 Depth=1
                                        #     Parent Loop BB46_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_340 Depth 4
                                        #           Child Loop BB46_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB46_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB46_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB46_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB46_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB46_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB46_351
.LBB46_338:                             # %if.end3978
                                        #   in Loop: Header=BB46_334 Depth=3
	jmp	.LBB46_348
.LBB46_339:                             # %if.else3979
                                        #   in Loop: Header=BB46_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB46_340:                             # %for.cond3980
                                        #   Parent Loop BB46_212 Depth=1
                                        #     Parent Loop BB46_214 Depth=2
                                        #       Parent Loop BB46_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB46_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB46_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB46_340 Depth=4
	movl	$0, -100(%rbp)
.LBB46_342:                             # %for.cond3984
                                        #   Parent Loop BB46_212 Depth=1
                                        #     Parent Loop BB46_214 Depth=2
                                        #       Parent Loop BB46_334 Depth=3
                                        #         Parent Loop BB46_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB46_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB46_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB46_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB46_342
.LBB46_345:                             # %for.end4001
                                        #   in Loop: Header=BB46_340 Depth=4
	jmp	.LBB46_346
.LBB46_346:                             # %for.inc4002
                                        #   in Loop: Header=BB46_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB46_340
.LBB46_347:                             # %for.end4004
                                        #   in Loop: Header=BB46_334 Depth=3
	jmp	.LBB46_348
.LBB46_348:                             # %if.end4005
                                        #   in Loop: Header=BB46_334 Depth=3
	jmp	.LBB46_349
.LBB46_349:                             # %for.inc4006
                                        #   in Loop: Header=BB46_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB46_334
.LBB46_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB46_214 Depth=2
	jmp	.LBB46_351
.LBB46_351:                             # %for.end4010
                                        #   in Loop: Header=BB46_214 Depth=2
	jmp	.LBB46_352
.LBB46_352:                             # %if.end4011
                                        #   in Loop: Header=BB46_214 Depth=2
	jmp	.LBB46_353
.LBB46_353:                             # %for.inc4012
                                        #   in Loop: Header=BB46_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB46_214
.LBB46_354:                             # %for.end4016
                                        #   in Loop: Header=BB46_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB46_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB46_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB46_356:                             # %if.end4026
                                        #   in Loop: Header=BB46_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB46_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB46_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB46_358:                             # %if.end4032
                                        #   in Loop: Header=BB46_212 Depth=1
	jmp	.LBB46_359
.LBB46_359:                             # %for.inc4033
                                        #   in Loop: Header=BB46_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB46_212
.LBB46_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB46_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB46_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1379179255, -196(%rbp) # imm = 0x52349AF7
	jne	.LBB46_364
.LBB46_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_363
.Lfunc_end46:
	.size	SubPelBlockSearchBiPred.21, .Lfunc_end46-SubPelBlockSearchBiPred.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.22
.LCPI47_0:
	.quad	4602678819172646912     # double 0.5
.LCPI47_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.22
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.22,@function
SubPelBlockMotionSearch.22:             # @SubPelBlockMotionSearch.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI47_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI47_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$61633483, -200(%rbp)   # imm = 0x3AC73CB
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -140(%rbp)
	movl	%ecx, -148(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -156(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$1, -100(%rbp)
	jne	.LBB47_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB47_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB47_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB47_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB47_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB47_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB47_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -196(%rbp)
	movq	input, %rax
	movslq	-100(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movslq	-100(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -120(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB47_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB47_10
.LBB47_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB47_10
.LBB47_10:                              # %cond.end
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB47_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB47_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB47_14
.LBB47_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB47_14:                              # %cond.end35
	jmp	.LBB47_16
.LBB47_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB47_16:                              # %cond.end38
	movl	%eax, -184(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB47_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB47_20
.LBB47_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB47_20
.LBB47_20:                              # %cond.end50
	movl	%ecx, -152(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB47_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB47_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB47_26
.LBB47_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB47_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB47_25:                              # %land.end65
.LBB47_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB47_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB47_29
.LBB47_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB47_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-140(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB47_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB47_32
# %bb.31:                               # %if.then
	movl	-140(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB47_33
.LBB47_32:                              # %if.else
	movl	-140(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB47_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-136(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-132(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB47_38
# %bb.34:                               # %land.lhs.true112
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_38
# %bb.35:                               # %land.lhs.true118
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB47_38
# %bb.36:                               # %land.lhs.true123
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB47_39
.LBB47_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB47_39:                              # %if.end131
	movl	$0, -84(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB47_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_47 Depth 2
                                        #       Child Loop BB47_51 Depth 3
                                        #         Child Loop BB47_57 Depth 4
                                        #           Child Loop BB47_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB47_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB47_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movl	-156(%rbp), %eax
	movq	mvbits, %rdx
	movl	-96(%rbp), %esi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-104(%rbp), %edi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -196(%rbp)
	je	.LBB47_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB47_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB47_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB47_40 Depth=1
	movl	-156(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB47_44:                              # %if.end164
                                        #   in Loop: Header=BB47_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB47_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB47_40 Depth=1
	jmp	.LBB47_75
.LBB47_46:                              # %if.end168
                                        #   in Loop: Header=BB47_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -108(%rbp)
.LBB47_47:                              # %for.cond169
                                        #   Parent Loop BB47_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_51 Depth 3
                                        #         Child Loop BB47_57 Depth 4
                                        #           Child Loop BB47_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-132(%rbp), %ecx
	jge	.LBB47_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB47_47 Depth=2
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_49:                              # %land.end174
                                        #   in Loop: Header=BB47_47 Depth=2
	testb	$1, %al
	jne	.LBB47_50
	jmp	.LBB47_70
.LBB47_50:                              # %for.body176
                                        #   in Loop: Header=BB47_47 Depth=2
	movl	-144(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-104(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB47_51:                              # %for.cond180
                                        #   Parent Loop BB47_40 Depth=1
                                        #     Parent Loop BB47_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_57 Depth 4
                                        #           Child Loop BB47_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB47_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB47_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-148(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-96(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB47_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB47_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB47_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB47_47 Depth=2
	movl	$1, -108(%rbp)
	jmp	.LBB47_68
.LBB47_55:                              # %if.end342
                                        #   in Loop: Header=BB47_51 Depth=3
	jmp	.LBB47_65
.LBB47_56:                              # %if.else343
                                        #   in Loop: Header=BB47_51 Depth=3
	movl	$0, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB47_57:                              # %for.cond344
                                        #   Parent Loop BB47_40 Depth=1
                                        #     Parent Loop BB47_47 Depth=2
                                        #       Parent Loop BB47_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB47_59 Depth 5
	cmpl	$4, -80(%rbp)
	jge	.LBB47_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB47_57 Depth=4
	movl	$0, -76(%rbp)
.LBB47_59:                              # %for.cond348
                                        #   Parent Loop BB47_40 Depth=1
                                        #     Parent Loop BB47_47 Depth=2
                                        #       Parent Loop BB47_51 Depth=3
                                        #         Parent Loop BB47_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -76(%rbp)
	jge	.LBB47_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB47_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB47_59 Depth=5
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB47_59
.LBB47_62:                              # %for.end
                                        #   in Loop: Header=BB47_57 Depth=4
	jmp	.LBB47_63
.LBB47_63:                              # %for.inc361
                                        #   in Loop: Header=BB47_57 Depth=4
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB47_57
.LBB47_64:                              # %for.end363
                                        #   in Loop: Header=BB47_51 Depth=3
	jmp	.LBB47_65
.LBB47_65:                              # %if.end364
                                        #   in Loop: Header=BB47_51 Depth=3
	jmp	.LBB47_66
.LBB47_66:                              # %for.inc365
                                        #   in Loop: Header=BB47_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_51
.LBB47_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB47_47 Depth=2
	jmp	.LBB47_68
.LBB47_68:                              # %for.end367
                                        #   in Loop: Header=BB47_47 Depth=2
	jmp	.LBB47_69
.LBB47_69:                              # %for.inc368
                                        #   in Loop: Header=BB47_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB47_47
.LBB47_70:                              # %for.end370
                                        #   in Loop: Header=BB47_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB47_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB47_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-100(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB47_72:                              # %if.end377
                                        #   in Loop: Header=BB47_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB47_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB47_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB47_74:                              # %if.end381
                                        #   in Loop: Header=BB47_40 Depth=1
	jmp	.LBB47_75
.LBB47_75:                              # %for.inc382
                                        #   in Loop: Header=BB47_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB47_40
.LBB47_76:                              # %for.end384
	cmpl	$0, -84(%rbp)
	je	.LBB47_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB47_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB47_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB47_80:                              # %if.end403
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB47_85
# %bb.81:                               # %land.lhs.true408
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_85
# %bb.82:                               # %land.lhs.true414
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB47_85
# %bb.83:                               # %land.lhs.true419
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB47_86
.LBB47_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB47_86:                              # %if.end427
	movl	$0, -84(%rbp)
	movl	-192(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB47_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_91 Depth 2
                                        #       Child Loop BB47_95 Depth 3
                                        #         Child Loop BB47_101 Depth 4
                                        #           Child Loop BB47_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB47_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB47_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -96(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-156(%rbp), %eax
	movq	mvbits, %rdx
	movl	-96(%rbp), %esi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-104(%rbp), %edi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB47_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB47_87 Depth=1
	jmp	.LBB47_119
.LBB47_90:                              # %if.end456
                                        #   in Loop: Header=BB47_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -108(%rbp)
.LBB47_91:                              # %for.cond457
                                        #   Parent Loop BB47_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_95 Depth 3
                                        #         Child Loop BB47_101 Depth 4
                                        #           Child Loop BB47_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-132(%rbp), %ecx
	jge	.LBB47_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB47_91 Depth=2
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB47_93:                              # %land.end463
                                        #   in Loop: Header=BB47_91 Depth=2
	testb	$1, %al
	jne	.LBB47_94
	jmp	.LBB47_114
.LBB47_94:                              # %for.body465
                                        #   in Loop: Header=BB47_91 Depth=2
	movl	-144(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-104(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB47_95:                              # %for.cond469
                                        #   Parent Loop BB47_87 Depth=1
                                        #     Parent Loop BB47_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_101 Depth 4
                                        #           Child Loop BB47_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB47_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB47_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-148(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-96(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB47_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB47_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB47_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB47_91 Depth=2
	movl	$1, -108(%rbp)
	jmp	.LBB47_112
.LBB47_99:                              # %if.end636
                                        #   in Loop: Header=BB47_95 Depth=3
	jmp	.LBB47_109
.LBB47_100:                             # %if.else637
                                        #   in Loop: Header=BB47_95 Depth=3
	movl	$0, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB47_101:                             # %for.cond638
                                        #   Parent Loop BB47_87 Depth=1
                                        #     Parent Loop BB47_91 Depth=2
                                        #       Parent Loop BB47_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB47_103 Depth 5
	cmpl	$4, -80(%rbp)
	jge	.LBB47_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB47_101 Depth=4
	movl	$0, -76(%rbp)
.LBB47_103:                             # %for.cond642
                                        #   Parent Loop BB47_87 Depth=1
                                        #     Parent Loop BB47_91 Depth=2
                                        #       Parent Loop BB47_95 Depth=3
                                        #         Parent Loop BB47_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -76(%rbp)
	jge	.LBB47_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB47_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB47_103 Depth=5
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB47_103
.LBB47_106:                             # %for.end657
                                        #   in Loop: Header=BB47_101 Depth=4
	jmp	.LBB47_107
.LBB47_107:                             # %for.inc658
                                        #   in Loop: Header=BB47_101 Depth=4
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB47_101
.LBB47_108:                             # %for.end660
                                        #   in Loop: Header=BB47_95 Depth=3
	jmp	.LBB47_109
.LBB47_109:                             # %if.end661
                                        #   in Loop: Header=BB47_95 Depth=3
	jmp	.LBB47_110
.LBB47_110:                             # %for.inc662
                                        #   in Loop: Header=BB47_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_95
.LBB47_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB47_91 Depth=2
	jmp	.LBB47_112
.LBB47_112:                             # %for.end664
                                        #   in Loop: Header=BB47_91 Depth=2
	jmp	.LBB47_113
.LBB47_113:                             # %for.inc665
                                        #   in Loop: Header=BB47_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB47_91
.LBB47_114:                             # %for.end667
                                        #   in Loop: Header=BB47_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB47_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB47_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-100(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB47_116:                             # %if.end675
                                        #   in Loop: Header=BB47_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB47_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB47_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB47_118:                             # %if.end679
                                        #   in Loop: Header=BB47_87 Depth=1
	jmp	.LBB47_119
.LBB47_119:                             # %for.inc680
                                        #   in Loop: Header=BB47_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB47_87
.LBB47_120:                             # %for.end682
	cmpl	$0, -84(%rbp)
	je	.LBB47_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB47_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$61633483, -200(%rbp)   # imm = 0x3AC73CB
	jne	.LBB47_124
.LBB47_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_123
.Lfunc_end47:
	.size	SubPelBlockMotionSearch.22, .Lfunc_end47-SubPelBlockMotionSearch.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.23
.LCPI48_0:
	.quad	4602678819172646912     # double 0.5
.LCPI48_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.23
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.23,@function
SubPelBlockSearchBiPred.23:             # @SubPelBlockSearchBiPred.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI48_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI48_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$607448002, -200(%rbp)  # imm = 0x2434EBC2
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -120(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -152(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -170(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB48_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB48_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB48_4
.LBB48_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB48_4:                               # %cond.end
	jmp	.LBB48_6
.LBB48_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB48_6:                               # %cond.end18
	movw	%ax, -172(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB48_10
.LBB48_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB48_10
.LBB48_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -114(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB48_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB48_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB48_14
.LBB48_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB48_14:                              # %cond.end55
	jmp	.LBB48_16
.LBB48_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB48_16
.LBB48_16:                              # %cond.end58
	movw	%ax, -36(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB48_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB48_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB48_20
.LBB48_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB48_20:                              # %cond.end82
	jmp	.LBB48_22
.LBB48_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB48_22
.LBB48_22:                              # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB48_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB48_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB48_26
.LBB48_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB48_26:                              # %cond.end106
	jmp	.LBB48_28
.LBB48_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB48_28
.LBB48_28:                              # %cond.end109
	movw	%ax, -176(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB48_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB48_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB48_32
.LBB48_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB48_32:                              # %cond.end130
	jmp	.LBB48_34
.LBB48_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB48_34
.LBB48_34:                              # %cond.end133
	movw	%ax, -174(%rbp)
	movswl	-174(%rbp), %eax
	movswl	-176(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -34(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB48_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB48_37
.LBB48_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB48_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB48_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB48_40
.LBB48_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB48_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-120(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-152(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB48_45
# %bb.41:                               # %land.lhs.true197
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_45
# %bb.42:                               # %land.lhs.true205
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB48_45
# %bb.43:                               # %land.lhs.true211
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB48_46
.LBB48_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB48_46:                              # %if.end
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB48_51
# %bb.47:                               # %land.lhs.true224
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_51
# %bb.48:                               # %land.lhs.true232
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB48_51
# %bb.49:                               # %land.lhs.true238
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB48_52
.LBB48_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB48_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-170(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB48_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_55 Depth 2
                                        #       Child Loop BB48_60 Depth 3
                                        #         Child Loop BB48_162 Depth 4
                                        #           Child Loop BB48_164 Depth 5
                                        #       Child Loop BB48_175 Depth 3
                                        #         Child Loop BB48_181 Depth 4
                                        #           Child Loop BB48_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-172(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB48_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB48_55:                              # %for.cond283
                                        #   Parent Loop BB48_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_60 Depth 3
                                        #         Child Loop BB48_162 Depth 4
                                        #           Child Loop BB48_164 Depth 5
                                        #       Child Loop BB48_175 Depth 3
                                        #         Child Loop BB48_181 Depth 4
                                        #           Child Loop BB48_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB48_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB48_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_57:                              # %land.end
                                        #   in Loop: Header=BB48_55 Depth=2
	testb	$1, %al
	jne	.LBB48_58
	jmp	.LBB48_195
.LBB48_58:                              # %for.body289
                                        #   in Loop: Header=BB48_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB48_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB48_55 Depth=2
	movw	$0, -40(%rbp)
.LBB48_60:                              # %for.cond304
                                        #   Parent Loop BB48_53 Depth=1
                                        #     Parent Loop BB48_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_162 Depth 4
                                        #           Child Loop BB48_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB48_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_67
.LBB48_63:                              # %cond.false345
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_66
.LBB48_65:                              # %cond.false369
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_66:                              # %cond.end389
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_67:                              # %cond.end391
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_73
.LBB48_69:                              # %cond.false421
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_72
.LBB48_71:                              # %cond.false448
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_72:                              # %cond.end470
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_73:                              # %cond.end472
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_79
.LBB48_75:                              # %cond.false505
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_78
.LBB48_77:                              # %cond.false532
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_78:                              # %cond.end554
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_79:                              # %cond.end556
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_85
.LBB48_81:                              # %cond.false589
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_84
.LBB48_83:                              # %cond.false616
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_84:                              # %cond.end638
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_85:                              # %cond.end640
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_91
.LBB48_87:                              # %cond.false681
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_90
.LBB48_89:                              # %cond.false706
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_90:                              # %cond.end726
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_91:                              # %cond.end728
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_97
.LBB48_93:                              # %cond.false759
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_96
.LBB48_95:                              # %cond.false786
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_96:                              # %cond.end808
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_97:                              # %cond.end810
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_103
.LBB48_99:                              # %cond.false843
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_102
.LBB48_101:                             # %cond.false870
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_102:                             # %cond.end892
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_103:                             # %cond.end894
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_109
.LBB48_105:                             # %cond.false927
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_108
.LBB48_107:                             # %cond.false954
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_108:                             # %cond.end976
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_109:                             # %cond.end978
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_115
.LBB48_111:                             # %cond.false1019
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_114
.LBB48_113:                             # %cond.false1044
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_114:                             # %cond.end1064
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_115:                             # %cond.end1066
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_121
.LBB48_117:                             # %cond.false1097
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_120
.LBB48_119:                             # %cond.false1124
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_120:                             # %cond.end1146
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_121:                             # %cond.end1148
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_127
.LBB48_123:                             # %cond.false1181
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_126
.LBB48_125:                             # %cond.false1208
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_126:                             # %cond.end1230
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_127:                             # %cond.end1232
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_133
.LBB48_129:                             # %cond.false1265
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_132
.LBB48_131:                             # %cond.false1292
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_132:                             # %cond.end1314
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_133:                             # %cond.end1316
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_139
.LBB48_135:                             # %cond.false1357
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_138
.LBB48_137:                             # %cond.false1382
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_138:                             # %cond.end1402
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_139:                             # %cond.end1404
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_145
.LBB48_141:                             # %cond.false1435
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_144
.LBB48_143:                             # %cond.false1462
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_144:                             # %cond.end1484
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_145:                             # %cond.end1486
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_151
.LBB48_147:                             # %cond.false1519
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_150
.LBB48_149:                             # %cond.false1546
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_150:                             # %cond.end1568
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_151:                             # %cond.end1570
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB48_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_157
.LBB48_153:                             # %cond.false1603
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB48_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_156
.LBB48_155:                             # %cond.false1630
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_156:                             # %cond.end1652
                                        #   in Loop: Header=BB48_60 Depth=3
.LBB48_157:                             # %cond.end1654
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB48_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB48_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB48_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB48_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB48_173
.LBB48_160:                             # %if.end1673
                                        #   in Loop: Header=BB48_60 Depth=3
	jmp	.LBB48_170
.LBB48_161:                             # %if.else1674
                                        #   in Loop: Header=BB48_60 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB48_162:                             # %for.cond1675
                                        #   Parent Loop BB48_53 Depth=1
                                        #     Parent Loop BB48_55 Depth=2
                                        #       Parent Loop BB48_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB48_164 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB48_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB48_162 Depth=4
	movl	$0, -96(%rbp)
.LBB48_164:                             # %for.cond1679
                                        #   Parent Loop BB48_53 Depth=1
                                        #     Parent Loop BB48_55 Depth=2
                                        #       Parent Loop BB48_60 Depth=3
                                        #         Parent Loop BB48_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB48_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB48_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB48_164 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB48_164
.LBB48_167:                             # %for.end
                                        #   in Loop: Header=BB48_162 Depth=4
	jmp	.LBB48_168
.LBB48_168:                             # %for.inc1694
                                        #   in Loop: Header=BB48_162 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB48_162
.LBB48_169:                             # %for.end1696
                                        #   in Loop: Header=BB48_60 Depth=3
	jmp	.LBB48_170
.LBB48_170:                             # %if.end1697
                                        #   in Loop: Header=BB48_60 Depth=3
	jmp	.LBB48_171
.LBB48_171:                             # %for.inc1698
                                        #   in Loop: Header=BB48_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB48_60
.LBB48_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB48_55 Depth=2
	jmp	.LBB48_173
.LBB48_173:                             # %for.end1702
                                        #   in Loop: Header=BB48_55 Depth=2
	jmp	.LBB48_193
.LBB48_174:                             # %if.else1703
                                        #   in Loop: Header=BB48_55 Depth=2
	movw	$0, -40(%rbp)
.LBB48_175:                             # %for.cond1704
                                        #   Parent Loop BB48_53 Depth=1
                                        #     Parent Loop BB48_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_181 Depth 4
                                        #           Child Loop BB48_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB48_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB48_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB48_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB48_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB48_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB48_192
.LBB48_179:                             # %if.end2054
                                        #   in Loop: Header=BB48_175 Depth=3
	jmp	.LBB48_189
.LBB48_180:                             # %if.else2055
                                        #   in Loop: Header=BB48_175 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB48_181:                             # %for.cond2056
                                        #   Parent Loop BB48_53 Depth=1
                                        #     Parent Loop BB48_55 Depth=2
                                        #       Parent Loop BB48_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB48_183 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB48_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB48_181 Depth=4
	movl	$0, -96(%rbp)
.LBB48_183:                             # %for.cond2060
                                        #   Parent Loop BB48_53 Depth=1
                                        #     Parent Loop BB48_55 Depth=2
                                        #       Parent Loop BB48_175 Depth=3
                                        #         Parent Loop BB48_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB48_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB48_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB48_183 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB48_183
.LBB48_186:                             # %for.end2077
                                        #   in Loop: Header=BB48_181 Depth=4
	jmp	.LBB48_187
.LBB48_187:                             # %for.inc2078
                                        #   in Loop: Header=BB48_181 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB48_181
.LBB48_188:                             # %for.end2080
                                        #   in Loop: Header=BB48_175 Depth=3
	jmp	.LBB48_189
.LBB48_189:                             # %if.end2081
                                        #   in Loop: Header=BB48_175 Depth=3
	jmp	.LBB48_190
.LBB48_190:                             # %for.inc2082
                                        #   in Loop: Header=BB48_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB48_175
.LBB48_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB48_55 Depth=2
	jmp	.LBB48_192
.LBB48_192:                             # %for.end2086
                                        #   in Loop: Header=BB48_55 Depth=2
	jmp	.LBB48_193
.LBB48_193:                             # %if.end2087
                                        #   in Loop: Header=BB48_55 Depth=2
	jmp	.LBB48_194
.LBB48_194:                             # %for.inc2088
                                        #   in Loop: Header=BB48_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB48_55
.LBB48_195:                             # %for.end2092
                                        #   in Loop: Header=BB48_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB48_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB48_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB48_197:                             # %if.end2101
                                        #   in Loop: Header=BB48_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB48_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB48_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB48_199:                             # %if.end2107
                                        #   in Loop: Header=BB48_53 Depth=1
	jmp	.LBB48_200
.LBB48_200:                             # %for.inc2108
                                        #   in Loop: Header=BB48_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB48_53
.LBB48_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB48_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB48_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB48_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB48_205:                             # %if.end2129
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB48_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB48_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB48_211
.LBB48_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB48_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-196(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB48_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_214 Depth 2
                                        #       Child Loop BB48_219 Depth 3
                                        #         Child Loop BB48_321 Depth 4
                                        #           Child Loop BB48_323 Depth 5
                                        #       Child Loop BB48_334 Depth 3
                                        #         Child Loop BB48_340 Depth 4
                                        #           Child Loop BB48_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB48_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB48_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB48_214:                             # %for.cond2194
                                        #   Parent Loop BB48_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_219 Depth 3
                                        #         Child Loop BB48_321 Depth 4
                                        #           Child Loop BB48_323 Depth 5
                                        #       Child Loop BB48_334 Depth 3
                                        #         Child Loop BB48_340 Depth 4
                                        #           Child Loop BB48_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB48_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB48_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB48_216:                             # %land.end2202
                                        #   in Loop: Header=BB48_214 Depth=2
	testb	$1, %al
	jne	.LBB48_217
	jmp	.LBB48_354
.LBB48_217:                             # %for.body2203
                                        #   in Loop: Header=BB48_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB48_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB48_214 Depth=2
	movw	$0, -40(%rbp)
.LBB48_219:                             # %for.cond2218
                                        #   Parent Loop BB48_212 Depth=1
                                        #     Parent Loop BB48_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_321 Depth 4
                                        #           Child Loop BB48_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB48_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_226
.LBB48_222:                             # %cond.false2261
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_225
.LBB48_224:                             # %cond.false2286
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_225:                             # %cond.end2306
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_226:                             # %cond.end2308
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_232
.LBB48_228:                             # %cond.false2339
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_231
.LBB48_230:                             # %cond.false2366
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_231:                             # %cond.end2388
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_232:                             # %cond.end2390
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_238
.LBB48_234:                             # %cond.false2423
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_237
.LBB48_236:                             # %cond.false2450
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_237:                             # %cond.end2472
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_238:                             # %cond.end2474
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_244
.LBB48_240:                             # %cond.false2507
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_243
.LBB48_242:                             # %cond.false2534
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_243:                             # %cond.end2556
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_244:                             # %cond.end2558
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_250
.LBB48_246:                             # %cond.false2599
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_249
.LBB48_248:                             # %cond.false2624
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_249:                             # %cond.end2644
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_250:                             # %cond.end2646
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_256
.LBB48_252:                             # %cond.false2677
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_255
.LBB48_254:                             # %cond.false2704
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_255:                             # %cond.end2726
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_256:                             # %cond.end2728
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_262
.LBB48_258:                             # %cond.false2761
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_261
.LBB48_260:                             # %cond.false2788
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_261:                             # %cond.end2810
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_262:                             # %cond.end2812
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_268
.LBB48_264:                             # %cond.false2845
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_267
.LBB48_266:                             # %cond.false2872
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_267:                             # %cond.end2894
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_268:                             # %cond.end2896
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_274
.LBB48_270:                             # %cond.false2937
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_273
.LBB48_272:                             # %cond.false2962
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_273:                             # %cond.end2982
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_274:                             # %cond.end2984
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_280
.LBB48_276:                             # %cond.false3015
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_279
.LBB48_278:                             # %cond.false3042
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_279:                             # %cond.end3064
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_280:                             # %cond.end3066
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_286
.LBB48_282:                             # %cond.false3099
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_285
.LBB48_284:                             # %cond.false3126
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_285:                             # %cond.end3148
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_286:                             # %cond.end3150
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_292
.LBB48_288:                             # %cond.false3183
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_291
.LBB48_290:                             # %cond.false3210
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_291:                             # %cond.end3232
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_292:                             # %cond.end3234
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_298
.LBB48_294:                             # %cond.false3275
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_297
.LBB48_296:                             # %cond.false3300
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_297:                             # %cond.end3320
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_298:                             # %cond.end3322
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_304
.LBB48_300:                             # %cond.false3353
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_303
.LBB48_302:                             # %cond.false3380
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_303:                             # %cond.end3402
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_304:                             # %cond.end3404
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_310
.LBB48_306:                             # %cond.false3437
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_309
.LBB48_308:                             # %cond.false3464
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_309:                             # %cond.end3486
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_310:                             # %cond.end3488
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB48_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB48_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB48_316
.LBB48_312:                             # %cond.false3521
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB48_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB48_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB48_315
.LBB48_314:                             # %cond.false3548
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB48_315:                             # %cond.end3570
                                        #   in Loop: Header=BB48_219 Depth=3
.LBB48_316:                             # %cond.end3572
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB48_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB48_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB48_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB48_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB48_332
.LBB48_319:                             # %if.end3593
                                        #   in Loop: Header=BB48_219 Depth=3
	jmp	.LBB48_329
.LBB48_320:                             # %if.else3594
                                        #   in Loop: Header=BB48_219 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB48_321:                             # %for.cond3595
                                        #   Parent Loop BB48_212 Depth=1
                                        #     Parent Loop BB48_214 Depth=2
                                        #       Parent Loop BB48_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB48_323 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB48_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB48_321 Depth=4
	movl	$0, -96(%rbp)
.LBB48_323:                             # %for.cond3599
                                        #   Parent Loop BB48_212 Depth=1
                                        #     Parent Loop BB48_214 Depth=2
                                        #       Parent Loop BB48_219 Depth=3
                                        #         Parent Loop BB48_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB48_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB48_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB48_323 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB48_323
.LBB48_326:                             # %for.end3616
                                        #   in Loop: Header=BB48_321 Depth=4
	jmp	.LBB48_327
.LBB48_327:                             # %for.inc3617
                                        #   in Loop: Header=BB48_321 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB48_321
.LBB48_328:                             # %for.end3619
                                        #   in Loop: Header=BB48_219 Depth=3
	jmp	.LBB48_329
.LBB48_329:                             # %if.end3620
                                        #   in Loop: Header=BB48_219 Depth=3
	jmp	.LBB48_330
.LBB48_330:                             # %for.inc3621
                                        #   in Loop: Header=BB48_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB48_219
.LBB48_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB48_214 Depth=2
	jmp	.LBB48_332
.LBB48_332:                             # %for.end3625
                                        #   in Loop: Header=BB48_214 Depth=2
	jmp	.LBB48_352
.LBB48_333:                             # %if.else3626
                                        #   in Loop: Header=BB48_214 Depth=2
	movw	$0, -40(%rbp)
.LBB48_334:                             # %for.cond3627
                                        #   Parent Loop BB48_212 Depth=1
                                        #     Parent Loop BB48_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_340 Depth 4
                                        #           Child Loop BB48_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB48_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB48_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB48_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB48_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB48_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB48_351
.LBB48_338:                             # %if.end3978
                                        #   in Loop: Header=BB48_334 Depth=3
	jmp	.LBB48_348
.LBB48_339:                             # %if.else3979
                                        #   in Loop: Header=BB48_334 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB48_340:                             # %for.cond3980
                                        #   Parent Loop BB48_212 Depth=1
                                        #     Parent Loop BB48_214 Depth=2
                                        #       Parent Loop BB48_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB48_342 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB48_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB48_340 Depth=4
	movl	$0, -96(%rbp)
.LBB48_342:                             # %for.cond3984
                                        #   Parent Loop BB48_212 Depth=1
                                        #     Parent Loop BB48_214 Depth=2
                                        #       Parent Loop BB48_334 Depth=3
                                        #         Parent Loop BB48_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB48_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB48_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB48_342 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB48_342
.LBB48_345:                             # %for.end4001
                                        #   in Loop: Header=BB48_340 Depth=4
	jmp	.LBB48_346
.LBB48_346:                             # %for.inc4002
                                        #   in Loop: Header=BB48_340 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB48_340
.LBB48_347:                             # %for.end4004
                                        #   in Loop: Header=BB48_334 Depth=3
	jmp	.LBB48_348
.LBB48_348:                             # %if.end4005
                                        #   in Loop: Header=BB48_334 Depth=3
	jmp	.LBB48_349
.LBB48_349:                             # %for.inc4006
                                        #   in Loop: Header=BB48_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB48_334
.LBB48_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB48_214 Depth=2
	jmp	.LBB48_351
.LBB48_351:                             # %for.end4010
                                        #   in Loop: Header=BB48_214 Depth=2
	jmp	.LBB48_352
.LBB48_352:                             # %if.end4011
                                        #   in Loop: Header=BB48_214 Depth=2
	jmp	.LBB48_353
.LBB48_353:                             # %for.inc4012
                                        #   in Loop: Header=BB48_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB48_214
.LBB48_354:                             # %for.end4016
                                        #   in Loop: Header=BB48_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB48_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB48_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB48_356:                             # %if.end4026
                                        #   in Loop: Header=BB48_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB48_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB48_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB48_358:                             # %if.end4032
                                        #   in Loop: Header=BB48_212 Depth=1
	jmp	.LBB48_359
.LBB48_359:                             # %for.inc4033
                                        #   in Loop: Header=BB48_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB48_212
.LBB48_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB48_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB48_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$607448002, -200(%rbp)  # imm = 0x2434EBC2
	jne	.LBB48_364
.LBB48_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_363
.Lfunc_end48:
	.size	SubPelBlockSearchBiPred.23, .Lfunc_end48-SubPelBlockSearchBiPred.23
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.24 # -- Begin function InitializeFastFullIntegerSearch.24
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.24,@function
InitializeFastFullIntegerSearch.24:     # @InitializeFastFullIntegerSearch.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1652774347, -24(%rbp)  # imm = 0x628355CB
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB49_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB49_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB49_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_7 Depth 2
                                        #       Child Loop BB49_11 Depth 3
                                        #         Child Loop BB49_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB49_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB49_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB49_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB49_6:                               # %if.end12
                                        #   in Loop: Header=BB49_3 Depth=1
	movl	$0, -8(%rbp)
.LBB49_7:                               # %for.cond13
                                        #   Parent Loop BB49_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_11 Depth 3
                                        #         Child Loop BB49_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB49_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB49_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB49_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB49_10:                              # %if.end26
                                        #   in Loop: Header=BB49_7 Depth=2
	movl	$1, -16(%rbp)
.LBB49_11:                              # %for.cond27
                                        #   Parent Loop BB49_3 Depth=1
                                        #     Parent Loop BB49_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_15 Depth 4
	cmpl	$8, -16(%rbp)
	jge	.LBB49_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB49_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB49_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB49_14:                              # %if.end41
                                        #   in Loop: Header=BB49_11 Depth=3
	movl	$0, -20(%rbp)
.LBB49_15:                              # %for.cond42
                                        #   Parent Loop BB49_3 Depth=1
                                        #     Parent Loop BB49_7 Depth=2
                                        #       Parent Loop BB49_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB49_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB49_15 Depth=4
	movslq	-28(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB49_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB49_18:                              # %if.end60
                                        #   in Loop: Header=BB49_15 Depth=4
	jmp	.LBB49_19
.LBB49_19:                              # %for.inc
                                        #   in Loop: Header=BB49_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_15
.LBB49_20:                              # %for.end
                                        #   in Loop: Header=BB49_11 Depth=3
	jmp	.LBB49_21
.LBB49_21:                              # %for.inc61
                                        #   in Loop: Header=BB49_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_11
.LBB49_22:                              # %for.end63
                                        #   in Loop: Header=BB49_7 Depth=2
	jmp	.LBB49_23
.LBB49_23:                              # %for.inc64
                                        #   in Loop: Header=BB49_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_7
.LBB49_24:                              # %for.end66
                                        #   in Loop: Header=BB49_3 Depth=1
	jmp	.LBB49_25
.LBB49_25:                              # %for.inc67
                                        #   in Loop: Header=BB49_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_3
.LBB49_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB49_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB49_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB49_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB49_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB49_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB49_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB49_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB49_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB49_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB49_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB49_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB49_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB49_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB49_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB49_40:                              # %if.end109
                                        #   in Loop: Header=BB49_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB49_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB49_42:                              # %if.end120
                                        #   in Loop: Header=BB49_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB49_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB49_44:                              # %if.end131
                                        #   in Loop: Header=BB49_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB49_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB49_46:                              # %if.end142
                                        #   in Loop: Header=BB49_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB49_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB49_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB49_48:                              # %if.end153
                                        #   in Loop: Header=BB49_37 Depth=1
	jmp	.LBB49_49
.LBB49_49:                              # %for.inc154
                                        #   in Loop: Header=BB49_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_37
.LBB49_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB49_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB49_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB49_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB49_52 Depth=1
	movl	$0, -8(%rbp)
.LBB49_54:                              # %for.cond164
                                        #   Parent Loop BB49_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB49_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB49_54 Depth=2
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB49_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_54
.LBB49_57:                              # %for.end175
                                        #   in Loop: Header=BB49_52 Depth=1
	jmp	.LBB49_58
.LBB49_58:                              # %for.inc176
                                        #   in Loop: Header=BB49_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_52
.LBB49_59:                              # %for.end178
	jmp	.LBB49_69
.LBB49_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB49_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB49_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB49_61 Depth=1
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB49_63:                              # %for.cond191
                                        #   Parent Loop BB49_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB49_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB49_63 Depth=2
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB49_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_63
.LBB49_66:                              # %for.end202
                                        #   in Loop: Header=BB49_61 Depth=1
	jmp	.LBB49_67
.LBB49_67:                              # %for.inc203
                                        #   in Loop: Header=BB49_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_61
.LBB49_68:                              # %for.end205
	jmp	.LBB49_69
.LBB49_69:                              # %if.end206
	cmpl	$1652774347, -24(%rbp)  # imm = 0x628355CB
	jne	.LBB49_71
.LBB49_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_70
.Lfunc_end49:
	.size	InitializeFastFullIntegerSearch.24, .Lfunc_end49-InitializeFastFullIntegerSearch.24
	.cfi_endproc
                                        # -- End function
	.globl	SATD.25                 # -- Begin function SATD.25
	.p2align	4, 0x90
	.type	SATD.25,@function
SATD.25:                                # @SATD.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$154831581, -184(%rbp)  # imm = 0x93A8ADD
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB50_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB50_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB50_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB50_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB50_6
.LBB50_5:                               # %cond.false
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-100(%rbp), %eax
.LBB50_6:                               # %cond.end
                                        #   in Loop: Header=BB50_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB50_2
.LBB50_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_14
.LBB50_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB50_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB50_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB50_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB50_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_10
.LBB50_13:                              # %for.end270
	jmp	.LBB50_14
.LBB50_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$154831581, -184(%rbp)  # imm = 0x93A8ADD
	jne	.LBB50_16
.LBB50_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_15
.Lfunc_end50:
	.size	SATD.25, .Lfunc_end50-SATD.25
	.cfi_endproc
                                        # -- End function
	.globl	sign.26                 # -- Begin function sign.26
	.p2align	4, 0x90
	.type	sign.26,@function
sign.26:                                # @sign.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$513933528, -28(%rbp)   # imm = 0x1EA200D8
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB51_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB51_3
.LBB51_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB51_3:                               # %cond.end
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB51_5
# %bb.4:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_6
.LBB51_5:                               # %if.else
	xorl	%eax, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB51_6:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$513933528, -28(%rbp)   # imm = 0x1EA200D8
	jne	.LBB51_8
.LBB51_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_7
.Lfunc_end51:
	.size	sign.26, .Lfunc_end51-sign.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.27
.LCPI52_0:
	.quad	4611686018427387904     # double 2
.LCPI52_1:
	.quad	4607182418800017408     # double 1
.LCPI52_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI52_4:
	.quad	4620693217682128896     # double 8
.LCPI52_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI52_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.27
	.p2align	4, 0x90
	.type	BlockMotionSearch.27,@function
BlockMotionSearch.27:                   # @BlockMotionSearch.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$948662781, -212(%rbp)  # imm = 0x388B71FD
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -180(%rbp)
	movl	%ecx, -192(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-192(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-192(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-256(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB52_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB52_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB52_4
.LBB52_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB52_4
.LBB52_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB52_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB52_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB52_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB52_6 Depth=1
	movl	$0, -64(%rbp)
.LBB52_8:                               # %for.cond24
                                        #   Parent Loop BB52_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB52_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB52_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB52_8
.LBB52_11:                              # %for.end
                                        #   in Loop: Header=BB52_6 Depth=1
	jmp	.LBB52_12
.LBB52_12:                              # %for.inc37
                                        #   in Loop: Header=BB52_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB52_6
.LBB52_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB52_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB52_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB52_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB52_18
.LBB52_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB52_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB52_37
.LBB52_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB52_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB52_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB52_23
.LBB52_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB52_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB52_36
.LBB52_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB52_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB52_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB52_28
.LBB52_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB52_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB52_35
.LBB52_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB52_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB52_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB52_33
.LBB52_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB52_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB52_34:                              # %if.end276
	jmp	.LBB52_35
.LBB52_35:                              # %if.end277
	jmp	.LBB52_36
.LBB52_36:                              # %if.end278
	jmp	.LBB52_37
.LBB52_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB52_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB52_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB52_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB52_43
.LBB52_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB52_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB52_62
.LBB52_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB52_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB52_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB52_48
.LBB52_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB52_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB52_61
.LBB52_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB52_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB52_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB52_53
.LBB52_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB52_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB52_60
.LBB52_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB52_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB52_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB52_58
.LBB52_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB52_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB52_59:                              # %if.end524
	jmp	.LBB52_60
.LBB52_60:                              # %if.end525
	jmp	.LBB52_61
.LBB52_61:                              # %if.end526
	jmp	.LBB52_62
.LBB52_62:                              # %if.end527
	jmp	.LBB52_63
.LBB52_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB52_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB52_66
.LBB52_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB52_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB52_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB52_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB52_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB52_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB52_73
.LBB52_72:                              # %cond.false626
	vmovsd	.LCPI52_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB52_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB52_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB52_76
.LBB52_75:                              # %cond.false655
	vmovsd	.LCPI52_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB52_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB52_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB52_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB52_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB52_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB52_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB52_83
.LBB52_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB52_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB52_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB52_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB52_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB52_92
.LBB52_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB52_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB52_91
.LBB52_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB52_91:                              # %cond.end787
	vmovss	.LCPI52_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB52_92:                              # %if.end835
	jmp	.LBB52_106
.LBB52_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB52_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB52_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB52_97
.LBB52_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB52_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB52_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB52_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB52_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB52_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB52_104
.LBB52_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB52_104:                             # %cond.end940
	vmovss	.LCPI52_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB52_105:                             # %if.end988
	jmp	.LBB52_106
.LBB52_106:                             # %if.end989
	jmp	.LBB52_107
.LBB52_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB52_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB52_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	-132(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB52_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB52_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB52_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB52_114
.LBB52_113:                             # %cond.false1014
	movswl	-58(%rbp), %ecx
.LBB52_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB52_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB52_120
.LBB52_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB52_119
.LBB52_118:                             # %cond.false1027
	movswl	-58(%rbp), %ecx
.LBB52_119:                             # %cond.end1029
.LBB52_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -58(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB52_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB52_123
.LBB52_122:                             # %cond.false1039
	movswl	-60(%rbp), %ecx
.LBB52_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB52_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB52_129
.LBB52_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB52_128
.LBB52_127:                             # %cond.false1052
	movswl	-60(%rbp), %eax
.LBB52_128:                             # %cond.end1054
.LBB52_129:                             # %cond.end1056
	movw	%ax, -60(%rbp)
.LBB52_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB52_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB52_131 Depth=1
	movl	$0, -72(%rbp)
.LBB52_133:                             # %for.cond1066
                                        #   Parent Loop BB52_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB52_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB52_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB52_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB52_137
.LBB52_136:                             # %if.else1091
                                        #   in Loop: Header=BB52_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB52_137:                             # %if.end1109
                                        #   in Loop: Header=BB52_133 Depth=2
	jmp	.LBB52_138
.LBB52_138:                             # %for.inc1110
                                        #   in Loop: Header=BB52_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB52_133
.LBB52_139:                             # %for.end1112
                                        #   in Loop: Header=BB52_131 Depth=1
	jmp	.LBB52_140
.LBB52_140:                             # %for.inc1113
                                        #   in Loop: Header=BB52_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB52_131
.LBB52_141:                             # %for.end1115
	jmp	.LBB52_143
.LBB52_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB52_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB52_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB52_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB52_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB52_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB52_150
.LBB52_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB52_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB52_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB52_151 Depth=1
	movl	$0, -72(%rbp)
.LBB52_153:                             # %for.cond1139
                                        #   Parent Loop BB52_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB52_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB52_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB52_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB52_157
.LBB52_156:                             # %if.else1183
                                        #   in Loop: Header=BB52_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB52_157:                             # %if.end1220
                                        #   in Loop: Header=BB52_153 Depth=2
	jmp	.LBB52_158
.LBB52_158:                             # %for.inc1221
                                        #   in Loop: Header=BB52_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB52_153
.LBB52_159:                             # %for.end1223
                                        #   in Loop: Header=BB52_151 Depth=1
	jmp	.LBB52_160
.LBB52_160:                             # %for.inc1224
                                        #   in Loop: Header=BB52_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB52_151
.LBB52_161:                             # %for.end1226
	jmp	.LBB52_166
.LBB52_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB52_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB52_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB52_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB52_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB52_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB52_173
.LBB52_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI52_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI52_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB52_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -58(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -60(%rbp)
.LBB52_172:                             # %if.end1273
	jmp	.LBB52_173
.LBB52_173:                             # %if.end1274
	jmp	.LBB52_174
.LBB52_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB52_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -196(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -64(%rbp)
.LBB52_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB52_176 Depth=1
	movl	$0, -72(%rbp)
.LBB52_178:                             # %for.cond1290
                                        #   Parent Loop BB52_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB52_178 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB52_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB52_178
.LBB52_181:                             # %for.end1337
                                        #   in Loop: Header=BB52_176 Depth=1
	jmp	.LBB52_182
.LBB52_182:                             # %for.inc1338
                                        #   in Loop: Header=BB52_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB52_176
.LBB52_183:                             # %for.end1340
	jmp	.LBB52_193
.LBB52_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB52_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB52_185 Depth=1
	movl	$0, -72(%rbp)
.LBB52_187:                             # %for.cond1347
                                        #   Parent Loop BB52_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB52_187 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB52_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB52_187
.LBB52_190:                             # %for.end1380
                                        #   in Loop: Header=BB52_185 Depth=1
	jmp	.LBB52_191
.LBB52_191:                             # %for.inc1381
                                        #   in Loop: Header=BB52_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB52_185
.LBB52_192:                             # %for.end1383
	jmp	.LBB52_193
.LBB52_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB52_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB52_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB52_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB52_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB52_200
.LBB52_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB52_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-140(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movl	$0, -64(%rbp)
.LBB52_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB52_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB52_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB52_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB52_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -76(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -74(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB52_208
.LBB52_204:                             # %if.else1433
                                        #   in Loop: Header=BB52_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -148(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -146(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB52_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB52_201 Depth=1
	movw	-76(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-74(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -76(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -74(%rbp)
	jmp	.LBB52_207
.LBB52_206:                             # %if.else1441
                                        #   in Loop: Header=BB52_201 Depth=1
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
.LBB52_207:                             # %if.end1450
                                        #   in Loop: Header=BB52_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB52_208:                             # %if.end1452
                                        #   in Loop: Header=BB52_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-148(%rbp), %r11w
	movw	-146(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-136(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -136(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB52_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB52_201
.LBB52_210:                             # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB52_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB52_213:                             # %if.end1469
	vmovsd	.LCPI52_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB52_215
.LBB52_214:                             # %if.else1473
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
.LBB52_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB52_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB52_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI52_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB52_220
.LBB52_219:                             # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
.LBB52_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB52_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB52_221 Depth=1
	movl	$0, -72(%rbp)
.LBB52_223:                             # %for.cond1502
                                        #   Parent Loop BB52_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB52_223 Depth=2
	xorl	%eax, %eax
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB52_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB52_223
.LBB52_226:                             # %for.end1565
                                        #   in Loop: Header=BB52_221 Depth=1
	jmp	.LBB52_227
.LBB52_227:                             # %for.inc1566
                                        #   in Loop: Header=BB52_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB52_221
.LBB52_228:                             # %for.end1568
	jmp	.LBB52_229
.LBB52_229:                             # %if.end1569
	leaq	-240(%rbp), %rdi
	callq	ftime
	imulq	$1000, -240(%rbp), %rax # imm = 0x3E8
	movzwl	-232(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -256(%rbp), %rcx # imm = 0x3E8
	movzwl	-248(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -184(%rbp)
	movl	-184(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-184(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$948662781, -212(%rbp)  # imm = 0x388B71FD
	jne	.LBB52_231
.LBB52_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_230
.Lfunc_end52:
	.size	BlockMotionSearch.27, .Lfunc_end52-BlockMotionSearch.27
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.28 # -- Begin function FindSkipModeMotionVector.28
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.28,@function
FindSkipModeMotionVector.28:            # @FindSkipModeMotionVector.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1240852160, -56(%rbp)  # imm = 0x49F5E6C0
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB53_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB53_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB53_4
# %bb.3:                                # %if.then24
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB53_4:                               # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB53_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB53_7
# %bb.6:                                # %if.then34
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB53_7:                               # %if.end36
	jmp	.LBB53_8
.LBB53_8:                               # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB53_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB53_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB53_12
# %bb.11:                               # %if.then69
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
.LBB53_12:                              # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB53_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB53_15
# %bb.14:                               # %if.then82
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB53_15:                              # %if.end85
	jmp	.LBB53_16
.LBB53_16:                              # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB53_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB53_22
.LBB53_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB53_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB53_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB53_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB53_22:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB53_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB53_28
.LBB53_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -20(%rbp)
	jne	.LBB53_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB53_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB53_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB53_28:                              # %cond.end130
	movl	%ecx, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB53_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	je	.LBB53_39
.LBB53_30:                              # %if.then134
	movl	$0, -8(%rbp)
.LBB53_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB53_31 Depth=1
	movl	$0, -4(%rbp)
.LBB53_33:                              # %for.cond137
                                        #   Parent Loop BB53_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB53_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB53_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_33
.LBB53_36:                              # %for.end
                                        #   in Loop: Header=BB53_31 Depth=1
	jmp	.LBB53_37
.LBB53_37:                              # %for.inc157
                                        #   in Loop: Header=BB53_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_31
.LBB53_38:                              # %for.end159
	jmp	.LBB53_48
.LBB53_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB53_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB53_40 Depth=1
	movl	$0, -4(%rbp)
.LBB53_42:                              # %for.cond166
                                        #   Parent Loop BB53_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB53_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB53_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_42
.LBB53_45:                              # %for.end190
                                        #   in Loop: Header=BB53_40 Depth=1
	jmp	.LBB53_46
.LBB53_46:                              # %for.inc191
                                        #   in Loop: Header=BB53_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_40
.LBB53_47:                              # %for.end193
	jmp	.LBB53_48
.LBB53_48:                              # %if.end194
	cmpl	$1240852160, -56(%rbp)  # imm = 0x49F5E6C0
	jne	.LBB53_50
.LBB53_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_49
.Lfunc_end53:
	.size	FindSkipModeMotionVector.28, .Lfunc_end53-FindSkipModeMotionVector.28
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.29 # -- Begin function FindSkipModeMotionVector.29
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.29,@function
FindSkipModeMotionVector.29:            # @FindSkipModeMotionVector.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1849783532, -52(%rbp)  # imm = 0x6E4174EC
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -112(%rbp)
	je	.LBB54_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_4
# %bb.3:                                # %if.then24
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
.LBB54_4:                               # %if.end
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_7
# %bb.6:                                # %if.then34
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB54_7:                               # %if.end36
	jmp	.LBB54_8
.LBB54_8:                               # %if.end37
	cmpl	$0, -88(%rbp)
	je	.LBB54_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_12
# %bb.11:                               # %if.then69
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
.LBB54_12:                              # %if.end72
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB54_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_15
# %bb.14:                               # %if.then82
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB54_15:                              # %if.end85
	jmp	.LBB54_16
.LBB54_16:                              # %if.end86
	cmpl	$0, -112(%rbp)
	jne	.LBB54_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB54_22
.LBB54_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -16(%rbp)
	jne	.LBB54_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB54_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB54_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB54_22:                              # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, -88(%rbp)
	jne	.LBB54_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB54_28
.LBB54_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -20(%rbp)
	jne	.LBB54_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB54_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -24(%rbp)
	sete	%al
.LBB54_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB54_28:                              # %cond.end130
	movl	%ecx, -56(%rbp)
	cmpl	$0, -56(%rbp)
	jne	.LBB54_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -60(%rbp)
	je	.LBB54_39
.LBB54_30:                              # %if.then134
	movl	$0, -4(%rbp)
.LBB54_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_33 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB54_31 Depth=1
	movl	$0, -8(%rbp)
.LBB54_33:                              # %for.cond137
                                        #   Parent Loop BB54_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB54_33 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB54_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_33
.LBB54_36:                              # %for.end
                                        #   in Loop: Header=BB54_31 Depth=1
	jmp	.LBB54_37
.LBB54_37:                              # %for.inc157
                                        #   in Loop: Header=BB54_31 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_31
.LBB54_38:                              # %for.end159
	jmp	.LBB54_48
.LBB54_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -4(%rbp)
.LBB54_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_42 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB54_40 Depth=1
	movl	$0, -8(%rbp)
.LBB54_42:                              # %for.cond166
                                        #   Parent Loop BB54_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB54_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB54_42 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_42
.LBB54_45:                              # %for.end190
                                        #   in Loop: Header=BB54_40 Depth=1
	jmp	.LBB54_46
.LBB54_46:                              # %for.inc191
                                        #   in Loop: Header=BB54_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_40
.LBB54_47:                              # %for.end193
	jmp	.LBB54_48
.LBB54_48:                              # %if.end194
	cmpl	$1849783532, -52(%rbp)  # imm = 0x6E4174EC
	jne	.LBB54_50
.LBB54_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_49
.Lfunc_end54:
	.size	FindSkipModeMotionVector.29, .Lfunc_end54-FindSkipModeMotionVector.29
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.30        # -- Begin function GetSkipCostMB.30
	.p2align	4, 0x90
	.type	GetSkipCostMB.30,@function
GetSkipCostMB.30:                       # @GetSkipCostMB.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$1307767029, -56(%rbp)  # imm = 0x4DF2F0F5
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
                                        #       Child Loop BB55_5 Depth 3
                                        #         Child Loop BB55_7 Depth 4
                                        #           Child Loop BB55_9 Depth 5
                                        #     Child Loop BB55_24 Depth 2
                                        #       Child Loop BB55_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB55_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB55_3:                               # %for.cond2
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_5 Depth 3
                                        #         Child Loop BB55_7 Depth 4
                                        #           Child Loop BB55_9 Depth 5
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB55_5:                               # %for.cond6
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_7 Depth 4
                                        #           Child Loop BB55_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %edi
	movl	-20(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB55_7:                               # %for.cond11
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_3 Depth=2
                                        #       Parent Loop BB55_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB55_9 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB55_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB55_7 Depth=4
	movl	$0, -16(%rbp)
.LBB55_9:                               # %for.cond14
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_3 Depth=2
                                        #       Parent Loop BB55_5 Depth=3
                                        #         Parent Loop BB55_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB55_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB55_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-24(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB55_9 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_9
.LBB55_12:                              # %for.end
                                        #   in Loop: Header=BB55_7 Depth=4
	jmp	.LBB55_13
.LBB55_13:                              # %for.inc39
                                        #   in Loop: Header=BB55_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_7
.LBB55_14:                              # %for.end41
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB55_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB55_17
.LBB55_16:                              # %if.then
                                        #   in Loop: Header=BB55_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB55_17:                              # %if.end
                                        #   in Loop: Header=BB55_5 Depth=3
	jmp	.LBB55_18
.LBB55_18:                              # %for.inc45
                                        #   in Loop: Header=BB55_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB55_5
.LBB55_19:                              # %for.end47
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_20
.LBB55_20:                              # %for.inc48
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_3
.LBB55_21:                              # %for.end50
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB55_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB55_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB55_24:                              # %for.cond58
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_26 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB55_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB55_24 Depth=2
	movl	$0, -16(%rbp)
.LBB55_26:                              # %for.cond62
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -16(%rbp)
	jge	.LBB55_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB55_26 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB55_26 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_26
.LBB55_29:                              # %for.end75
                                        #   in Loop: Header=BB55_24 Depth=2
	jmp	.LBB55_30
.LBB55_30:                              # %for.inc76
                                        #   in Loop: Header=BB55_24 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_24
.LBB55_31:                              # %for.end78
                                        #   in Loop: Header=BB55_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB55_32:                              # %if.end83
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_33
.LBB55_33:                              # %for.inc84
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB55_1
.LBB55_34:                              # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$1307767029, -56(%rbp)  # imm = 0x4DF2F0F5
	jne	.LBB55_36
.LBB55_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_35
.Lfunc_end55:
	.size	GetSkipCostMB.30, .Lfunc_end55-GetSkipCostMB.30
	.cfi_endproc
                                        # -- End function
	.globl	SATD.31                 # -- Begin function SATD.31
	.p2align	4, 0x90
	.type	SATD.31,@function
SATD.31:                                # @SATD.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$1975453024, -184(%rbp) # imm = 0x75BF0560
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB56_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB56_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB56_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB56_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB56_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB56_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB56_6
.LBB56_5:                               # %cond.false
                                        #   in Loop: Header=BB56_2 Depth=1
	movl	-100(%rbp), %eax
.LBB56_6:                               # %cond.end
                                        #   in Loop: Header=BB56_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB56_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB56_2
.LBB56_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_14
.LBB56_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB56_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB56_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB56_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB56_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_10
.LBB56_13:                              # %for.end270
	jmp	.LBB56_14
.LBB56_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$1975453024, -184(%rbp) # imm = 0x75BF0560
	jne	.LBB56_16
.LBB56_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_15
.Lfunc_end56:
	.size	SATD.31, .Lfunc_end56-SATD.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.32
.LCPI57_0:
	.quad	4602678819172646912     # double 0.5
.LCPI57_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.32
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.32,@function
FastFullPelBlockMotionSearch.32:        # @FastFullPelBlockMotionSearch.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI57_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1483985250, -76(%rbp)  # imm = 0x5873D162
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -72(%rbp)
	movl	%r9d, -84(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -68(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB57_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB57_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB57_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-48(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB57_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB57_5:                               # %if.end56
	jmp	.LBB57_6
.LBB57_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB57_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB57_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB57_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB57_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-48(%rbp), %eax
	movq	mvbits, %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-80(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB57_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB57_11:                              # %if.end85
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_12
.LBB57_12:                              # %if.end86
                                        #   in Loop: Header=BB57_7 Depth=1
	jmp	.LBB57_13
.LBB57_13:                              # %for.inc
                                        #   in Loop: Header=BB57_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB57_7
.LBB57_14:                              # %for.end
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-52(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1483985250, -76(%rbp)  # imm = 0x5873D162
	jne	.LBB57_16
.LBB57_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_15
.Lfunc_end57:
	.size	FastFullPelBlockMotionSearch.32, .Lfunc_end57-FastFullPelBlockMotionSearch.32
	.cfi_endproc
                                        # -- End function
	.globl	sign.33                 # -- Begin function sign.33
	.p2align	4, 0x90
	.type	sign.33,@function
sign.33:                                # @sign.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1069330526, -28(%rbp)  # imm = 0x3FBCB05E
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB58_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB58_3
.LBB58_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB58_3:                               # %cond.end
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB58_5
# %bb.4:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_6
.LBB58_5:                               # %if.else
	xorl	%eax, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB58_6:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1069330526, -28(%rbp)  # imm = 0x3FBCB05E
	jne	.LBB58_8
.LBB58_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_7
.Lfunc_end58:
	.size	sign.33, .Lfunc_end58-sign.33
	.cfi_endproc
                                        # -- End function
	.globl	sign.34                 # -- Begin function sign.34
	.p2align	4, 0x90
	.type	sign.34,@function
sign.34:                                # @sign.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1621837593, -28(%rbp)  # imm = 0x60AB4719
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB59_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB59_3
.LBB59_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB59_3:                               # %cond.end
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB59_5
# %bb.4:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_6
.LBB59_5:                               # %if.else
	xorl	%eax, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB59_6:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1621837593, -28(%rbp)  # imm = 0x60AB4719
	jne	.LBB59_8
.LBB59_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_7
.Lfunc_end59:
	.size	sign.34, .Lfunc_end59-sign.34
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.35     # -- Begin function BIDPartitionCost.35
	.p2align	4, 0x90
	.type	BIDPartitionCost.35,@function
BIDPartitionCost.35:                    # @BIDPartitionCost.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1836922606, -104(%rbp) # imm = 0x6D7D36EE
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB60_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB60_3
.LBB60_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB60_3
.LBB60_3:                               # %cond.end
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB60_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB60_6
.LBB60_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB60_6
.LBB60_6:                               # %cond.end17
	movl	%eax, -108(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB60_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB60_9
.LBB60_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB60_9
.LBB60_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB60_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB60_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB60_12:                              # %for.cond53
                                        #   Parent Loop BB60_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB60_12 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB60_12 Depth=2
	movl	-116(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_12
.LBB60_15:                              # %for.end
                                        #   in Loop: Header=BB60_10 Depth=1
	jmp	.LBB60_16
.LBB60_16:                              # %for.inc164
                                        #   in Loop: Header=BB60_10 Depth=1
	movl	-120(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_10
.LBB60_17:                              # %for.end166
	movl	-100(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB60_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_20 Depth 2
                                        #       Child Loop BB60_22 Depth 3
                                        #         Child Loop BB60_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB60_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB60_20:                              # %for.cond185
                                        #   Parent Loop BB60_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_22 Depth 3
                                        #         Child Loop BB60_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB60_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	-68(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-36(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB60_22:                              # %for.cond196
                                        #   Parent Loop BB60_18 Depth=1
                                        #     Parent Loop BB60_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_24 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB60_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB60_22 Depth=3
	movl	$0, -28(%rbp)
.LBB60_24:                              # %for.cond200
                                        #   Parent Loop BB60_18 Depth=1
                                        #     Parent Loop BB60_20 Depth=2
                                        #       Parent Loop BB60_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB60_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB60_24 Depth=4
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB60_24 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB60_24
.LBB60_27:                              # %for.end229
                                        #   in Loop: Header=BB60_22 Depth=3
	jmp	.LBB60_28
.LBB60_28:                              # %for.inc230
                                        #   in Loop: Header=BB60_22 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB60_22
.LBB60_29:                              # %for.end232
                                        #   in Loop: Header=BB60_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB60_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB60_32
.LBB60_31:                              # %if.then
                                        #   in Loop: Header=BB60_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB60_32:                              # %if.end
                                        #   in Loop: Header=BB60_20 Depth=2
	jmp	.LBB60_33
.LBB60_33:                              # %for.inc236
                                        #   in Loop: Header=BB60_20 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_20
.LBB60_34:                              # %for.end239
                                        #   in Loop: Header=BB60_18 Depth=1
	jmp	.LBB60_35
.LBB60_35:                              # %for.inc240
                                        #   in Loop: Header=BB60_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_18
.LBB60_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB60_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB60_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB60_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_41 Depth 2
                                        #       Child Loop BB60_43 Depth 3
                                        #         Child Loop BB60_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB60_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB60_39 Depth=1
	movl	$0, -44(%rbp)
.LBB60_41:                              # %for.cond257
                                        #   Parent Loop BB60_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_43 Depth 3
                                        #         Child Loop BB60_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB60_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB60_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB60_43:                              # %for.cond265
                                        #   Parent Loop BB60_39 Depth=1
                                        #     Parent Loop BB60_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_45 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB60_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB60_43 Depth=3
	movl	$0, -32(%rbp)
.LBB60_45:                              # %for.cond269
                                        #   Parent Loop BB60_39 Depth=1
                                        #     Parent Loop BB60_41 Depth=2
                                        #       Parent Loop BB60_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB60_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB60_45 Depth=4
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB60_45 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB60_45
.LBB60_48:                              # %for.end284
                                        #   in Loop: Header=BB60_43 Depth=3
	jmp	.LBB60_49
.LBB60_49:                              # %for.inc285
                                        #   in Loop: Header=BB60_43 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_43
.LBB60_50:                              # %for.end287
                                        #   in Loop: Header=BB60_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB60_41 Depth=2
	movl	-112(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB60_41
.LBB60_52:                              # %for.end294
                                        #   in Loop: Header=BB60_39 Depth=1
	jmp	.LBB60_53
.LBB60_53:                              # %for.inc295
                                        #   in Loop: Header=BB60_39 Depth=1
	movl	-108(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB60_39
.LBB60_54:                              # %for.end297
	jmp	.LBB60_55
.LBB60_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$1836922606, -104(%rbp) # imm = 0x6D7D36EE
	jne	.LBB60_57
.LBB60_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_56
.Lfunc_end60:
	.size	BIDPartitionCost.35, .Lfunc_end60-BIDPartitionCost.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.36
.LCPI61_0:
	.quad	4611686018427387904     # double 2
.LCPI61_1:
	.quad	4607182418800017408     # double 1
.LCPI61_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI61_4:
	.quad	4620693217682128896     # double 8
.LCPI61_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI61_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.36
	.p2align	4, 0x90
	.type	BlockMotionSearch.36,@function
BlockMotionSearch.36:                   # @BlockMotionSearch.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$164093001, -212(%rbp)  # imm = 0x9C7DC49
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -192(%rbp)
	movl	%ecx, -180(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-192(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-192(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB61_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	addl	$1, %edx
	jmp	.LBB61_4
.LBB61_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB61_4
.LBB61_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB61_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB61_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB61_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB61_6 Depth=1
	movl	$0, -64(%rbp)
.LBB61_8:                               # %for.cond24
                                        #   Parent Loop BB61_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB61_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB61_8 Depth=2
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB61_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_8
.LBB61_11:                              # %for.end
                                        #   in Loop: Header=BB61_6 Depth=1
	jmp	.LBB61_12
.LBB61_12:                              # %for.inc37
                                        #   in Loop: Header=BB61_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_6
.LBB61_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB61_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_18
.LBB61_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB61_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_37
.LBB61_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB61_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_23
.LBB61_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB61_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_36
.LBB61_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB61_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_28
.LBB61_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB61_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_35
.LBB61_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB61_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_33
.LBB61_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB61_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB61_34:                              # %if.end276
	jmp	.LBB61_35
.LBB61_35:                              # %if.end277
	jmp	.LBB61_36
.LBB61_36:                              # %if.end278
	jmp	.LBB61_37
.LBB61_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB61_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB61_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_43
.LBB61_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB61_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_62
.LBB61_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB61_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_48
.LBB61_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB61_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_61
.LBB61_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB61_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_53
.LBB61_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB61_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_60
.LBB61_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB61_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_58
.LBB61_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB61_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB61_59:                              # %if.end524
	jmp	.LBB61_60
.LBB61_60:                              # %if.end525
	jmp	.LBB61_61
.LBB61_61:                              # %if.end526
	jmp	.LBB61_62
.LBB61_62:                              # %if.end527
	jmp	.LBB61_63
.LBB61_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB61_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB61_66
.LBB61_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB61_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB61_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB61_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB61_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	cmpl	$1, %edx
	jle	.LBB61_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB61_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB61_73
.LBB61_72:                              # %cond.false626
	vmovsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB61_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB61_76
.LBB61_75:                              # %cond.false655
	vmovsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB61_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB61_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB61_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB61_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB61_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB61_83
.LBB61_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB61_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB61_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB61_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB61_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB61_92
.LBB61_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB61_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB61_91
.LBB61_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB61_91:                              # %cond.end787
	vmovss	.LCPI61_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB61_92:                              # %if.end835
	jmp	.LBB61_106
.LBB61_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB61_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB61_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB61_97
.LBB61_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB61_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB61_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB61_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB61_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB61_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB61_104
.LBB61_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB61_104:                             # %cond.end940
	vmovss	.LCPI61_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB61_105:                             # %if.end988
	jmp	.LBB61_106
.LBB61_106:                             # %if.end989
	jmp	.LBB61_107
.LBB61_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB61_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-136(%rbp), %r10d
	movl	-140(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB61_113
# %bb.112:                              # %cond.true1013
	movl	-100(%rbp), %ecx
	jmp	.LBB61_114
.LBB61_113:                             # %cond.false1014
	movswl	-60(%rbp), %ecx
.LBB61_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB61_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-100(%rbp), %ecx
	jmp	.LBB61_120
.LBB61_116:                             # %cond.false1022
	movl	-100(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_118
# %bb.117:                              # %cond.true1026
	movl	-100(%rbp), %ecx
	jmp	.LBB61_119
.LBB61_118:                             # %cond.false1027
	movswl	-60(%rbp), %ecx
.LBB61_119:                             # %cond.end1029
.LBB61_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -60(%rbp)
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB61_122
# %bb.121:                              # %cond.true1038
	movl	-100(%rbp), %ecx
	jmp	.LBB61_123
.LBB61_122:                             # %cond.false1039
	movswl	-58(%rbp), %ecx
.LBB61_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB61_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB61_129
.LBB61_125:                             # %cond.false1047
	movl	-100(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_127
# %bb.126:                              # %cond.true1051
	movl	-100(%rbp), %eax
	jmp	.LBB61_128
.LBB61_127:                             # %cond.false1052
	movswl	-58(%rbp), %eax
.LBB61_128:                             # %cond.end1054
.LBB61_129:                             # %cond.end1056
	movw	%ax, -58(%rbp)
.LBB61_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB61_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB61_131 Depth=1
	movl	$0, -72(%rbp)
.LBB61_133:                             # %for.cond1066
                                        #   Parent Loop BB61_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB61_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB61_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB61_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB61_137
.LBB61_136:                             # %if.else1091
                                        #   in Loop: Header=BB61_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB61_137:                             # %if.end1109
                                        #   in Loop: Header=BB61_133 Depth=2
	jmp	.LBB61_138
.LBB61_138:                             # %for.inc1110
                                        #   in Loop: Header=BB61_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_133
.LBB61_139:                             # %for.end1112
                                        #   in Loop: Header=BB61_131 Depth=1
	jmp	.LBB61_140
.LBB61_140:                             # %for.inc1113
                                        #   in Loop: Header=BB61_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_131
.LBB61_141:                             # %for.end1115
	jmp	.LBB61_143
.LBB61_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB61_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB61_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB61_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB61_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB61_150
.LBB61_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB61_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB61_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB61_151 Depth=1
	movl	$0, -72(%rbp)
.LBB61_153:                             # %for.cond1139
                                        #   Parent Loop BB61_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB61_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB61_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB61_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB61_157
.LBB61_156:                             # %if.else1183
                                        #   in Loop: Header=BB61_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB61_157:                             # %if.end1220
                                        #   in Loop: Header=BB61_153 Depth=2
	jmp	.LBB61_158
.LBB61_158:                             # %for.inc1221
                                        #   in Loop: Header=BB61_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_153
.LBB61_159:                             # %for.end1223
                                        #   in Loop: Header=BB61_151 Depth=1
	jmp	.LBB61_160
.LBB61_160:                             # %for.inc1224
                                        #   in Loop: Header=BB61_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_151
.LBB61_161:                             # %for.end1226
	jmp	.LBB61_166
.LBB61_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB61_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB61_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB61_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB61_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB61_173
.LBB61_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI61_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB61_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -58(%rbp)
.LBB61_172:                             # %if.end1273
	jmp	.LBB61_173
.LBB61_173:                             # %if.end1274
	jmp	.LBB61_174
.LBB61_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	$0, -64(%rbp)
.LBB61_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB61_176 Depth=1
	movl	$0, -72(%rbp)
.LBB61_178:                             # %for.cond1290
                                        #   Parent Loop BB61_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB61_178 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-188(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-184(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-188(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-184(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB61_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_178
.LBB61_181:                             # %for.end1337
                                        #   in Loop: Header=BB61_176 Depth=1
	jmp	.LBB61_182
.LBB61_182:                             # %for.inc1338
                                        #   in Loop: Header=BB61_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_176
.LBB61_183:                             # %for.end1340
	jmp	.LBB61_193
.LBB61_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB61_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB61_185 Depth=1
	movl	$0, -72(%rbp)
.LBB61_187:                             # %for.cond1347
                                        #   Parent Loop BB61_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB61_187 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB61_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_187
.LBB61_190:                             # %for.end1380
                                        #   in Loop: Header=BB61_185 Depth=1
	jmp	.LBB61_191
.LBB61_191:                             # %for.inc1381
                                        #   in Loop: Header=BB61_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_185
.LBB61_192:                             # %for.end1383
	jmp	.LBB61_193
.LBB61_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB61_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB61_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB61_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB61_200
.LBB61_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB61_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
	movw	$0, -106(%rbp)
	movw	$0, -108(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-136(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movl	$0, -64(%rbp)
.LBB61_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB61_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB61_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB61_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB61_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -106(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -108(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB61_208
.LBB61_204:                             # %if.else1433
                                        #   in Loop: Header=BB61_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -148(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -146(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -106(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB61_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB61_201 Depth=1
	movw	-76(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-74(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	jmp	.LBB61_207
.LBB61_206:                             # %if.else1441
                                        #   in Loop: Header=BB61_201 Depth=1
	movw	-60(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
.LBB61_207:                             # %if.end1450
                                        #   in Loop: Header=BB61_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB61_208:                             # %if.end1452
                                        #   in Loop: Header=BB61_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %eax
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-148(%rbp), %r11w
	movw	-146(%rbp), %r14w
	movw	-106(%rbp), %r15w
	movw	-108(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-132(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -132(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB61_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_201
.LBB61_210:                             # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB61_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB61_213:                             # %if.end1469
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-106(%rbp), %ax
	movw	-108(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB61_215
.LBB61_214:                             # %if.else1473
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
.LBB61_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB61_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB61_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB61_220
.LBB61_219:                             # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
.LBB61_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB61_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB61_221 Depth=1
	movl	$0, -72(%rbp)
.LBB61_223:                             # %for.cond1502
                                        #   Parent Loop BB61_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB61_223 Depth=2
	xorl	%eax, %eax
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB61_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_223
.LBB61_226:                             # %for.end1565
                                        #   in Loop: Header=BB61_221 Depth=1
	jmp	.LBB61_227
.LBB61_227:                             # %for.inc1566
                                        #   in Loop: Header=BB61_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_221
.LBB61_228:                             # %for.end1568
	jmp	.LBB61_229
.LBB61_229:                             # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -196(%rbp)
	movl	-196(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-196(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$164093001, -212(%rbp)  # imm = 0x9C7DC49
	jne	.LBB61_231
.LBB61_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_230
.Lfunc_end61:
	.size	BlockMotionSearch.36, .Lfunc_end61-BlockMotionSearch.36
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.37    # -- Begin function Get_Direct_CostMB.37
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.37,@function
Get_Direct_CostMB.37:                   # @Get_Direct_CostMB.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2134031933, -28(%rbp)  # imm = 0x7F32BE3D
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB62_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB62_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB62_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB62_5
.LBB62_4:                               # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_18
.LBB62_5:                               # %if.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_6
.LBB62_6:                               # %for.inc
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_1
.LBB62_7:                               # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB62_9
	jmp	.LBB62_8
.LBB62_8:                               # %for.end
	subl	$2, %eax
	je	.LBB62_15
	jmp	.LBB62_16
.LBB62_9:                               # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB62_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB62_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB62_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB62_14
.LBB62_13:                              # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB62_14:                              # %if.end9
	jmp	.LBB62_17
.LBB62_15:                              # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_17
.LBB62_16:                              # %sw.default
	jmp	.LBB62_17
.LBB62_17:                              # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB62_18:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$2134031933, -28(%rbp)  # imm = 0x7F32BE3D
	jne	.LBB62_20
.LBB62_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_19
.Lfunc_end62:
	.size	Get_Direct_CostMB.37, .Lfunc_end62-Get_Direct_CostMB.37
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.38 # -- Begin function Get_Direct_Motion_Vectors.38
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.38,@function
Get_Direct_Motion_Vectors.38:           # @Get_Direct_Motion_Vectors.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$1913601694, -228(%rbp) # imm = 0x720F3E9E
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -216(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_6
# %bb.1:                                # %land.lhs.true
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB63_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -224(%rbp)
	jmp	.LBB63_5
.LBB63_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB63_5:                               # %if.end
	jmp	.LBB63_7
.LBB63_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB63_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB63_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB63_34
# %bb.9:                                # %if.then16
	cmpl	$0, -136(%rbp)
	je	.LBB63_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_12
.LBB63_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_12
.LBB63_12:                              # %cond.end
	movw	%ax, -22(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB63_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_15
.LBB63_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_15
.LBB63_15:                              # %cond.end38
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB63_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_18
.LBB63_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_18
.LBB63_18:                              # %cond.end54
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB63_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_21
.LBB63_20:                              # %cond.false69
	movswl	-52(%rbp), %eax
.LBB63_21:                              # %cond.end71
	movw	%ax, -26(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB63_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_24
.LBB63_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_24
.LBB63_24:                              # %cond.end87
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB63_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_27
.LBB63_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_27
.LBB63_27:                              # %cond.end103
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB63_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_30
.LBB63_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_30
.LBB63_30:                              # %cond.end119
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB63_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_33
.LBB63_32:                              # %cond.false134
	movswl	-50(%rbp), %eax
.LBB63_33:                              # %cond.end136
	movw	%ax, -24(%rbp)
	jmp	.LBB63_150
.LBB63_34:                              # %if.else139
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_92
# %bb.35:                               # %if.then142
	cmpl	$0, -136(%rbp)
	je	.LBB63_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_39
.LBB63_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_40
.LBB63_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB63_40:                              # %cond.end181
	jmp	.LBB63_42
.LBB63_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_42
.LBB63_42:                              # %cond.end184
	movw	%ax, -22(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB63_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_46
.LBB63_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_47
.LBB63_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB63_47:                              # %cond.end229
	jmp	.LBB63_49
.LBB63_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_49
.LBB63_49:                              # %cond.end232
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB63_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_53
.LBB63_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_54
.LBB63_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB63_54:                              # %cond.end277
	jmp	.LBB63_56
.LBB63_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_56
.LBB63_56:                              # %cond.end280
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB63_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_60
.LBB63_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_61
.LBB63_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB63_61:                              # %cond.end325
	jmp	.LBB63_63
.LBB63_62:                              # %cond.false327
	movswl	-52(%rbp), %eax
.LBB63_63:                              # %cond.end329
	movw	%ax, -26(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB63_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_67
.LBB63_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_68
.LBB63_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB63_68:                              # %cond.end374
	jmp	.LBB63_70
.LBB63_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_70
.LBB63_70:                              # %cond.end377
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB63_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_74
.LBB63_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_75
.LBB63_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB63_75:                              # %cond.end422
	jmp	.LBB63_77
.LBB63_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_77
.LBB63_77:                              # %cond.end425
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB63_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_81
.LBB63_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_82
.LBB63_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB63_82:                              # %cond.end470
	jmp	.LBB63_84
.LBB63_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_84
.LBB63_84:                              # %cond.end473
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB63_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_88
.LBB63_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB63_89
.LBB63_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB63_89:                              # %cond.end518
	jmp	.LBB63_91
.LBB63_90:                              # %cond.false520
	movswl	-50(%rbp), %eax
.LBB63_91:                              # %cond.end522
	movw	%ax, -24(%rbp)
	jmp	.LBB63_149
.LBB63_92:                              # %if.else525
	cmpl	$0, -136(%rbp)
	je	.LBB63_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_96
.LBB63_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB63_97
.LBB63_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB63_97:                              # %cond.end567
	jmp	.LBB63_99
.LBB63_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_99
.LBB63_99:                              # %cond.end570
	movw	%ax, -22(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB63_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_103
.LBB63_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB63_104
.LBB63_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB63_104:                             # %cond.end615
	jmp	.LBB63_106
.LBB63_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_106
.LBB63_106:                             # %cond.end618
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB63_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_110
.LBB63_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB63_111
.LBB63_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB63_111:                             # %cond.end663
	jmp	.LBB63_113
.LBB63_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_113
.LBB63_113:                             # %cond.end666
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB63_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_117
.LBB63_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB63_118
.LBB63_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB63_118:                             # %cond.end711
	jmp	.LBB63_120
.LBB63_119:                             # %cond.false713
	movswl	-52(%rbp), %eax
.LBB63_120:                             # %cond.end715
	movw	%ax, -26(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB63_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_124
.LBB63_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB63_125
.LBB63_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB63_125:                             # %cond.end760
	jmp	.LBB63_127
.LBB63_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_127
.LBB63_127:                             # %cond.end763
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB63_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_131
.LBB63_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB63_132
.LBB63_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB63_132:                             # %cond.end808
	jmp	.LBB63_134
.LBB63_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_134
.LBB63_134:                             # %cond.end811
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB63_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_138
.LBB63_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB63_139
.LBB63_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB63_139:                             # %cond.end856
	jmp	.LBB63_141
.LBB63_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_141
.LBB63_141:                             # %cond.end859
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB63_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB63_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB63_145
.LBB63_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB63_146
.LBB63_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB63_146:                             # %cond.end904
	jmp	.LBB63_148
.LBB63_147:                             # %cond.false906
	movswl	-50(%rbp), %eax
.LBB63_148:                             # %cond.end908
	movw	%ax, -24(%rbp)
.LBB63_149:                             # %if.end911
	jmp	.LBB63_150
.LBB63_150:                             # %if.end912
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_156
# %bb.151:                              # %land.lhs.true916
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_156
# %bb.152:                              # %cond.true920
	movswl	-22(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_154
# %bb.153:                              # %cond.true925
	movswl	-22(%rbp), %eax
	jmp	.LBB63_155
.LBB63_154:                             # %cond.false927
	movswl	-30(%rbp), %eax
.LBB63_155:                             # %cond.end929
	jmp	.LBB63_160
.LBB63_156:                             # %cond.false931
	movswl	-22(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_158
# %bb.157:                              # %cond.true936
	movswl	-22(%rbp), %eax
	jmp	.LBB63_159
.LBB63_158:                             # %cond.false938
	movswl	-30(%rbp), %eax
.LBB63_159:                             # %cond.end940
.LBB63_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_166
# %bb.161:                              # %land.lhs.true948
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB63_165
.LBB63_164:                             # %cond.false959
	movswl	-26(%rbp), %eax
.LBB63_165:                             # %cond.end961
	jmp	.LBB63_170
.LBB63_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB63_169
.LBB63_168:                             # %cond.false970
	movswl	-26(%rbp), %eax
.LBB63_169:                             # %cond.end972
.LBB63_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_176
# %bb.171:                              # %land.lhs.true980
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_176
# %bb.172:                              # %cond.true984
	movswl	-28(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_174
# %bb.173:                              # %cond.true989
	movswl	-28(%rbp), %eax
	jmp	.LBB63_175
.LBB63_174:                             # %cond.false991
	movswl	-32(%rbp), %eax
.LBB63_175:                             # %cond.end993
	jmp	.LBB63_180
.LBB63_176:                             # %cond.false995
	movswl	-28(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_178
# %bb.177:                              # %cond.true1000
	movswl	-28(%rbp), %eax
	jmp	.LBB63_179
.LBB63_178:                             # %cond.false1002
	movswl	-32(%rbp), %eax
.LBB63_179:                             # %cond.end1004
.LBB63_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB63_185
.LBB63_184:                             # %cond.false1023
	movswl	-24(%rbp), %eax
.LBB63_185:                             # %cond.end1025
	jmp	.LBB63_190
.LBB63_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB63_189
.LBB63_188:                             # %cond.false1034
	movswl	-24(%rbp), %eax
.LBB63_189:                             # %cond.end1036
.LBB63_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB63_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB63_194:                             # %if.end1055
	movl	$0, -8(%rbp)
.LBB63_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_197 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB63_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB63_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB63_197:                             # %for.cond1061
                                        #   Parent Loop BB63_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB63_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB63_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB63_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB63_203
.LBB63_202:                             # %if.else1102
                                        #   in Loop: Header=BB63_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB63_203:                             # %if.end1128
                                        #   in Loop: Header=BB63_197 Depth=2
	jmp	.LBB63_205
.LBB63_204:                             # %if.else1129
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB63_205:                             # %if.end1151
                                        #   in Loop: Header=BB63_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB63_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB63_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB63_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB63_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB63_210
.LBB63_209:                             # %if.else1187
                                        #   in Loop: Header=BB63_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB63_210:                             # %if.end1213
                                        #   in Loop: Header=BB63_197 Depth=2
	jmp	.LBB63_212
.LBB63_211:                             # %if.else1214
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB63_212:                             # %if.end1236
                                        #   in Loop: Header=BB63_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB63_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB63_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB63_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB63_215:                             # %if.end1255
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB63_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB63_221
.LBB63_217:                             # %if.else1269
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB63_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB63_220
.LBB63_219:                             # %if.else1283
                                        #   in Loop: Header=BB63_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB63_220:                             # %if.end1288
                                        #   in Loop: Header=BB63_197 Depth=2
	jmp	.LBB63_221
.LBB63_221:                             # %if.end1289
                                        #   in Loop: Header=BB63_197 Depth=2
	jmp	.LBB63_222
.LBB63_222:                             # %for.inc
                                        #   in Loop: Header=BB63_197 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_197
.LBB63_223:                             # %for.end
                                        #   in Loop: Header=BB63_195 Depth=1
	jmp	.LBB63_224
.LBB63_224:                             # %for.inc1290
                                        #   in Loop: Header=BB63_195 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_195
.LBB63_225:                             # %for.end1292
	jmp	.LBB63_259
.LBB63_226:                             # %if.else1293
	movl	$0, -8(%rbp)
.LBB63_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_229 Depth 2
                                        #       Child Loop BB63_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB63_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB63_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB63_229:                             # %for.cond1304
                                        #   Parent Loop BB63_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB63_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB63_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB63_229 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB63_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB63_234
.LBB63_233:                             # %cond.false1319
                                        #   in Loop: Header=BB63_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB63_234
.LBB63_234:                             # %cond.end1320
                                        #   in Loop: Header=BB63_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-200(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-200(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB63_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB63_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB63_254
.LBB63_236:                             # %if.else1393
                                        #   in Loop: Header=BB63_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -168(%rbp)
.LBB63_237:                             # %for.cond1394
                                        #   Parent Loop BB63_227 Depth=1
                                        #     Parent Loop BB63_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB63_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB63_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB63_240
.LBB63_239:                             # %cond.false1402
                                        #   in Loop: Header=BB63_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB63_240:                             # %cond.end1406
                                        #   in Loop: Header=BB63_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB63_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB63_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-168(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-224(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB63_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB63_229 Depth=2
	movl	-168(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB63_247
.LBB63_243:                             # %if.else1425
                                        #   in Loop: Header=BB63_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB63_237 Depth=3
	jmp	.LBB63_245
.LBB63_245:                             # %for.inc1427
                                        #   in Loop: Header=BB63_237 Depth=3
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB63_237
.LBB63_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB63_229 Depth=2
	jmp	.LBB63_247
.LBB63_247:                             # %for.end1429
                                        #   in Loop: Header=BB63_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB63_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB63_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -164(%rbp)
	cmpl	$9999, -164(%rbp)       # imm = 0x270F
	jne	.LBB63_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB63_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB63_251
.LBB63_250:                             # %if.else1487
                                        #   in Loop: Header=BB63_229 Depth=2
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB63_251:                             # %if.end1571
                                        #   in Loop: Header=BB63_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB63_253
.LBB63_252:                             # %if.else1587
                                        #   in Loop: Header=BB63_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB63_253:                             # %if.end1602
                                        #   in Loop: Header=BB63_229 Depth=2
	jmp	.LBB63_254
.LBB63_254:                             # %if.end1603
                                        #   in Loop: Header=BB63_229 Depth=2
	jmp	.LBB63_255
.LBB63_255:                             # %for.inc1604
                                        #   in Loop: Header=BB63_229 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_229
.LBB63_256:                             # %for.end1606
                                        #   in Loop: Header=BB63_227 Depth=1
	jmp	.LBB63_257
.LBB63_257:                             # %for.inc1607
                                        #   in Loop: Header=BB63_227 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_227
.LBB63_258:                             # %for.end1609
	jmp	.LBB63_259
.LBB63_259:                             # %if.end1610
	cmpl	$1913601694, -228(%rbp) # imm = 0x720F3E9E
	jne	.LBB63_261
.LBB63_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_260
.Lfunc_end63:
	.size	Get_Direct_Motion_Vectors.38, .Lfunc_end63-Get_Direct_Motion_Vectors.38
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.39   # -- Begin function BPredPartitionCost.39
	.p2align	4, 0x90
	.type	BPredPartitionCost.39,@function
BPredPartitionCost.39:                  # @BPredPartitionCost.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$417730306, -128(%rbp)  # imm = 0x18E60F02
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -124(%rbp)
	movl	%r9d, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB64_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB64_3
.LBB64_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB64_3
.LBB64_3:                               # %cond.end
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB64_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB64_6
.LBB64_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB64_6
.LBB64_6:                               # %cond.end17
	movl	%eax, -112(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB64_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB64_9
.LBB64_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB64_9
.LBB64_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB64_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB64_12
.LBB64_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB64_12:                              # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB64_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB64_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB64_15:                              # %for.cond56
                                        #   Parent Loop BB64_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB64_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB64_15 Depth=2
	movl	-104(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_15
.LBB64_18:                              # %for.end
                                        #   in Loop: Header=BB64_13 Depth=1
	jmp	.LBB64_19
.LBB64_19:                              # %for.inc167
                                        #   in Loop: Header=BB64_13 Depth=1
	movl	-108(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_13
.LBB64_20:                              # %for.end169
	movl	-124(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB64_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_23 Depth 2
                                        #       Child Loop BB64_25 Depth 3
                                        #         Child Loop BB64_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB64_23:                              # %for.cond188
                                        #   Parent Loop BB64_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_25 Depth 3
                                        #         Child Loop BB64_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB64_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-64(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB64_25:                              # %for.cond199
                                        #   Parent Loop BB64_21 Depth=1
                                        #     Parent Loop BB64_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_27 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB64_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB64_25 Depth=3
	movl	$0, -32(%rbp)
.LBB64_27:                              # %for.cond203
                                        #   Parent Loop BB64_21 Depth=1
                                        #     Parent Loop BB64_23 Depth=2
                                        #       Parent Loop BB64_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB64_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB64_27 Depth=4
	movq	imgY_org, %rax
	movl	-120(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB64_27 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB64_27
.LBB64_30:                              # %for.end232
                                        #   in Loop: Header=BB64_25 Depth=3
	jmp	.LBB64_31
.LBB64_31:                              # %for.inc233
                                        #   in Loop: Header=BB64_25 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB64_25
.LBB64_32:                              # %for.end235
                                        #   in Loop: Header=BB64_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB64_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB64_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB64_35
.LBB64_34:                              # %if.then
                                        #   in Loop: Header=BB64_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB64_35:                              # %if.end
                                        #   in Loop: Header=BB64_23 Depth=2
	jmp	.LBB64_36
.LBB64_36:                              # %for.inc240
                                        #   in Loop: Header=BB64_23 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_23
.LBB64_37:                              # %for.end243
                                        #   in Loop: Header=BB64_21 Depth=1
	jmp	.LBB64_38
.LBB64_38:                              # %for.inc244
                                        #   in Loop: Header=BB64_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_21
.LBB64_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB64_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB64_58
# %bb.41:                               # %if.then252
	movl	$0, -52(%rbp)
.LBB64_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_44 Depth 2
                                        #       Child Loop BB64_46 Depth 3
                                        #         Child Loop BB64_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB64_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB64_42 Depth=1
	movl	$0, -48(%rbp)
.LBB64_44:                              # %for.cond261
                                        #   Parent Loop BB64_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_46 Depth 3
                                        #         Child Loop BB64_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB64_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB64_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB64_46:                              # %for.cond269
                                        #   Parent Loop BB64_42 Depth=1
                                        #     Parent Loop BB64_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_48 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB64_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB64_46 Depth=3
	movl	$0, -28(%rbp)
.LBB64_48:                              # %for.cond273
                                        #   Parent Loop BB64_42 Depth=1
                                        #     Parent Loop BB64_44 Depth=2
                                        #       Parent Loop BB64_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB64_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB64_48 Depth=4
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB64_48 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB64_48
.LBB64_51:                              # %for.end288
                                        #   in Loop: Header=BB64_46 Depth=3
	jmp	.LBB64_52
.LBB64_52:                              # %for.inc289
                                        #   in Loop: Header=BB64_46 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB64_46
.LBB64_53:                              # %for.end291
                                        #   in Loop: Header=BB64_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB64_44 Depth=2
	movl	-116(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB64_44
.LBB64_55:                              # %for.end298
                                        #   in Loop: Header=BB64_42 Depth=1
	jmp	.LBB64_56
.LBB64_56:                              # %for.inc299
                                        #   in Loop: Header=BB64_42 Depth=1
	movl	-112(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB64_42
.LBB64_57:                              # %for.end301
	jmp	.LBB64_58
.LBB64_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$417730306, -128(%rbp)  # imm = 0x18E60F02
	jne	.LBB64_60
.LBB64_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_59
.Lfunc_end64:
	.size	BPredPartitionCost.39, .Lfunc_end64-BPredPartitionCost.39
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.40        # -- Begin function GetSkipCostMB.40
	.p2align	4, 0x90
	.type	GetSkipCostMB.40,@function
GetSkipCostMB.40:                       # @GetSkipCostMB.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$505751291, -56(%rbp)   # imm = 0x1E2526FB
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
                                        #       Child Loop BB65_5 Depth 3
                                        #         Child Loop BB65_7 Depth 4
                                        #           Child Loop BB65_9 Depth 5
                                        #     Child Loop BB65_24 Depth 2
                                        #       Child Loop BB65_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB65_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_5 Depth 3
                                        #         Child Loop BB65_7 Depth 4
                                        #           Child Loop BB65_9 Depth 5
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_5:                               # %for.cond6
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_7 Depth 4
                                        #           Child Loop BB65_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -28(%rbp)
.LBB65_7:                               # %for.cond11
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        #       Parent Loop BB65_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB65_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB65_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB65_7 Depth=4
	movl	$0, -12(%rbp)
.LBB65_9:                               # %for.cond14
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        #       Parent Loop BB65_5 Depth=3
                                        #         Parent Loop BB65_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB65_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB65_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-640(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB65_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_9
.LBB65_12:                              # %for.end
                                        #   in Loop: Header=BB65_7 Depth=4
	jmp	.LBB65_13
.LBB65_13:                              # %for.inc39
                                        #   in Loop: Header=BB65_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_7
.LBB65_14:                              # %for.end41
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB65_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB65_17
.LBB65_16:                              # %if.then
                                        #   in Loop: Header=BB65_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB65_17:                              # %if.end
                                        #   in Loop: Header=BB65_5 Depth=3
	jmp	.LBB65_18
.LBB65_18:                              # %for.inc45
                                        #   in Loop: Header=BB65_5 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_5
.LBB65_19:                              # %for.end47
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_20
.LBB65_20:                              # %for.inc48
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_3
.LBB65_21:                              # %for.end50
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB65_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB65_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB65_24:                              # %for.cond58
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB65_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB65_24 Depth=2
	movl	$0, -12(%rbp)
.LBB65_26:                              # %for.cond62
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB65_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB65_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-640(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB65_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_26
.LBB65_29:                              # %for.end75
                                        #   in Loop: Header=BB65_24 Depth=2
	jmp	.LBB65_30
.LBB65_30:                              # %for.inc76
                                        #   in Loop: Header=BB65_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_24
.LBB65_31:                              # %for.end78
                                        #   in Loop: Header=BB65_1 Depth=1
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB65_32:                              # %if.end83
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_33
.LBB65_33:                              # %for.inc84
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB65_1
.LBB65_34:                              # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$505751291, -56(%rbp)   # imm = 0x1E2526FB
	jne	.LBB65_36
.LBB65_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_35
.Lfunc_end65:
	.size	GetSkipCostMB.40, .Lfunc_end65-GetSkipCostMB.40
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.41    # -- Begin function SetupLargerBlocks.41
	.p2align	4, 0x90
	.type	SetupLargerBlocks.41,@function
SetupLargerBlocks.41:                   # @SetupLargerBlocks.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1880381325, -76(%rbp)  # imm = 0x7014578D
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_1
.LBB66_4:                               # %for.end
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB66_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_5
.LBB66_8:                               # %for.end30
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB66_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB66_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_9
.LBB66_12:                              # %for.end46
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB66_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB66_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_13
.LBB66_16:                              # %for.end62
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB66_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB66_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_17
.LBB66_20:                              # %for.end78
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB66_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB66_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_21
.LBB66_24:                              # %for.end94
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB66_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB66_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_25
.LBB66_28:                              # %for.end110
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB66_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB66_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_29
.LBB66_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB66_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB66_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_33
.LBB66_36:                              # %for.end150
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB66_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB66_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_37
.LBB66_40:                              # %for.end166
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB66_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB66_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_41
.LBB66_44:                              # %for.end182
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB66_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB66_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_45
.LBB66_48:                              # %for.end198
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB66_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB66_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_49
.LBB66_52:                              # %for.end214
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB66_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB66_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_53
.LBB66_56:                              # %for.end230
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB66_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB66_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_57
.LBB66_60:                              # %for.end246
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB66_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB66_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_61
.LBB66_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB66_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB66_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_65
.LBB66_68:                              # %for.end286
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB66_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB66_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_69
.LBB66_72:                              # %for.end302
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB66_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB66_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_73
.LBB66_76:                              # %for.end318
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB66_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB66_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_77
.LBB66_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB66_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB66_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_81
.LBB66_84:                              # %for.end358
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB66_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB66_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_85
.LBB66_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB66_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB66_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_89
.LBB66_92:                              # %for.end398
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB66_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB66_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_93
.LBB66_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB66_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB66_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB66_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB66_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_97
.LBB66_100:                             # %for.end438
	cmpl	$1880381325, -76(%rbp)  # imm = 0x7014578D
	jne	.LBB66_102
.LBB66_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_101
.Lfunc_end66:
	.size	SetupLargerBlocks.41, .Lfunc_end66-SetupLargerBlocks.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.42
.LCPI67_0:
	.quad	4602678819172646912     # double 0.5
.LCPI67_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.42
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.42,@function
FastFullPelBlockMotionSearch.42:        # @FastFullPelBlockMotionSearch.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI67_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$870756875, -60(%rbp)   # imm = 0x33E6B20B
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -72(%rbp)
	movl	%r9d, -68(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -76(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-80(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB67_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB67_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB67_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-48(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB67_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB67_5:                               # %if.end56
	jmp	.LBB67_6
.LBB67_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB67_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB67_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB67_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB67_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB67_7 Depth=1
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-48(%rbp), %eax
	movq	mvbits, %rcx
	movl	-56(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-84(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB67_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB67_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB67_11:                              # %if.end85
                                        #   in Loop: Header=BB67_7 Depth=1
	jmp	.LBB67_12
.LBB67_12:                              # %if.end86
                                        #   in Loop: Header=BB67_7 Depth=1
	jmp	.LBB67_13
.LBB67_13:                              # %for.inc
                                        #   in Loop: Header=BB67_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB67_7
.LBB67_14:                              # %for.end
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$870756875, -60(%rbp)   # imm = 0x33E6B20B
	jne	.LBB67_16
.LBB67_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_15
.Lfunc_end67:
	.size	FastFullPelBlockMotionSearch.42, .Lfunc_end67-FastFullPelBlockMotionSearch.42
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.43 # -- Begin function FindSkipModeMotionVector.43
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.43,@function
FindSkipModeMotionVector.43:            # @FindSkipModeMotionVector.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$250984636, -60(%rbp)   # imm = 0xEF5B8BC
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB68_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB68_4
# %bb.3:                                # %if.then24
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB68_4:                               # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB68_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_7
# %bb.6:                                # %if.then34
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB68_7:                               # %if.end36
	jmp	.LBB68_8
.LBB68_8:                               # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB68_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB68_12
# %bb.11:                               # %if.then69
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
.LBB68_12:                              # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB68_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_15
# %bb.14:                               # %if.then82
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB68_15:                              # %if.end85
	jmp	.LBB68_16
.LBB68_16:                              # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB68_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB68_22
.LBB68_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB68_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB68_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB68_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB68_22:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB68_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB68_28
.LBB68_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -12(%rbp)
	jne	.LBB68_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB68_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB68_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB68_28:                              # %cond.end130
	movl	%ecx, -56(%rbp)
	cmpl	$0, -56(%rbp)
	jne	.LBB68_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	je	.LBB68_39
.LBB68_30:                              # %if.then134
	movl	$0, -8(%rbp)
.LBB68_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB68_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB68_31 Depth=1
	movl	$0, -4(%rbp)
.LBB68_33:                              # %for.cond137
                                        #   Parent Loop BB68_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB68_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB68_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_33
.LBB68_36:                              # %for.end
                                        #   in Loop: Header=BB68_31 Depth=1
	jmp	.LBB68_37
.LBB68_37:                              # %for.inc157
                                        #   in Loop: Header=BB68_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_31
.LBB68_38:                              # %for.end159
	jmp	.LBB68_48
.LBB68_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB68_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB68_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB68_40 Depth=1
	movl	$0, -4(%rbp)
.LBB68_42:                              # %for.cond166
                                        #   Parent Loop BB68_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB68_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB68_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_42
.LBB68_45:                              # %for.end190
                                        #   in Loop: Header=BB68_40 Depth=1
	jmp	.LBB68_46
.LBB68_46:                              # %for.inc191
                                        #   in Loop: Header=BB68_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_40
.LBB68_47:                              # %for.end193
	jmp	.LBB68_48
.LBB68_48:                              # %if.end194
	cmpl	$250984636, -60(%rbp)   # imm = 0xEF5B8BC
	jne	.LBB68_50
.LBB68_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_49
.Lfunc_end68:
	.size	FindSkipModeMotionVector.43, .Lfunc_end68-FindSkipModeMotionVector.43
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.44            # -- Begin function find_SATD.44
	.p2align	4, 0x90
	.type	find_SATD.44,@function
find_SATD.44:                           # @find_SATD.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$470467067, -52(%rbp)   # imm = 0x1C0AC1FB
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_3 Depth 2
                                        #       Child Loop BB69_5 Depth 3
                                        #         Child Loop BB69_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -24(%rbp)
.LBB69_3:                               # %for.cond7
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_5 Depth 3
                                        #         Child Loop BB69_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB69_5:                               # %for.cond10
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_7 Depth 4
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB69_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_7:                               # %for.cond13
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        #       Parent Loop BB69_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB69_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB69_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB69_7
.LBB69_10:                              # %for.end
                                        #   in Loop: Header=BB69_5 Depth=3
	jmp	.LBB69_11
.LBB69_11:                              # %for.inc24
                                        #   in Loop: Header=BB69_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB69_5
.LBB69_12:                              # %for.end26
                                        #   in Loop: Header=BB69_3 Depth=2
	jmp	.LBB69_13
.LBB69_13:                              # %for.inc27
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_3
.LBB69_14:                              # %for.end29
                                        #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_15
.LBB69_15:                              # %for.inc30
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_1
.LBB69_16:                              # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB69_26
# %bb.17:                               # %if.then
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB69_24
# %bb.18:                               # %if.then
	movq	.LJTI69_0(,%rax,8), %rax
	jmpq	*%rax
.LBB69_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_25
.LBB69_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_25
.LBB69_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB69_25
.LBB69_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_25
.LBB69_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB69_25
.LBB69_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB69_25:                              # %sw.epilog
	jmp	.LBB69_31
.LBB69_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB69_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB69_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB69_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_27
.LBB69_30:                              # %for.end79
	jmp	.LBB69_31
.LBB69_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$470467067, -52(%rbp)   # imm = 0x1C0AC1FB
	jne	.LBB69_33
.LBB69_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_32
.Lfunc_end69:
	.size	find_SATD.44, .Lfunc_end69-find_SATD.44
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI69_0:
	.quad	.LBB69_19
	.quad	.LBB69_20
	.quad	.LBB69_20
	.quad	.LBB69_21
	.quad	.LBB69_22
	.quad	.LBB69_22
	.quad	.LBB69_23
                                        # -- End function
	.text
	.globl	Get_Direct_Motion_Vectors.45 # -- Begin function Get_Direct_Motion_Vectors.45
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.45,@function
Get_Direct_Motion_Vectors.45:           # @Get_Direct_Motion_Vectors.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$1784763982, -228(%rbp) # imm = 0x6A61564E
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -216(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_6
# %bb.1:                                # %land.lhs.true
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB70_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -224(%rbp)
	jmp	.LBB70_5
.LBB70_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB70_5:                               # %if.end
	jmp	.LBB70_7
.LBB70_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB70_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB70_226
# %bb.8:                                # %if.then9
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB70_34
# %bb.9:                                # %if.then16
	cmpl	$0, -160(%rbp)
	je	.LBB70_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_12
.LBB70_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_12
.LBB70_12:                              # %cond.end
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB70_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_15
.LBB70_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_15
.LBB70_15:                              # %cond.end38
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB70_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_18
.LBB70_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_18
.LBB70_18:                              # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB70_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_21
.LBB70_20:                              # %cond.false69
	movswl	-50(%rbp), %eax
.LBB70_21:                              # %cond.end71
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB70_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_24
.LBB70_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_24
.LBB70_24:                              # %cond.end87
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB70_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_27
.LBB70_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_27
.LBB70_27:                              # %cond.end103
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB70_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_30
.LBB70_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_30
.LBB70_30:                              # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB70_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_33
.LBB70_32:                              # %cond.false134
	movswl	-52(%rbp), %eax
.LBB70_33:                              # %cond.end136
	movw	%ax, -30(%rbp)
	jmp	.LBB70_150
.LBB70_34:                              # %if.else139
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_92
# %bb.35:                               # %if.then142
	cmpl	$0, -160(%rbp)
	je	.LBB70_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_39
.LBB70_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_40
.LBB70_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB70_40:                              # %cond.end181
	jmp	.LBB70_42
.LBB70_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_42
.LBB70_42:                              # %cond.end184
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB70_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_46
.LBB70_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_47
.LBB70_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB70_47:                              # %cond.end229
	jmp	.LBB70_49
.LBB70_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_49
.LBB70_49:                              # %cond.end232
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB70_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_53
.LBB70_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_54
.LBB70_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB70_54:                              # %cond.end277
	jmp	.LBB70_56
.LBB70_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_56
.LBB70_56:                              # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB70_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_60
.LBB70_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_61
.LBB70_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB70_61:                              # %cond.end325
	jmp	.LBB70_63
.LBB70_62:                              # %cond.false327
	movswl	-50(%rbp), %eax
.LBB70_63:                              # %cond.end329
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB70_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_67
.LBB70_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_68
.LBB70_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB70_68:                              # %cond.end374
	jmp	.LBB70_70
.LBB70_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_70
.LBB70_70:                              # %cond.end377
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB70_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_74
.LBB70_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_75
.LBB70_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB70_75:                              # %cond.end422
	jmp	.LBB70_77
.LBB70_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_77
.LBB70_77:                              # %cond.end425
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB70_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_81
.LBB70_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_82
.LBB70_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB70_82:                              # %cond.end470
	jmp	.LBB70_84
.LBB70_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_84
.LBB70_84:                              # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB70_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_88
.LBB70_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB70_89
.LBB70_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB70_89:                              # %cond.end518
	jmp	.LBB70_91
.LBB70_90:                              # %cond.false520
	movswl	-52(%rbp), %eax
.LBB70_91:                              # %cond.end522
	movw	%ax, -30(%rbp)
	jmp	.LBB70_149
.LBB70_92:                              # %if.else525
	cmpl	$0, -160(%rbp)
	je	.LBB70_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_96
.LBB70_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB70_97
.LBB70_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB70_97:                              # %cond.end567
	jmp	.LBB70_99
.LBB70_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_99
.LBB70_99:                              # %cond.end570
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB70_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_103
.LBB70_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB70_104
.LBB70_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB70_104:                             # %cond.end615
	jmp	.LBB70_106
.LBB70_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_106
.LBB70_106:                             # %cond.end618
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB70_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_110
.LBB70_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB70_111
.LBB70_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB70_111:                             # %cond.end663
	jmp	.LBB70_113
.LBB70_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_113
.LBB70_113:                             # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB70_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_117
.LBB70_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB70_118
.LBB70_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB70_118:                             # %cond.end711
	jmp	.LBB70_120
.LBB70_119:                             # %cond.false713
	movswl	-50(%rbp), %eax
.LBB70_120:                             # %cond.end715
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB70_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_124
.LBB70_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB70_125
.LBB70_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB70_125:                             # %cond.end760
	jmp	.LBB70_127
.LBB70_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_127
.LBB70_127:                             # %cond.end763
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB70_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_131
.LBB70_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB70_132
.LBB70_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB70_132:                             # %cond.end808
	jmp	.LBB70_134
.LBB70_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_134
.LBB70_134:                             # %cond.end811
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB70_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_138
.LBB70_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB70_139
.LBB70_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB70_139:                             # %cond.end856
	jmp	.LBB70_141
.LBB70_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB70_141
.LBB70_141:                             # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB70_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB70_145
.LBB70_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB70_146
.LBB70_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB70_146:                             # %cond.end904
	jmp	.LBB70_148
.LBB70_147:                             # %cond.false906
	movswl	-52(%rbp), %eax
.LBB70_148:                             # %cond.end908
	movw	%ax, -30(%rbp)
.LBB70_149:                             # %if.end911
	jmp	.LBB70_150
.LBB70_150:                             # %if.end912
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_156
# %bb.151:                              # %land.lhs.true916
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_156
# %bb.152:                              # %cond.true920
	movswl	-22(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_154
# %bb.153:                              # %cond.true925
	movswl	-22(%rbp), %eax
	jmp	.LBB70_155
.LBB70_154:                             # %cond.false927
	movswl	-24(%rbp), %eax
.LBB70_155:                             # %cond.end929
	jmp	.LBB70_160
.LBB70_156:                             # %cond.false931
	movswl	-22(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB70_158
# %bb.157:                              # %cond.true936
	movswl	-22(%rbp), %eax
	jmp	.LBB70_159
.LBB70_158:                             # %cond.false938
	movswl	-24(%rbp), %eax
.LBB70_159:                             # %cond.end940
.LBB70_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_166
# %bb.161:                              # %land.lhs.true948
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB70_165
.LBB70_164:                             # %cond.false959
	movswl	-26(%rbp), %eax
.LBB70_165:                             # %cond.end961
	jmp	.LBB70_170
.LBB70_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB70_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB70_169
.LBB70_168:                             # %cond.false970
	movswl	-26(%rbp), %eax
.LBB70_169:                             # %cond.end972
.LBB70_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_176
# %bb.171:                              # %land.lhs.true980
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_176
# %bb.172:                              # %cond.true984
	movswl	-28(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_174
# %bb.173:                              # %cond.true989
	movswl	-28(%rbp), %eax
	jmp	.LBB70_175
.LBB70_174:                             # %cond.false991
	movswl	-32(%rbp), %eax
.LBB70_175:                             # %cond.end993
	jmp	.LBB70_180
.LBB70_176:                             # %cond.false995
	movswl	-28(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB70_178
# %bb.177:                              # %cond.true1000
	movswl	-28(%rbp), %eax
	jmp	.LBB70_179
.LBB70_178:                             # %cond.false1002
	movswl	-32(%rbp), %eax
.LBB70_179:                             # %cond.end1004
.LBB70_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB70_185
.LBB70_184:                             # %cond.false1023
	movswl	-30(%rbp), %eax
.LBB70_185:                             # %cond.end1025
	jmp	.LBB70_190
.LBB70_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB70_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB70_189
.LBB70_188:                             # %cond.false1034
	movswl	-30(%rbp), %eax
.LBB70_189:                             # %cond.end1036
.LBB70_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_192
# %bb.191:                              # %if.then1044
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB70_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_194
# %bb.193:                              # %if.then1051
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB70_194:                             # %if.end1055
	movl	$0, -4(%rbp)
.LBB70_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_197 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB70_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB70_197:                             # %for.cond1061
                                        #   Parent Loop BB70_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB70_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB70_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB70_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB70_203
.LBB70_202:                             # %if.else1102
                                        #   in Loop: Header=BB70_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB70_203:                             # %if.end1128
                                        #   in Loop: Header=BB70_197 Depth=2
	jmp	.LBB70_205
.LBB70_204:                             # %if.else1129
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB70_205:                             # %if.end1151
                                        #   in Loop: Header=BB70_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB70_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB70_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB70_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB70_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB70_210
.LBB70_209:                             # %if.else1187
                                        #   in Loop: Header=BB70_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB70_210:                             # %if.end1213
                                        #   in Loop: Header=BB70_197 Depth=2
	jmp	.LBB70_212
.LBB70_211:                             # %if.else1214
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB70_212:                             # %if.end1236
                                        #   in Loop: Header=BB70_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB70_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB70_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB70_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB70_215:                             # %if.end1255
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB70_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB70_221
.LBB70_217:                             # %if.else1269
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB70_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB70_220
.LBB70_219:                             # %if.else1283
                                        #   in Loop: Header=BB70_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB70_220:                             # %if.end1288
                                        #   in Loop: Header=BB70_197 Depth=2
	jmp	.LBB70_221
.LBB70_221:                             # %if.end1289
                                        #   in Loop: Header=BB70_197 Depth=2
	jmp	.LBB70_222
.LBB70_222:                             # %for.inc
                                        #   in Loop: Header=BB70_197 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_197
.LBB70_223:                             # %for.end
                                        #   in Loop: Header=BB70_195 Depth=1
	jmp	.LBB70_224
.LBB70_224:                             # %for.inc1290
                                        #   in Loop: Header=BB70_195 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_195
.LBB70_225:                             # %for.end1292
	jmp	.LBB70_259
.LBB70_226:                             # %if.else1293
	movl	$0, -4(%rbp)
.LBB70_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_229 Depth 2
                                        #       Child Loop BB70_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB70_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB70_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB70_229:                             # %for.cond1304
                                        #   Parent Loop BB70_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB70_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB70_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB70_229 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB70_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB70_234
.LBB70_233:                             # %cond.false1319
                                        #   in Loop: Header=BB70_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB70_234
.LBB70_234:                             # %cond.end1320
                                        #   in Loop: Header=BB70_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -40(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB70_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB70_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB70_254
.LBB70_236:                             # %if.else1393
                                        #   in Loop: Header=BB70_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -164(%rbp)
.LBB70_237:                             # %for.cond1394
                                        #   Parent Loop BB70_227 Depth=1
                                        #     Parent Loop BB70_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB70_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB70_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB70_240
.LBB70_239:                             # %cond.false1402
                                        #   in Loop: Header=BB70_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB70_240:                             # %cond.end1406
                                        #   in Loop: Header=BB70_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB70_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB70_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-164(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-224(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB70_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB70_229 Depth=2
	movl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB70_247
.LBB70_243:                             # %if.else1425
                                        #   in Loop: Header=BB70_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB70_237 Depth=3
	jmp	.LBB70_245
.LBB70_245:                             # %for.inc1427
                                        #   in Loop: Header=BB70_237 Depth=3
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB70_237
.LBB70_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB70_229 Depth=2
	jmp	.LBB70_247
.LBB70_247:                             # %for.end1429
                                        #   in Loop: Header=BB70_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB70_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB70_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -168(%rbp)
	cmpl	$9999, -168(%rbp)       # imm = 0x270F
	jne	.LBB70_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB70_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB70_251
.LBB70_250:                             # %if.else1487
                                        #   in Loop: Header=BB70_229 Depth=2
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB70_251:                             # %if.end1571
                                        #   in Loop: Header=BB70_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB70_253
.LBB70_252:                             # %if.else1587
                                        #   in Loop: Header=BB70_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB70_253:                             # %if.end1602
                                        #   in Loop: Header=BB70_229 Depth=2
	jmp	.LBB70_254
.LBB70_254:                             # %if.end1603
                                        #   in Loop: Header=BB70_229 Depth=2
	jmp	.LBB70_255
.LBB70_255:                             # %for.inc1604
                                        #   in Loop: Header=BB70_229 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_229
.LBB70_256:                             # %for.end1606
                                        #   in Loop: Header=BB70_227 Depth=1
	jmp	.LBB70_257
.LBB70_257:                             # %for.inc1607
                                        #   in Loop: Header=BB70_227 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_227
.LBB70_258:                             # %for.end1609
	jmp	.LBB70_259
.LBB70_259:                             # %if.end1610
	cmpl	$1784763982, -228(%rbp) # imm = 0x6A61564E
	jne	.LBB70_261
.LBB70_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_260
.Lfunc_end70:
	.size	Get_Direct_Motion_Vectors.45, .Lfunc_end70-Get_Direct_Motion_Vectors.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.46
.LCPI71_0:
	.quad	4602678819172646912     # double 0.5
.LCPI71_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.46
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.46,@function
SubPelBlockMotionSearch.46:             # @SubPelBlockMotionSearch.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$2043288830, -188(%rbp) # imm = 0x79CA1CFE
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -136(%rbp)
	movl	%ecx, -132(%rbp)
	movl	%r8d, -156(%rbp)
	movl	%r9d, -96(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -144(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$1, -96(%rbp)
	jne	.LBB71_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB71_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB71_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB71_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB71_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB71_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB71_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -148(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movl	-156(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB71_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB71_10
.LBB71_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB71_10
.LBB71_10:                              # %cond.end
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB71_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB71_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB71_14
.LBB71_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB71_14:                              # %cond.end35
	jmp	.LBB71_16
.LBB71_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB71_16:                              # %cond.end38
	movl	%eax, -200(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB71_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB71_20
.LBB71_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB71_20
.LBB71_20:                              # %cond.end50
	movl	%ecx, -152(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB71_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB71_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB71_26
.LBB71_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB71_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB71_25:                              # %land.end65
.LBB71_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -192(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB71_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB71_29
.LBB71_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB71_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-136(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -192(%rbp)
	je	.LBB71_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB71_32
# %bb.31:                               # %if.then
	movl	-136(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB71_33
.LBB71_32:                              # %if.else
	movl	-136(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB71_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-140(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-148(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB71_38
# %bb.34:                               # %land.lhs.true112
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_38
# %bb.35:                               # %land.lhs.true118
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB71_38
# %bb.36:                               # %land.lhs.true123
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB71_39
.LBB71_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB71_39:                              # %if.end131
	movl	$0, -84(%rbp)
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB71_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_47 Depth 2
                                        #       Child Loop BB71_51 Depth 3
                                        #         Child Loop BB71_57 Depth 4
                                        #           Child Loop BB71_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-200(%rbp), %eax
	jge	.LBB71_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB71_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rdx
	movl	-108(%rbp), %esi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-104(%rbp), %edi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB71_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB71_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB71_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB71_40 Depth=1
	movl	-144(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB71_44:                              # %if.end164
                                        #   in Loop: Header=BB71_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB71_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB71_40 Depth=1
	jmp	.LBB71_75
.LBB71_46:                              # %if.end168
                                        #   in Loop: Header=BB71_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB71_47:                              # %for.cond169
                                        #   Parent Loop BB71_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_51 Depth 3
                                        #         Child Loop BB71_57 Depth 4
                                        #           Child Loop BB71_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-148(%rbp), %ecx
	jge	.LBB71_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB71_47 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB71_49:                              # %land.end174
                                        #   in Loop: Header=BB71_47 Depth=2
	testb	$1, %al
	jne	.LBB71_50
	jmp	.LBB71_70
.LBB71_50:                              # %for.body176
                                        #   in Loop: Header=BB71_47 Depth=2
	movl	-156(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-104(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB71_51:                              # %for.cond180
                                        #   Parent Loop BB71_40 Depth=1
                                        #     Parent Loop BB71_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_57 Depth 4
                                        #           Child Loop BB71_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB71_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB71_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-132(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-108(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB71_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB71_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB71_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB71_47 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB71_68
.LBB71_55:                              # %if.end342
                                        #   in Loop: Header=BB71_51 Depth=3
	jmp	.LBB71_65
.LBB71_56:                              # %if.else343
                                        #   in Loop: Header=BB71_51 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB71_57:                              # %for.cond344
                                        #   Parent Loop BB71_40 Depth=1
                                        #     Parent Loop BB71_47 Depth=2
                                        #       Parent Loop BB71_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB71_59 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB71_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB71_57 Depth=4
	movl	$0, -80(%rbp)
.LBB71_59:                              # %for.cond348
                                        #   Parent Loop BB71_40 Depth=1
                                        #     Parent Loop BB71_47 Depth=2
                                        #       Parent Loop BB71_51 Depth=3
                                        #         Parent Loop BB71_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB71_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB71_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB71_59 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB71_59
.LBB71_62:                              # %for.end
                                        #   in Loop: Header=BB71_57 Depth=4
	jmp	.LBB71_63
.LBB71_63:                              # %for.inc361
                                        #   in Loop: Header=BB71_57 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB71_57
.LBB71_64:                              # %for.end363
                                        #   in Loop: Header=BB71_51 Depth=3
	jmp	.LBB71_65
.LBB71_65:                              # %if.end364
                                        #   in Loop: Header=BB71_51 Depth=3
	jmp	.LBB71_66
.LBB71_66:                              # %for.inc365
                                        #   in Loop: Header=BB71_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_51
.LBB71_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB71_47 Depth=2
	jmp	.LBB71_68
.LBB71_68:                              # %for.end367
                                        #   in Loop: Header=BB71_47 Depth=2
	jmp	.LBB71_69
.LBB71_69:                              # %for.inc368
                                        #   in Loop: Header=BB71_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB71_47
.LBB71_70:                              # %for.end370
                                        #   in Loop: Header=BB71_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB71_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB71_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB71_72:                              # %if.end377
                                        #   in Loop: Header=BB71_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB71_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB71_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB71_74:                              # %if.end381
                                        #   in Loop: Header=BB71_40 Depth=1
	jmp	.LBB71_75
.LBB71_75:                              # %for.inc382
                                        #   in Loop: Header=BB71_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB71_40
.LBB71_76:                              # %for.end384
	cmpl	$0, -84(%rbp)
	je	.LBB71_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB71_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB71_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB71_80:                              # %if.end403
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB71_85
# %bb.81:                               # %land.lhs.true408
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_85
# %bb.82:                               # %land.lhs.true414
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB71_85
# %bb.83:                               # %land.lhs.true419
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB71_86
.LBB71_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB71_86:                              # %if.end427
	movl	$0, -84(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB71_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_91 Depth 2
                                        #       Child Loop BB71_95 Depth 3
                                        #         Child Loop BB71_101 Depth 4
                                        #           Child Loop BB71_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB71_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB71_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rdx
	movl	-108(%rbp), %esi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-104(%rbp), %edi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB71_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB71_87 Depth=1
	jmp	.LBB71_119
.LBB71_90:                              # %if.end456
                                        #   in Loop: Header=BB71_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB71_91:                              # %for.cond457
                                        #   Parent Loop BB71_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_95 Depth 3
                                        #         Child Loop BB71_101 Depth 4
                                        #           Child Loop BB71_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-148(%rbp), %ecx
	jge	.LBB71_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB71_91 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB71_93:                              # %land.end463
                                        #   in Loop: Header=BB71_91 Depth=2
	testb	$1, %al
	jne	.LBB71_94
	jmp	.LBB71_114
.LBB71_94:                              # %for.body465
                                        #   in Loop: Header=BB71_91 Depth=2
	movl	-156(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-104(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB71_95:                              # %for.cond469
                                        #   Parent Loop BB71_87 Depth=1
                                        #     Parent Loop BB71_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_101 Depth 4
                                        #           Child Loop BB71_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB71_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB71_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-132(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-108(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB71_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB71_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB71_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB71_91 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB71_112
.LBB71_99:                              # %if.end636
                                        #   in Loop: Header=BB71_95 Depth=3
	jmp	.LBB71_109
.LBB71_100:                             # %if.else637
                                        #   in Loop: Header=BB71_95 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB71_101:                             # %for.cond638
                                        #   Parent Loop BB71_87 Depth=1
                                        #     Parent Loop BB71_91 Depth=2
                                        #       Parent Loop BB71_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB71_103 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB71_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB71_101 Depth=4
	movl	$0, -80(%rbp)
.LBB71_103:                             # %for.cond642
                                        #   Parent Loop BB71_87 Depth=1
                                        #     Parent Loop BB71_91 Depth=2
                                        #       Parent Loop BB71_95 Depth=3
                                        #         Parent Loop BB71_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB71_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB71_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB71_103 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB71_103
.LBB71_106:                             # %for.end657
                                        #   in Loop: Header=BB71_101 Depth=4
	jmp	.LBB71_107
.LBB71_107:                             # %for.inc658
                                        #   in Loop: Header=BB71_101 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB71_101
.LBB71_108:                             # %for.end660
                                        #   in Loop: Header=BB71_95 Depth=3
	jmp	.LBB71_109
.LBB71_109:                             # %if.end661
                                        #   in Loop: Header=BB71_95 Depth=3
	jmp	.LBB71_110
.LBB71_110:                             # %for.inc662
                                        #   in Loop: Header=BB71_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_95
.LBB71_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB71_91 Depth=2
	jmp	.LBB71_112
.LBB71_112:                             # %for.end664
                                        #   in Loop: Header=BB71_91 Depth=2
	jmp	.LBB71_113
.LBB71_113:                             # %for.inc665
                                        #   in Loop: Header=BB71_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB71_91
.LBB71_114:                             # %for.end667
                                        #   in Loop: Header=BB71_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB71_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB71_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB71_116:                             # %if.end675
                                        #   in Loop: Header=BB71_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB71_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB71_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB71_118:                             # %if.end679
                                        #   in Loop: Header=BB71_87 Depth=1
	jmp	.LBB71_119
.LBB71_119:                             # %for.inc680
                                        #   in Loop: Header=BB71_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB71_87
.LBB71_120:                             # %for.end682
	cmpl	$0, -84(%rbp)
	je	.LBB71_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB71_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$2043288830, -188(%rbp) # imm = 0x79CA1CFE
	jne	.LBB71_124
.LBB71_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_123
.Lfunc_end71:
	.size	SubPelBlockMotionSearch.46, .Lfunc_end71-SubPelBlockMotionSearch.46
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.47        # -- Begin function GetSkipCostMB.47
	.p2align	4, 0x90
	.type	GetSkipCostMB.47,@function
GetSkipCostMB.47:                       # @GetSkipCostMB.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$691747340, -56(%rbp)   # imm = 0x293B3A0C
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_3 Depth 2
                                        #       Child Loop BB72_5 Depth 3
                                        #         Child Loop BB72_7 Depth 4
                                        #           Child Loop BB72_9 Depth 5
                                        #     Child Loop BB72_24 Depth 2
                                        #       Child Loop BB72_26 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB72_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB72_3:                               # %for.cond2
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_5 Depth 3
                                        #         Child Loop BB72_7 Depth 4
                                        #           Child Loop BB72_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB72_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB72_5:                               # %for.cond6
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_7 Depth 4
                                        #           Child Loop BB72_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB72_7:                               # %for.cond11
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_3 Depth=2
                                        #       Parent Loop BB72_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB72_9 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB72_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB72_7 Depth=4
	movl	$0, -16(%rbp)
.LBB72_9:                               # %for.cond14
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_3 Depth=2
                                        #       Parent Loop BB72_5 Depth=3
                                        #         Parent Loop BB72_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB72_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB72_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-28(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB72_9 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_9
.LBB72_12:                              # %for.end
                                        #   in Loop: Header=BB72_7 Depth=4
	jmp	.LBB72_13
.LBB72_13:                              # %for.inc39
                                        #   in Loop: Header=BB72_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_7
.LBB72_14:                              # %for.end41
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB72_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB72_17
.LBB72_16:                              # %if.then
                                        #   in Loop: Header=BB72_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB72_17:                              # %if.end
                                        #   in Loop: Header=BB72_5 Depth=3
	jmp	.LBB72_18
.LBB72_18:                              # %for.inc45
                                        #   in Loop: Header=BB72_5 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB72_5
.LBB72_19:                              # %for.end47
                                        #   in Loop: Header=BB72_3 Depth=2
	jmp	.LBB72_20
.LBB72_20:                              # %for.inc48
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB72_3
.LBB72_21:                              # %for.end50
                                        #   in Loop: Header=BB72_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB72_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB72_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB72_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB72_24:                              # %for.cond58
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_26 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB72_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB72_24 Depth=2
	movl	$0, -16(%rbp)
.LBB72_26:                              # %for.cond62
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -16(%rbp)
	jge	.LBB72_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB72_26 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB72_26 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_26
.LBB72_29:                              # %for.end75
                                        #   in Loop: Header=BB72_24 Depth=2
	jmp	.LBB72_30
.LBB72_30:                              # %for.inc76
                                        #   in Loop: Header=BB72_24 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_24
.LBB72_31:                              # %for.end78
                                        #   in Loop: Header=BB72_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB72_32:                              # %if.end83
                                        #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_33
.LBB72_33:                              # %for.inc84
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB72_1
.LBB72_34:                              # %for.end86
	movl	-36(%rbp), %ebx
	cmpl	$691747340, -56(%rbp)   # imm = 0x293B3A0C
	jne	.LBB72_36
.LBB72_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_35
.Lfunc_end72:
	.size	GetSkipCostMB.47, .Lfunc_end72-GetSkipCostMB.47
	.cfi_endproc
                                        # -- End function
	.globl	SATD.48                 # -- Begin function SATD.48
	.p2align	4, 0x90
	.type	SATD.48,@function
SATD.48:                                # @SATD.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$1860788649, -180(%rbp) # imm = 0x6EE961A9
	movq	%rdi, -16(%rbp)
	movl	%esi, -184(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB73_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB73_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB73_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB73_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB73_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB73_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB73_6
.LBB73_5:                               # %cond.false
                                        #   in Loop: Header=BB73_2 Depth=1
	movl	-100(%rbp), %eax
.LBB73_6:                               # %cond.end
                                        #   in Loop: Header=BB73_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB73_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB73_2
.LBB73_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB73_14
.LBB73_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB73_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB73_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB73_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB73_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_10
.LBB73_13:                              # %for.end270
	jmp	.LBB73_14
.LBB73_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$1860788649, -180(%rbp) # imm = 0x6EE961A9
	jne	.LBB73_16
.LBB73_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_15
.Lfunc_end73:
	.size	SATD.48, .Lfunc_end73-SATD.48
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.49        # -- Begin function GetSkipCostMB.49
	.p2align	4, 0x90
	.type	GetSkipCostMB.49,@function
GetSkipCostMB.49:                       # @GetSkipCostMB.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$1209975090, -48(%rbp)  # imm = 0x481EC132
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
                                        #       Child Loop BB74_5 Depth 3
                                        #         Child Loop BB74_7 Depth 4
                                        #           Child Loop BB74_9 Depth 5
                                        #     Child Loop BB74_24 Depth 2
                                        #       Child Loop BB74_26 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB74_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB74_3:                               # %for.cond2
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_5 Depth 3
                                        #         Child Loop BB74_7 Depth 4
                                        #           Child Loop BB74_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB74_5:                               # %for.cond6
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_7 Depth 4
                                        #           Child Loop BB74_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB74_7:                               # %for.cond11
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_3 Depth=2
                                        #       Parent Loop BB74_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB74_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB74_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB74_7 Depth=4
	movl	$0, -12(%rbp)
.LBB74_9:                               # %for.cond14
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_3 Depth=2
                                        #       Parent Loop BB74_5 Depth=3
                                        #         Parent Loop BB74_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB74_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB74_9 Depth=5
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB74_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_9
.LBB74_12:                              # %for.end
                                        #   in Loop: Header=BB74_7 Depth=4
	jmp	.LBB74_13
.LBB74_13:                              # %for.inc39
                                        #   in Loop: Header=BB74_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_7
.LBB74_14:                              # %for.end41
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB74_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB74_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB74_17
.LBB74_16:                              # %if.then
                                        #   in Loop: Header=BB74_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB74_17:                              # %if.end
                                        #   in Loop: Header=BB74_5 Depth=3
	jmp	.LBB74_18
.LBB74_18:                              # %for.inc45
                                        #   in Loop: Header=BB74_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB74_5
.LBB74_19:                              # %for.end47
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_20
.LBB74_20:                              # %for.inc48
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_3
.LBB74_21:                              # %for.end50
                                        #   in Loop: Header=BB74_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB74_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB74_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB74_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
.LBB74_24:                              # %for.cond58
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB74_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB74_24 Depth=2
	movl	$0, -12(%rbp)
.LBB74_26:                              # %for.cond62
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB74_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB74_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB74_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_26
.LBB74_29:                              # %for.end75
                                        #   in Loop: Header=BB74_24 Depth=2
	jmp	.LBB74_30
.LBB74_30:                              # %for.inc76
                                        #   in Loop: Header=BB74_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_24
.LBB74_31:                              # %for.end78
                                        #   in Loop: Header=BB74_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB74_32:                              # %if.end83
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_33
.LBB74_33:                              # %for.inc84
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB74_1
.LBB74_34:                              # %for.end86
	movl	-36(%rbp), %ebx
	cmpl	$1209975090, -48(%rbp)  # imm = 0x481EC132
	jne	.LBB74_36
.LBB74_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_35
.Lfunc_end74:
	.size	GetSkipCostMB.49, .Lfunc_end74-GetSkipCostMB.49
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.50 # -- Begin function InitializeFastFullIntegerSearch.50
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.50,@function
InitializeFastFullIntegerSearch.50:     # @InitializeFastFullIntegerSearch.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$229272494, -28(%rbp)   # imm = 0xDAA6BAE
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB75_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB75_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_7 Depth 2
                                        #       Child Loop BB75_11 Depth 3
                                        #         Child Loop BB75_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB75_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB75_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB75_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_6:                               # %if.end12
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	$0, -8(%rbp)
.LBB75_7:                               # %for.cond13
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_11 Depth 3
                                        #         Child Loop BB75_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB75_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB75_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB75_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_10:                              # %if.end26
                                        #   in Loop: Header=BB75_7 Depth=2
	movl	$1, -12(%rbp)
.LBB75_11:                              # %for.cond27
                                        #   Parent Loop BB75_3 Depth=1
                                        #     Parent Loop BB75_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB75_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB75_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB75_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_14:                              # %if.end41
                                        #   in Loop: Header=BB75_11 Depth=3
	movl	$0, -20(%rbp)
.LBB75_15:                              # %for.cond42
                                        #   Parent Loop BB75_3 Depth=1
                                        #     Parent Loop BB75_7 Depth=2
                                        #       Parent Loop BB75_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB75_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB75_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB75_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_18:                              # %if.end60
                                        #   in Loop: Header=BB75_15 Depth=4
	jmp	.LBB75_19
.LBB75_19:                              # %for.inc
                                        #   in Loop: Header=BB75_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_15
.LBB75_20:                              # %for.end
                                        #   in Loop: Header=BB75_11 Depth=3
	jmp	.LBB75_21
.LBB75_21:                              # %for.inc61
                                        #   in Loop: Header=BB75_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_11
.LBB75_22:                              # %for.end63
                                        #   in Loop: Header=BB75_7 Depth=2
	jmp	.LBB75_23
.LBB75_23:                              # %for.inc64
                                        #   in Loop: Header=BB75_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_7
.LBB75_24:                              # %for.end66
                                        #   in Loop: Header=BB75_3 Depth=1
	jmp	.LBB75_25
.LBB75_25:                              # %for.inc67
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_3
.LBB75_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB75_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB75_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB75_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB75_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB75_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB75_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB75_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB75_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB75_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB75_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB75_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_40:                              # %if.end109
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB75_42:                              # %if.end120
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB75_44:                              # %if.end131
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB75_46:                              # %if.end142
                                        #   in Loop: Header=BB75_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB75_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB75_48:                              # %if.end153
                                        #   in Loop: Header=BB75_37 Depth=1
	jmp	.LBB75_49
.LBB75_49:                              # %for.inc154
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_37
.LBB75_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB75_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB75_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB75_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	$0, -8(%rbp)
.LBB75_54:                              # %for.cond164
                                        #   Parent Loop BB75_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB75_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB75_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB75_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_54
.LBB75_57:                              # %for.end175
                                        #   in Loop: Header=BB75_52 Depth=1
	jmp	.LBB75_58
.LBB75_58:                              # %for.inc176
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_52
.LBB75_59:                              # %for.end178
	jmp	.LBB75_69
.LBB75_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB75_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB75_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB75_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB75_63:                              # %for.cond191
                                        #   Parent Loop BB75_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB75_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB75_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB75_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_63
.LBB75_66:                              # %for.end202
                                        #   in Loop: Header=BB75_61 Depth=1
	jmp	.LBB75_67
.LBB75_67:                              # %for.inc203
                                        #   in Loop: Header=BB75_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_61
.LBB75_68:                              # %for.end205
	jmp	.LBB75_69
.LBB75_69:                              # %if.end206
	cmpl	$229272494, -28(%rbp)   # imm = 0xDAA6BAE
	jne	.LBB75_71
.LBB75_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_70
.Lfunc_end75:
	.size	InitializeFastFullIntegerSearch.50, .Lfunc_end75-InitializeFastFullIntegerSearch.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.51
.LCPI76_0:
	.quad	4602678819172646912     # double 0.5
.LCPI76_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.51
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.51,@function
FullPelBlockMotionBiPred.51:            # @FullPelBlockMotionBiPred.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$680933926, -188(%rbp)  # imm = 0x28963A26
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -112(%rbp)
	movl	%r8d, -124(%rbp)
	movl	%r9d, -148(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB76_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB76_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB76_4
.LBB76_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB76_4
.LBB76_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB76_6
# %bb.5:                                # %cond.true9
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB76_7
.LBB76_6:                               # %cond.false11
	movl	-36(%rbp), %eax
.LBB76_7:                               # %cond.end12
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -120(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -172(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -140(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-112(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-124(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-112(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movl	-124(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -44(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB76_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB76_11
.LBB76_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB76_11:                              # %cond.end87
	jmp	.LBB76_13
.LBB76_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB76_13:                              # %cond.end91
	movw	%ax, -50(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB76_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB76_17
.LBB76_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB76_17:                              # %cond.end114
	jmp	.LBB76_19
.LBB76_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB76_19:                              # %cond.end118
	movw	%ax, -48(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB76_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB76_23
.LBB76_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB76_23:                              # %cond.end138
	jmp	.LBB76_25
.LBB76_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB76_25
.LBB76_25:                              # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB76_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB76_29
.LBB76_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB76_29:                              # %cond.end161
	jmp	.LBB76_31
.LBB76_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB76_31
.LBB76_31:                              # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB76_37
.LBB76_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB76_37:                              # %if.end
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_42
# %bb.38:                               # %land.lhs.true196
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_42
# %bb.39:                               # %land.lhs.true204
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_42
# %bb.40:                               # %land.lhs.true208
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB76_43
.LBB76_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB76_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB76_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_49 Depth 2
                                        #       Child Loop BB76_51 Depth 3
                                        #     Child Loop BB76_85 Depth 2
                                        #       Child Loop BB76_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB76_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB76_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-46(%rbp), %edx
	shll	$2, %edx
	subl	-176(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-42(%rbp), %esi
	shll	$2, %esi
	subl	-184(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rcx
	movl	-128(%rbp), %edx
	shll	$2, %edx
	subl	-192(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-132(%rbp), %esi
	shll	$2, %esi
	subl	-180(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_99
.LBB76_47:                              # %if.end257
                                        #   in Loop: Header=BB76_44 Depth=1
	cmpw	$0, -44(%rbp)
	je	.LBB76_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	$0, -40(%rbp)
.LBB76_49:                              # %for.cond260
                                        #   Parent Loop BB76_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_51 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB76_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB76_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-116(%rbp), %r8d
	movl	-104(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-116(%rbp), %r8d
	movl	-104(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -92(%rbp)
.LBB76_51:                              # %for.cond271
                                        #   Parent Loop BB76_44 Depth=1
                                        #     Parent Loop BB76_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB76_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_58
.LBB76_54:                              # %cond.false296
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_57
.LBB76_56:                              # %cond.false310
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_57:                              # %cond.end320
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_58:                              # %cond.end322
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_64
.LBB76_60:                              # %cond.false354
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_63
.LBB76_62:                              # %cond.false369
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_63:                              # %cond.end379
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_64:                              # %cond.end381
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_70
.LBB76_66:                              # %cond.false413
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_69
.LBB76_68:                              # %cond.false428
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_69:                              # %cond.end438
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_70:                              # %cond.end440
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_76
.LBB76_72:                              # %cond.false472
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_75
.LBB76_74:                              # %cond.false487
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_75:                              # %cond.end497
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_76:                              # %cond.end499
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB76_51 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB76_51
.LBB76_78:                              # %for.end
                                        #   in Loop: Header=BB76_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_83
.LBB76_80:                              # %if.end512
                                        #   in Loop: Header=BB76_49 Depth=2
	jmp	.LBB76_81
.LBB76_81:                              # %for.inc513
                                        #   in Loop: Header=BB76_49 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB76_49
.LBB76_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_83
.LBB76_83:                              # %for.end515
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_96
.LBB76_84:                              # %if.else516
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	$0, -40(%rbp)
.LBB76_85:                              # %for.cond517
                                        #   Parent Loop BB76_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_87 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB76_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB76_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-116(%rbp), %r8d
	movl	-104(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-116(%rbp), %r8d
	movl	-104(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -92(%rbp)
.LBB76_87:                              # %for.cond529
                                        #   Parent Loop BB76_44 Depth=1
                                        #     Parent Loop BB76_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB76_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB76_87 Depth=3
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB76_87 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB76_87
.LBB76_90:                              # %for.end583
                                        #   in Loop: Header=BB76_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_95
.LBB76_92:                              # %if.end587
                                        #   in Loop: Header=BB76_85 Depth=2
	jmp	.LBB76_93
.LBB76_93:                              # %for.inc588
                                        #   in Loop: Header=BB76_85 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB76_85
.LBB76_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_95
.LBB76_95:                              # %for.end590
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_96
.LBB76_96:                              # %if.end591
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB76_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB76_98:                              # %if.end595
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_99
.LBB76_99:                              # %for.inc596
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB76_44
.LBB76_100:                             # %for.end598
	cmpl	$0, -120(%rbp)
	je	.LBB76_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB76_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$680933926, -188(%rbp)  # imm = 0x28963A26
	jne	.LBB76_104
.LBB76_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_103
.Lfunc_end76:
	.size	FullPelBlockMotionBiPred.51, .Lfunc_end76-FullPelBlockMotionBiPred.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.52
.LCPI77_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI77_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.52
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.52,@function
Init_Motion_Search_Module.52:           # @Init_Motion_Search_Module.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$308465040, -52(%rbp)   # imm = 0x1262CD90
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB77_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB77_3
.LBB77_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB77_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB77_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB77_6
.LBB77_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB77_6:                               # %cond.end19
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB77_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB77_9
.LBB77_8:                               # %cond.false24
	movl	-36(%rbp), %eax
	addl	$1, %eax
.LBB77_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI77_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI77_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI77_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB77_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB77_11:                              # %if.end
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB77_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB77_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB77_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB77_15:                              # %if.end66
	movslq	-60(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB77_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB77_17:                              # %if.end72
	movslq	-32(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB77_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB77_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB77_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB77_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB77_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_22:                              # %for.cond90
                                        #   Parent Loop BB77_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB77_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB77_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB77_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_22
.LBB77_25:                              # %for.end
                                        #   in Loop: Header=BB77_20 Depth=1
	jmp	.LBB77_26
.LBB77_26:                              # %for.inc98
                                        #   in Loop: Header=BB77_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_20
.LBB77_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB77_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jg	.LBB77_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB77_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_30:                              # %for.cond111
                                        #   Parent Loop BB77_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB77_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB77_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB77_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_30
.LBB77_33:                              # %for.end119
                                        #   in Loop: Header=BB77_28 Depth=1
	jmp	.LBB77_34
.LBB77_34:                              # %for.inc120
                                        #   in Loop: Header=BB77_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_28
.LBB77_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB77_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB77_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB77_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB77_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_36
.LBB77_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB77_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_45 Depth 2
                                        #     Child Loop BB77_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB77_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB77_43
.LBB77_42:                              # %cond.false143
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB77_43:                              # %cond.end144
                                        #   in Loop: Header=BB77_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB77_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB77_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB77_45:                              # %for.cond151
                                        #   Parent Loop BB77_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB77_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB77_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB77_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_45
.LBB77_48:                              # %for.end168
                                        #   in Loop: Header=BB77_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_49:                              # %for.cond170
                                        #   Parent Loop BB77_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB77_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB77_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB77_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_49
.LBB77_52:                              # %for.end187
                                        #   in Loop: Header=BB77_40 Depth=1
	jmp	.LBB77_53
.LBB77_53:                              # %for.inc188
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_40
.LBB77_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB77_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB77_56:                              # %if.end192
	cmpl	$308465040, -52(%rbp)   # imm = 0x1262CD90
	jne	.LBB77_58
.LBB77_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_57
.Lfunc_end77:
	.size	Init_Motion_Search_Module.52, .Lfunc_end77-Init_Motion_Search_Module.52
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.53 # -- Begin function InitializeFastFullIntegerSearch.53
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.53,@function
InitializeFastFullIntegerSearch.53:     # @InitializeFastFullIntegerSearch.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$301468952, -28(%rbp)   # imm = 0x11F80D18
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB78_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB78_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_7 Depth 2
                                        #       Child Loop BB78_11 Depth 3
                                        #         Child Loop BB78_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB78_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB78_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB78_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_6:                               # %if.end12
                                        #   in Loop: Header=BB78_3 Depth=1
	movl	$0, -8(%rbp)
.LBB78_7:                               # %for.cond13
                                        #   Parent Loop BB78_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_11 Depth 3
                                        #         Child Loop BB78_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB78_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB78_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB78_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_10:                              # %if.end26
                                        #   in Loop: Header=BB78_7 Depth=2
	movl	$1, -12(%rbp)
.LBB78_11:                              # %for.cond27
                                        #   Parent Loop BB78_3 Depth=1
                                        #     Parent Loop BB78_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB78_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB78_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB78_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_14:                              # %if.end41
                                        #   in Loop: Header=BB78_11 Depth=3
	movl	$0, -20(%rbp)
.LBB78_15:                              # %for.cond42
                                        #   Parent Loop BB78_3 Depth=1
                                        #     Parent Loop BB78_7 Depth=2
                                        #       Parent Loop BB78_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB78_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB78_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB78_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB78_18:                              # %if.end60
                                        #   in Loop: Header=BB78_15 Depth=4
	jmp	.LBB78_19
.LBB78_19:                              # %for.inc
                                        #   in Loop: Header=BB78_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_15
.LBB78_20:                              # %for.end
                                        #   in Loop: Header=BB78_11 Depth=3
	jmp	.LBB78_21
.LBB78_21:                              # %for.inc61
                                        #   in Loop: Header=BB78_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB78_11
.LBB78_22:                              # %for.end63
                                        #   in Loop: Header=BB78_7 Depth=2
	jmp	.LBB78_23
.LBB78_23:                              # %for.inc64
                                        #   in Loop: Header=BB78_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_7
.LBB78_24:                              # %for.end66
                                        #   in Loop: Header=BB78_3 Depth=1
	jmp	.LBB78_25
.LBB78_25:                              # %for.inc67
                                        #   in Loop: Header=BB78_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_3
.LBB78_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB78_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB78_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB78_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB78_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB78_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB78_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB78_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB78_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB78_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB78_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB78_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB78_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB78_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB78_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB78_40:                              # %if.end109
                                        #   in Loop: Header=BB78_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB78_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB78_42:                              # %if.end120
                                        #   in Loop: Header=BB78_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB78_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB78_44:                              # %if.end131
                                        #   in Loop: Header=BB78_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB78_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB78_46:                              # %if.end142
                                        #   in Loop: Header=BB78_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB78_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB78_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB78_48:                              # %if.end153
                                        #   in Loop: Header=BB78_37 Depth=1
	jmp	.LBB78_49
.LBB78_49:                              # %for.inc154
                                        #   in Loop: Header=BB78_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_37
.LBB78_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB78_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB78_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB78_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB78_52 Depth=1
	movl	$0, -8(%rbp)
.LBB78_54:                              # %for.cond164
                                        #   Parent Loop BB78_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB78_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB78_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB78_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_54
.LBB78_57:                              # %for.end175
                                        #   in Loop: Header=BB78_52 Depth=1
	jmp	.LBB78_58
.LBB78_58:                              # %for.inc176
                                        #   in Loop: Header=BB78_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_52
.LBB78_59:                              # %for.end178
	jmp	.LBB78_69
.LBB78_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB78_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB78_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB78_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB78_63:                              # %for.cond191
                                        #   Parent Loop BB78_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB78_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB78_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB78_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_63
.LBB78_66:                              # %for.end202
                                        #   in Loop: Header=BB78_61 Depth=1
	jmp	.LBB78_67
.LBB78_67:                              # %for.inc203
                                        #   in Loop: Header=BB78_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_61
.LBB78_68:                              # %for.end205
	jmp	.LBB78_69
.LBB78_69:                              # %if.end206
	cmpl	$301468952, -28(%rbp)   # imm = 0x11F80D18
	jne	.LBB78_71
.LBB78_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_70
.Lfunc_end78:
	.size	InitializeFastFullIntegerSearch.53, .Lfunc_end78-InitializeFastFullIntegerSearch.53
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.54 # -- Begin function PartitionMotionSearch.54
	.p2align	4, 0x90
	.type	PartitionMotionSearch.54,@function
PartitionMotionSearch.54:               # @PartitionMotionSearch.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$2085443223, -76(%rbp)  # imm = 0x7C4D5697
	movl	%edi, -8(%rbp)
	movl	%esi, -24(%rbp)
	vmovsd	%xmm0, -104(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB79_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB79_3
.LBB79_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB79_3
.LBB79_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -84(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB79_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB79_6
# %bb.5:                                # %if.then20
	movl	$4, -52(%rbp)
	jmp	.LBB79_7
.LBB79_6:                               # %if.else
	movl	$2, -52(%rbp)
.LBB79_7:                               # %if.end
	jmp	.LBB79_9
.LBB79_8:                               # %if.else21
	movl	$0, -52(%rbp)
.LBB79_9:                               # %if.end22
	movl	-80(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB79_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_12 Depth 2
                                        #       Child Loop BB79_29 Depth 3
                                        #         Child Loop BB79_31 Depth 4
                                        #           Child Loop BB79_33 Depth 5
                                        #             Child Loop BB79_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB79_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB79_10 Depth=1
	movw	$0, -2(%rbp)
.LBB79_12:                              # %for.cond27
                                        #   Parent Loop BB79_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_29 Depth 3
                                        #         Child Loop BB79_31 Depth 4
                                        #           Child Loop BB79_33 Depth 5
                                        #             Child Loop BB79_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB79_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB79_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB79_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB79_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB79_28
.LBB79_15:                              # %if.else38
                                        #   in Loop: Header=BB79_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB79_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB79_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB79_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB79_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB79_19
.LBB79_18:                              # %cond.false49
                                        #   in Loop: Header=BB79_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB79_19
.LBB79_19:                              # %cond.end50
                                        #   in Loop: Header=BB79_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	jmp	.LBB79_27
.LBB79_20:                              # %if.else53
                                        #   in Loop: Header=BB79_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB79_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB79_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB79_23
.LBB79_22:                              # %cond.false60
                                        #   in Loop: Header=BB79_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB79_23
.LBB79_23:                              # %cond.end61
                                        #   in Loop: Header=BB79_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB79_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB79_12 Depth=2
	movl	$2, %edx
	jmp	.LBB79_26
.LBB79_25:                              # %cond.false67
                                        #   in Loop: Header=BB79_12 Depth=2
	movl	-8(%rbp), %edx
.LBB79_26:                              # %cond.end68
                                        #   in Loop: Header=BB79_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
.LBB79_27:                              # %if.end71
                                        #   in Loop: Header=BB79_12 Depth=2
	jmp	.LBB79_28
.LBB79_28:                              # %if.end72
                                        #   in Loop: Header=BB79_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -112(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB79_29:                              # %for.cond89
                                        #   Parent Loop BB79_10 Depth=1
                                        #     Parent Loop BB79_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_31 Depth 4
                                        #           Child Loop BB79_33 Depth 5
                                        #             Child Loop BB79_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-32(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-84(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB79_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB79_31:                              # %for.cond103
                                        #   Parent Loop BB79_10 Depth=1
                                        #     Parent Loop BB79_12 Depth=2
                                        #       Parent Loop BB79_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB79_33 Depth 5
                                        #             Child Loop BB79_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-32(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB79_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-40(%rbp), %r9d
	vmovsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -28(%rbp)
.LBB79_33:                              # %for.cond123
                                        #   Parent Loop BB79_10 Depth=1
                                        #     Parent Loop BB79_12 Depth=2
                                        #       Parent Loop BB79_29 Depth=3
                                        #         Parent Loop BB79_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB79_35 Depth 6
	movl	-28(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB79_33 Depth=5
	movl	$0, -36(%rbp)
.LBB79_35:                              # %for.cond127
                                        #   Parent Loop BB79_10 Depth=1
                                        #     Parent Loop BB79_12 Depth=2
                                        #       Parent Loop BB79_29 Depth=3
                                        #         Parent Loop BB79_31 Depth=4
                                        #           Parent Loop BB79_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-36(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB79_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB79_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-112(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB79_35 Depth=6
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB79_35
.LBB79_38:                              # %for.end
                                        #   in Loop: Header=BB79_33 Depth=5
	jmp	.LBB79_39
.LBB79_39:                              # %for.inc174
                                        #   in Loop: Header=BB79_33 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB79_33
.LBB79_40:                              # %for.end176
                                        #   in Loop: Header=BB79_31 Depth=4
	jmp	.LBB79_41
.LBB79_41:                              # %for.inc177
                                        #   in Loop: Header=BB79_31 Depth=4
	movl	-60(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_31
.LBB79_42:                              # %for.end179
                                        #   in Loop: Header=BB79_29 Depth=3
	jmp	.LBB79_43
.LBB79_43:                              # %for.inc180
                                        #   in Loop: Header=BB79_29 Depth=3
	movl	-56(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_29
.LBB79_44:                              # %for.end182
                                        #   in Loop: Header=BB79_12 Depth=2
	jmp	.LBB79_45
.LBB79_45:                              # %for.inc183
                                        #   in Loop: Header=BB79_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB79_12
.LBB79_46:                              # %for.end185
                                        #   in Loop: Header=BB79_10 Depth=1
	jmp	.LBB79_47
.LBB79_47:                              # %for.inc186
                                        #   in Loop: Header=BB79_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_10
.LBB79_48:                              # %for.end188
	cmpl	$2085443223, -76(%rbp)  # imm = 0x7C4D5697
	jne	.LBB79_50
.LBB79_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_49
.Lfunc_end79:
	.size	PartitionMotionSearch.54, .Lfunc_end79-PartitionMotionSearch.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.55
.LCPI80_0:
	.quad	4602678819172646912     # double 0.5
.LCPI80_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.55
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.55,@function
FullPelBlockMotionSearch.55:            # @FullPelBlockMotionSearch.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$81384244, -124(%rbp)   # imm = 0x4D9D334
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -72(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB80_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB80_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB80_4
.LBB80_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB80_4
.LBB80_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI80_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -32(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -148(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -136(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -116(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-72(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-72(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -92(%rbp)
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -144(%rbp)
	movl	-88(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -140(%rbp)
	movl	-64(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movl	-88(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-64(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	cmpl	$1, -72(%rbp)
	jne	.LBB80_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB80_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB80_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB80_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -120(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB80_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB80_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB80_14
.LBB80_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB80_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB80_13:                              # %land.end63
.LBB80_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -132(%rbp)
	cmpl	$0, -132(%rbp)
	je	.LBB80_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB80_17
# %bb.16:                               # %if.then
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB80_18
.LBB80_17:                              # %if.else
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB80_18:                              # %if.end
	movl	-80(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB80_23
# %bb.19:                               # %land.lhs.true81
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_23
# %bb.20:                               # %land.lhs.true86
	movl	-60(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB80_23
# %bb.21:                               # %land.lhs.true89
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-96(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB80_24
.LBB80_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB80_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB80_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_33 Depth 2
                                        #       Child Loop BB80_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB80_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-100(%rbp), %eax
	movq	mvbits, %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	subl	-140(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-84(%rbp), %esi
	shll	$2, %esi
	subl	-128(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -120(%rbp)
	je	.LBB80_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jne	.LBB80_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-84(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB80_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-100(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB80_30:                              # %if.end128
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB80_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB80_25 Depth=1
	jmp	.LBB80_46
.LBB80_32:                              # %if.end132
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	$0, -28(%rbp)
.LBB80_33:                              # %for.cond133
                                        #   Parent Loop BB80_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_35 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB80_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB80_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-84(%rbp), %edx
	addl	-28(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-136(%rbp), %r8d
	movl	-148(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-168(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -76(%rbp)
.LBB80_35:                              # %for.cond140
                                        #   Parent Loop BB80_25 Depth=1
                                        #     Parent Loop BB80_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-76(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB80_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB80_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB80_35 Depth=3
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB80_35
.LBB80_38:                              # %for.end
                                        #   in Loop: Header=BB80_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB80_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB80_25 Depth=1
	jmp	.LBB80_43
.LBB80_40:                              # %if.end178
                                        #   in Loop: Header=BB80_33 Depth=2
	jmp	.LBB80_41
.LBB80_41:                              # %for.inc179
                                        #   in Loop: Header=BB80_33 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB80_33
.LBB80_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB80_25 Depth=1
	jmp	.LBB80_43
.LBB80_43:                              # %for.end181
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB80_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB80_45:                              # %if.end185
                                        #   in Loop: Header=BB80_25 Depth=1
	jmp	.LBB80_46
.LBB80_46:                              # %for.inc186
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_25
.LBB80_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB80_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB80_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$81384244, -124(%rbp)   # imm = 0x4D9D334
	jne	.LBB80_51
.LBB80_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_50
.Lfunc_end80:
	.size	FullPelBlockMotionSearch.55, .Lfunc_end80-FullPelBlockMotionSearch.55
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.56     # -- Begin function BIDPartitionCost.56
	.p2align	4, 0x90
	.type	BIDPartitionCost.56,@function
BIDPartitionCost.56:                    # @BIDPartitionCost.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$402906478, -116(%rbp)  # imm = 0x1803DD6E
	movl	%edi, -12(%rbp)
	movl	%esi, -48(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -108(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB81_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB81_3
.LBB81_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB81_3
.LBB81_3:                               # %cond.end
	movl	%eax, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB81_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB81_6
.LBB81_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB81_6
.LBB81_6:                               # %cond.end17
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB81_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB81_9
.LBB81_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB81_9
.LBB81_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB81_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_12 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB81_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB81_12:                              # %for.cond53
                                        #   Parent Loop BB81_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB81_12 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB81_12 Depth=2
	movl	-120(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_12
.LBB81_15:                              # %for.end
                                        #   in Loop: Header=BB81_10 Depth=1
	jmp	.LBB81_16
.LBB81_16:                              # %for.inc164
                                        #   in Loop: Header=BB81_10 Depth=1
	movl	-128(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_10
.LBB81_17:                              # %for.end166
	movl	-108(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB81_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_20 Depth 2
                                        #       Child Loop BB81_22 Depth 3
                                        #         Child Loop BB81_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB81_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB81_20:                              # %for.cond185
                                        #   Parent Loop BB81_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_22 Depth 3
                                        #         Child Loop BB81_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB81_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	-76(%rbp), %edi
	movl	-68(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB81_22:                              # %for.cond196
                                        #   Parent Loop BB81_18 Depth=1
                                        #     Parent Loop BB81_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_24 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB81_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB81_22 Depth=3
	movl	$0, -28(%rbp)
.LBB81_24:                              # %for.cond200
                                        #   Parent Loop BB81_18 Depth=1
                                        #     Parent Loop BB81_20 Depth=2
                                        #       Parent Loop BB81_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB81_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB81_24 Depth=4
	movq	imgY_org, %rax
	movl	-112(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB81_24 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB81_24
.LBB81_27:                              # %for.end229
                                        #   in Loop: Header=BB81_22 Depth=3
	jmp	.LBB81_28
.LBB81_28:                              # %for.inc230
                                        #   in Loop: Header=BB81_22 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB81_22
.LBB81_29:                              # %for.end232
                                        #   in Loop: Header=BB81_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB81_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB81_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB81_32
.LBB81_31:                              # %if.then
                                        #   in Loop: Header=BB81_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB81_32:                              # %if.end
                                        #   in Loop: Header=BB81_20 Depth=2
	jmp	.LBB81_33
.LBB81_33:                              # %for.inc236
                                        #   in Loop: Header=BB81_20 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_20
.LBB81_34:                              # %for.end239
                                        #   in Loop: Header=BB81_18 Depth=1
	jmp	.LBB81_35
.LBB81_35:                              # %for.inc240
                                        #   in Loop: Header=BB81_18 Depth=1
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_18
.LBB81_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB81_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB81_55
# %bb.38:                               # %if.then248
	movl	$0, -44(%rbp)
.LBB81_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_41 Depth 2
                                        #       Child Loop BB81_43 Depth 3
                                        #         Child Loop BB81_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB81_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB81_39 Depth=1
	movl	$0, -52(%rbp)
.LBB81_41:                              # %for.cond257
                                        #   Parent Loop BB81_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_43 Depth 3
                                        #         Child Loop BB81_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB81_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB81_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB81_43:                              # %for.cond265
                                        #   Parent Loop BB81_39 Depth=1
                                        #     Parent Loop BB81_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_45 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB81_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB81_43 Depth=3
	movl	$0, -32(%rbp)
.LBB81_45:                              # %for.cond269
                                        #   Parent Loop BB81_39 Depth=1
                                        #     Parent Loop BB81_41 Depth=2
                                        #       Parent Loop BB81_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB81_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB81_45 Depth=4
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB81_45 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB81_45
.LBB81_48:                              # %for.end284
                                        #   in Loop: Header=BB81_43 Depth=3
	jmp	.LBB81_49
.LBB81_49:                              # %for.inc285
                                        #   in Loop: Header=BB81_43 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB81_43
.LBB81_50:                              # %for.end287
                                        #   in Loop: Header=BB81_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB81_41 Depth=2
	movl	-100(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB81_41
.LBB81_52:                              # %for.end294
                                        #   in Loop: Header=BB81_39 Depth=1
	jmp	.LBB81_53
.LBB81_53:                              # %for.inc295
                                        #   in Loop: Header=BB81_39 Depth=1
	movl	-104(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB81_39
.LBB81_54:                              # %for.end297
	jmp	.LBB81_55
.LBB81_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$402906478, -116(%rbp)  # imm = 0x1803DD6E
	jne	.LBB81_57
.LBB81_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_56
.Lfunc_end81:
	.size	BIDPartitionCost.56, .Lfunc_end81-BIDPartitionCost.56
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.57 # -- Begin function ClearFastFullIntegerSearch.57
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.57,@function
ClearFastFullIntegerSearch.57:          # @ClearFastFullIntegerSearch.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$961163064, -20(%rbp)   # imm = 0x394A2F38
	movl	$0, -4(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_3 Depth 2
                                        #       Child Loop BB82_5 Depth 3
                                        #         Child Loop BB82_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB82_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	$0, -8(%rbp)
.LBB82_3:                               # %for.cond1
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_5 Depth 3
                                        #         Child Loop BB82_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB82_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	$1, -12(%rbp)
.LBB82_5:                               # %for.cond4
                                        #   Parent Loop BB82_1 Depth=1
                                        #     Parent Loop BB82_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB82_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB82_5 Depth=3
	movl	$0, -16(%rbp)
.LBB82_7:                               # %for.cond7
                                        #   Parent Loop BB82_1 Depth=1
                                        #     Parent Loop BB82_3 Depth=2
                                        #       Parent Loop BB82_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB82_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB82_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB82_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_7
.LBB82_10:                              # %for.end
                                        #   in Loop: Header=BB82_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB82_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_5
.LBB82_12:                              # %for.end24
                                        #   in Loop: Header=BB82_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_3
.LBB82_14:                              # %for.end31
                                        #   in Loop: Header=BB82_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_1
.LBB82_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB82_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB82_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB82_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB82_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_17
.LBB82_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$961163064, -20(%rbp)   # imm = 0x394A2F38
	jne	.LBB82_22
.LBB82_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_21
.Lfunc_end82:
	.size	ClearFastFullIntegerSearch.57, .Lfunc_end82-ClearFastFullIntegerSearch.57
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.58            # -- Begin function find_SATD.58
	.p2align	4, 0x90
	.type	find_SATD.58,@function
find_SATD.58:                           # @find_SATD.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$1703565477, -52(%rbp)  # imm = 0x658A58A5
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -24(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
                                        #       Child Loop BB83_5 Depth 3
                                        #         Child Loop BB83_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -20(%rbp)
.LBB83_3:                               # %for.cond7
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_5 Depth 3
                                        #         Child Loop BB83_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB83_5:                               # %for.cond10
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB83_5 Depth=3
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB83_7:                               # %for.cond13
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_3 Depth=2
                                        #       Parent Loop BB83_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB83_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB83_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB83_7
.LBB83_10:                              # %for.end
                                        #   in Loop: Header=BB83_5 Depth=3
	jmp	.LBB83_11
.LBB83_11:                              # %for.inc24
                                        #   in Loop: Header=BB83_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB83_5
.LBB83_12:                              # %for.end26
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_13
.LBB83_13:                              # %for.inc27
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_3
.LBB83_14:                              # %for.end29
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_15
.LBB83_15:                              # %for.inc30
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB83_1
.LBB83_16:                              # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB83_26
# %bb.17:                               # %if.then
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB83_24
# %bb.18:                               # %if.then
	movq	.LJTI83_0(,%rax,8), %rax
	jmpq	*%rax
.LBB83_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_25
.LBB83_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_25
.LBB83_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB83_25
.LBB83_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_25
.LBB83_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB83_25
.LBB83_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB83_25:                              # %sw.epilog
	jmp	.LBB83_31
.LBB83_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB83_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB83_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB83_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_27
.LBB83_30:                              # %for.end79
	jmp	.LBB83_31
.LBB83_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$1703565477, -52(%rbp)  # imm = 0x658A58A5
	jne	.LBB83_33
.LBB83_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_32
.Lfunc_end83:
	.size	find_SATD.58, .Lfunc_end83-find_SATD.58
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI83_0:
	.quad	.LBB83_19
	.quad	.LBB83_20
	.quad	.LBB83_20
	.quad	.LBB83_21
	.quad	.LBB83_22
	.quad	.LBB83_22
	.quad	.LBB83_23
                                        # -- End function
	.text
	.globl	SetupLargerBlocks.59    # -- Begin function SetupLargerBlocks.59
	.p2align	4, 0x90
	.type	SetupLargerBlocks.59,@function
SetupLargerBlocks.59:                   # @SetupLargerBlocks.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1252270584, -76(%rbp)  # imm = 0x4AA421F8
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_1
.LBB84_4:                               # %for.end
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB84_5 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB84_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_5
.LBB84_8:                               # %for.end30
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB84_9 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB84_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_9
.LBB84_12:                              # %for.end46
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB84_13 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB84_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_13
.LBB84_16:                              # %for.end62
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB84_17 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB84_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_17
.LBB84_20:                              # %for.end78
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB84_21 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB84_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_21
.LBB84_24:                              # %for.end94
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB84_25 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB84_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_25
.LBB84_28:                              # %for.end110
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB84_29 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB84_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_29
.LBB84_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB84_33 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB84_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_33
.LBB84_36:                              # %for.end150
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB84_37 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB84_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_37
.LBB84_40:                              # %for.end166
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB84_41 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB84_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_41
.LBB84_44:                              # %for.end182
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB84_45 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB84_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_45
.LBB84_48:                              # %for.end198
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB84_49 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB84_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_49
.LBB84_52:                              # %for.end214
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB84_53 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB84_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_53
.LBB84_56:                              # %for.end230
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB84_57 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB84_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_57
.LBB84_60:                              # %for.end246
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB84_61 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB84_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_61
.LBB84_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB84_65 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB84_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_65
.LBB84_68:                              # %for.end286
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB84_69 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB84_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_69
.LBB84_72:                              # %for.end302
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB84_73 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB84_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_73
.LBB84_76:                              # %for.end318
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB84_77 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB84_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_77
.LBB84_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB84_81 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB84_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_81
.LBB84_84:                              # %for.end358
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB84_85 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB84_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_85
.LBB84_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB84_89 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB84_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_89
.LBB84_92:                              # %for.end398
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB84_93 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB84_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_93
.LBB84_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB84_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB84_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB84_97 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB84_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_97
.LBB84_100:                             # %for.end438
	cmpl	$1252270584, -76(%rbp)  # imm = 0x4AA421F8
	jne	.LBB84_102
.LBB84_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_101
.Lfunc_end84:
	.size	SetupLargerBlocks.59, .Lfunc_end84-SetupLargerBlocks.59
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.60            # -- Begin function find_SATD.60
	.p2align	4, 0x90
	.type	find_SATD.60,@function
find_SATD.60:                           # @find_SATD.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$1381186541, -52(%rbp)  # imm = 0x52533BED
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
                                        #       Child Loop BB85_5 Depth 3
                                        #         Child Loop BB85_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -24(%rbp)
.LBB85_3:                               # %for.cond7
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_5 Depth 3
                                        #         Child Loop BB85_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB85_5:                               # %for.cond10
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_7 Depth 4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB85_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_7:                               # %for.cond13
                                        #   Parent Loop BB85_1 Depth=1
                                        #     Parent Loop BB85_3 Depth=2
                                        #       Parent Loop BB85_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB85_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB85_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB85_7
.LBB85_10:                              # %for.end
                                        #   in Loop: Header=BB85_5 Depth=3
	jmp	.LBB85_11
.LBB85_11:                              # %for.inc24
                                        #   in Loop: Header=BB85_5 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB85_5
.LBB85_12:                              # %for.end26
                                        #   in Loop: Header=BB85_3 Depth=2
	jmp	.LBB85_13
.LBB85_13:                              # %for.inc27
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_3
.LBB85_14:                              # %for.end29
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_15
.LBB85_15:                              # %for.inc30
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_1
.LBB85_16:                              # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB85_26
# %bb.17:                               # %if.then
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB85_24
# %bb.18:                               # %if.then
	movq	.LJTI85_0(,%rax,8), %rax
	jmpq	*%rax
.LBB85_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_25
.LBB85_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_25
.LBB85_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB85_25
.LBB85_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_25
.LBB85_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB85_25
.LBB85_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB85_25:                              # %sw.epilog
	jmp	.LBB85_31
.LBB85_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB85_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB85_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB85_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_27
.LBB85_30:                              # %for.end79
	jmp	.LBB85_31
.LBB85_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$1381186541, -52(%rbp)  # imm = 0x52533BED
	jne	.LBB85_33
.LBB85_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_32
.Lfunc_end85:
	.size	find_SATD.60, .Lfunc_end85-find_SATD.60
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI85_0:
	.quad	.LBB85_19
	.quad	.LBB85_20
	.quad	.LBB85_20
	.quad	.LBB85_21
	.quad	.LBB85_22
	.quad	.LBB85_22
	.quad	.LBB85_23
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.61
.LCPI86_0:
	.quad	4602678819172646912     # double 0.5
.LCPI86_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.61
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.61,@function
SubPelBlockMotionSearch.61:             # @SubPelBlockMotionSearch.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI86_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1969865253, -192(%rbp) # imm = 0x7569C225
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -132(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -148(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -104(%rbp)
	jne	.LBB86_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB86_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB86_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB86_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB86_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB86_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB86_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	movslq	-104(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -156(%rbp)
	movq	input, %rax
	movslq	-104(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -152(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB86_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB86_10
.LBB86_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB86_10
.LBB86_10:                              # %cond.end
	movl	%eax, -196(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB86_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB86_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB86_14
.LBB86_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB86_14:                              # %cond.end35
	jmp	.LBB86_16
.LBB86_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB86_16:                              # %cond.end38
	movl	%eax, -184(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB86_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB86_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB86_20
.LBB86_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB86_20
.LBB86_20:                              # %cond.end50
	movl	%ecx, -140(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB86_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB86_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB86_26
.LBB86_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB86_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB86_25:                              # %land.end65
.LBB86_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB86_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB86_29
.LBB86_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB86_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -164(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-132(%rbp), %eax
	addl	-140(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB86_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB86_32
# %bb.31:                               # %if.then
	movl	-132(%rbp), %eax
	addl	-140(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB86_33
.LBB86_32:                              # %if.else
	movl	-132(%rbp), %eax
	addl	-140(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB86_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-156(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-152(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB86_38
# %bb.34:                               # %land.lhs.true112
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_38
# %bb.35:                               # %land.lhs.true118
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB86_38
# %bb.36:                               # %land.lhs.true123
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB86_39
.LBB86_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB86_39:                              # %if.end131
	movl	$0, -72(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB86_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_47 Depth 2
                                        #       Child Loop BB86_51 Depth 3
                                        #         Child Loop BB86_57 Depth 4
                                        #           Child Loop BB86_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB86_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB86_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rdx
	movl	-108(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-96(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB86_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB86_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB86_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB86_40 Depth=1
	movl	-148(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB86_44:                              # %if.end164
                                        #   in Loop: Header=BB86_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB86_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB86_40 Depth=1
	jmp	.LBB86_75
.LBB86_46:                              # %if.end168
                                        #   in Loop: Header=BB86_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB86_47:                              # %for.cond169
                                        #   Parent Loop BB86_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_51 Depth 3
                                        #         Child Loop BB86_57 Depth 4
                                        #           Child Loop BB86_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-152(%rbp), %ecx
	jge	.LBB86_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB86_47 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_49:                              # %land.end174
                                        #   in Loop: Header=BB86_47 Depth=2
	testb	$1, %al
	jne	.LBB86_50
	jmp	.LBB86_70
.LBB86_50:                              # %for.body176
                                        #   in Loop: Header=BB86_47 Depth=2
	movl	-144(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-96(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB86_51:                              # %for.cond180
                                        #   Parent Loop BB86_40 Depth=1
                                        #     Parent Loop BB86_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_57 Depth 4
                                        #           Child Loop BB86_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB86_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB86_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-136(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-108(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB86_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB86_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-164(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB86_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB86_47 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB86_68
.LBB86_55:                              # %if.end342
                                        #   in Loop: Header=BB86_51 Depth=3
	jmp	.LBB86_65
.LBB86_56:                              # %if.else343
                                        #   in Loop: Header=BB86_51 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB86_57:                              # %for.cond344
                                        #   Parent Loop BB86_40 Depth=1
                                        #     Parent Loop BB86_47 Depth=2
                                        #       Parent Loop BB86_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_59 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB86_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB86_57 Depth=4
	movl	$0, -84(%rbp)
.LBB86_59:                              # %for.cond348
                                        #   Parent Loop BB86_40 Depth=1
                                        #     Parent Loop BB86_47 Depth=2
                                        #       Parent Loop BB86_51 Depth=3
                                        #         Parent Loop BB86_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -84(%rbp)
	jge	.LBB86_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB86_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB86_59 Depth=5
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB86_59
.LBB86_62:                              # %for.end
                                        #   in Loop: Header=BB86_57 Depth=4
	jmp	.LBB86_63
.LBB86_63:                              # %for.inc361
                                        #   in Loop: Header=BB86_57 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB86_57
.LBB86_64:                              # %for.end363
                                        #   in Loop: Header=BB86_51 Depth=3
	jmp	.LBB86_65
.LBB86_65:                              # %if.end364
                                        #   in Loop: Header=BB86_51 Depth=3
	jmp	.LBB86_66
.LBB86_66:                              # %for.inc365
                                        #   in Loop: Header=BB86_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_51
.LBB86_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB86_47 Depth=2
	jmp	.LBB86_68
.LBB86_68:                              # %for.end367
                                        #   in Loop: Header=BB86_47 Depth=2
	jmp	.LBB86_69
.LBB86_69:                              # %for.inc368
                                        #   in Loop: Header=BB86_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB86_47
.LBB86_70:                              # %for.end370
                                        #   in Loop: Header=BB86_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB86_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB86_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-164(%rbp), %esi
	movl	-104(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB86_72:                              # %if.end377
                                        #   in Loop: Header=BB86_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB86_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB86_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB86_74:                              # %if.end381
                                        #   in Loop: Header=BB86_40 Depth=1
	jmp	.LBB86_75
.LBB86_75:                              # %for.inc382
                                        #   in Loop: Header=BB86_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB86_40
.LBB86_76:                              # %for.end384
	cmpl	$0, -72(%rbp)
	je	.LBB86_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB86_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB86_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB86_80:                              # %if.end403
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB86_85
# %bb.81:                               # %land.lhs.true408
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_85
# %bb.82:                               # %land.lhs.true414
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB86_85
# %bb.83:                               # %land.lhs.true419
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB86_86
.LBB86_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB86_86:                              # %if.end427
	movl	$0, -72(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB86_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_91 Depth 2
                                        #       Child Loop BB86_95 Depth 3
                                        #         Child Loop BB86_101 Depth 4
                                        #           Child Loop BB86_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB86_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB86_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rdx
	movl	-108(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-96(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB86_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB86_87 Depth=1
	jmp	.LBB86_119
.LBB86_90:                              # %if.end456
                                        #   in Loop: Header=BB86_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB86_91:                              # %for.cond457
                                        #   Parent Loop BB86_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_95 Depth 3
                                        #         Child Loop BB86_101 Depth 4
                                        #           Child Loop BB86_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-152(%rbp), %ecx
	jge	.LBB86_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB86_91 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB86_93:                              # %land.end463
                                        #   in Loop: Header=BB86_91 Depth=2
	testb	$1, %al
	jne	.LBB86_94
	jmp	.LBB86_114
.LBB86_94:                              # %for.body465
                                        #   in Loop: Header=BB86_91 Depth=2
	movl	-144(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-96(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB86_95:                              # %for.cond469
                                        #   Parent Loop BB86_87 Depth=1
                                        #     Parent Loop BB86_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_101 Depth 4
                                        #           Child Loop BB86_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB86_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB86_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-136(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-108(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB86_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB86_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB86_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB86_91 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB86_112
.LBB86_99:                              # %if.end636
                                        #   in Loop: Header=BB86_95 Depth=3
	jmp	.LBB86_109
.LBB86_100:                             # %if.else637
                                        #   in Loop: Header=BB86_95 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB86_101:                             # %for.cond638
                                        #   Parent Loop BB86_87 Depth=1
                                        #     Parent Loop BB86_91 Depth=2
                                        #       Parent Loop BB86_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_103 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB86_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB86_101 Depth=4
	movl	$0, -84(%rbp)
.LBB86_103:                             # %for.cond642
                                        #   Parent Loop BB86_87 Depth=1
                                        #     Parent Loop BB86_91 Depth=2
                                        #       Parent Loop BB86_95 Depth=3
                                        #         Parent Loop BB86_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -84(%rbp)
	jge	.LBB86_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB86_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB86_103 Depth=5
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB86_103
.LBB86_106:                             # %for.end657
                                        #   in Loop: Header=BB86_101 Depth=4
	jmp	.LBB86_107
.LBB86_107:                             # %for.inc658
                                        #   in Loop: Header=BB86_101 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB86_101
.LBB86_108:                             # %for.end660
                                        #   in Loop: Header=BB86_95 Depth=3
	jmp	.LBB86_109
.LBB86_109:                             # %if.end661
                                        #   in Loop: Header=BB86_95 Depth=3
	jmp	.LBB86_110
.LBB86_110:                             # %for.inc662
                                        #   in Loop: Header=BB86_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_95
.LBB86_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB86_91 Depth=2
	jmp	.LBB86_112
.LBB86_112:                             # %for.end664
                                        #   in Loop: Header=BB86_91 Depth=2
	jmp	.LBB86_113
.LBB86_113:                             # %for.inc665
                                        #   in Loop: Header=BB86_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB86_91
.LBB86_114:                             # %for.end667
                                        #   in Loop: Header=BB86_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB86_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB86_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-104(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB86_116:                             # %if.end675
                                        #   in Loop: Header=BB86_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB86_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB86_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB86_118:                             # %if.end679
                                        #   in Loop: Header=BB86_87 Depth=1
	jmp	.LBB86_119
.LBB86_119:                             # %for.inc680
                                        #   in Loop: Header=BB86_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB86_87
.LBB86_120:                             # %for.end682
	cmpl	$0, -72(%rbp)
	je	.LBB86_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB86_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$1969865253, -192(%rbp) # imm = 0x7569C225
	jne	.LBB86_124
.LBB86_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_123
.Lfunc_end86:
	.size	SubPelBlockMotionSearch.61, .Lfunc_end86-SubPelBlockMotionSearch.61
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.62 # -- Begin function SetupFastFullPelSearch.62
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.62,@function
SetupFastFullPelSearch.62:              # @SetupFastFullPelSearch.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$1802215643, -144(%rbp) # imm = 0x6B6BA0DB
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB87_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB87_4
.LBB87_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB87_4
.LBB87_4:                               # %cond.end
	movl	%ecx, -136(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB87_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB87_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB87_10
.LBB87_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB87_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB87_9:                               # %land.end
.LBB87_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movl	-8(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB87_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB87_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB87_14
.LBB87_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB87_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB87_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB87_18
.LBB87_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB87_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB87_24
.LBB87_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB87_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB87_23
.LBB87_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB87_23:                              # %cond.end82
.LBB87_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB87_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB87_27
.LBB87_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB87_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB87_33
.LBB87_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB87_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB87_32
.LBB87_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB87_32:                              # %cond.end122
.LBB87_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB87_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB87_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -76(%rbp)
.LBB87_37:                              # %for.cond155
                                        #   Parent Loop BB87_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB87_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB87_37 Depth=2
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB87_37
.LBB87_40:                              # %for.end
                                        #   in Loop: Header=BB87_35 Depth=1
	jmp	.LBB87_41
.LBB87_41:                              # %for.inc165
                                        #   in Loop: Header=BB87_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_35
.LBB87_42:                              # %for.end167
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB87_47
# %bb.43:                               # %land.lhs.true170
	movl	-80(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB87_47
# %bb.44:                               # %land.lhs.true174
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB87_47
# %bb.45:                               # %land.lhs.true177
	movl	-68(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB87_47
# %bb.46:                               # %if.then181
	movl	$0, -112(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB87_48
.LBB87_47:                              # %if.else182
	movl	$1, -112(%rbp)
.LBB87_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	$0, -28(%rbp)
.LBB87_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB87_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-148(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB87_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-152(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB87_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB87_57
.LBB87_54:                              # %if.end209
                                        #   in Loop: Header=BB87_50 Depth=1
	jmp	.LBB87_55
.LBB87_55:                              # %for.inc210
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_50
.LBB87_56:                              # %for.end212.loopexit
	jmp	.LBB87_57
.LBB87_57:                              # %for.end212
	jmp	.LBB87_58
.LBB87_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB87_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_69 Depth 2
                                        #       Child Loop BB87_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB87_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB87_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB87_59 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB87_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB87_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB87_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB87_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB87_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB87_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB87_67
.LBB87_66:                              # %if.else238
                                        #   in Loop: Header=BB87_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB87_67:                              # %if.end239
                                        #   in Loop: Header=BB87_59 Depth=1
	jmp	.LBB87_68
.LBB87_68:                              # %if.end240
                                        #   in Loop: Header=BB87_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -92(%rbp)
.LBB87_69:                              # %for.cond242
                                        #   Parent Loop BB87_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_71 Depth 3
	cmpl	$4, -92(%rbp)
	jge	.LBB87_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -60(%rbp)
.LBB87_71:                              # %for.cond246
                                        #   Parent Loop BB87_59 Depth=1
                                        #     Parent Loop BB87_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB87_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB87_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-88(%rbp), %edx
	movl	-140(%rbp), %ecx
	movl	-132(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB87_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_71
.LBB87_74:                              # %for.end381
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB87_69
.LBB87_76:                              # %for.end404
                                        #   in Loop: Header=BB87_59 Depth=1
	jmp	.LBB87_77
.LBB87_77:                              # %for.inc405
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_59
.LBB87_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$1802215643, -144(%rbp) # imm = 0x6B6BA0DB
	jne	.LBB87_80
.LBB87_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_79
.Lfunc_end87:
	.size	SetupFastFullPelSearch.62, .Lfunc_end87-SetupFastFullPelSearch.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.63
.LCPI88_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI88_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.63
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.63,@function
Init_Motion_Search_Module.63:           # @Init_Motion_Search_Module.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$333736485, -60(%rbp)   # imm = 0x13E46A25
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB88_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB88_3
.LBB88_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB88_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB88_6
.LBB88_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB88_6:                               # %cond.end19
	movl	%eax, -40(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB88_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB88_9
.LBB88_8:                               # %cond.false24
	movl	-48(%rbp), %eax
	addl	$1, %eax
.LBB88_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI88_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI88_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI88_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI88_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-40(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB88_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB88_11:                              # %if.end
	movslq	-40(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB88_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB88_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB88_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB88_15:                              # %if.end66
	movslq	-52(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB88_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB88_17:                              # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB88_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB88_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB88_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB88_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB88_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB88_22:                              # %for.cond90
                                        #   Parent Loop BB88_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB88_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB88_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB88_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_22
.LBB88_25:                              # %for.end
                                        #   in Loop: Header=BB88_20 Depth=1
	jmp	.LBB88_26
.LBB88_26:                              # %for.inc98
                                        #   in Loop: Header=BB88_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_20
.LBB88_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB88_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB88_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB88_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB88_30:                              # %for.cond111
                                        #   Parent Loop BB88_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB88_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB88_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB88_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_30
.LBB88_33:                              # %for.end119
                                        #   in Loop: Header=BB88_28 Depth=1
	jmp	.LBB88_34
.LBB88_34:                              # %for.inc120
                                        #   in Loop: Header=BB88_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_28
.LBB88_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB88_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB88_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB88_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB88_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_36
.LBB88_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB88_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_45 Depth 2
                                        #     Child Loop BB88_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB88_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB88_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB88_43
.LBB88_42:                              # %cond.false143
                                        #   in Loop: Header=BB88_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB88_43:                              # %cond.end144
                                        #   in Loop: Header=BB88_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB88_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB88_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB88_45:                              # %for.cond151
                                        #   Parent Loop BB88_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB88_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB88_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB88_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_45
.LBB88_48:                              # %for.end168
                                        #   in Loop: Header=BB88_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB88_49:                              # %for.cond170
                                        #   Parent Loop BB88_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB88_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB88_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB88_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_49
.LBB88_52:                              # %for.end187
                                        #   in Loop: Header=BB88_40 Depth=1
	jmp	.LBB88_53
.LBB88_53:                              # %for.inc188
                                        #   in Loop: Header=BB88_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_40
.LBB88_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB88_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB88_56:                              # %if.end192
	cmpl	$333736485, -60(%rbp)   # imm = 0x13E46A25
	jne	.LBB88_58
.LBB88_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_57
.Lfunc_end88:
	.size	Init_Motion_Search_Module.63, .Lfunc_end88-Init_Motion_Search_Module.63
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch.64 # -- Begin function ResetFastFullIntegerSearch.64
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch.64,@function
ResetFastFullIntegerSearch.64:          # @ResetFastFullIntegerSearch.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$730352298, -12(%rbp)   # imm = 0x2B884AAA
	movl	$0, -8(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_3 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB89_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	$0, -4(%rbp)
.LBB89_3:                               # %for.cond1
                                        #   Parent Loop BB89_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB89_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB89_3 Depth=2
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_3
.LBB89_6:                               # %for.end
                                        #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_7
.LBB89_7:                               # %for.inc6
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_1
.LBB89_8:                               # %for.end8
	cmpl	$730352298, -12(%rbp)   # imm = 0x2B884AAA
	jne	.LBB89_10
.LBB89_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_9
.Lfunc_end89:
	.size	ResetFastFullIntegerSearch.64, .Lfunc_end89-ResetFastFullIntegerSearch.64
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.65 # -- Begin function SetupFastFullPelSearch.65
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.65,@function
SetupFastFullPelSearch.65:              # @SetupFastFullPelSearch.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$856404205, -140(%rbp)  # imm = 0x330BB0ED
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB90_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB90_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB90_4
.LBB90_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB90_4
.LBB90_4:                               # %cond.end
	movl	%ecx, -144(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB90_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB90_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB90_10
.LBB90_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB90_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB90_9:                               # %land.end
.LBB90_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -148(%rbp)
	movl	-8(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -148(%rbp)
	je	.LBB90_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB90_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB90_14
.LBB90_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB90_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -156(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB90_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB90_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB90_18
.LBB90_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB90_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB90_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB90_24
.LBB90_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB90_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB90_23
.LBB90_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB90_23:                              # %cond.end82
.LBB90_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB90_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB90_27
.LBB90_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB90_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB90_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB90_33
.LBB90_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB90_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB90_32
.LBB90_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB90_32:                              # %cond.end122
.LBB90_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB90_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB90_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB90_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -76(%rbp)
.LBB90_37:                              # %for.cond155
                                        #   Parent Loop BB90_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB90_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB90_37 Depth=2
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB90_37
.LBB90_40:                              # %for.end
                                        #   in Loop: Header=BB90_35 Depth=1
	jmp	.LBB90_41
.LBB90_41:                              # %for.inc165
                                        #   in Loop: Header=BB90_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB90_35
.LBB90_42:                              # %for.end167
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB90_47
# %bb.43:                               # %land.lhs.true170
	movl	-68(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB90_47
# %bb.44:                               # %land.lhs.true174
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB90_47
# %bb.45:                               # %land.lhs.true177
	movl	-80(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB90_47
# %bb.46:                               # %if.then181
	movl	$0, -116(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB90_48
.LBB90_47:                              # %if.else182
	movl	$1, -116(%rbp)
.LBB90_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB90_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	$0, -28(%rbp)
.LBB90_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB90_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB90_50 Depth=1
	movl	-152(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB90_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB90_50 Depth=1
	movl	-132(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB90_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB90_57
.LBB90_54:                              # %if.end209
                                        #   in Loop: Header=BB90_50 Depth=1
	jmp	.LBB90_55
.LBB90_55:                              # %for.inc210
                                        #   in Loop: Header=BB90_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB90_50
.LBB90_56:                              # %for.end212.loopexit
	jmp	.LBB90_57
.LBB90_57:                              # %for.end212
	jmp	.LBB90_58
.LBB90_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB90_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_69 Depth 2
                                        #       Child Loop BB90_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB90_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	-80(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB90_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB90_59 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB90_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB90_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB90_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB90_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB90_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB90_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB90_67
.LBB90_66:                              # %if.else238
                                        #   in Loop: Header=BB90_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB90_67:                              # %if.end239
                                        #   in Loop: Header=BB90_59 Depth=1
	jmp	.LBB90_68
.LBB90_68:                              # %if.end240
                                        #   in Loop: Header=BB90_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -84(%rbp)
.LBB90_69:                              # %for.cond242
                                        #   Parent Loop BB90_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_71 Depth 3
	cmpl	$4, -84(%rbp)
	jge	.LBB90_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB90_69 Depth=2
	movl	$0, -52(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -60(%rbp)
.LBB90_71:                              # %for.cond246
                                        #   Parent Loop BB90_59 Depth=1
                                        #     Parent Loop BB90_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB90_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB90_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-88(%rbp), %edx
	movl	-156(%rbp), %ecx
	movl	-136(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB90_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB90_71
.LBB90_74:                              # %for.end381
                                        #   in Loop: Header=BB90_69 Depth=2
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB90_69 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB90_69
.LBB90_76:                              # %for.end404
                                        #   in Loop: Header=BB90_59 Depth=1
	jmp	.LBB90_77
.LBB90_77:                              # %for.inc405
                                        #   in Loop: Header=BB90_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB90_59
.LBB90_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-92(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$856404205, -140(%rbp)  # imm = 0x330BB0ED
	jne	.LBB90_80
.LBB90_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_79
.Lfunc_end90:
	.size	SetupFastFullPelSearch.65, .Lfunc_end90-SetupFastFullPelSearch.65
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.66    # -- Begin function Get_Direct_CostMB.66
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.66,@function
Get_Direct_CostMB.66:                   # @Get_Direct_CostMB.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$754890058, -28(%rbp)   # imm = 0x2CFEB54A
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB91_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB91_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB91_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB91_5
.LBB91_4:                               # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB91_18
.LBB91_5:                               # %if.end
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_6
.LBB91_6:                               # %for.inc
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB91_1
.LBB91_7:                               # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB91_9
	jmp	.LBB91_8
.LBB91_8:                               # %for.end
	subl	$2, %eax
	je	.LBB91_15
	jmp	.LBB91_16
.LBB91_9:                               # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB91_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB91_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB91_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB91_14
.LBB91_13:                              # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB91_14:                              # %if.end9
	jmp	.LBB91_17
.LBB91_15:                              # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_17
.LBB91_16:                              # %sw.default
	jmp	.LBB91_17
.LBB91_17:                              # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB91_18:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$754890058, -28(%rbp)   # imm = 0x2CFEB54A
	jne	.LBB91_20
.LBB91_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_19
.Lfunc_end91:
	.size	Get_Direct_CostMB.66, .Lfunc_end91-Get_Direct_CostMB.66
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.67              # -- Begin function SATD8X8.67
	.p2align	4, 0x90
	.type	SATD8X8.67,@function
SATD8X8.67:                             # @SATD8X8.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$882831261, -36(%rbp)   # imm = 0x349EEF9D
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB92_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB92_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB92_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB92_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB92_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_2
.LBB92_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB92_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB92_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB92_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB92_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_6
.LBB92_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB92_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB92_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB92_10 Depth=1
	movl	$0, -12(%rbp)
.LBB92_12:                              # %for.cond499
                                        #   Parent Loop BB92_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB92_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB92_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB92_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB92_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB92_16
.LBB92_15:                              # %cond.false
                                        #   in Loop: Header=BB92_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB92_16:                              # %cond.end
                                        #   in Loop: Header=BB92_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB92_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_12
.LBB92_18:                              # %for.end519
                                        #   in Loop: Header=BB92_10 Depth=1
	jmp	.LBB92_19
.LBB92_19:                              # %for.inc520
                                        #   in Loop: Header=BB92_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_10
.LBB92_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_26
.LBB92_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB92_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB92_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB92_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB92_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_22
.LBB92_25:                              # %for.end534
	jmp	.LBB92_26
.LBB92_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$882831261, -36(%rbp)   # imm = 0x349EEF9D
	jne	.LBB92_28
.LBB92_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_27
.Lfunc_end92:
	.size	SATD8X8.67, .Lfunc_end92-SATD8X8.67
	.cfi_endproc
                                        # -- End function
	.globl	SATD.68                 # -- Begin function SATD.68
	.p2align	4, 0x90
	.type	SATD.68,@function
SATD.68:                                # @SATD.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$839703891, -184(%rbp)  # imm = 0x320CDD53
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB93_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB93_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB93_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB93_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB93_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB93_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB93_6
.LBB93_5:                               # %cond.false
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-100(%rbp), %eax
.LBB93_6:                               # %cond.end
                                        #   in Loop: Header=BB93_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB93_2
.LBB93_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_14
.LBB93_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB93_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB93_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB93_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB93_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_10
.LBB93_13:                              # %for.end270
	jmp	.LBB93_14
.LBB93_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$839703891, -184(%rbp)  # imm = 0x320CDD53
	jne	.LBB93_16
.LBB93_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_15
.Lfunc_end93:
	.size	SATD.68, .Lfunc_end93-SATD.68
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.69     # -- Begin function BIDPartitionCost.69
	.p2align	4, 0x90
	.type	BIDPartitionCost.69,@function
BIDPartitionCost.69:                    # @BIDPartitionCost.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1543667788, -116(%rbp) # imm = 0x5C02804C
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -108(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB94_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB94_3
.LBB94_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB94_3
.LBB94_3:                               # %cond.end
	movl	%eax, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB94_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB94_6
.LBB94_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB94_6
.LBB94_6:                               # %cond.end17
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB94_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB94_9
.LBB94_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB94_9
.LBB94_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB94_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB94_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB94_12:                              # %for.cond53
                                        #   Parent Loop BB94_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB94_12 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB94_12 Depth=2
	movl	-120(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_12
.LBB94_15:                              # %for.end
                                        #   in Loop: Header=BB94_10 Depth=1
	jmp	.LBB94_16
.LBB94_16:                              # %for.inc164
                                        #   in Loop: Header=BB94_10 Depth=1
	movl	-112(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_10
.LBB94_17:                              # %for.end166
	movl	-108(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB94_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_20 Depth 2
                                        #       Child Loop BB94_22 Depth 3
                                        #         Child Loop BB94_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB94_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB94_20:                              # %for.cond185
                                        #   Parent Loop BB94_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_22 Depth 3
                                        #         Child Loop BB94_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB94_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	-68(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB94_22:                              # %for.cond196
                                        #   Parent Loop BB94_18 Depth=1
                                        #     Parent Loop BB94_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_24 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB94_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB94_22 Depth=3
	movl	$0, -28(%rbp)
.LBB94_24:                              # %for.cond200
                                        #   Parent Loop BB94_18 Depth=1
                                        #     Parent Loop BB94_20 Depth=2
                                        #       Parent Loop BB94_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB94_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB94_24 Depth=4
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB94_24 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB94_24
.LBB94_27:                              # %for.end229
                                        #   in Loop: Header=BB94_22 Depth=3
	jmp	.LBB94_28
.LBB94_28:                              # %for.inc230
                                        #   in Loop: Header=BB94_22 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB94_22
.LBB94_29:                              # %for.end232
                                        #   in Loop: Header=BB94_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB94_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB94_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB94_32
.LBB94_31:                              # %if.then
                                        #   in Loop: Header=BB94_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB94_32:                              # %if.end
                                        #   in Loop: Header=BB94_20 Depth=2
	jmp	.LBB94_33
.LBB94_33:                              # %for.inc236
                                        #   in Loop: Header=BB94_20 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_20
.LBB94_34:                              # %for.end239
                                        #   in Loop: Header=BB94_18 Depth=1
	jmp	.LBB94_35
.LBB94_35:                              # %for.inc240
                                        #   in Loop: Header=BB94_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_18
.LBB94_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB94_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB94_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB94_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_41 Depth 2
                                        #       Child Loop BB94_43 Depth 3
                                        #         Child Loop BB94_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB94_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB94_39 Depth=1
	movl	$0, -44(%rbp)
.LBB94_41:                              # %for.cond257
                                        #   Parent Loop BB94_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_43 Depth 3
                                        #         Child Loop BB94_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB94_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB94_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB94_43:                              # %for.cond265
                                        #   Parent Loop BB94_39 Depth=1
                                        #     Parent Loop BB94_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_45 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB94_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB94_43 Depth=3
	movl	$0, -32(%rbp)
.LBB94_45:                              # %for.cond269
                                        #   Parent Loop BB94_39 Depth=1
                                        #     Parent Loop BB94_41 Depth=2
                                        #       Parent Loop BB94_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB94_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB94_45 Depth=4
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB94_45 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB94_45
.LBB94_48:                              # %for.end284
                                        #   in Loop: Header=BB94_43 Depth=3
	jmp	.LBB94_49
.LBB94_49:                              # %for.inc285
                                        #   in Loop: Header=BB94_43 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB94_43
.LBB94_50:                              # %for.end287
                                        #   in Loop: Header=BB94_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB94_41 Depth=2
	movl	-100(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB94_41
.LBB94_52:                              # %for.end294
                                        #   in Loop: Header=BB94_39 Depth=1
	jmp	.LBB94_53
.LBB94_53:                              # %for.inc295
                                        #   in Loop: Header=BB94_39 Depth=1
	movl	-104(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB94_39
.LBB94_54:                              # %for.end297
	jmp	.LBB94_55
.LBB94_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$1543667788, -116(%rbp) # imm = 0x5C02804C
	jne	.LBB94_57
.LBB94_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_56
.Lfunc_end94:
	.size	BIDPartitionCost.69, .Lfunc_end94-BIDPartitionCost.69
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.70 # -- Begin function ClearFastFullIntegerSearch.70
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.70,@function
ClearFastFullIntegerSearch.70:          # @ClearFastFullIntegerSearch.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$555975324, -20(%rbp)   # imm = 0x2123829C
	movl	$0, -4(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_3 Depth 2
                                        #       Child Loop BB95_5 Depth 3
                                        #         Child Loop BB95_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB95_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	$0, -8(%rbp)
.LBB95_3:                               # %for.cond1
                                        #   Parent Loop BB95_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_5 Depth 3
                                        #         Child Loop BB95_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB95_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	$1, -12(%rbp)
.LBB95_5:                               # %for.cond4
                                        #   Parent Loop BB95_1 Depth=1
                                        #     Parent Loop BB95_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB95_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB95_5 Depth=3
	movl	$0, -16(%rbp)
.LBB95_7:                               # %for.cond7
                                        #   Parent Loop BB95_1 Depth=1
                                        #     Parent Loop BB95_3 Depth=2
                                        #       Parent Loop BB95_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB95_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB95_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB95_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_7
.LBB95_10:                              # %for.end
                                        #   in Loop: Header=BB95_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB95_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_5
.LBB95_12:                              # %for.end24
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_3
.LBB95_14:                              # %for.end31
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_1
.LBB95_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB95_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB95_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB95_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB95_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_17
.LBB95_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$555975324, -20(%rbp)   # imm = 0x2123829C
	jne	.LBB95_22
.LBB95_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_21
.Lfunc_end95:
	.size	ClearFastFullIntegerSearch.70, .Lfunc_end95-ClearFastFullIntegerSearch.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.71
.LCPI96_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI96_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.71
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.71,@function
Init_Motion_Search_Module.71:           # @Init_Motion_Search_Module.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1829693255, -60(%rbp)  # imm = 0x6D0EE747
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB96_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB96_3
.LBB96_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB96_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB96_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB96_6
.LBB96_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB96_6:                               # %cond.end19
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB96_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB96_9
.LBB96_8:                               # %cond.false24
	movl	-36(%rbp), %eax
	addl	$1, %eax
.LBB96_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI96_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI96_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI96_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI96_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB96_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB96_11:                              # %if.end
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB96_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB96_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB96_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB96_15:                              # %if.end66
	movslq	-56(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB96_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB96_17:                              # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB96_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB96_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB96_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB96_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB96_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_22:                              # %for.cond90
                                        #   Parent Loop BB96_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB96_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB96_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB96_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_22
.LBB96_25:                              # %for.end
                                        #   in Loop: Header=BB96_20 Depth=1
	jmp	.LBB96_26
.LBB96_26:                              # %for.inc98
                                        #   in Loop: Header=BB96_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_20
.LBB96_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB96_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jg	.LBB96_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB96_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_30:                              # %for.cond111
                                        #   Parent Loop BB96_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB96_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB96_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB96_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_30
.LBB96_33:                              # %for.end119
                                        #   in Loop: Header=BB96_28 Depth=1
	jmp	.LBB96_34
.LBB96_34:                              # %for.inc120
                                        #   in Loop: Header=BB96_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB96_28
.LBB96_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB96_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB96_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB96_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB96_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_36
.LBB96_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB96_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_45 Depth 2
                                        #     Child Loop BB96_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB96_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB96_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB96_43
.LBB96_42:                              # %cond.false143
                                        #   in Loop: Header=BB96_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB96_43:                              # %cond.end144
                                        #   in Loop: Header=BB96_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB96_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB96_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB96_45:                              # %for.cond151
                                        #   Parent Loop BB96_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB96_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB96_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB96_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_45
.LBB96_48:                              # %for.end168
                                        #   in Loop: Header=BB96_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB96_49:                              # %for.cond170
                                        #   Parent Loop BB96_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB96_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB96_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB96_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_49
.LBB96_52:                              # %for.end187
                                        #   in Loop: Header=BB96_40 Depth=1
	jmp	.LBB96_53
.LBB96_53:                              # %for.inc188
                                        #   in Loop: Header=BB96_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_40
.LBB96_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB96_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB96_56:                              # %if.end192
	cmpl	$1829693255, -60(%rbp)  # imm = 0x6D0EE747
	jne	.LBB96_58
.LBB96_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_57
.Lfunc_end96:
	.size	Init_Motion_Search_Module.71, .Lfunc_end96-Init_Motion_Search_Module.71
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.72 # -- Begin function SetMotionVectorPredictor.72
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.72,@function
SetMotionVectorPredictor.72:            # @SetMotionVectorPredictor.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1847444618, -180(%rbp) # imm = 0x6E1DC48A
	movq	%rdi, -216(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -156(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB97_2:                               # %if.end
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB97_19
# %bb.3:                                # %if.then2
	cmpl	$8, -164(%rbp)
	jge	.LBB97_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB97_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB97_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB97_8
.LBB97_7:                               # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB97_8:                               # %if.end10
	jmp	.LBB97_13
.LBB97_9:                               # %if.else11
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB97_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB97_12
.LBB97_11:                              # %if.else16
	movl	$0, -56(%rbp)
.LBB97_12:                              # %if.end18
	jmp	.LBB97_13
.LBB97_13:                              # %if.end19
	jmp	.LBB97_18
.LBB97_14:                              # %if.else20
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB97_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB97_17
.LBB97_16:                              # %if.else26
	movl	$0, -56(%rbp)
.LBB97_17:                              # %if.end28
	jmp	.LBB97_18
.LBB97_18:                              # %if.end29
	jmp	.LBB97_19
.LBB97_19:                              # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB97_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB97_21:                              # %if.end34
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB97_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB97_24
# %bb.23:                               # %cond.true
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_25
.LBB97_24:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_25
.LBB97_25:                              # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_27
# %bb.26:                               # %cond.true45
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_28
.LBB97_27:                              # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_28
.LBB97_28:                              # %cond.end56
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_30
# %bb.29:                               # %cond.true60
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_31
.LBB97_30:                              # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_31
.LBB97_31:                              # %cond.end71
	movl	%eax, -84(%rbp)
	jmp	.LBB97_72
.LBB97_32:                              # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB97_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_36
# %bb.35:                               # %cond.true87
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_37
.LBB97_36:                              # %cond.false97
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB97_37:                              # %cond.end108
	jmp	.LBB97_39
.LBB97_38:                              # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_39
.LBB97_39:                              # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_42
# %bb.41:                               # %cond.true122
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_43
.LBB97_42:                              # %cond.false132
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB97_43:                              # %cond.end143
	jmp	.LBB97_45
.LBB97_44:                              # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_45
.LBB97_45:                              # %cond.end146
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_48
# %bb.47:                               # %cond.true157
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_49
.LBB97_48:                              # %cond.false167
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB97_49:                              # %cond.end178
	jmp	.LBB97_51
.LBB97_50:                              # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_51
.LBB97_51:                              # %cond.end181
	movl	%eax, -84(%rbp)
	jmp	.LBB97_71
.LBB97_52:                              # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB97_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_55
# %bb.54:                               # %cond.true193
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB97_56
.LBB97_55:                              # %cond.false203
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_56:                              # %cond.end213
	jmp	.LBB97_58
.LBB97_57:                              # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_58
.LBB97_58:                              # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_61
# %bb.60:                               # %cond.true227
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB97_62
.LBB97_61:                              # %cond.false238
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_62:                              # %cond.end248
	jmp	.LBB97_64
.LBB97_63:                              # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_64
.LBB97_64:                              # %cond.end251
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_67
# %bb.66:                               # %cond.true262
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB97_68
.LBB97_67:                              # %cond.false273
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_68:                              # %cond.end283
	jmp	.LBB97_70
.LBB97_69:                              # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_70
.LBB97_70:                              # %cond.end286
	movl	%eax, -84(%rbp)
.LBB97_71:                              # %if.end288
	jmp	.LBB97_72
.LBB97_72:                              # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_76
# %bb.73:                               # %land.lhs.true
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_76
# %bb.74:                               # %land.lhs.true296
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_76
# %bb.75:                               # %if.then300
	movl	$1, -32(%rbp)
	jmp	.LBB97_86
.LBB97_76:                              # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_80
# %bb.77:                               # %land.lhs.true305
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_80
# %bb.78:                               # %land.lhs.true309
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_80
# %bb.79:                               # %if.then313
	movl	$2, -32(%rbp)
	jmp	.LBB97_85
.LBB97_80:                              # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_84
# %bb.81:                               # %land.lhs.true318
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_84
# %bb.82:                               # %land.lhs.true322
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_84
# %bb.83:                               # %if.then326
	movl	$3, -32(%rbp)
.LBB97_84:                              # %if.end327
	jmp	.LBB97_85
.LBB97_85:                              # %if.end328
	jmp	.LBB97_86
.LBB97_86:                              # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB97_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB97_96
# %bb.88:                               # %if.then335
	cmpl	$0, -164(%rbp)
	jne	.LBB97_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_91
# %bb.90:                               # %if.then342
	movl	$1, -32(%rbp)
.LBB97_91:                              # %if.end343
	jmp	.LBB97_95
.LBB97_92:                              # %if.else344
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_94
# %bb.93:                               # %if.then348
	movl	$3, -32(%rbp)
.LBB97_94:                              # %if.end349
	jmp	.LBB97_95
.LBB97_95:                              # %if.end350
	jmp	.LBB97_107
.LBB97_96:                              # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB97_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB97_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB97_102
# %bb.99:                               # %if.then360
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_101
# %bb.100:                              # %if.then364
	movl	$2, -32(%rbp)
.LBB97_101:                             # %if.end365
	jmp	.LBB97_105
.LBB97_102:                             # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_104
# %bb.103:                              # %if.then370
	movl	$1, -32(%rbp)
.LBB97_104:                             # %if.end371
	jmp	.LBB97_105
.LBB97_105:                             # %if.end372
	jmp	.LBB97_106
.LBB97_106:                             # %if.end373
	jmp	.LBB97_107
.LBB97_107:                             # %if.end374
	movl	$0, -12(%rbp)
.LBB97_108:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB97_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB97_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB97_121
.LBB97_111:                             # %if.then381
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB97_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_114
.LBB97_113:                             # %cond.false396
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_114
.LBB97_114:                             # %cond.end397
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_117
.LBB97_116:                             # %cond.false413
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_117
.LBB97_117:                             # %cond.end414
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_120
.LBB97_119:                             # %cond.false430
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_120
.LBB97_120:                             # %cond.end431
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB97_161
.LBB97_121:                             # %if.else433
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB97_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_126
.LBB97_125:                             # %cond.false462
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB97_126:                             # %cond.end474
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_128
.LBB97_127:                             # %cond.false476
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_128
.LBB97_128:                             # %cond.end477
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_132
.LBB97_131:                             # %cond.false500
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB97_132:                             # %cond.end513
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_134
.LBB97_133:                             # %cond.false515
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_134
.LBB97_134:                             # %cond.end516
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_138
.LBB97_137:                             # %cond.false539
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB97_138:                             # %cond.end552
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_140
.LBB97_139:                             # %cond.false554
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_140
.LBB97_140:                             # %cond.end555
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB97_160
.LBB97_141:                             # %if.else557
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB97_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB97_145
.LBB97_144:                             # %cond.false580
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_145:                             # %cond.end592
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_147
.LBB97_146:                             # %cond.false594
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_147
.LBB97_147:                             # %cond.end595
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB97_151
.LBB97_150:                             # %cond.false619
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_151:                             # %cond.end631
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_153
.LBB97_152:                             # %cond.false633
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_153
.LBB97_153:                             # %cond.end634
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB97_157
.LBB97_156:                             # %cond.false658
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_157:                             # %cond.end670
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_159
.LBB97_158:                             # %cond.false672
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_159
.LBB97_159:                             # %cond.end673
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB97_160:                             # %if.end675
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_161
.LBB97_161:                             # %if.end676
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB97_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB97_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB97_166
.LBB97_165:                             # %cond.false696
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB97_166:                             # %cond.end708
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_168
.LBB97_167:                             # %cond.false710
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_168
.LBB97_168:                             # %cond.end711
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB97_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB97_172
.LBB97_171:                             # %cond.false729
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB97_172:                             # %cond.end741
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_174
.LBB97_173:                             # %cond.false743
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_174
.LBB97_174:                             # %cond.end744
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB97_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB97_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB97_178
.LBB97_177:                             # %cond.false762
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB97_178:                             # %cond.end774
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_180
.LBB97_179:                             # %cond.false776
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_180
.LBB97_180:                             # %cond.end777
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB97_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB97_184
.LBB97_183:                             # %cond.false795
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB97_184:                             # %cond.end807
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_186
.LBB97_185:                             # %cond.false809
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-176(%rbp), %eax
.LBB97_186:                             # %cond.end810
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB97_187:                             # %if.end812
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-32(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB97_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	.LJTI97_0(,%rax,8), %rax
	jmpq	*%rax
.LBB97_189:                             # %sw.bb
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB97_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB97_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_193:                             # %if.end824
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_213
.LBB97_194:                             # %if.else825
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB97_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB97_197
.LBB97_196:                             # %cond.false831
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %edx
.LBB97_197:                             # %cond.end832
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB97_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB97_203
.LBB97_199:                             # %cond.false837
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB97_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB97_202
.LBB97_201:                             # %cond.false841
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB97_202:                             # %cond.end842
                                        #   in Loop: Header=BB97_108 Depth=1
.LBB97_203:                             # %cond.end844
                                        #   in Loop: Header=BB97_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB97_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB97_206
.LBB97_205:                             # %cond.false849
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %edx
.LBB97_206:                             # %cond.end850
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB97_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB97_212
.LBB97_208:                             # %cond.false855
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB97_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB97_211
.LBB97_210:                             # %cond.false859
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB97_211:                             # %cond.end860
                                        #   in Loop: Header=BB97_108 Depth=1
.LBB97_212:                             # %cond.end862
                                        #   in Loop: Header=BB97_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
.LBB97_213:                             # %if.end865
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB97_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB97_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB97_222
.LBB97_217:                             # %if.else877
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB97_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB97_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB97_221
.LBB97_220:                             # %if.else886
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_221:                             # %if.end889
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_222
.LBB97_222:                             # %if.end890
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_223
.LBB97_223:                             # %if.end891
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_224:                             # %sw.bb892
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_226:                             # %if.end898
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_227:                             # %sw.bb899
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_229:                             # %if.end905
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_230:                             # %sw.bb906
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_232:                             # %if.end912
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_233:                             # %sw.default
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_234:                             # %sw.epilog
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_108
.LBB97_236:                             # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB97_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB97_240
.LBB97_239:                             # %cond.false925
	movl	-152(%rbp), %eax
.LBB97_240:                             # %cond.end927
	movl	%eax, pred_SAD_space
.LBB97_241:                             # %if.end929
	cmpl	$1847444618, -180(%rbp) # imm = 0x6E1DC48A
	jne	.LBB97_243
.LBB97_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_243:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_242
.Lfunc_end97:
	.size	SetMotionVectorPredictor.72, .Lfunc_end97-SetMotionVectorPredictor.72
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI97_0:
	.quad	.LBB97_189
	.quad	.LBB97_224
	.quad	.LBB97_227
	.quad	.LBB97_230
                                        # -- End function
	.text
	.globl	Get_Direct_CostMB.73    # -- Begin function Get_Direct_CostMB.73
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.73,@function
Get_Direct_CostMB.73:                   # @Get_Direct_CostMB.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$232516944, -28(%rbp)   # imm = 0xDDBED50
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB98_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB98_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB98_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB98_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB98_5
.LBB98_4:                               # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_18
.LBB98_5:                               # %if.end
                                        #   in Loop: Header=BB98_1 Depth=1
	jmp	.LBB98_6
.LBB98_6:                               # %for.inc
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1
.LBB98_7:                               # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB98_9
	jmp	.LBB98_8
.LBB98_8:                               # %for.end
	subl	$2, %eax
	je	.LBB98_15
	jmp	.LBB98_16
.LBB98_9:                               # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB98_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB98_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB98_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB98_14
.LBB98_13:                              # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_14:                              # %if.end9
	jmp	.LBB98_17
.LBB98_15:                              # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_17
.LBB98_16:                              # %sw.default
	jmp	.LBB98_17
.LBB98_17:                              # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_18:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$232516944, -28(%rbp)   # imm = 0xDDBED50
	jne	.LBB98_20
.LBB98_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_19
.Lfunc_end98:
	.size	Get_Direct_CostMB.73, .Lfunc_end98-Get_Direct_CostMB.73
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.74 # -- Begin function ClearFastFullIntegerSearch.74
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.74,@function
ClearFastFullIntegerSearch.74:          # @ClearFastFullIntegerSearch.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$202437149, -20(%rbp)   # imm = 0xC10F21D
	movl	$0, -4(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_3 Depth 2
                                        #       Child Loop BB99_5 Depth 3
                                        #         Child Loop BB99_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB99_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	$0, -8(%rbp)
.LBB99_3:                               # %for.cond1
                                        #   Parent Loop BB99_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_5 Depth 3
                                        #         Child Loop BB99_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB99_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	$1, -12(%rbp)
.LBB99_5:                               # %for.cond4
                                        #   Parent Loop BB99_1 Depth=1
                                        #     Parent Loop BB99_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB99_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB99_5 Depth=3
	movl	$0, -16(%rbp)
.LBB99_7:                               # %for.cond7
                                        #   Parent Loop BB99_1 Depth=1
                                        #     Parent Loop BB99_3 Depth=2
                                        #       Parent Loop BB99_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB99_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB99_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB99_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_7
.LBB99_10:                              # %for.end
                                        #   in Loop: Header=BB99_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB99_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_5
.LBB99_12:                              # %for.end24
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_3
.LBB99_14:                              # %for.end31
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_1
.LBB99_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB99_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB99_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB99_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB99_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_17
.LBB99_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$202437149, -20(%rbp)   # imm = 0xC10F21D
	jne	.LBB99_22
.LBB99_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_21
.Lfunc_end99:
	.size	ClearFastFullIntegerSearch.74, .Lfunc_end99-ClearFastFullIntegerSearch.74
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.75 # -- Begin function PartitionMotionSearch.75
	.p2align	4, 0x90
	.type	PartitionMotionSearch.75,@function
PartitionMotionSearch.75:               # @PartitionMotionSearch.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1217714324, -76(%rbp)  # imm = 0x4894D894
	movl	%edi, -8(%rbp)
	movl	%esi, -24(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB100_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB100_3
.LBB100_2:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB100_3
.LBB100_3:                              # %cond.end
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -84(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB100_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB100_6
# %bb.5:                                # %if.then20
	movl	$4, -44(%rbp)
	jmp	.LBB100_7
.LBB100_6:                              # %if.else
	movl	$2, -44(%rbp)
.LBB100_7:                              # %if.end
	jmp	.LBB100_9
.LBB100_8:                              # %if.else21
	movl	$0, -44(%rbp)
.LBB100_9:                              # %if.end22
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB100_10:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_12 Depth 2
                                        #       Child Loop BB100_29 Depth 3
                                        #         Child Loop BB100_31 Depth 4
                                        #           Child Loop BB100_33 Depth 5
                                        #             Child Loop BB100_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB100_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB100_10 Depth=1
	movw	$0, -2(%rbp)
.LBB100_12:                             # %for.cond27
                                        #   Parent Loop BB100_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_29 Depth 3
                                        #         Child Loop BB100_31 Depth 4
                                        #           Child Loop BB100_33 Depth 5
                                        #             Child Loop BB100_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB100_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB100_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB100_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB100_28
.LBB100_15:                             # %if.else38
                                        #   in Loop: Header=BB100_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB100_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB100_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB100_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB100_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB100_19
.LBB100_18:                             # %cond.false49
                                        #   in Loop: Header=BB100_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB100_19
.LBB100_19:                             # %cond.end50
                                        #   in Loop: Header=BB100_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	jmp	.LBB100_27
.LBB100_20:                             # %if.else53
                                        #   in Loop: Header=BB100_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB100_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB100_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB100_23
.LBB100_22:                             # %cond.false60
                                        #   in Loop: Header=BB100_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB100_23
.LBB100_23:                             # %cond.end61
                                        #   in Loop: Header=BB100_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB100_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB100_12 Depth=2
	movl	$2, %edx
	jmp	.LBB100_26
.LBB100_25:                             # %cond.false67
                                        #   in Loop: Header=BB100_12 Depth=2
	movl	-8(%rbp), %edx
.LBB100_26:                             # %cond.end68
                                        #   in Loop: Header=BB100_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
.LBB100_27:                             # %if.end71
                                        #   in Loop: Header=BB100_12 Depth=2
	jmp	.LBB100_28
.LBB100_28:                             # %if.end72
                                        #   in Loop: Header=BB100_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB100_29:                             # %for.cond89
                                        #   Parent Loop BB100_10 Depth=1
                                        #     Parent Loop BB100_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_31 Depth 4
                                        #           Child Loop BB100_33 Depth 5
                                        #             Child Loop BB100_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB100_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB100_31:                             # %for.cond103
                                        #   Parent Loop BB100_10 Depth=1
                                        #     Parent Loop BB100_12 Depth=2
                                        #       Parent Loop BB100_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_33 Depth 5
                                        #             Child Loop BB100_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-84(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB100_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-40(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -28(%rbp)
.LBB100_33:                             # %for.cond123
                                        #   Parent Loop BB100_10 Depth=1
                                        #     Parent Loop BB100_12 Depth=2
                                        #       Parent Loop BB100_29 Depth=3
                                        #         Parent Loop BB100_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB100_35 Depth 6
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB100_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB100_33 Depth=5
	movl	$0, -32(%rbp)
.LBB100_35:                             # %for.cond127
                                        #   Parent Loop BB100_10 Depth=1
                                        #     Parent Loop BB100_12 Depth=2
                                        #       Parent Loop BB100_29 Depth=3
                                        #         Parent Loop BB100_31 Depth=4
                                        #           Parent Loop BB100_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-32(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB100_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB100_35 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB100_35
.LBB100_38:                             # %for.end
                                        #   in Loop: Header=BB100_33 Depth=5
	jmp	.LBB100_39
.LBB100_39:                             # %for.inc174
                                        #   in Loop: Header=BB100_33 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB100_33
.LBB100_40:                             # %for.end176
                                        #   in Loop: Header=BB100_31 Depth=4
	jmp	.LBB100_41
.LBB100_41:                             # %for.inc177
                                        #   in Loop: Header=BB100_31 Depth=4
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_31
.LBB100_42:                             # %for.end179
                                        #   in Loop: Header=BB100_29 Depth=3
	jmp	.LBB100_43
.LBB100_43:                             # %for.inc180
                                        #   in Loop: Header=BB100_29 Depth=3
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_29
.LBB100_44:                             # %for.end182
                                        #   in Loop: Header=BB100_12 Depth=2
	jmp	.LBB100_45
.LBB100_45:                             # %for.inc183
                                        #   in Loop: Header=BB100_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB100_12
.LBB100_46:                             # %for.end185
                                        #   in Loop: Header=BB100_10 Depth=1
	jmp	.LBB100_47
.LBB100_47:                             # %for.inc186
                                        #   in Loop: Header=BB100_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_10
.LBB100_48:                             # %for.end188
	cmpl	$1217714324, -76(%rbp)  # imm = 0x4894D894
	jne	.LBB100_50
.LBB100_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_49
.Lfunc_end100:
	.size	PartitionMotionSearch.75, .Lfunc_end100-PartitionMotionSearch.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.76
.LCPI101_0:
	.quad	4602678819172646912     # double 0.5
.LCPI101_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.76
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.76,@function
FullPelBlockMotionSearch.76:            # @FullPelBlockMotionSearch.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1543894236, -116(%rbp) # imm = 0x5C05F4DC
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -68(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -88(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB101_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB101_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB101_4
.LBB101_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB101_4
.LBB101_4:                              # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI101_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI101_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	%ecx, -28(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -136(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -132(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-88(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-88(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -92(%rbp)
	movl	-92(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -120(%rbp)
	movl	-68(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -140(%rbp)
	movl	-84(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -144(%rbp)
	movl	-68(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movl	-84(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	cmpl	$1, -88(%rbp)
	jne	.LBB101_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB101_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB101_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB101_8:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB101_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB101_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB101_14
.LBB101_11:                             # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB101_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB101_13:                             # %land.end63
.LBB101_14:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	je	.LBB101_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB101_17
# %bb.16:                               # %if.then
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB101_18
.LBB101_17:                             # %if.else
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB101_18:                             # %if.end
	movl	-64(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB101_23
# %bb.19:                               # %land.lhs.true81
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_23
# %bb.20:                               # %land.lhs.true86
	movl	-80(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB101_23
# %bb.21:                               # %land.lhs.true89
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-96(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB101_24
.LBB101_23:                             # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB101_24:                             # %if.end97
	movl	$0, -20(%rbp)
.LBB101_25:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_33 Depth 2
                                        #       Child Loop BB101_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB101_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	-64(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-100(%rbp), %eax
	movq	mvbits, %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	subl	-140(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	subl	-144(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -148(%rbp)
	je	.LBB101_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jne	.LBB101_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jne	.LBB101_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	-100(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB101_30:                             # %if.end128
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB101_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB101_25 Depth=1
	jmp	.LBB101_46
.LBB101_32:                             # %if.end132
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	$0, -32(%rbp)
.LBB101_33:                             # %for.cond133
                                        #   Parent Loop BB101_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_35 Depth 3
	movl	-32(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB101_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB101_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-60(%rbp), %edx
	addl	-32(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-136(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-168(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -76(%rbp)
.LBB101_35:                             # %for.cond140
                                        #   Parent Loop BB101_25 Depth=1
                                        #     Parent Loop BB101_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-76(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB101_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB101_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB101_35 Depth=3
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB101_35
.LBB101_38:                             # %for.end
                                        #   in Loop: Header=BB101_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB101_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB101_25 Depth=1
	jmp	.LBB101_43
.LBB101_40:                             # %if.end178
                                        #   in Loop: Header=BB101_33 Depth=2
	jmp	.LBB101_41
.LBB101_41:                             # %for.inc179
                                        #   in Loop: Header=BB101_33 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB101_33
.LBB101_42:                             # %for.end181.loopexit
                                        #   in Loop: Header=BB101_25 Depth=1
	jmp	.LBB101_43
.LBB101_43:                             # %for.end181
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB101_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB101_45:                             # %if.end185
                                        #   in Loop: Header=BB101_25 Depth=1
	jmp	.LBB101_46
.LBB101_46:                             # %for.inc186
                                        #   in Loop: Header=BB101_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB101_25
.LBB101_47:                             # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB101_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB101_49:                             # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1543894236, -116(%rbp) # imm = 0x5C05F4DC
	jne	.LBB101_51
.LBB101_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_51:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_50
.Lfunc_end101:
	.size	FullPelBlockMotionSearch.76, .Lfunc_end101-FullPelBlockMotionSearch.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.77
.LCPI102_0:
	.quad	4602678819172646912     # double 0.5
.LCPI102_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.77
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.77,@function
FullPelBlockMotionBiPred.77:            # @FullPelBlockMotionBiPred.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$1122313346, -180(%rbp) # imm = 0x42E52482
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -104(%rbp)
	movl	%r8d, -112(%rbp)
	movl	%r9d, -148(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB102_4
.LBB102_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB102_4
.LBB102_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB102_6
# %bb.5:                                # %cond.true9
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB102_7
.LBB102_6:                              # %cond.false11
	movl	-36(%rbp), %eax
.LBB102_7:                              # %cond.end12
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -124(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	$0, -116(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -188(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -144(%rbp)
	movl	-104(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movl	-104(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-104(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-112(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-104(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movl	-112(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -46(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB102_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB102_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB102_11
.LBB102_10:                             # %cond.false79
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB102_11:                             # %cond.end87
	jmp	.LBB102_13
.LBB102_12:                             # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB102_13:                             # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB102_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB102_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB102_17
.LBB102_16:                             # %cond.false107
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB102_17:                             # %cond.end114
	jmp	.LBB102_19
.LBB102_18:                             # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB102_19:                             # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB102_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB102_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB102_23
.LBB102_22:                             # %cond.false132
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB102_23:                             # %cond.end138
	jmp	.LBB102_25
.LBB102_24:                             # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB102_25
.LBB102_25:                             # %cond.end141
	movw	%ax, -134(%rbp)
	movswl	-46(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB102_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB102_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB102_29
.LBB102_28:                             # %cond.false156
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB102_29:                             # %cond.end161
	jmp	.LBB102_31
.LBB102_30:                             # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB102_31
.LBB102_31:                             # %cond.end164
	movw	%ax, -136(%rbp)
	movswl	-136(%rbp), %eax
	movswl	-134(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB102_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB102_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB102_37
.LBB102_36:                             # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB102_37:                             # %if.end
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB102_42
# %bb.38:                               # %land.lhs.true196
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_42
# %bb.39:                               # %land.lhs.true204
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB102_42
# %bb.40:                               # %land.lhs.true208
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB102_43
.LBB102_42:                             # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB102_43:                             # %if.end218
	movl	$0, -100(%rbp)
.LBB102_44:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_49 Depth 2
                                        #       Child Loop BB102_51 Depth 3
                                        #     Child Loop BB102_85 Depth 2
                                        #       Child Loop BB102_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB102_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB102_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-44(%rbp), %edx
	shll	$2, %edx
	subl	-192(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-42(%rbp), %esi
	shll	$2, %esi
	subl	-172(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-176(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-184(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB102_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_99
.LBB102_47:                             # %if.end257
                                        #   in Loop: Header=BB102_44 Depth=1
	cmpw	$0, -46(%rbp)
	je	.LBB102_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB102_44 Depth=1
	movl	$0, -40(%rbp)
.LBB102_49:                             # %for.cond260
                                        #   Parent Loop BB102_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_51 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB102_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB102_49 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-44(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB102_51:                             # %for.cond271
                                        #   Parent Loop BB102_44 Depth=1
                                        #     Parent Loop BB102_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB102_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB102_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB102_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_58
.LBB102_54:                             # %cond.false296
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB102_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB102_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_57
.LBB102_56:                             # %cond.false310
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB102_57:                             # %cond.end320
                                        #   in Loop: Header=BB102_51 Depth=3
.LBB102_58:                             # %cond.end322
                                        #   in Loop: Header=BB102_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB102_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB102_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_64
.LBB102_60:                             # %cond.false354
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB102_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB102_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_63
.LBB102_62:                             # %cond.false369
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB102_63:                             # %cond.end379
                                        #   in Loop: Header=BB102_51 Depth=3
.LBB102_64:                             # %cond.end381
                                        #   in Loop: Header=BB102_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB102_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB102_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_70
.LBB102_66:                             # %cond.false413
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB102_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB102_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_69
.LBB102_68:                             # %cond.false428
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB102_69:                             # %cond.end438
                                        #   in Loop: Header=BB102_51 Depth=3
.LBB102_70:                             # %cond.end440
                                        #   in Loop: Header=BB102_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB102_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB102_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB102_76
.LBB102_72:                             # %cond.false472
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB102_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB102_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_75
.LBB102_74:                             # %cond.false487
                                        #   in Loop: Header=BB102_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB102_75:                             # %cond.end497
                                        #   in Loop: Header=BB102_51 Depth=3
.LBB102_76:                             # %cond.end499
                                        #   in Loop: Header=BB102_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB102_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB102_51
.LBB102_78:                             # %for.end
                                        #   in Loop: Header=BB102_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB102_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_83
.LBB102_80:                             # %if.end512
                                        #   in Loop: Header=BB102_49 Depth=2
	jmp	.LBB102_81
.LBB102_81:                             # %for.inc513
                                        #   in Loop: Header=BB102_49 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB102_49
.LBB102_82:                             # %for.end515.loopexit
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_83
.LBB102_83:                             # %for.end515
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_96
.LBB102_84:                             # %if.else516
                                        #   in Loop: Header=BB102_44 Depth=1
	movl	$0, -40(%rbp)
.LBB102_85:                             # %for.cond517
                                        #   Parent Loop BB102_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_87 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB102_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB102_85 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-44(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB102_87:                             # %for.cond529
                                        #   Parent Loop BB102_44 Depth=1
                                        #     Parent Loop BB102_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB102_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB102_87 Depth=3
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB102_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB102_87
.LBB102_90:                             # %for.end583
                                        #   in Loop: Header=BB102_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB102_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_95
.LBB102_92:                             # %if.end587
                                        #   in Loop: Header=BB102_85 Depth=2
	jmp	.LBB102_93
.LBB102_93:                             # %for.inc588
                                        #   in Loop: Header=BB102_85 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB102_85
.LBB102_94:                             # %for.end590.loopexit
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_95
.LBB102_95:                             # %for.end590
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_96
.LBB102_96:                             # %if.end591
                                        #   in Loop: Header=BB102_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB102_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB102_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB102_98:                             # %if.end595
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_99
.LBB102_99:                             # %for.inc596
                                        #   in Loop: Header=BB102_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB102_44
.LBB102_100:                            # %for.end598
	cmpl	$0, -116(%rbp)
	je	.LBB102_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-116(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-116(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB102_102:                            # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$1122313346, -180(%rbp) # imm = 0x42E52482
	jne	.LBB102_104
.LBB102_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_104:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_103
.Lfunc_end102:
	.size	FullPelBlockMotionBiPred.77, .Lfunc_end102-FullPelBlockMotionBiPred.77
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.78 # -- Begin function PartitionMotionSearch.78
	.p2align	4, 0x90
	.type	PartitionMotionSearch.78,@function
PartitionMotionSearch.78:               # @PartitionMotionSearch.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1498985908, -76(%rbp)  # imm = 0x5958B5B4
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -104(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB103_2
# %bb.1:                                # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB103_3
.LBB103_2:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB103_3
.LBB103_3:                              # %cond.end
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB103_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB103_6
# %bb.5:                                # %if.then20
	movl	$4, -40(%rbp)
	jmp	.LBB103_7
.LBB103_6:                              # %if.else
	movl	$2, -40(%rbp)
.LBB103_7:                              # %if.end
	jmp	.LBB103_9
.LBB103_8:                              # %if.else21
	movl	$0, -40(%rbp)
.LBB103_9:                              # %if.end22
	movl	-64(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -8(%rbp)
.LBB103_10:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_12 Depth 2
                                        #       Child Loop BB103_29 Depth 3
                                        #         Child Loop BB103_31 Depth 4
                                        #           Child Loop BB103_33 Depth 5
                                        #             Child Loop BB103_35 Depth 6
	movl	-8(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB103_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB103_10 Depth=1
	movw	$0, -2(%rbp)
.LBB103_12:                             # %for.cond27
                                        #   Parent Loop BB103_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_29 Depth 3
                                        #         Child Loop BB103_31 Depth 4
                                        #           Child Loop BB103_33 Depth 5
                                        #             Child Loop BB103_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-8(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB103_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB103_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB103_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB103_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB103_28
.LBB103_15:                             # %if.else38
                                        #   in Loop: Header=BB103_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB103_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB103_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB103_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB103_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB103_19
.LBB103_18:                             # %cond.false49
                                        #   in Loop: Header=BB103_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB103_19
.LBB103_19:                             # %cond.end50
                                        #   in Loop: Header=BB103_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
	jmp	.LBB103_27
.LBB103_20:                             # %if.else53
                                        #   in Loop: Header=BB103_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB103_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB103_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB103_23
.LBB103_22:                             # %cond.false60
                                        #   in Loop: Header=BB103_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB103_23
.LBB103_23:                             # %cond.end61
                                        #   in Loop: Header=BB103_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-12(%rbp), %edx
	jge	.LBB103_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB103_12 Depth=2
	movl	$2, %edx
	jmp	.LBB103_26
.LBB103_25:                             # %cond.false67
                                        #   in Loop: Header=BB103_12 Depth=2
	movl	-12(%rbp), %edx
.LBB103_26:                             # %cond.end68
                                        #   in Loop: Header=BB103_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
.LBB103_27:                             # %if.end71
                                        #   in Loop: Header=BB103_12 Depth=2
	jmp	.LBB103_28
.LBB103_28:                             # %if.end72
                                        #   in Loop: Header=BB103_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -112(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB103_29:                             # %for.cond89
                                        #   Parent Loop BB103_10 Depth=1
                                        #     Parent Loop BB103_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_31 Depth 4
                                        #           Child Loop BB103_33 Depth 5
                                        #             Child Loop BB103_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB103_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB103_31:                             # %for.cond103
                                        #   Parent Loop BB103_10 Depth=1
                                        #     Parent Loop BB103_12 Depth=2
                                        #       Parent Loop BB103_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_33 Depth 5
                                        #             Child Loop BB103_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB103_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-12(%rbp), %r8d
	movl	-52(%rbp), %r9d
	vmovsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -32(%rbp)
.LBB103_33:                             # %for.cond123
                                        #   Parent Loop BB103_10 Depth=1
                                        #     Parent Loop BB103_12 Depth=2
                                        #       Parent Loop BB103_29 Depth=3
                                        #         Parent Loop BB103_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB103_35 Depth 6
	movl	-32(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB103_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB103_33 Depth=5
	movl	$0, -36(%rbp)
.LBB103_35:                             # %for.cond127
                                        #   Parent Loop BB103_10 Depth=1
                                        #     Parent Loop BB103_12 Depth=2
                                        #       Parent Loop BB103_29 Depth=3
                                        #         Parent Loop BB103_31 Depth=4
                                        #           Parent Loop BB103_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB103_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-112(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB103_35 Depth=6
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB103_35
.LBB103_38:                             # %for.end
                                        #   in Loop: Header=BB103_33 Depth=5
	jmp	.LBB103_39
.LBB103_39:                             # %for.inc174
                                        #   in Loop: Header=BB103_33 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB103_33
.LBB103_40:                             # %for.end176
                                        #   in Loop: Header=BB103_31 Depth=4
	jmp	.LBB103_41
.LBB103_41:                             # %for.inc177
                                        #   in Loop: Header=BB103_31 Depth=4
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_31
.LBB103_42:                             # %for.end179
                                        #   in Loop: Header=BB103_29 Depth=3
	jmp	.LBB103_43
.LBB103_43:                             # %for.inc180
                                        #   in Loop: Header=BB103_29 Depth=3
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB103_29
.LBB103_44:                             # %for.end182
                                        #   in Loop: Header=BB103_12 Depth=2
	jmp	.LBB103_45
.LBB103_45:                             # %for.inc183
                                        #   in Loop: Header=BB103_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB103_12
.LBB103_46:                             # %for.end185
                                        #   in Loop: Header=BB103_10 Depth=1
	jmp	.LBB103_47
.LBB103_47:                             # %for.inc186
                                        #   in Loop: Header=BB103_10 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_10
.LBB103_48:                             # %for.end188
	cmpl	$1498985908, -76(%rbp)  # imm = 0x5958B5B4
	jne	.LBB103_50
.LBB103_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_49
.Lfunc_end103:
	.size	PartitionMotionSearch.78, .Lfunc_end103-PartitionMotionSearch.78
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.79              # -- Begin function SATD8X8.79
	.p2align	4, 0x90
	.type	SATD8X8.79,@function
SATD8X8.79:                             # @SATD8X8.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1885268882, -36(%rbp)  # imm = 0x705EEB92
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB104_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB104_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB104_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB104_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_2
.LBB104_5:                              # %for.end
	movl	$0, -12(%rbp)
.LBB104_6:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB104_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB104_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB104_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_6
.LBB104_9:                              # %for.end495
	movl	$0, -16(%rbp)
.LBB104_10:                             # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB104_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB104_10 Depth=1
	movl	$0, -12(%rbp)
.LBB104_12:                             # %for.cond499
                                        #   Parent Loop BB104_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB104_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB104_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB104_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB104_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB104_16
.LBB104_15:                             # %cond.false
                                        #   in Loop: Header=BB104_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB104_16:                             # %cond.end
                                        #   in Loop: Header=BB104_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB104_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_12
.LBB104_18:                             # %for.end519
                                        #   in Loop: Header=BB104_10 Depth=1
	jmp	.LBB104_19
.LBB104_19:                             # %for.inc520
                                        #   in Loop: Header=BB104_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_10
.LBB104_20:                             # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB104_26
.LBB104_21:                             # %if.else
	movl	$0, -12(%rbp)
.LBB104_22:                             # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB104_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB104_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB104_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_22
.LBB104_25:                             # %for.end534
	jmp	.LBB104_26
.LBB104_26:                             # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1885268882, -36(%rbp)  # imm = 0x705EEB92
	jne	.LBB104_28
.LBB104_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_27
.Lfunc_end104:
	.size	SATD8X8.79, .Lfunc_end104-SATD8X8.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.80
.LCPI105_0:
	.quad	4602678819172646912     # double 0.5
.LCPI105_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.80
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.80,@function
FullPelBlockMotionSearch.80:            # @FullPelBlockMotionSearch.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1594047903, -120(%rbp) # imm = 0x5F033D9F
	movq	%rdi, -176(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -92(%rbp)
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB105_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB105_4
.LBB105_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB105_4
.LBB105_4:                              # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	%ecx, -24(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -136(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -128(%rbp)
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-92(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-92(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -72(%rbp)
	movl	-72(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -124(%rbp)
	movl	-60(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -148(%rbp)
	movl	-64(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movl	-60(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movl	-64(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	cmpl	$1, -92(%rbp)
	jne	.LBB105_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB105_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB105_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB105_8:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB105_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB105_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB105_14
.LBB105_11:                             # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB105_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB105_13:                             # %land.end63
.LBB105_14:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB105_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB105_17
# %bb.16:                               # %if.then
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB105_18
.LBB105_17:                             # %if.else
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB105_18:                             # %if.end
	movl	-76(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB105_23
# %bb.19:                               # %land.lhs.true81
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_23
# %bb.20:                               # %land.lhs.true86
	movl	-68(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB105_23
# %bb.21:                               # %land.lhs.true89
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-100(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB105_24
.LBB105_23:                             # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB105_24:                             # %if.end97
	movl	$0, -20(%rbp)
.LBB105_25:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_33 Depth 2
                                        #       Child Loop BB105_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB105_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	-76(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-96(%rbp), %eax
	movq	mvbits, %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	subl	-148(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-84(%rbp), %esi
	shll	$2, %esi
	subl	-132(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB105_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	-80(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB105_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	-84(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB105_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	-96(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB105_30:                             # %if.end128
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB105_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB105_25 Depth=1
	jmp	.LBB105_46
.LBB105_32:                             # %if.end132
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	$0, -32(%rbp)
.LBB105_33:                             # %for.cond133
                                        #   Parent Loop BB105_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_35 Depth 3
	movl	-32(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB105_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB105_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-72(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-84(%rbp), %edx
	addl	-32(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-136(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-176(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -88(%rbp)
.LBB105_35:                             # %for.cond140
                                        #   Parent Loop BB105_25 Depth=1
                                        #     Parent Loop BB105_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jge	.LBB105_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB105_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB105_35 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB105_35
.LBB105_38:                             # %for.end
                                        #   in Loop: Header=BB105_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB105_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB105_25 Depth=1
	jmp	.LBB105_43
.LBB105_40:                             # %if.end178
                                        #   in Loop: Header=BB105_33 Depth=2
	jmp	.LBB105_41
.LBB105_41:                             # %for.inc179
                                        #   in Loop: Header=BB105_33 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB105_33
.LBB105_42:                             # %for.end181.loopexit
                                        #   in Loop: Header=BB105_25 Depth=1
	jmp	.LBB105_43
.LBB105_43:                             # %for.end181
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB105_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB105_45:                             # %if.end185
                                        #   in Loop: Header=BB105_25 Depth=1
	jmp	.LBB105_46
.LBB105_46:                             # %for.inc186
                                        #   in Loop: Header=BB105_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_25
.LBB105_47:                             # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB105_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB105_49:                             # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1594047903, -120(%rbp) # imm = 0x5F033D9F
	jne	.LBB105_51
.LBB105_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_51:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_50
.Lfunc_end105:
	.size	FullPelBlockMotionSearch.80, .Lfunc_end105-FullPelBlockMotionSearch.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.81
.LCPI106_0:
	.quad	4611686018427387904     # double 2
.LCPI106_1:
	.quad	4607182418800017408     # double 1
.LCPI106_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI106_4:
	.quad	4620693217682128896     # double 8
.LCPI106_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI106_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.81
	.p2align	4, 0x90
	.type	BlockMotionSearch.81,@function
BlockMotionSearch.81:                   # @BlockMotionSearch.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$2036376732, -212(%rbp) # imm = 0x7960A49C
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -180(%rbp)
	movl	%ecx, -192(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-192(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-192(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB106_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	addl	$1, %edx
	jmp	.LBB106_4
.LBB106_3:                              # %cond.false
	xorl	%edx, %edx
	jmp	.LBB106_4
.LBB106_4:                              # %cond.end
	movl	%edx, -92(%rbp)
.LBB106_5:                              # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB106_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB106_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB106_6 Depth=1
	movl	$0, -64(%rbp)
.LBB106_8:                              # %for.cond24
                                        #   Parent Loop BB106_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB106_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB106_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB106_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB106_8
.LBB106_11:                             # %for.end
                                        #   in Loop: Header=BB106_6 Depth=1
	jmp	.LBB106_12
.LBB106_12:                             # %for.inc37
                                        #   in Loop: Header=BB106_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB106_6
.LBB106_13:                             # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB106_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB106_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB106_18
.LBB106_17:                             # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB106_18:                             # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB106_37
.LBB106_19:                             # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB106_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB106_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB106_23
.LBB106_22:                             # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB106_23:                             # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB106_36
.LBB106_24:                             # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB106_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB106_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB106_28
.LBB106_27:                             # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB106_28:                             # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB106_35
.LBB106_29:                             # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB106_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB106_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB106_33
.LBB106_32:                             # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB106_33:                             # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB106_34:                             # %if.end276
	jmp	.LBB106_35
.LBB106_35:                             # %if.end277
	jmp	.LBB106_36
.LBB106_36:                             # %if.end278
	jmp	.LBB106_37
.LBB106_37:                             # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB106_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB106_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB106_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB106_43
.LBB106_42:                             # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB106_43:                             # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB106_62
.LBB106_44:                             # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB106_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB106_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB106_48
.LBB106_47:                             # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB106_48:                             # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB106_61
.LBB106_49:                             # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB106_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB106_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB106_53
.LBB106_52:                             # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB106_53:                             # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB106_60
.LBB106_54:                             # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB106_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB106_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB106_58
.LBB106_57:                             # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB106_58:                             # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB106_59:                             # %if.end524
	jmp	.LBB106_60
.LBB106_60:                             # %if.end525
	jmp	.LBB106_61
.LBB106_61:                             # %if.end526
	jmp	.LBB106_62
.LBB106_62:                             # %if.end527
	jmp	.LBB106_63
.LBB106_63:                             # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB106_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB106_66
.LBB106_65:                             # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB106_66:                             # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB106_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB106_68:                             # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB106_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	cmpl	$1, %edx
	jle	.LBB106_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB106_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB106_73
.LBB106_72:                             # %cond.false626
	vmovsd	.LCPI106_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI106_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB106_73:                             # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB106_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB106_76
.LBB106_75:                             # %cond.false655
	vmovsd	.LCPI106_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI106_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB106_76:                             # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB106_77:                             # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB106_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB106_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB106_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB106_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB106_83
.LBB106_82:                             # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB106_83:                             # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB106_84:                             # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB106_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB106_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB106_92
.LBB106_88:                             # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB106_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB106_91
.LBB106_90:                             # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB106_91:                             # %cond.end787
	vmovss	.LCPI106_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB106_92:                             # %if.end835
	jmp	.LBB106_106
.LBB106_93:                             # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB106_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB106_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB106_97
.LBB106_96:                             # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB106_97:                             # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB106_98:                             # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB106_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB106_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB106_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB106_104
.LBB106_103:                            # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB106_104:                            # %cond.end940
	vmovss	.LCPI106_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB106_105:                            # %if.end988
	jmp	.LBB106_106
.LBB106_106:                            # %if.end989
	jmp	.LBB106_107
.LBB106_107:                            # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB106_109:                            # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	-136(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_142
# %bb.110:                              # %if.then1000
	movswl	-96(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movswl	-94(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB106_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB106_113
# %bb.112:                              # %cond.true1013
	movl	-100(%rbp), %ecx
	jmp	.LBB106_114
.LBB106_113:                            # %cond.false1014
	movswl	-58(%rbp), %ecx
.LBB106_114:                            # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB106_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-100(%rbp), %ecx
	jmp	.LBB106_120
.LBB106_116:                            # %cond.false1022
	movl	-100(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_118
# %bb.117:                              # %cond.true1026
	movl	-100(%rbp), %ecx
	jmp	.LBB106_119
.LBB106_118:                            # %cond.false1027
	movswl	-58(%rbp), %ecx
.LBB106_119:                            # %cond.end1029
.LBB106_120:                            # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -58(%rbp)
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB106_122
# %bb.121:                              # %cond.true1038
	movl	-100(%rbp), %ecx
	jmp	.LBB106_123
.LBB106_122:                            # %cond.false1039
	movswl	-60(%rbp), %ecx
.LBB106_123:                            # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB106_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB106_129
.LBB106_125:                            # %cond.false1047
	movl	-100(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_127
# %bb.126:                              # %cond.true1051
	movl	-100(%rbp), %eax
	jmp	.LBB106_128
.LBB106_127:                            # %cond.false1052
	movswl	-60(%rbp), %eax
.LBB106_128:                            # %cond.end1054
.LBB106_129:                            # %cond.end1056
	movw	%ax, -60(%rbp)
.LBB106_130:                            # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB106_131:                            # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB106_131 Depth=1
	movl	$0, -72(%rbp)
.LBB106_133:                            # %for.cond1066
                                        #   Parent Loop BB106_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB106_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB106_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB106_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB106_137
.LBB106_136:                            # %if.else1091
                                        #   in Loop: Header=BB106_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB106_137:                            # %if.end1109
                                        #   in Loop: Header=BB106_133 Depth=2
	jmp	.LBB106_138
.LBB106_138:                            # %for.inc1110
                                        #   in Loop: Header=BB106_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB106_133
.LBB106_139:                            # %for.end1112
                                        #   in Loop: Header=BB106_131 Depth=1
	jmp	.LBB106_140
.LBB106_140:                            # %for.inc1113
                                        #   in Loop: Header=BB106_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB106_131
.LBB106_141:                            # %for.end1115
	jmp	.LBB106_143
.LBB106_142:                            # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB106_143:                            # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB106_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB106_146:                            # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB106_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB106_150
.LBB106_149:                            # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB106_150:                            # %if.end1133
	movl	$0, -64(%rbp)
.LBB106_151:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB106_151 Depth=1
	movl	$0, -72(%rbp)
.LBB106_153:                            # %for.cond1139
                                        #   Parent Loop BB106_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB106_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB106_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB106_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB106_157
.LBB106_156:                            # %if.else1183
                                        #   in Loop: Header=BB106_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB106_157:                            # %if.end1220
                                        #   in Loop: Header=BB106_153 Depth=2
	jmp	.LBB106_158
.LBB106_158:                            # %for.inc1221
                                        #   in Loop: Header=BB106_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB106_153
.LBB106_159:                            # %for.end1223
                                        #   in Loop: Header=BB106_151 Depth=1
	jmp	.LBB106_160
.LBB106_160:                            # %for.inc1224
                                        #   in Loop: Header=BB106_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB106_151
.LBB106_161:                            # %for.end1226
	jmp	.LBB106_166
.LBB106_162:                            # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB106_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB106_165:                            # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB106_166:                            # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB106_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB106_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB106_173
.LBB106_170:                            # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI106_3(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI106_4(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB106_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -58(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -60(%rbp)
.LBB106_172:                            # %if.end1273
	jmp	.LBB106_173
.LBB106_173:                            # %if.end1274
	jmp	.LBB106_174
.LBB106_174:                            # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -196(%rbp)
	movl	$0, -64(%rbp)
.LBB106_176:                            # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB106_176 Depth=1
	movl	$0, -72(%rbp)
.LBB106_178:                            # %for.cond1290
                                        #   Parent Loop BB106_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB106_178 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-184(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-196(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-184(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-196(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB106_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB106_178
.LBB106_181:                            # %for.end1337
                                        #   in Loop: Header=BB106_176 Depth=1
	jmp	.LBB106_182
.LBB106_182:                            # %for.inc1338
                                        #   in Loop: Header=BB106_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB106_176
.LBB106_183:                            # %for.end1340
	jmp	.LBB106_193
.LBB106_184:                            # %if.else1341
	movl	$0, -64(%rbp)
.LBB106_185:                            # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB106_185 Depth=1
	movl	$0, -72(%rbp)
.LBB106_187:                            # %for.cond1347
                                        #   Parent Loop BB106_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB106_187 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB106_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB106_187
.LBB106_190:                            # %for.end1380
                                        #   in Loop: Header=BB106_185 Depth=1
	jmp	.LBB106_191
.LBB106_191:                            # %for.inc1381
                                        #   in Loop: Header=BB106_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB106_185
.LBB106_192:                            # %for.end1383
	jmp	.LBB106_193
.LBB106_193:                            # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB106_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB106_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB106_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB106_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB106_200
.LBB106_199:                            # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB106_200:                            # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
	movw	$0, -106(%rbp)
	movw	$0, -108(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-140(%rbp), %ebx
	movl	-136(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movl	$0, -64(%rbp)
.LBB106_201:                            # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB106_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB106_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB106_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB106_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -106(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -108(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB106_208
.LBB106_204:                            # %if.else1433
                                        #   in Loop: Header=BB106_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -146(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -148(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -106(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB106_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB106_201 Depth=1
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	jmp	.LBB106_207
.LBB106_206:                            # %if.else1441
                                        #   in Loop: Header=BB106_201 Depth=1
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
.LBB106_207:                            # %if.end1450
                                        #   in Loop: Header=BB106_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB106_208:                            # %if.end1452
                                        #   in Loop: Header=BB106_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-146(%rbp), %r11w
	movw	-148(%rbp), %r14w
	movw	-106(%rbp), %r15w
	movw	-108(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-132(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -132(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB106_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB106_201
.LBB106_210:                            # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB106_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB106_213:                            # %if.end1469
	vmovsd	.LCPI106_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-106(%rbp), %ax
	movw	-108(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB106_215
.LBB106_214:                            # %if.else1473
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
.LBB106_215:                            # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB106_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB106_218:                            # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI106_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %ax
	movw	-94(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB106_220
.LBB106_219:                            # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
.LBB106_220:                            # %if.end1496
	movl	$0, -64(%rbp)
.LBB106_221:                            # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB106_221 Depth=1
	movl	$0, -72(%rbp)
.LBB106_223:                            # %for.cond1502
                                        #   Parent Loop BB106_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB106_223 Depth=2
	xorl	%eax, %eax
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB106_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB106_223
.LBB106_226:                            # %for.end1565
                                        #   in Loop: Header=BB106_221 Depth=1
	jmp	.LBB106_227
.LBB106_227:                            # %for.inc1566
                                        #   in Loop: Header=BB106_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB106_221
.LBB106_228:                            # %for.end1568
	jmp	.LBB106_229
.LBB106_229:                            # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-188(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$2036376732, -212(%rbp) # imm = 0x7960A49C
	jne	.LBB106_231
.LBB106_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_231:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_230
.Lfunc_end106:
	.size	BlockMotionSearch.81, .Lfunc_end106-BlockMotionSearch.81
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.82 # -- Begin function SetMotionVectorPredictor.82
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.82,@function
SetMotionVectorPredictor.82:            # @SetMotionVectorPredictor.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$750763800, -180(%rbp)  # imm = 0x2CBFBF18
	movq	%rdi, -216(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -156(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -160(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB107_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB107_2:                              # %if.end
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB107_19
# %bb.3:                                # %if.then2
	cmpl	$8, -156(%rbp)
	jge	.LBB107_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB107_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB107_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB107_8
.LBB107_7:                              # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB107_8:                              # %if.end10
	jmp	.LBB107_13
.LBB107_9:                              # %if.else11
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB107_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB107_12
.LBB107_11:                             # %if.else16
	movl	$0, -56(%rbp)
.LBB107_12:                             # %if.end18
	jmp	.LBB107_13
.LBB107_13:                             # %if.end19
	jmp	.LBB107_18
.LBB107_14:                             # %if.else20
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB107_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB107_17
.LBB107_16:                             # %if.else26
	movl	$0, -56(%rbp)
.LBB107_17:                             # %if.end28
	jmp	.LBB107_18
.LBB107_18:                             # %if.end29
	jmp	.LBB107_19
.LBB107_19:                             # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB107_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB107_21:                             # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB107_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB107_24
# %bb.23:                               # %cond.true
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_25
.LBB107_24:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_25
.LBB107_25:                             # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB107_27
# %bb.26:                               # %cond.true45
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_28
.LBB107_27:                             # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_28
.LBB107_28:                             # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB107_30
# %bb.29:                               # %cond.true60
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_31
.LBB107_30:                             # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_31
.LBB107_31:                             # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB107_72
.LBB107_32:                             # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB107_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_36
# %bb.35:                               # %cond.true87
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_37
.LBB107_36:                             # %cond.false97
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB107_37:                             # %cond.end108
	jmp	.LBB107_39
.LBB107_38:                             # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_39
.LBB107_39:                             # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB107_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_42
# %bb.41:                               # %cond.true122
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_43
.LBB107_42:                             # %cond.false132
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB107_43:                             # %cond.end143
	jmp	.LBB107_45
.LBB107_44:                             # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_45
.LBB107_45:                             # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB107_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_48
# %bb.47:                               # %cond.true157
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_49
.LBB107_48:                             # %cond.false167
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB107_49:                             # %cond.end178
	jmp	.LBB107_51
.LBB107_50:                             # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_51
.LBB107_51:                             # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB107_71
.LBB107_52:                             # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB107_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_55
# %bb.54:                               # %cond.true193
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB107_56
.LBB107_55:                             # %cond.false203
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB107_56:                             # %cond.end213
	jmp	.LBB107_58
.LBB107_57:                             # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_58
.LBB107_58:                             # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB107_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_61
# %bb.60:                               # %cond.true227
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB107_62
.LBB107_61:                             # %cond.false238
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB107_62:                             # %cond.end248
	jmp	.LBB107_64
.LBB107_63:                             # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_64
.LBB107_64:                             # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB107_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_67
# %bb.66:                               # %cond.true262
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB107_68
.LBB107_67:                             # %cond.false273
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB107_68:                             # %cond.end283
	jmp	.LBB107_70
.LBB107_69:                             # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB107_70
.LBB107_70:                             # %cond.end286
	movl	%eax, -80(%rbp)
.LBB107_71:                             # %if.end288
	jmp	.LBB107_72
.LBB107_72:                             # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB107_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB107_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB107_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB107_86
.LBB107_76:                             # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB107_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB107_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB107_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB107_85
.LBB107_80:                             # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB107_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB107_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB107_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB107_84:                             # %if.end327
	jmp	.LBB107_85
.LBB107_85:                             # %if.end328
	jmp	.LBB107_86
.LBB107_86:                             # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB107_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB107_96
# %bb.88:                               # %if.then335
	cmpl	$0, -156(%rbp)
	jne	.LBB107_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB107_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB107_91:                             # %if.end343
	jmp	.LBB107_95
.LBB107_92:                             # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB107_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB107_94:                             # %if.end349
	jmp	.LBB107_95
.LBB107_95:                             # %if.end350
	jmp	.LBB107_107
.LBB107_96:                             # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB107_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB107_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB107_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB107_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB107_101:                            # %if.end365
	jmp	.LBB107_105
.LBB107_102:                            # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB107_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB107_104:                            # %if.end371
	jmp	.LBB107_105
.LBB107_105:                            # %if.end372
	jmp	.LBB107_106
.LBB107_106:                            # %if.end373
	jmp	.LBB107_107
.LBB107_107:                            # %if.end374
	movl	$0, -12(%rbp)
.LBB107_108:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB107_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB107_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB107_121
.LBB107_111:                            # %if.then381
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB107_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_114
.LBB107_113:                            # %cond.false396
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_114
.LBB107_114:                            # %cond.end397
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB107_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_117
.LBB107_116:                            # %cond.false413
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_117
.LBB107_117:                            # %cond.end414
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB107_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_120
.LBB107_119:                            # %cond.false430
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_120
.LBB107_120:                            # %cond.end431
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB107_161
.LBB107_121:                            # %if.else433
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB107_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_126
.LBB107_125:                            # %cond.false462
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB107_126:                            # %cond.end474
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_128
.LBB107_127:                            # %cond.false476
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_128
.LBB107_128:                            # %cond.end477
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB107_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_132
.LBB107_131:                            # %cond.false500
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB107_132:                            # %cond.end513
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_134
.LBB107_133:                            # %cond.false515
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_134
.LBB107_134:                            # %cond.end516
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB107_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB107_138
.LBB107_137:                            # %cond.false539
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB107_138:                            # %cond.end552
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_140
.LBB107_139:                            # %cond.false554
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_140
.LBB107_140:                            # %cond.end555
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB107_160
.LBB107_141:                            # %if.else557
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB107_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB107_145
.LBB107_144:                            # %cond.false580
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB107_145:                            # %cond.end592
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_147
.LBB107_146:                            # %cond.false594
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_147
.LBB107_147:                            # %cond.end595
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB107_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB107_151
.LBB107_150:                            # %cond.false619
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB107_151:                            # %cond.end631
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_153
.LBB107_152:                            # %cond.false633
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_153
.LBB107_153:                            # %cond.end634
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB107_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB107_157
.LBB107_156:                            # %cond.false658
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB107_157:                            # %cond.end670
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_159
.LBB107_158:                            # %cond.false672
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_159
.LBB107_159:                            # %cond.end673
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB107_160:                            # %if.end675
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_161
.LBB107_161:                            # %if.end676
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB107_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB107_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB107_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB107_166
.LBB107_165:                            # %cond.false696
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB107_166:                            # %cond.end708
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_168
.LBB107_167:                            # %cond.false710
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_168
.LBB107_168:                            # %cond.end711
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB107_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB107_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB107_172
.LBB107_171:                            # %cond.false729
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB107_172:                            # %cond.end741
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_174
.LBB107_173:                            # %cond.false743
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_174
.LBB107_174:                            # %cond.end744
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB107_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB107_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB107_178
.LBB107_177:                            # %cond.false762
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB107_178:                            # %cond.end774
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_180
.LBB107_179:                            # %cond.false776
                                        #   in Loop: Header=BB107_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB107_180
.LBB107_180:                            # %cond.end777
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB107_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB107_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB107_184
.LBB107_183:                            # %cond.false795
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB107_184:                            # %cond.end807
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_186
.LBB107_185:                            # %cond.false809
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-176(%rbp), %eax
.LBB107_186:                            # %cond.end810
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB107_187:                            # %if.end812
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB107_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	.LJTI107_0(,%rax,8), %rax
	jmpq	*%rax
.LBB107_189:                            # %sw.bb
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB107_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB107_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB107_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB107_193:                            # %if.end824
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_213
.LBB107_194:                            # %if.else825
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB107_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB107_197
.LBB107_196:                            # %cond.false831
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-20(%rbp), %edx
.LBB107_197:                            # %cond.end832
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB107_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB107_203
.LBB107_199:                            # %cond.false837
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB107_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB107_202
.LBB107_201:                            # %cond.false841
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB107_202:                            # %cond.end842
                                        #   in Loop: Header=BB107_108 Depth=1
.LBB107_203:                            # %cond.end844
                                        #   in Loop: Header=BB107_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB107_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB107_206
.LBB107_205:                            # %cond.false849
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-20(%rbp), %edx
.LBB107_206:                            # %cond.end850
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB107_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB107_212
.LBB107_208:                            # %cond.false855
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB107_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB107_211
.LBB107_210:                            # %cond.false859
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB107_211:                            # %cond.end860
                                        #   in Loop: Header=BB107_108 Depth=1
.LBB107_212:                            # %cond.end862
                                        #   in Loop: Header=BB107_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB107_213:                            # %if.end865
                                        #   in Loop: Header=BB107_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB107_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB107_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB107_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB107_222
.LBB107_217:                            # %if.else877
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB107_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB107_108 Depth=1
	cmpl	$0, -164(%rbp)
	je	.LBB107_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-164(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB107_221
.LBB107_220:                            # %if.else886
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB107_221:                            # %if.end889
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_222
.LBB107_222:                            # %if.end890
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_223
.LBB107_223:                            # %if.end891
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_234
.LBB107_224:                            # %sw.bb892
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB107_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB107_226:                            # %if.end898
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_234
.LBB107_227:                            # %sw.bb899
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB107_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-164(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB107_229:                            # %if.end905
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_234
.LBB107_230:                            # %sw.bb906
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB107_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB107_232:                            # %if.end912
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_234
.LBB107_233:                            # %sw.default
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_234
.LBB107_234:                            # %sw.epilog
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_108
.LBB107_236:                            # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB107_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB107_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB107_240
.LBB107_239:                            # %cond.false925
	movl	-152(%rbp), %eax
.LBB107_240:                            # %cond.end927
	movl	%eax, pred_SAD_space
.LBB107_241:                            # %if.end929
	cmpl	$750763800, -180(%rbp)  # imm = 0x2CBFBF18
	jne	.LBB107_243
.LBB107_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_243:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_242
.Lfunc_end107:
	.size	SetMotionVectorPredictor.82, .Lfunc_end107-SetMotionVectorPredictor.82
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI107_0:
	.quad	.LBB107_189
	.quad	.LBB107_224
	.quad	.LBB107_227
	.quad	.LBB107_230
                                        # -- End function
	.text
	.globl	ClearFastFullIntegerSearch.83 # -- Begin function ClearFastFullIntegerSearch.83
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.83,@function
ClearFastFullIntegerSearch.83:          # @ClearFastFullIntegerSearch.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$794064804, -20(%rbp)   # imm = 0x2F5477A4
	movl	$0, -4(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_3 Depth 2
                                        #       Child Loop BB108_5 Depth 3
                                        #         Child Loop BB108_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB108_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	$0, -8(%rbp)
.LBB108_3:                              # %for.cond1
                                        #   Parent Loop BB108_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_5 Depth 3
                                        #         Child Loop BB108_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB108_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	$1, -12(%rbp)
.LBB108_5:                              # %for.cond4
                                        #   Parent Loop BB108_1 Depth=1
                                        #     Parent Loop BB108_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB108_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB108_5 Depth=3
	movl	$0, -16(%rbp)
.LBB108_7:                              # %for.cond7
                                        #   Parent Loop BB108_1 Depth=1
                                        #     Parent Loop BB108_3 Depth=2
                                        #       Parent Loop BB108_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB108_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB108_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB108_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_7
.LBB108_10:                             # %for.end
                                        #   in Loop: Header=BB108_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB108_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_5
.LBB108_12:                             # %for.end24
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_3
.LBB108_14:                             # %for.end31
                                        #   in Loop: Header=BB108_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_1
.LBB108_16:                             # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB108_17:                             # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB108_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB108_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB108_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_17
.LBB108_20:                             # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$794064804, -20(%rbp)   # imm = 0x2F5477A4
	jne	.LBB108_22
.LBB108_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_21
.Lfunc_end108:
	.size	ClearFastFullIntegerSearch.83, .Lfunc_end108-ClearFastFullIntegerSearch.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.84
.LCPI109_0:
	.quad	4611686018427387904     # double 2
.LCPI109_1:
	.quad	4607182418800017408     # double 1
.LCPI109_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI109_4:
	.quad	4620693217682128896     # double 8
.LCPI109_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI109_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.84
	.p2align	4, 0x90
	.type	BlockMotionSearch.84,@function
BlockMotionSearch.84:                   # @BlockMotionSearch.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1858912403, -212(%rbp) # imm = 0x6ECCC093
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -184(%rbp)
	movl	%ecx, -180(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-184(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-184(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB109_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB109_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	addl	$1, %edx
	jmp	.LBB109_4
.LBB109_3:                              # %cond.false
	xorl	%edx, %edx
	jmp	.LBB109_4
.LBB109_4:                              # %cond.end
	movl	%edx, -92(%rbp)
.LBB109_5:                              # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB109_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB109_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB109_6 Depth=1
	movl	$0, -64(%rbp)
.LBB109_8:                              # %for.cond24
                                        #   Parent Loop BB109_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB109_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB109_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB109_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB109_8
.LBB109_11:                             # %for.end
                                        #   in Loop: Header=BB109_6 Depth=1
	jmp	.LBB109_12
.LBB109_12:                             # %for.inc37
                                        #   in Loop: Header=BB109_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB109_6
.LBB109_13:                             # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB109_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB109_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB109_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB109_18
.LBB109_17:                             # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB109_18:                             # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB109_37
.LBB109_19:                             # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB109_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB109_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB109_23
.LBB109_22:                             # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB109_23:                             # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB109_36
.LBB109_24:                             # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB109_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB109_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB109_28
.LBB109_27:                             # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB109_28:                             # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB109_35
.LBB109_29:                             # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB109_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB109_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB109_33
.LBB109_32:                             # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB109_33:                             # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB109_34:                             # %if.end276
	jmp	.LBB109_35
.LBB109_35:                             # %if.end277
	jmp	.LBB109_36
.LBB109_36:                             # %if.end278
	jmp	.LBB109_37
.LBB109_37:                             # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB109_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB109_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB109_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB109_43
.LBB109_42:                             # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB109_43:                             # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB109_62
.LBB109_44:                             # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB109_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB109_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB109_48
.LBB109_47:                             # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB109_48:                             # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB109_61
.LBB109_49:                             # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB109_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB109_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB109_53
.LBB109_52:                             # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB109_53:                             # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB109_60
.LBB109_54:                             # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB109_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB109_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB109_58
.LBB109_57:                             # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB109_58:                             # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB109_59:                             # %if.end524
	jmp	.LBB109_60
.LBB109_60:                             # %if.end525
	jmp	.LBB109_61
.LBB109_61:                             # %if.end526
	jmp	.LBB109_62
.LBB109_62:                             # %if.end527
	jmp	.LBB109_63
.LBB109_63:                             # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB109_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB109_66
.LBB109_65:                             # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB109_66:                             # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB109_68:                             # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB109_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	cmpl	$1, %edx
	jle	.LBB109_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB109_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB109_73
.LBB109_72:                             # %cond.false626
	vmovsd	.LCPI109_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB109_73:                             # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB109_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB109_76
.LBB109_75:                             # %cond.false655
	vmovsd	.LCPI109_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB109_76:                             # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB109_77:                             # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB109_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB109_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB109_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB109_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB109_83
.LBB109_82:                             # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB109_83:                             # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB109_84:                             # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB109_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB109_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB109_92
.LBB109_88:                             # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB109_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB109_91
.LBB109_90:                             # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB109_91:                             # %cond.end787
	vmovss	.LCPI109_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB109_92:                             # %if.end835
	jmp	.LBB109_106
.LBB109_93:                             # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB109_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB109_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB109_97
.LBB109_96:                             # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB109_97:                             # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB109_98:                             # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB109_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB109_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB109_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB109_104
.LBB109_103:                            # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB109_104:                            # %cond.end940
	vmovss	.LCPI109_2(%rip), %xmm0 # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB109_105:                            # %if.end988
	jmp	.LBB109_106
.LBB109_106:                            # %if.end989
	jmp	.LBB109_107
.LBB109_107:                            # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB109_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB109_109:                            # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	-140(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB109_142
# %bb.110:                              # %if.then1000
	movswl	-96(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movswl	-94(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB109_113
# %bb.112:                              # %cond.true1013
	movl	-100(%rbp), %ecx
	jmp	.LBB109_114
.LBB109_113:                            # %cond.false1014
	movswl	-58(%rbp), %ecx
.LBB109_114:                            # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB109_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-100(%rbp), %ecx
	jmp	.LBB109_120
.LBB109_116:                            # %cond.false1022
	movl	-100(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_118
# %bb.117:                              # %cond.true1026
	movl	-100(%rbp), %ecx
	jmp	.LBB109_119
.LBB109_118:                            # %cond.false1027
	movswl	-58(%rbp), %ecx
.LBB109_119:                            # %cond.end1029
.LBB109_120:                            # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -58(%rbp)
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB109_122
# %bb.121:                              # %cond.true1038
	movl	-100(%rbp), %ecx
	jmp	.LBB109_123
.LBB109_122:                            # %cond.false1039
	movswl	-60(%rbp), %ecx
.LBB109_123:                            # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB109_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB109_129
.LBB109_125:                            # %cond.false1047
	movl	-100(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_127
# %bb.126:                              # %cond.true1051
	movl	-100(%rbp), %eax
	jmp	.LBB109_128
.LBB109_127:                            # %cond.false1052
	movswl	-60(%rbp), %eax
.LBB109_128:                            # %cond.end1054
.LBB109_129:                            # %cond.end1056
	movw	%ax, -60(%rbp)
.LBB109_130:                            # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB109_131:                            # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB109_131 Depth=1
	movl	$0, -72(%rbp)
.LBB109_133:                            # %for.cond1066
                                        #   Parent Loop BB109_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB109_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB109_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB109_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB109_137
.LBB109_136:                            # %if.else1091
                                        #   in Loop: Header=BB109_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB109_137:                            # %if.end1109
                                        #   in Loop: Header=BB109_133 Depth=2
	jmp	.LBB109_138
.LBB109_138:                            # %for.inc1110
                                        #   in Loop: Header=BB109_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB109_133
.LBB109_139:                            # %for.end1112
                                        #   in Loop: Header=BB109_131 Depth=1
	jmp	.LBB109_140
.LBB109_140:                            # %for.inc1113
                                        #   in Loop: Header=BB109_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB109_131
.LBB109_141:                            # %for.end1115
	jmp	.LBB109_143
.LBB109_142:                            # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB109_143:                            # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB109_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB109_146:                            # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB109_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB109_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB109_150
.LBB109_149:                            # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB109_150:                            # %if.end1133
	movl	$0, -64(%rbp)
.LBB109_151:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB109_151 Depth=1
	movl	$0, -72(%rbp)
.LBB109_153:                            # %for.cond1139
                                        #   Parent Loop BB109_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB109_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB109_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB109_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB109_157
.LBB109_156:                            # %if.else1183
                                        #   in Loop: Header=BB109_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB109_157:                            # %if.end1220
                                        #   in Loop: Header=BB109_153 Depth=2
	jmp	.LBB109_158
.LBB109_158:                            # %for.inc1221
                                        #   in Loop: Header=BB109_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB109_153
.LBB109_159:                            # %for.end1223
                                        #   in Loop: Header=BB109_151 Depth=1
	jmp	.LBB109_160
.LBB109_160:                            # %for.inc1224
                                        #   in Loop: Header=BB109_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB109_151
.LBB109_161:                            # %for.end1226
	jmp	.LBB109_166
.LBB109_162:                            # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB109_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB109_165:                            # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB109_166:                            # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB109_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB109_173
.LBB109_170:                            # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI109_3(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_4(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB109_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -58(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -60(%rbp)
.LBB109_172:                            # %if.end1273
	jmp	.LBB109_173
.LBB109_173:                            # %if.end1274
	jmp	.LBB109_174
.LBB109_174:                            # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB109_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -196(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -64(%rbp)
.LBB109_176:                            # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB109_176 Depth=1
	movl	$0, -72(%rbp)
.LBB109_178:                            # %for.cond1290
                                        #   Parent Loop BB109_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB109_178 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB109_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB109_178
.LBB109_181:                            # %for.end1337
                                        #   in Loop: Header=BB109_176 Depth=1
	jmp	.LBB109_182
.LBB109_182:                            # %for.inc1338
                                        #   in Loop: Header=BB109_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB109_176
.LBB109_183:                            # %for.end1340
	jmp	.LBB109_193
.LBB109_184:                            # %if.else1341
	movl	$0, -64(%rbp)
.LBB109_185:                            # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB109_185 Depth=1
	movl	$0, -72(%rbp)
.LBB109_187:                            # %for.cond1347
                                        #   Parent Loop BB109_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB109_187 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB109_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB109_187
.LBB109_190:                            # %for.end1380
                                        #   in Loop: Header=BB109_185 Depth=1
	jmp	.LBB109_191
.LBB109_191:                            # %for.inc1381
                                        #   in Loop: Header=BB109_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB109_185
.LBB109_192:                            # %for.end1383
	jmp	.LBB109_193
.LBB109_193:                            # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB109_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB109_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB109_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB109_200
.LBB109_199:                            # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB109_200:                            # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-132(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movl	$0, -64(%rbp)
.LBB109_201:                            # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB109_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB109_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB109_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB109_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB109_208
.LBB109_204:                            # %if.else1433
                                        #   in Loop: Header=BB109_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -148(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -146(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB109_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB109_201 Depth=1
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	jmp	.LBB109_207
.LBB109_206:                            # %if.else1441
                                        #   in Loop: Header=BB109_201 Depth=1
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
.LBB109_207:                            # %if.end1450
                                        #   in Loop: Header=BB109_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB109_208:                            # %if.end1452
                                        #   in Loop: Header=BB109_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-148(%rbp), %r11w
	movw	-146(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-136(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -136(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB109_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB109_201
.LBB109_210:                            # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB109_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB109_213:                            # %if.end1469
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB109_215
.LBB109_214:                            # %if.else1473
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
.LBB109_215:                            # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB109_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB109_218:                            # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %ax
	movw	-94(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB109_220
.LBB109_219:                            # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
.LBB109_220:                            # %if.end1496
	movl	$0, -64(%rbp)
.LBB109_221:                            # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB109_221 Depth=1
	movl	$0, -72(%rbp)
.LBB109_223:                            # %for.cond1502
                                        #   Parent Loop BB109_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB109_223 Depth=2
	xorl	%eax, %eax
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB109_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB109_223
.LBB109_226:                            # %for.end1565
                                        #   in Loop: Header=BB109_221 Depth=1
	jmp	.LBB109_227
.LBB109_227:                            # %for.inc1566
                                        #   in Loop: Header=BB109_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB109_221
.LBB109_228:                            # %for.end1568
	jmp	.LBB109_229
.LBB109_229:                            # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -192(%rbp)
	movl	-192(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-192(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$1858912403, -212(%rbp) # imm = 0x6ECCC093
	jne	.LBB109_231
.LBB109_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_231:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_230
.Lfunc_end109:
	.size	BlockMotionSearch.84, .Lfunc_end109-BlockMotionSearch.84
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.85 # -- Begin function Get_Direct_Motion_Vectors.85
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.85,@function
Get_Direct_Motion_Vectors.85:           # @Get_Direct_Motion_Vectors.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$1849739569, -232(%rbp) # imm = 0x6E40C931
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB110_6
# %bb.1:                                # %land.lhs.true
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB110_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB110_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB110_5
.LBB110_4:                              # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB110_5:                              # %if.end
	jmp	.LBB110_7
.LBB110_6:                              # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB110_7:                              # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB110_226
# %bb.8:                                # %if.then9
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB110_34
# %bb.9:                                # %if.then16
	cmpl	$0, -88(%rbp)
	je	.LBB110_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_12
.LBB110_11:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_12
.LBB110_12:                             # %cond.end
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB110_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_15
.LBB110_14:                             # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_15
.LBB110_15:                             # %cond.end38
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB110_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_18
.LBB110_17:                             # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_18
.LBB110_18:                             # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB110_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_21
.LBB110_20:                             # %cond.false69
	movswl	-50(%rbp), %eax
.LBB110_21:                             # %cond.end71
	movw	%ax, -24(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB110_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_24
.LBB110_23:                             # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_24
.LBB110_24:                             # %cond.end87
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB110_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_27
.LBB110_26:                             # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_27
.LBB110_27:                             # %cond.end103
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB110_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_30
.LBB110_29:                             # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_30
.LBB110_30:                             # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB110_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_33
.LBB110_32:                             # %cond.false134
	movswl	-52(%rbp), %eax
.LBB110_33:                             # %cond.end136
	movw	%ax, -28(%rbp)
	jmp	.LBB110_150
.LBB110_34:                             # %if.else139
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB110_92
# %bb.35:                               # %if.then142
	cmpl	$0, -88(%rbp)
	je	.LBB110_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_39
.LBB110_38:                             # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_40
.LBB110_39:                             # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB110_40:                             # %cond.end181
	jmp	.LBB110_42
.LBB110_41:                             # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_42
.LBB110_42:                             # %cond.end184
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB110_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_46
.LBB110_45:                             # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_47
.LBB110_46:                             # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB110_47:                             # %cond.end229
	jmp	.LBB110_49
.LBB110_48:                             # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_49
.LBB110_49:                             # %cond.end232
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB110_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_53
.LBB110_52:                             # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_54
.LBB110_53:                             # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB110_54:                             # %cond.end277
	jmp	.LBB110_56
.LBB110_55:                             # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_56
.LBB110_56:                             # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB110_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_60
.LBB110_59:                             # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_61
.LBB110_60:                             # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB110_61:                             # %cond.end325
	jmp	.LBB110_63
.LBB110_62:                             # %cond.false327
	movswl	-50(%rbp), %eax
.LBB110_63:                             # %cond.end329
	movw	%ax, -24(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB110_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_67
.LBB110_66:                             # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_68
.LBB110_67:                             # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB110_68:                             # %cond.end374
	jmp	.LBB110_70
.LBB110_69:                             # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_70
.LBB110_70:                             # %cond.end377
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB110_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_74
.LBB110_73:                             # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_75
.LBB110_74:                             # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB110_75:                             # %cond.end422
	jmp	.LBB110_77
.LBB110_76:                             # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_77
.LBB110_77:                             # %cond.end425
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB110_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_81
.LBB110_80:                             # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_82
.LBB110_81:                             # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB110_82:                             # %cond.end470
	jmp	.LBB110_84
.LBB110_83:                             # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_84
.LBB110_84:                             # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB110_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_88
.LBB110_87:                             # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB110_89
.LBB110_88:                             # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB110_89:                             # %cond.end518
	jmp	.LBB110_91
.LBB110_90:                             # %cond.false520
	movswl	-52(%rbp), %eax
.LBB110_91:                             # %cond.end522
	movw	%ax, -28(%rbp)
	jmp	.LBB110_149
.LBB110_92:                             # %if.else525
	cmpl	$0, -88(%rbp)
	je	.LBB110_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_96
.LBB110_95:                             # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB110_97
.LBB110_96:                             # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB110_97:                             # %cond.end567
	jmp	.LBB110_99
.LBB110_98:                             # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_99
.LBB110_99:                             # %cond.end570
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB110_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_103
.LBB110_102:                            # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB110_104
.LBB110_103:                            # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB110_104:                            # %cond.end615
	jmp	.LBB110_106
.LBB110_105:                            # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_106
.LBB110_106:                            # %cond.end618
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB110_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_110
.LBB110_109:                            # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB110_111
.LBB110_110:                            # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB110_111:                            # %cond.end663
	jmp	.LBB110_113
.LBB110_112:                            # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_113
.LBB110_113:                            # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB110_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_117
.LBB110_116:                            # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB110_118
.LBB110_117:                            # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB110_118:                            # %cond.end711
	jmp	.LBB110_120
.LBB110_119:                            # %cond.false713
	movswl	-50(%rbp), %eax
.LBB110_120:                            # %cond.end715
	movw	%ax, -24(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB110_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_124
.LBB110_123:                            # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB110_125
.LBB110_124:                            # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB110_125:                            # %cond.end760
	jmp	.LBB110_127
.LBB110_126:                            # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_127
.LBB110_127:                            # %cond.end763
	movw	%ax, -22(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB110_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_131
.LBB110_130:                            # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB110_132
.LBB110_131:                            # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB110_132:                            # %cond.end808
	jmp	.LBB110_134
.LBB110_133:                            # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_134
.LBB110_134:                            # %cond.end811
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB110_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_138
.LBB110_137:                            # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB110_139
.LBB110_138:                            # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB110_139:                            # %cond.end856
	jmp	.LBB110_141
.LBB110_140:                            # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_141
.LBB110_141:                            # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB110_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB110_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB110_145
.LBB110_144:                            # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB110_146
.LBB110_145:                            # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB110_146:                            # %cond.end904
	jmp	.LBB110_148
.LBB110_147:                            # %cond.false906
	movswl	-52(%rbp), %eax
.LBB110_148:                            # %cond.end908
	movw	%ax, -28(%rbp)
.LBB110_149:                            # %if.end911
	jmp	.LBB110_150
.LBB110_150:                            # %if.end912
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_156
# %bb.151:                              # %land.lhs.true916
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_156
# %bb.152:                              # %cond.true920
	movswl	-30(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_154
# %bb.153:                              # %cond.true925
	movswl	-30(%rbp), %eax
	jmp	.LBB110_155
.LBB110_154:                            # %cond.false927
	movswl	-32(%rbp), %eax
.LBB110_155:                            # %cond.end929
	jmp	.LBB110_160
.LBB110_156:                            # %cond.false931
	movswl	-30(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_158
# %bb.157:                              # %cond.true936
	movswl	-30(%rbp), %eax
	jmp	.LBB110_159
.LBB110_158:                            # %cond.false938
	movswl	-32(%rbp), %eax
.LBB110_159:                            # %cond.end940
.LBB110_160:                            # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_166
# %bb.161:                              # %land.lhs.true948
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB110_165
.LBB110_164:                            # %cond.false959
	movswl	-24(%rbp), %eax
.LBB110_165:                            # %cond.end961
	jmp	.LBB110_170
.LBB110_166:                            # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB110_169
.LBB110_168:                            # %cond.false970
	movswl	-24(%rbp), %eax
.LBB110_169:                            # %cond.end972
.LBB110_170:                            # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_176
# %bb.171:                              # %land.lhs.true980
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_176
# %bb.172:                              # %cond.true984
	movswl	-22(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_174
# %bb.173:                              # %cond.true989
	movswl	-22(%rbp), %eax
	jmp	.LBB110_175
.LBB110_174:                            # %cond.false991
	movswl	-26(%rbp), %eax
.LBB110_175:                            # %cond.end993
	jmp	.LBB110_180
.LBB110_176:                            # %cond.false995
	movswl	-22(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_178
# %bb.177:                              # %cond.true1000
	movswl	-22(%rbp), %eax
	jmp	.LBB110_179
.LBB110_178:                            # %cond.false1002
	movswl	-26(%rbp), %eax
.LBB110_179:                            # %cond.end1004
.LBB110_180:                            # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB110_185
.LBB110_184:                            # %cond.false1023
	movswl	-28(%rbp), %eax
.LBB110_185:                            # %cond.end1025
	jmp	.LBB110_190
.LBB110_186:                            # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB110_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB110_189
.LBB110_188:                            # %cond.false1034
	movswl	-28(%rbp), %eax
.LBB110_189:                            # %cond.end1036
.LBB110_190:                            # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_192
# %bb.191:                              # %if.then1044
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB110_192:                            # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_194
# %bb.193:                              # %if.then1051
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB110_194:                            # %if.end1055
	movl	$0, -8(%rbp)
.LBB110_195:                            # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_197 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB110_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB110_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB110_197:                            # %for.cond1061
                                        #   Parent Loop BB110_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB110_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB110_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB110_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB110_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB110_203
.LBB110_202:                            # %if.else1102
                                        #   in Loop: Header=BB110_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB110_203:                            # %if.end1128
                                        #   in Loop: Header=BB110_197 Depth=2
	jmp	.LBB110_205
.LBB110_204:                            # %if.else1129
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB110_205:                            # %if.end1151
                                        #   in Loop: Header=BB110_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB110_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB110_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB110_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB110_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB110_210
.LBB110_209:                            # %if.else1187
                                        #   in Loop: Header=BB110_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB110_210:                            # %if.end1213
                                        #   in Loop: Header=BB110_197 Depth=2
	jmp	.LBB110_212
.LBB110_211:                            # %if.else1214
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB110_212:                            # %if.end1236
                                        #   in Loop: Header=BB110_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB110_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB110_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB110_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB110_215:                            # %if.end1255
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB110_221
.LBB110_217:                            # %if.else1269
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB110_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB110_220
.LBB110_219:                            # %if.else1283
                                        #   in Loop: Header=BB110_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB110_220:                            # %if.end1288
                                        #   in Loop: Header=BB110_197 Depth=2
	jmp	.LBB110_221
.LBB110_221:                            # %if.end1289
                                        #   in Loop: Header=BB110_197 Depth=2
	jmp	.LBB110_222
.LBB110_222:                            # %for.inc
                                        #   in Loop: Header=BB110_197 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_197
.LBB110_223:                            # %for.end
                                        #   in Loop: Header=BB110_195 Depth=1
	jmp	.LBB110_224
.LBB110_224:                            # %for.inc1290
                                        #   in Loop: Header=BB110_195 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_195
.LBB110_225:                            # %for.end1292
	jmp	.LBB110_259
.LBB110_226:                            # %if.else1293
	movl	$0, -8(%rbp)
.LBB110_227:                            # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_229 Depth 2
                                        #       Child Loop BB110_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB110_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB110_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB110_229:                            # %for.cond1304
                                        #   Parent Loop BB110_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB110_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB110_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB110_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB110_229 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB110_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB110_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB110_234
.LBB110_233:                            # %cond.false1319
                                        #   in Loop: Header=BB110_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB110_234
.LBB110_234:                            # %cond.end1320
                                        #   in Loop: Header=BB110_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -40(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -228(%rbp)
	cmpl	$-1, -228(%rbp)
	jne	.LBB110_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB110_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB110_254
.LBB110_236:                            # %if.else1393
                                        #   in Loop: Header=BB110_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -168(%rbp)
.LBB110_237:                            # %for.cond1394
                                        #   Parent Loop BB110_227 Depth=1
                                        #     Parent Loop BB110_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB110_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB110_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB110_240
.LBB110_239:                            # %cond.false1402
                                        #   in Loop: Header=BB110_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB110_240:                            # %cond.end1406
                                        #   in Loop: Header=BB110_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB110_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB110_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-168(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-216(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB110_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB110_229 Depth=2
	movl	-168(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB110_247
.LBB110_243:                            # %if.else1425
                                        #   in Loop: Header=BB110_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB110_237 Depth=3
	jmp	.LBB110_245
.LBB110_245:                            # %for.inc1427
                                        #   in Loop: Header=BB110_237 Depth=3
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB110_237
.LBB110_246:                            # %for.end1429.loopexit
                                        #   in Loop: Header=BB110_229 Depth=2
	jmp	.LBB110_247
.LBB110_247:                            # %for.end1429
                                        #   in Loop: Header=BB110_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB110_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB110_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -164(%rbp)
	cmpl	$9999, -164(%rbp)       # imm = 0x270F
	jne	.LBB110_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB110_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB110_251
.LBB110_250:                            # %if.else1487
                                        #   in Loop: Header=BB110_229 Depth=2
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB110_251:                            # %if.end1571
                                        #   in Loop: Header=BB110_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB110_253
.LBB110_252:                            # %if.else1587
                                        #   in Loop: Header=BB110_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB110_253:                            # %if.end1602
                                        #   in Loop: Header=BB110_229 Depth=2
	jmp	.LBB110_254
.LBB110_254:                            # %if.end1603
                                        #   in Loop: Header=BB110_229 Depth=2
	jmp	.LBB110_255
.LBB110_255:                            # %for.inc1604
                                        #   in Loop: Header=BB110_229 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_229
.LBB110_256:                            # %for.end1606
                                        #   in Loop: Header=BB110_227 Depth=1
	jmp	.LBB110_257
.LBB110_257:                            # %for.inc1607
                                        #   in Loop: Header=BB110_227 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_227
.LBB110_258:                            # %for.end1609
	jmp	.LBB110_259
.LBB110_259:                            # %if.end1610
	cmpl	$1849739569, -232(%rbp) # imm = 0x6E40C931
	jne	.LBB110_261
.LBB110_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_261:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_260
.Lfunc_end110:
	.size	Get_Direct_Motion_Vectors.85, .Lfunc_end110-Get_Direct_Motion_Vectors.85
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.86              # -- Begin function SATD8X8.86
	.p2align	4, 0x90
	.type	SATD8X8.86,@function
SATD8X8.86:                             # @SATD8X8.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$874530619, -32(%rbp)   # imm = 0x3420473B
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB111_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB111_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB111_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB111_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_2
.LBB111_5:                              # %for.end
	movl	$0, -12(%rbp)
.LBB111_6:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB111_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB111_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB111_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_6
.LBB111_9:                              # %for.end495
	movl	$0, -16(%rbp)
.LBB111_10:                             # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB111_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB111_10 Depth=1
	movl	$0, -12(%rbp)
.LBB111_12:                             # %for.cond499
                                        #   Parent Loop BB111_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB111_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB111_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB111_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB111_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB111_16
.LBB111_15:                             # %cond.false
                                        #   in Loop: Header=BB111_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB111_16:                             # %cond.end
                                        #   in Loop: Header=BB111_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB111_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_12
.LBB111_18:                             # %for.end519
                                        #   in Loop: Header=BB111_10 Depth=1
	jmp	.LBB111_19
.LBB111_19:                             # %for.inc520
                                        #   in Loop: Header=BB111_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_10
.LBB111_20:                             # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB111_26
.LBB111_21:                             # %if.else
	movl	$0, -12(%rbp)
.LBB111_22:                             # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB111_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB111_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB111_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_22
.LBB111_25:                             # %for.end534
	jmp	.LBB111_26
.LBB111_26:                             # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$874530619, -32(%rbp)   # imm = 0x3420473B
	jne	.LBB111_28
.LBB111_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_27
.Lfunc_end111:
	.size	SATD8X8.86, .Lfunc_end111-SATD8X8.86
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.87
.LCPI112_0:
	.quad	4602678819172646912     # double 0.5
.LCPI112_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.87
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.87,@function
FullPelBlockMotionSearch.87:            # @FullPelBlockMotionSearch.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$272925105, -136(%rbp)  # imm = 0x104481B1
	movq	%rdi, -176(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -92(%rbp)
	movl	%r9d, -68(%rbp)
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB112_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB112_4
.LBB112_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB112_4
.LBB112_4:                              # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI112_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI112_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	%ecx, -28(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -144(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -124(%rbp)
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-68(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-68(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -116(%rbp)
	movl	-72(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movl	-92(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -148(%rbp)
	movl	-72(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movl	-92(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -88(%rbp)
	cmpl	$1, -68(%rbp)
	jne	.LBB112_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB112_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB112_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB112_8:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB112_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB112_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB112_14
.LBB112_11:                             # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB112_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB112_13:                             # %land.end63
.LBB112_14:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -132(%rbp)
	cmpl	$0, -132(%rbp)
	je	.LBB112_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB112_17
# %bb.16:                               # %if.then
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB112_18
.LBB112_17:                             # %if.else
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB112_18:                             # %if.end
	movl	-64(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB112_23
# %bb.19:                               # %land.lhs.true81
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-84(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_23
# %bb.20:                               # %land.lhs.true86
	movl	-88(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB112_23
# %bb.21:                               # %land.lhs.true89
	movl	-88(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-100(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB112_24
.LBB112_23:                             # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB112_24:                             # %if.end97
	movl	$0, -20(%rbp)
.LBB112_25:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_33 Depth 2
                                        #       Child Loop BB112_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jge	.LBB112_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	-64(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-88(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-96(%rbp), %eax
	movq	mvbits, %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	subl	-120(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	subl	-148(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB112_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jne	.LBB112_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jne	.LBB112_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	-96(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB112_30:                             # %if.end128
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB112_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB112_25 Depth=1
	jmp	.LBB112_46
.LBB112_32:                             # %if.end132
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	$0, -24(%rbp)
.LBB112_33:                             # %for.cond133
                                        #   Parent Loop BB112_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_35 Depth 3
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB112_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB112_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-84(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-60(%rbp), %edx
	addl	-24(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-144(%rbp), %r8d
	movl	-128(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-176(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -80(%rbp)
.LBB112_35:                             # %for.cond140
                                        #   Parent Loop BB112_25 Depth=1
                                        #     Parent Loop BB112_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-80(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB112_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB112_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB112_35 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB112_35
.LBB112_38:                             # %for.end
                                        #   in Loop: Header=BB112_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB112_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB112_25 Depth=1
	jmp	.LBB112_43
.LBB112_40:                             # %if.end178
                                        #   in Loop: Header=BB112_33 Depth=2
	jmp	.LBB112_41
.LBB112_41:                             # %for.inc179
                                        #   in Loop: Header=BB112_33 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_33
.LBB112_42:                             # %for.end181.loopexit
                                        #   in Loop: Header=BB112_25 Depth=1
	jmp	.LBB112_43
.LBB112_43:                             # %for.end181
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB112_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB112_45:                             # %if.end185
                                        #   in Loop: Header=BB112_25 Depth=1
	jmp	.LBB112_46
.LBB112_46:                             # %for.inc186
                                        #   in Loop: Header=BB112_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_25
.LBB112_47:                             # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB112_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB112_49:                             # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$272925105, -136(%rbp)  # imm = 0x104481B1
	jne	.LBB112_51
.LBB112_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_51:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_50
.Lfunc_end112:
	.size	FullPelBlockMotionSearch.87, .Lfunc_end112-FullPelBlockMotionSearch.87
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.88   # -- Begin function Get_Direct_Cost8x8.88
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.88,@function
Get_Direct_Cost8x8.88:                  # @Get_Direct_Cost8x8.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$85468457, -60(%rbp)    # imm = 0x5182529
	movl	%edi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -44(%rbp)
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-56(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_3 Depth 2
                                        #       Child Loop BB113_7 Depth 3
                                        #         Child Loop BB113_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB113_3:                              # %for.cond3
                                        #   Parent Loop BB113_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_7 Depth 3
                                        #         Child Loop BB113_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB113_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB113_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -52(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB113_30
.LBB113_6:                              # %if.end
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB113_7:                              # %for.cond34
                                        #   Parent Loop BB113_1 Depth=1
                                        #     Parent Loop BB113_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_9 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB113_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB113_7 Depth=3
	movl	$0, -12(%rbp)
.LBB113_9:                              # %for.cond38
                                        #   Parent Loop BB113_1 Depth=1
                                        #     Parent Loop BB113_3 Depth=2
                                        #       Parent Loop BB113_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB113_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB113_9 Depth=4
	movq	imgY_org, %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB113_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_9
.LBB113_12:                             # %for.end
                                        #   in Loop: Header=BB113_7 Depth=3
	jmp	.LBB113_13
.LBB113_13:                             # %for.inc67
                                        #   in Loop: Header=BB113_7 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_7
.LBB113_14:                             # %for.end69
                                        #   in Loop: Header=BB113_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_3
.LBB113_16:                             # %for.end73
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_17
.LBB113_17:                             # %for.inc74
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB113_1
.LBB113_18:                             # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB113_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB113_29
# %bb.20:                               # %if.then79
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
.LBB113_21:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_23 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB113_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	$0, -12(%rbp)
.LBB113_23:                             # %for.cond84
                                        #   Parent Loop BB113_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB113_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB113_23 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB113_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_23
.LBB113_26:                             # %for.end97
                                        #   in Loop: Header=BB113_21 Depth=1
	jmp	.LBB113_27
.LBB113_27:                             # %for.inc98
                                        #   in Loop: Header=BB113_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_21
.LBB113_28:                             # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB113_29:                             # %if.end105
	movl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB113_30:                             # %return
	movl	-52(%rbp), %ebx
	cmpl	$85468457, -60(%rbp)    # imm = 0x5182529
	jne	.LBB113_32
.LBB113_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_32:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_31
.Lfunc_end113:
	.size	Get_Direct_Cost8x8.88, .Lfunc_end113-Get_Direct_Cost8x8.88
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.89
.LCPI114_0:
	.quad	4602678819172646912     # double 0.5
.LCPI114_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.89
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.89,@function
FastFullPelBlockMotionSearch.89:        # @FastFullPelBlockMotionSearch.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI114_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI114_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$311258932, -56(%rbp)   # imm = 0x128D6F34
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -68(%rbp)
	movl	%r9d, -72(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -60(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-68(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-80(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB114_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB114_2:                              # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB114_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-52(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB114_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB114_5:                              # %if.end56
	jmp	.LBB114_6
.LBB114_6:                              # %if.end57
	movl	$0, -24(%rbp)
.LBB114_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB114_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB114_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB114_7 Depth=1
	movl	-48(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-52(%rbp), %eax
	movq	mvbits, %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-84(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB114_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB114_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB114_11:                             # %if.end85
                                        #   in Loop: Header=BB114_7 Depth=1
	jmp	.LBB114_12
.LBB114_12:                             # %if.end86
                                        #   in Loop: Header=BB114_7 Depth=1
	jmp	.LBB114_13
.LBB114_13:                             # %for.inc
                                        #   in Loop: Header=BB114_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB114_7
.LBB114_14:                             # %for.end
	movl	-48(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$311258932, -56(%rbp)   # imm = 0x128D6F34
	jne	.LBB114_16
.LBB114_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_15
.Lfunc_end114:
	.size	FastFullPelBlockMotionSearch.89, .Lfunc_end114-FastFullPelBlockMotionSearch.89
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.90 # -- Begin function SetMotionVectorPredictor.90
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.90,@function
SetMotionVectorPredictor.90:            # @SetMotionVectorPredictor.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$31382691, -180(%rbp)   # imm = 0x1DEDCA3
	movq	%rdi, -216(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -144(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -164(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -168(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB115_2:                              # %if.end
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -172(%rbp)
	jle	.LBB115_19
# %bb.3:                                # %if.then2
	cmpl	$8, -160(%rbp)
	jge	.LBB115_14
# %bb.4:                                # %if.then4
	cmpl	$8, -172(%rbp)
	jne	.LBB115_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB115_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB115_8
.LBB115_7:                              # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB115_8:                              # %if.end10
	jmp	.LBB115_13
.LBB115_9:                              # %if.else11
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB115_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB115_12
.LBB115_11:                             # %if.else16
	movl	$0, -56(%rbp)
.LBB115_12:                             # %if.end18
	jmp	.LBB115_13
.LBB115_13:                             # %if.end19
	jmp	.LBB115_18
.LBB115_14:                             # %if.else20
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB115_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB115_17
.LBB115_16:                             # %if.else26
	movl	$0, -56(%rbp)
.LBB115_17:                             # %if.end28
	jmp	.LBB115_18
.LBB115_18:                             # %if.end29
	jmp	.LBB115_19
.LBB115_19:                             # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB115_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB115_21:                             # %if.end34
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB115_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB115_24
# %bb.23:                               # %cond.true
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_25
.LBB115_24:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_25
.LBB115_25:                             # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_27
# %bb.26:                               # %cond.true45
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_28
.LBB115_27:                             # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_28
.LBB115_28:                             # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_30
# %bb.29:                               # %cond.true60
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_31
.LBB115_30:                             # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_31
.LBB115_31:                             # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB115_72
.LBB115_32:                             # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB115_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_36
# %bb.35:                               # %cond.true87
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_37
.LBB115_36:                             # %cond.false97
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB115_37:                             # %cond.end108
	jmp	.LBB115_39
.LBB115_38:                             # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_39
.LBB115_39:                             # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_42
# %bb.41:                               # %cond.true122
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_43
.LBB115_42:                             # %cond.false132
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB115_43:                             # %cond.end143
	jmp	.LBB115_45
.LBB115_44:                             # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_45
.LBB115_45:                             # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_48
# %bb.47:                               # %cond.true157
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_49
.LBB115_48:                             # %cond.false167
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB115_49:                             # %cond.end178
	jmp	.LBB115_51
.LBB115_50:                             # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_51
.LBB115_51:                             # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB115_71
.LBB115_52:                             # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB115_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_55
# %bb.54:                               # %cond.true193
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB115_56
.LBB115_55:                             # %cond.false203
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_56:                             # %cond.end213
	jmp	.LBB115_58
.LBB115_57:                             # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_58
.LBB115_58:                             # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_61
# %bb.60:                               # %cond.true227
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB115_62
.LBB115_61:                             # %cond.false238
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_62:                             # %cond.end248
	jmp	.LBB115_64
.LBB115_63:                             # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_64
.LBB115_64:                             # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_67
# %bb.66:                               # %cond.true262
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB115_68
.LBB115_67:                             # %cond.false273
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_68:                             # %cond.end283
	jmp	.LBB115_70
.LBB115_69:                             # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_70
.LBB115_70:                             # %cond.end286
	movl	%eax, -80(%rbp)
.LBB115_71:                             # %if.end288
	jmp	.LBB115_72
.LBB115_72:                             # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_76
# %bb.75:                               # %if.then300
	movl	$1, -32(%rbp)
	jmp	.LBB115_86
.LBB115_76:                             # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_80
# %bb.79:                               # %if.then313
	movl	$2, -32(%rbp)
	jmp	.LBB115_85
.LBB115_80:                             # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_84
# %bb.83:                               # %if.then326
	movl	$3, -32(%rbp)
.LBB115_84:                             # %if.end327
	jmp	.LBB115_85
.LBB115_85:                             # %if.end328
	jmp	.LBB115_86
.LBB115_86:                             # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB115_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB115_96
# %bb.88:                               # %if.then335
	cmpl	$0, -160(%rbp)
	jne	.LBB115_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_91
# %bb.90:                               # %if.then342
	movl	$1, -32(%rbp)
.LBB115_91:                             # %if.end343
	jmp	.LBB115_95
.LBB115_92:                             # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_94
# %bb.93:                               # %if.then348
	movl	$3, -32(%rbp)
.LBB115_94:                             # %if.end349
	jmp	.LBB115_95
.LBB115_95:                             # %if.end350
	jmp	.LBB115_107
.LBB115_96:                             # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB115_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB115_106
# %bb.98:                               # %if.then357
	cmpl	$0, -172(%rbp)
	jne	.LBB115_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_101
# %bb.100:                              # %if.then364
	movl	$2, -32(%rbp)
.LBB115_101:                            # %if.end365
	jmp	.LBB115_105
.LBB115_102:                            # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_104
# %bb.103:                              # %if.then370
	movl	$1, -32(%rbp)
.LBB115_104:                            # %if.end371
	jmp	.LBB115_105
.LBB115_105:                            # %if.end372
	jmp	.LBB115_106
.LBB115_106:                            # %if.end373
	jmp	.LBB115_107
.LBB115_107:                            # %if.end374
	movl	$0, -12(%rbp)
.LBB115_108:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB115_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB115_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB115_121
.LBB115_111:                            # %if.then381
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB115_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_114
.LBB115_113:                            # %cond.false396
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_114
.LBB115_114:                            # %cond.end397
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_117
.LBB115_116:                            # %cond.false413
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_117
.LBB115_117:                            # %cond.end414
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_120
.LBB115_119:                            # %cond.false430
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_120
.LBB115_120:                            # %cond.end431
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB115_161
.LBB115_121:                            # %if.else433
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB115_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_126
.LBB115_125:                            # %cond.false462
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB115_126:                            # %cond.end474
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_128
.LBB115_127:                            # %cond.false476
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_128
.LBB115_128:                            # %cond.end477
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_132
.LBB115_131:                            # %cond.false500
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB115_132:                            # %cond.end513
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_134
.LBB115_133:                            # %cond.false515
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_134
.LBB115_134:                            # %cond.end516
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_138
.LBB115_137:                            # %cond.false539
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB115_138:                            # %cond.end552
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_140
.LBB115_139:                            # %cond.false554
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_140
.LBB115_140:                            # %cond.end555
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB115_160
.LBB115_141:                            # %if.else557
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB115_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB115_145
.LBB115_144:                            # %cond.false580
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_145:                            # %cond.end592
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_147
.LBB115_146:                            # %cond.false594
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_147
.LBB115_147:                            # %cond.end595
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB115_151
.LBB115_150:                            # %cond.false619
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_151:                            # %cond.end631
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_153
.LBB115_152:                            # %cond.false633
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_153
.LBB115_153:                            # %cond.end634
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB115_157
.LBB115_156:                            # %cond.false658
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_157:                            # %cond.end670
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_159
.LBB115_158:                            # %cond.false672
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_159
.LBB115_159:                            # %cond.end673
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB115_160:                            # %if.end675
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_161
.LBB115_161:                            # %if.end676
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB115_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB115_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB115_166
.LBB115_165:                            # %cond.false696
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB115_166:                            # %cond.end708
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_168
.LBB115_167:                            # %cond.false710
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_168
.LBB115_168:                            # %cond.end711
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -140(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB115_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB115_172
.LBB115_171:                            # %cond.false729
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB115_172:                            # %cond.end741
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_174
.LBB115_173:                            # %cond.false743
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_174
.LBB115_174:                            # %cond.end744
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -156(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB115_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB115_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB115_178
.LBB115_177:                            # %cond.false762
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB115_178:                            # %cond.end774
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_180
.LBB115_179:                            # %cond.false776
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_180
.LBB115_180:                            # %cond.end777
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB115_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB115_184
.LBB115_183:                            # %cond.false795
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB115_184:                            # %cond.end807
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_186
.LBB115_185:                            # %cond.false809
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-176(%rbp), %eax
.LBB115_186:                            # %cond.end810
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -168(%rbp)
.LBB115_187:                            # %if.end812
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-32(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB115_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	.LJTI115_0(,%rax,8), %rax
	jmpq	*%rax
.LBB115_189:                            # %sw.bb
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB115_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB115_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_193:                            # %if.end824
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_213
.LBB115_194:                            # %if.else825
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB115_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB115_197
.LBB115_196:                            # %cond.false831
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %edx
.LBB115_197:                            # %cond.end832
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB115_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB115_203
.LBB115_199:                            # %cond.false837
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB115_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB115_202
.LBB115_201:                            # %cond.false841
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB115_202:                            # %cond.end842
                                        #   in Loop: Header=BB115_108 Depth=1
.LBB115_203:                            # %cond.end844
                                        #   in Loop: Header=BB115_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB115_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB115_206
.LBB115_205:                            # %cond.false849
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %edx
.LBB115_206:                            # %cond.end850
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB115_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB115_212
.LBB115_208:                            # %cond.false855
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB115_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB115_211
.LBB115_210:                            # %cond.false859
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB115_211:                            # %cond.end860
                                        #   in Loop: Header=BB115_108 Depth=1
.LBB115_212:                            # %cond.end862
                                        #   in Loop: Header=BB115_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
.LBB115_213:                            # %if.end865
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB115_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -140(%rbp)
	je	.LBB115_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB115_222
.LBB115_217:                            # %if.else877
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB115_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -156(%rbp)
	je	.LBB115_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB115_221
.LBB115_220:                            # %if.else886
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_221:                            # %if.end889
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_222
.LBB115_222:                            # %if.end890
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_223
.LBB115_223:                            # %if.end891
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_224:                            # %sw.bb892
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_226:                            # %if.end898
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_227:                            # %sw.bb899
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_229:                            # %if.end905
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_230:                            # %sw.bb906
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_232:                            # %if.end912
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_233:                            # %sw.default
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_234:                            # %sw.epilog
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_108
.LBB115_236:                            # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB115_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB115_240
.LBB115_239:                            # %cond.false925
	movl	-152(%rbp), %eax
.LBB115_240:                            # %cond.end927
	movl	%eax, pred_SAD_space
.LBB115_241:                            # %if.end929
	cmpl	$31382691, -180(%rbp)   # imm = 0x1DEDCA3
	jne	.LBB115_243
.LBB115_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_243:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_242
.Lfunc_end115:
	.size	SetMotionVectorPredictor.90, .Lfunc_end115-SetMotionVectorPredictor.90
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI115_0:
	.quad	.LBB115_189
	.quad	.LBB115_224
	.quad	.LBB115_227
	.quad	.LBB115_230
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.91
.LCPI116_0:
	.quad	4602678819172646912     # double 0.5
.LCPI116_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.91
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.91,@function
FullPelBlockMotionBiPred.91:            # @FullPelBlockMotionBiPred.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$401949389, -172(%rbp)  # imm = 0x17F542CD
	movq	%rdi, -216(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -124(%rbp)
	movl	%r8d, -112(%rbp)
	movl	%r9d, -140(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB116_4
.LBB116_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB116_4
.LBB116_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -200(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB116_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB116_7
.LBB116_6:                              # %cond.false11
	movl	-40(%rbp), %eax
.LBB116_7:                              # %cond.end12
	vmovsd	.LCPI116_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI116_1(%rip), %xmm1 # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -108(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -180(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	movslq	-140(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-140(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -144(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-124(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-112(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-124(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movl	-112(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -42(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB116_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB116_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB116_11
.LBB116_10:                             # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB116_11:                             # %cond.end87
	jmp	.LBB116_13
.LBB116_12:                             # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB116_13:                             # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB116_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB116_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB116_17
.LBB116_16:                             # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB116_17:                             # %cond.end114
	jmp	.LBB116_19
.LBB116_18:                             # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB116_19:                             # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB116_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB116_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB116_23
.LBB116_22:                             # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB116_23:                             # %cond.end138
	jmp	.LBB116_25
.LBB116_24:                             # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB116_25
.LBB116_25:                             # %cond.end141
	movw	%ax, -134(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB116_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB116_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB116_29
.LBB116_28:                             # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB116_29:                             # %cond.end161
	jmp	.LBB116_31
.LBB116_30:                             # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB116_31
.LBB116_31:                             # %cond.end164
	movw	%ax, -136(%rbp)
	movswl	-136(%rbp), %eax
	movswl	-134(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB116_36
# %bb.32:                               # %land.lhs.true176
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_36
# %bb.33:                               # %land.lhs.true182
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB116_36
# %bb.34:                               # %land.lhs.true186
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB116_37
.LBB116_36:                             # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB116_37:                             # %if.end
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB116_42
# %bb.38:                               # %land.lhs.true196
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_42
# %bb.39:                               # %land.lhs.true204
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB116_42
# %bb.40:                               # %land.lhs.true208
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB116_43
.LBB116_42:                             # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB116_43:                             # %if.end218
	movl	$0, -100(%rbp)
.LBB116_44:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_49 Depth 2
                                        #       Child Loop BB116_51 Depth 3
                                        #     Child Loop BB116_85 Depth 2
                                        #       Child Loop BB116_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB116_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB116_44 Depth=1
	movswl	-96(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-94(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-44(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-46(%rbp), %esi
	shll	$2, %esi
	subl	-192(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-176(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-184(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB116_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_99
.LBB116_47:                             # %if.end257
                                        #   in Loop: Header=BB116_44 Depth=1
	cmpw	$0, -42(%rbp)
	je	.LBB116_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB116_44 Depth=1
	movl	$0, -36(%rbp)
.LBB116_49:                             # %for.cond260
                                        #   Parent Loop BB116_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB116_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB116_49 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-44(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-216(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB116_51:                             # %for.cond271
                                        #   Parent Loop BB116_44 Depth=1
                                        #     Parent Loop BB116_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB116_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB116_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB116_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB116_58
.LBB116_54:                             # %cond.false296
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB116_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB116_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB116_57
.LBB116_56:                             # %cond.false310
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB116_57:                             # %cond.end320
                                        #   in Loop: Header=BB116_51 Depth=3
.LBB116_58:                             # %cond.end322
                                        #   in Loop: Header=BB116_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB116_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB116_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB116_64
.LBB116_60:                             # %cond.false354
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB116_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB116_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB116_63
.LBB116_62:                             # %cond.false369
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB116_63:                             # %cond.end379
                                        #   in Loop: Header=BB116_51 Depth=3
.LBB116_64:                             # %cond.end381
                                        #   in Loop: Header=BB116_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB116_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB116_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB116_70
.LBB116_66:                             # %cond.false413
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB116_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB116_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB116_69
.LBB116_68:                             # %cond.false428
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB116_69:                             # %cond.end438
                                        #   in Loop: Header=BB116_51 Depth=3
.LBB116_70:                             # %cond.end440
                                        #   in Loop: Header=BB116_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB116_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB116_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB116_76
.LBB116_72:                             # %cond.false472
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB116_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB116_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB116_75
.LBB116_74:                             # %cond.false487
                                        #   in Loop: Header=BB116_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB116_75:                             # %cond.end497
                                        #   in Loop: Header=BB116_51 Depth=3
.LBB116_76:                             # %cond.end499
                                        #   in Loop: Header=BB116_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB116_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB116_51
.LBB116_78:                             # %for.end
                                        #   in Loop: Header=BB116_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB116_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_83
.LBB116_80:                             # %if.end512
                                        #   in Loop: Header=BB116_49 Depth=2
	jmp	.LBB116_81
.LBB116_81:                             # %for.inc513
                                        #   in Loop: Header=BB116_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB116_49
.LBB116_82:                             # %for.end515.loopexit
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_83
.LBB116_83:                             # %for.end515
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_96
.LBB116_84:                             # %if.else516
                                        #   in Loop: Header=BB116_44 Depth=1
	movl	$0, -36(%rbp)
.LBB116_85:                             # %for.cond517
                                        #   Parent Loop BB116_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB116_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB116_85 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-44(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-216(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB116_87:                             # %for.cond529
                                        #   Parent Loop BB116_44 Depth=1
                                        #     Parent Loop BB116_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB116_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB116_87 Depth=3
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB116_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB116_87
.LBB116_90:                             # %for.end583
                                        #   in Loop: Header=BB116_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB116_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_95
.LBB116_92:                             # %if.end587
                                        #   in Loop: Header=BB116_85 Depth=2
	jmp	.LBB116_93
.LBB116_93:                             # %for.inc588
                                        #   in Loop: Header=BB116_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB116_85
.LBB116_94:                             # %for.end590.loopexit
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_95
.LBB116_95:                             # %for.end590
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_96
.LBB116_96:                             # %if.end591
                                        #   in Loop: Header=BB116_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB116_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB116_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB116_98:                             # %if.end595
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_99
.LBB116_99:                             # %for.inc596
                                        #   in Loop: Header=BB116_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB116_44
.LBB116_100:                            # %for.end598
	cmpl	$0, -108(%rbp)
	je	.LBB116_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-108(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-108(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB116_102:                            # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$401949389, -172(%rbp)  # imm = 0x17F542CD
	jne	.LBB116_104
.LBB116_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_104:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_103
.Lfunc_end116:
	.size	FullPelBlockMotionBiPred.91, .Lfunc_end116-FullPelBlockMotionBiPred.91
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.92
.LCPI117_0:
	.quad	4602678819172646912     # double 0.5
.LCPI117_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.92
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.92,@function
FullPelBlockMotionBiPred.92:            # @FullPelBlockMotionBiPred.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$1049688281, -184(%rbp) # imm = 0x3E90F8D9
	movq	%rdi, -208(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -112(%rbp)
	movl	%r8d, -116(%rbp)
	movl	%r9d, -148(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB117_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB117_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB117_4
.LBB117_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB117_4
.LBB117_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB117_6
# %bb.5:                                # %cond.true9
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB117_7
.LBB117_6:                              # %cond.false11
	movl	-36(%rbp), %eax
.LBB117_7:                              # %cond.end12
	vmovsd	.LCPI117_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_1(%rip), %xmm1 # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -200(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -124(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -108(%rbp)
	movl	$0, -120(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -172(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -144(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-112(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-116(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-112(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movl	-116(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -44(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB117_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB117_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB117_11
.LBB117_10:                             # %cond.false79
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB117_11:                             # %cond.end87
	jmp	.LBB117_13
.LBB117_12:                             # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB117_13:                             # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB117_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB117_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB117_17
.LBB117_16:                             # %cond.false107
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB117_17:                             # %cond.end114
	jmp	.LBB117_19
.LBB117_18:                             # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB117_19:                             # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB117_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB117_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB117_23
.LBB117_22:                             # %cond.false132
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB117_23:                             # %cond.end138
	jmp	.LBB117_25
.LBB117_24:                             # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB117_25
.LBB117_25:                             # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB117_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB117_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB117_29
.LBB117_28:                             # %cond.false156
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB117_29:                             # %cond.end161
	jmp	.LBB117_31
.LBB117_30:                             # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB117_31
.LBB117_31:                             # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB117_36
# %bb.32:                               # %land.lhs.true176
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_36
# %bb.33:                               # %land.lhs.true182
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB117_36
# %bb.34:                               # %land.lhs.true186
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB117_37
.LBB117_36:                             # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB117_37:                             # %if.end
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB117_42
# %bb.38:                               # %land.lhs.true196
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_42
# %bb.39:                               # %land.lhs.true204
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB117_42
# %bb.40:                               # %land.lhs.true208
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB117_43
.LBB117_42:                             # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB117_43:                             # %if.end218
	movl	$0, -100(%rbp)
.LBB117_44:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_49 Depth 2
                                        #       Child Loop BB117_51 Depth 3
                                        #     Child Loop BB117_85 Depth 2
                                        #       Child Loop BB117_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB117_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB117_44 Depth=1
	movswl	-96(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-94(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-42(%rbp), %edx
	shll	$2, %edx
	subl	-176(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-46(%rbp), %esi
	shll	$2, %esi
	subl	-180(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-192(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB117_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB117_44 Depth=1
	jmp	.LBB117_99
.LBB117_47:                             # %if.end257
                                        #   in Loop: Header=BB117_44 Depth=1
	cmpw	$0, -44(%rbp)
	je	.LBB117_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB117_44 Depth=1
	movl	$0, -40(%rbp)
.LBB117_49:                             # %for.cond260
                                        #   Parent Loop BB117_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_51 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB117_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB117_49 Depth=2
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-200(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -92(%rbp)
.LBB117_51:                             # %for.cond271
                                        #   Parent Loop BB117_44 Depth=1
                                        #     Parent Loop BB117_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB117_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB117_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB117_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_58
.LBB117_54:                             # %cond.false296
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB117_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB117_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB117_57
.LBB117_56:                             # %cond.false310
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB117_57:                             # %cond.end320
                                        #   in Loop: Header=BB117_51 Depth=3
.LBB117_58:                             # %cond.end322
                                        #   in Loop: Header=BB117_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB117_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB117_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_64
.LBB117_60:                             # %cond.false354
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB117_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB117_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB117_63
.LBB117_62:                             # %cond.false369
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB117_63:                             # %cond.end379
                                        #   in Loop: Header=BB117_51 Depth=3
.LBB117_64:                             # %cond.end381
                                        #   in Loop: Header=BB117_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB117_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB117_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_70
.LBB117_66:                             # %cond.false413
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB117_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB117_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB117_69
.LBB117_68:                             # %cond.false428
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB117_69:                             # %cond.end438
                                        #   in Loop: Header=BB117_51 Depth=3
.LBB117_70:                             # %cond.end440
                                        #   in Loop: Header=BB117_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB117_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB117_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_76
.LBB117_72:                             # %cond.false472
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB117_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB117_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB117_75
.LBB117_74:                             # %cond.false487
                                        #   in Loop: Header=BB117_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB117_75:                             # %cond.end497
                                        #   in Loop: Header=BB117_51 Depth=3
.LBB117_76:                             # %cond.end499
                                        #   in Loop: Header=BB117_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB117_51 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB117_51
.LBB117_78:                             # %for.end
                                        #   in Loop: Header=BB117_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB117_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB117_44 Depth=1
	jmp	.LBB117_83
.LBB117_80:                             # %if.end512
                                        #   in Loop: Header=BB117_49 Depth=2
	jmp	.LBB117_81
.LBB117_81:                             # %for.inc513
                                        #   in Loop: Header=BB117_49 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB117_49
.LBB117_82:                             # %for.end515.loopexit
                                        #   in Loop: Header=BB117_44 Depth=1
	jmp	.LBB117_83
.LBB117_83:                             # %for.end515
                                        #   in Loop: Header=BB117_44 Depth=1
	jmp	.LBB117_96
.LBB117_84:                             # %if.else516
                                        #   in Loop: Header=BB117_44 Depth=1
	movl	$0, -40(%rbp)
.LBB117_85:                             # %for.cond517
                                        #   Parent Loop BB117_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_87 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB117_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB117_85 Depth=2
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-200(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -92(%rbp)
.LBB117_87:                             # %for.cond529
                                        #   Parent Loop BB117_44 Depth=1
                                        #     Parent Loop BB117_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB117_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB117_87 Depth=3
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB117_87 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB117_87
.LBB117_90:                             # %for.end583
                                        #   in Loop: Header=BB117_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB117_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB117_44 Depth=1
	jmp	.LBB117_95
.LBB117_92:                             # %if.end587
                                        #   in Loop: Header=BB117_85 Depth=2
	jmp	.LBB117_93
.LBB117_93:                             # %for.inc588
                                        #   in Loop: Header=BB117_85 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB117_85
.LBB117_94:                             # %for.end590.loopexit
                                        #   in Loop: Header=BB117_44 Depth=1
	jmp	.LBB117_95
.LBB117_95:                             # %for.end590
                                        #   in Loop: Header=BB117_44 Depth=1
	jmp	.LBB117_96
.LBB117_96:                             # %if.end591
                                        #   in Loop: Header=BB117_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB117_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB117_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB117_98:                             # %if.end595
                                        #   in Loop: Header=BB117_44 Depth=1
	jmp	.LBB117_99
.LBB117_99:                             # %for.inc596
                                        #   in Loop: Header=BB117_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB117_44
.LBB117_100:                            # %for.end598
	cmpl	$0, -120(%rbp)
	je	.LBB117_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB117_102:                            # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$1049688281, -184(%rbp) # imm = 0x3E90F8D9
	jne	.LBB117_104
.LBB117_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_104:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_103
.Lfunc_end117:
	.size	FullPelBlockMotionBiPred.92, .Lfunc_end117-FullPelBlockMotionBiPred.92
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.93   # -- Begin function Get_Direct_Cost8x8.93
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.93,@function
Get_Direct_Cost8x8.93:                  # @Get_Direct_Cost8x8.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1703052765, -60(%rbp)  # imm = 0x658285DD
	movl	%edi, -52(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_3 Depth 2
                                        #       Child Loop BB118_7 Depth 3
                                        #         Child Loop BB118_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB118_3:                              # %for.cond3
                                        #   Parent Loop BB118_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_7 Depth 3
                                        #         Child Loop BB118_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB118_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -56(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB118_30
.LBB118_6:                              # %if.end
                                        #   in Loop: Header=BB118_3 Depth=2
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB118_7:                              # %for.cond34
                                        #   Parent Loop BB118_1 Depth=1
                                        #     Parent Loop BB118_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB118_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB118_7 Depth=3
	movl	$0, -16(%rbp)
.LBB118_9:                              # %for.cond38
                                        #   Parent Loop BB118_1 Depth=1
                                        #     Parent Loop BB118_3 Depth=2
                                        #       Parent Loop BB118_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB118_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB118_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB118_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_9
.LBB118_12:                             # %for.end
                                        #   in Loop: Header=BB118_7 Depth=3
	jmp	.LBB118_13
.LBB118_13:                             # %for.inc67
                                        #   in Loop: Header=BB118_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_7
.LBB118_14:                             # %for.end69
                                        #   in Loop: Header=BB118_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB118_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB118_3
.LBB118_16:                             # %for.end73
                                        #   in Loop: Header=BB118_1 Depth=1
	jmp	.LBB118_17
.LBB118_17:                             # %for.inc74
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_1
.LBB118_18:                             # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB118_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB118_29
# %bb.20:                               # %if.then79
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB118_21:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB118_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB118_21 Depth=1
	movl	$0, -16(%rbp)
.LBB118_23:                             # %for.cond84
                                        #   Parent Loop BB118_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB118_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB118_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB118_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_23
.LBB118_26:                             # %for.end97
                                        #   in Loop: Header=BB118_21 Depth=1
	jmp	.LBB118_27
.LBB118_27:                             # %for.inc98
                                        #   in Loop: Header=BB118_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_21
.LBB118_28:                             # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB118_29:                             # %if.end105
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB118_30:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$1703052765, -60(%rbp)  # imm = 0x658285DD
	jne	.LBB118_32
.LBB118_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_32:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_31
.Lfunc_end118:
	.size	Get_Direct_Cost8x8.93, .Lfunc_end118-Get_Direct_Cost8x8.93
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.94 # -- Begin function Get_Direct_Motion_Vectors.94
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.94,@function
Get_Direct_Motion_Vectors.94:           # @Get_Direct_Motion_Vectors.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$1441272796, -232(%rbp) # imm = 0x55E813DC
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB119_6
# %bb.1:                                # %land.lhs.true
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB119_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB119_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB119_5
.LBB119_4:                              # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB119_5:                              # %if.end
	jmp	.LBB119_7
.LBB119_6:                              # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB119_7:                              # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB119_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB119_34
# %bb.9:                                # %if.then16
	cmpl	$0, -160(%rbp)
	je	.LBB119_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_12
.LBB119_11:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_12
.LBB119_12:                             # %cond.end
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_15
.LBB119_14:                             # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_15
.LBB119_15:                             # %cond.end38
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_18
.LBB119_17:                             # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_18
.LBB119_18:                             # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_21
.LBB119_20:                             # %cond.false69
	movswl	-50(%rbp), %eax
.LBB119_21:                             # %cond.end71
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_24
.LBB119_23:                             # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_24
.LBB119_24:                             # %cond.end87
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_27
.LBB119_26:                             # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_27
.LBB119_27:                             # %cond.end103
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_30
.LBB119_29:                             # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_30
.LBB119_30:                             # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_33
.LBB119_32:                             # %cond.false134
	movswl	-52(%rbp), %eax
.LBB119_33:                             # %cond.end136
	movw	%ax, -22(%rbp)
	jmp	.LBB119_150
.LBB119_34:                             # %if.else139
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB119_92
# %bb.35:                               # %if.then142
	cmpl	$0, -160(%rbp)
	je	.LBB119_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_39
.LBB119_38:                             # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_40
.LBB119_39:                             # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_40:                             # %cond.end181
	jmp	.LBB119_42
.LBB119_41:                             # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_42
.LBB119_42:                             # %cond.end184
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_46
.LBB119_45:                             # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_47
.LBB119_46:                             # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_47:                             # %cond.end229
	jmp	.LBB119_49
.LBB119_48:                             # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_49
.LBB119_49:                             # %cond.end232
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_53
.LBB119_52:                             # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_54
.LBB119_53:                             # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_54:                             # %cond.end277
	jmp	.LBB119_56
.LBB119_55:                             # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_56
.LBB119_56:                             # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_60
.LBB119_59:                             # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_61
.LBB119_60:                             # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_61:                             # %cond.end325
	jmp	.LBB119_63
.LBB119_62:                             # %cond.false327
	movswl	-50(%rbp), %eax
.LBB119_63:                             # %cond.end329
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_67
.LBB119_66:                             # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_68
.LBB119_67:                             # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_68:                             # %cond.end374
	jmp	.LBB119_70
.LBB119_69:                             # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_70
.LBB119_70:                             # %cond.end377
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_74
.LBB119_73:                             # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_75
.LBB119_74:                             # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_75:                             # %cond.end422
	jmp	.LBB119_77
.LBB119_76:                             # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_77
.LBB119_77:                             # %cond.end425
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_81
.LBB119_80:                             # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_82
.LBB119_81:                             # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_82:                             # %cond.end470
	jmp	.LBB119_84
.LBB119_83:                             # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_84
.LBB119_84:                             # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_88
.LBB119_87:                             # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_89
.LBB119_88:                             # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_89:                             # %cond.end518
	jmp	.LBB119_91
.LBB119_90:                             # %cond.false520
	movswl	-52(%rbp), %eax
.LBB119_91:                             # %cond.end522
	movw	%ax, -22(%rbp)
	jmp	.LBB119_149
.LBB119_92:                             # %if.else525
	cmpl	$0, -160(%rbp)
	je	.LBB119_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_96
.LBB119_95:                             # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_97
.LBB119_96:                             # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_97:                             # %cond.end567
	jmp	.LBB119_99
.LBB119_98:                             # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_99
.LBB119_99:                             # %cond.end570
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_103
.LBB119_102:                            # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_104
.LBB119_103:                            # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_104:                            # %cond.end615
	jmp	.LBB119_106
.LBB119_105:                            # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_106
.LBB119_106:                            # %cond.end618
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_110
.LBB119_109:                            # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_111
.LBB119_110:                            # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_111:                            # %cond.end663
	jmp	.LBB119_113
.LBB119_112:                            # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_113
.LBB119_113:                            # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_117
.LBB119_116:                            # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_118
.LBB119_117:                            # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_118:                            # %cond.end711
	jmp	.LBB119_120
.LBB119_119:                            # %cond.false713
	movswl	-50(%rbp), %eax
.LBB119_120:                            # %cond.end715
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_124
.LBB119_123:                            # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_125
.LBB119_124:                            # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_125:                            # %cond.end760
	jmp	.LBB119_127
.LBB119_126:                            # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_127
.LBB119_127:                            # %cond.end763
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_131
.LBB119_130:                            # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_132
.LBB119_131:                            # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_132:                            # %cond.end808
	jmp	.LBB119_134
.LBB119_133:                            # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_134
.LBB119_134:                            # %cond.end811
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_138
.LBB119_137:                            # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_139
.LBB119_138:                            # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_139:                            # %cond.end856
	jmp	.LBB119_141
.LBB119_140:                            # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_141
.LBB119_141:                            # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_145
.LBB119_144:                            # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_146
.LBB119_145:                            # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_146:                            # %cond.end904
	jmp	.LBB119_148
.LBB119_147:                            # %cond.false906
	movswl	-52(%rbp), %eax
.LBB119_148:                            # %cond.end908
	movw	%ax, -22(%rbp)
.LBB119_149:                            # %if.end911
	jmp	.LBB119_150
.LBB119_150:                            # %if.end912
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_156
# %bb.151:                              # %land.lhs.true916
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_156
# %bb.152:                              # %cond.true920
	movswl	-28(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_154
# %bb.153:                              # %cond.true925
	movswl	-28(%rbp), %eax
	jmp	.LBB119_155
.LBB119_154:                            # %cond.false927
	movswl	-32(%rbp), %eax
.LBB119_155:                            # %cond.end929
	jmp	.LBB119_160
.LBB119_156:                            # %cond.false931
	movswl	-28(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_158
# %bb.157:                              # %cond.true936
	movswl	-28(%rbp), %eax
	jmp	.LBB119_159
.LBB119_158:                            # %cond.false938
	movswl	-32(%rbp), %eax
.LBB119_159:                            # %cond.end940
.LBB119_160:                            # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_166
# %bb.161:                              # %land.lhs.true948
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB119_165
.LBB119_164:                            # %cond.false959
	movswl	-24(%rbp), %eax
.LBB119_165:                            # %cond.end961
	jmp	.LBB119_170
.LBB119_166:                            # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB119_169
.LBB119_168:                            # %cond.false970
	movswl	-24(%rbp), %eax
.LBB119_169:                            # %cond.end972
.LBB119_170:                            # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_176
# %bb.171:                              # %land.lhs.true980
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_176
# %bb.172:                              # %cond.true984
	movswl	-26(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_174
# %bb.173:                              # %cond.true989
	movswl	-26(%rbp), %eax
	jmp	.LBB119_175
.LBB119_174:                            # %cond.false991
	movswl	-30(%rbp), %eax
.LBB119_175:                            # %cond.end993
	jmp	.LBB119_180
.LBB119_176:                            # %cond.false995
	movswl	-26(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_178
# %bb.177:                              # %cond.true1000
	movswl	-26(%rbp), %eax
	jmp	.LBB119_179
.LBB119_178:                            # %cond.false1002
	movswl	-30(%rbp), %eax
.LBB119_179:                            # %cond.end1004
.LBB119_180:                            # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB119_185
.LBB119_184:                            # %cond.false1023
	movswl	-22(%rbp), %eax
.LBB119_185:                            # %cond.end1025
	jmp	.LBB119_190
.LBB119_186:                            # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB119_189
.LBB119_188:                            # %cond.false1034
	movswl	-22(%rbp), %eax
.LBB119_189:                            # %cond.end1036
.LBB119_190:                            # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB119_192:                            # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB119_194:                            # %if.end1055
	movl	$0, -4(%rbp)
.LBB119_195:                            # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_197 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB119_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB119_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB119_197:                            # %for.cond1061
                                        #   Parent Loop BB119_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB119_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB119_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB119_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB119_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB119_203
.LBB119_202:                            # %if.else1102
                                        #   in Loop: Header=BB119_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB119_203:                            # %if.end1128
                                        #   in Loop: Header=BB119_197 Depth=2
	jmp	.LBB119_205
.LBB119_204:                            # %if.else1129
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB119_205:                            # %if.end1151
                                        #   in Loop: Header=BB119_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB119_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB119_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB119_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB119_210
.LBB119_209:                            # %if.else1187
                                        #   in Loop: Header=BB119_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB119_210:                            # %if.end1213
                                        #   in Loop: Header=BB119_197 Depth=2
	jmp	.LBB119_212
.LBB119_211:                            # %if.else1214
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB119_212:                            # %if.end1236
                                        #   in Loop: Header=BB119_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB119_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB119_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB119_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB119_215:                            # %if.end1255
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB119_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB119_221
.LBB119_217:                            # %if.else1269
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB119_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB119_220
.LBB119_219:                            # %if.else1283
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB119_220:                            # %if.end1288
                                        #   in Loop: Header=BB119_197 Depth=2
	jmp	.LBB119_221
.LBB119_221:                            # %if.end1289
                                        #   in Loop: Header=BB119_197 Depth=2
	jmp	.LBB119_222
.LBB119_222:                            # %for.inc
                                        #   in Loop: Header=BB119_197 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_197
.LBB119_223:                            # %for.end
                                        #   in Loop: Header=BB119_195 Depth=1
	jmp	.LBB119_224
.LBB119_224:                            # %for.inc1290
                                        #   in Loop: Header=BB119_195 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_195
.LBB119_225:                            # %for.end1292
	jmp	.LBB119_259
.LBB119_226:                            # %if.else1293
	movl	$0, -4(%rbp)
.LBB119_227:                            # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_229 Depth 2
                                        #       Child Loop BB119_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB119_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB119_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB119_229:                            # %for.cond1304
                                        #   Parent Loop BB119_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB119_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB119_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB119_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB119_234
.LBB119_233:                            # %cond.false1319
                                        #   in Loop: Header=BB119_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB119_234
.LBB119_234:                            # %cond.end1320
                                        #   in Loop: Header=BB119_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -228(%rbp)
	cmpl	$-1, -228(%rbp)
	jne	.LBB119_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB119_254
.LBB119_236:                            # %if.else1393
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -164(%rbp)
.LBB119_237:                            # %for.cond1394
                                        #   Parent Loop BB119_227 Depth=1
                                        #     Parent Loop BB119_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB119_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB119_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB119_240
.LBB119_239:                            # %cond.false1402
                                        #   in Loop: Header=BB119_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB119_240:                            # %cond.end1406
                                        #   in Loop: Header=BB119_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB119_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB119_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-164(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-216(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB119_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB119_247
.LBB119_243:                            # %if.else1425
                                        #   in Loop: Header=BB119_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB119_237 Depth=3
	jmp	.LBB119_245
.LBB119_245:                            # %for.inc1427
                                        #   in Loop: Header=BB119_237 Depth=3
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB119_237
.LBB119_246:                            # %for.end1429.loopexit
                                        #   in Loop: Header=BB119_229 Depth=2
	jmp	.LBB119_247
.LBB119_247:                            # %for.end1429
                                        #   in Loop: Header=BB119_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB119_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -168(%rbp)
	cmpl	$9999, -168(%rbp)       # imm = 0x270F
	jne	.LBB119_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB119_251
.LBB119_250:                            # %if.else1487
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB119_251:                            # %if.end1571
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB119_253
.LBB119_252:                            # %if.else1587
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB119_253:                            # %if.end1602
                                        #   in Loop: Header=BB119_229 Depth=2
	jmp	.LBB119_254
.LBB119_254:                            # %if.end1603
                                        #   in Loop: Header=BB119_229 Depth=2
	jmp	.LBB119_255
.LBB119_255:                            # %for.inc1604
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_229
.LBB119_256:                            # %for.end1606
                                        #   in Loop: Header=BB119_227 Depth=1
	jmp	.LBB119_257
.LBB119_257:                            # %for.inc1607
                                        #   in Loop: Header=BB119_227 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_227
.LBB119_258:                            # %for.end1609
	jmp	.LBB119_259
.LBB119_259:                            # %if.end1610
	cmpl	$1441272796, -232(%rbp) # imm = 0x55E813DC
	jne	.LBB119_261
.LBB119_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_261:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_260
.Lfunc_end119:
	.size	Get_Direct_Motion_Vectors.94, .Lfunc_end119-Get_Direct_Motion_Vectors.94
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch.95 # -- Begin function ResetFastFullIntegerSearch.95
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch.95,@function
ResetFastFullIntegerSearch.95:          # @ResetFastFullIntegerSearch.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1556067654, -12(%rbp)  # imm = 0x5CBFB546
	movl	$0, -4(%rbp)
.LBB120_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_3 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB120_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB120_1 Depth=1
	movl	$0, -8(%rbp)
.LBB120_3:                              # %for.cond1
                                        #   Parent Loop BB120_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB120_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB120_3 Depth=2
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB120_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_3
.LBB120_6:                              # %for.end
                                        #   in Loop: Header=BB120_1 Depth=1
	jmp	.LBB120_7
.LBB120_7:                              # %for.inc6
                                        #   in Loop: Header=BB120_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_1
.LBB120_8:                              # %for.end8
	cmpl	$1556067654, -12(%rbp)  # imm = 0x5CBFB546
	jne	.LBB120_10
.LBB120_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_9
.Lfunc_end120:
	.size	ResetFastFullIntegerSearch.95, .Lfunc_end120-ResetFastFullIntegerSearch.95
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.96   # -- Begin function Get_Direct_Cost8x8.96
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.96,@function
Get_Direct_Cost8x8.96:                  # @Get_Direct_Cost8x8.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1149857551, -60(%rbp)  # imm = 0x44896F0F
	movl	%edi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -48(%rbp)
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-56(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_3 Depth 2
                                        #       Child Loop BB121_7 Depth 3
                                        #         Child Loop BB121_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB121_3:                              # %for.cond3
                                        #   Parent Loop BB121_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_7 Depth 3
                                        #         Child Loop BB121_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB121_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -52(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB121_30
.LBB121_6:                              # %if.end
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -28(%rbp)
.LBB121_7:                              # %for.cond34
                                        #   Parent Loop BB121_1 Depth=1
                                        #     Parent Loop BB121_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB121_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB121_7 Depth=3
	movl	$0, -16(%rbp)
.LBB121_9:                              # %for.cond38
                                        #   Parent Loop BB121_1 Depth=1
                                        #     Parent Loop BB121_3 Depth=2
                                        #       Parent Loop BB121_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB121_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB121_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-400(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB121_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB121_9
.LBB121_12:                             # %for.end
                                        #   in Loop: Header=BB121_7 Depth=3
	jmp	.LBB121_13
.LBB121_13:                             # %for.inc67
                                        #   in Loop: Header=BB121_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_7
.LBB121_14:                             # %for.end69
                                        #   in Loop: Header=BB121_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_3
.LBB121_16:                             # %for.end73
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_17
.LBB121_17:                             # %for.inc74
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_1
.LBB121_18:                             # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB121_29
# %bb.20:                               # %if.then79
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB121_21:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB121_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB121_21 Depth=1
	movl	$0, -16(%rbp)
.LBB121_23:                             # %for.cond84
                                        #   Parent Loop BB121_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB121_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB121_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-400(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB121_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB121_23
.LBB121_26:                             # %for.end97
                                        #   in Loop: Header=BB121_21 Depth=1
	jmp	.LBB121_27
.LBB121_27:                             # %for.inc98
                                        #   in Loop: Header=BB121_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_21
.LBB121_28:                             # %for.end100
	leaq	-656(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB121_29:                             # %if.end105
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB121_30:                             # %return
	movl	-52(%rbp), %ebx
	cmpl	$1149857551, -60(%rbp)  # imm = 0x44896F0F
	jne	.LBB121_32
.LBB121_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_32:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_31
.Lfunc_end121:
	.size	Get_Direct_Cost8x8.96, .Lfunc_end121-Get_Direct_Cost8x8.96
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.97   # -- Begin function Get_Direct_Cost8x8.97
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.97,@function
Get_Direct_Cost8x8.97:                  # @Get_Direct_Cost8x8.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$188570053, -60(%rbp)   # imm = 0xB3D59C5
	movl	%edi, -52(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -44(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
                                        #       Child Loop BB122_7 Depth 3
                                        #         Child Loop BB122_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB122_3:                              # %for.cond3
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_7 Depth 3
                                        #         Child Loop BB122_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -56(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB122_30
.LBB122_6:                              # %if.end
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-28(%rbp), %edi
	movl	-20(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB122_7:                              # %for.cond34
                                        #   Parent Loop BB122_1 Depth=1
                                        #     Parent Loop BB122_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB122_9 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB122_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB122_7 Depth=3
	movl	$0, -12(%rbp)
.LBB122_9:                              # %for.cond38
                                        #   Parent Loop BB122_1 Depth=1
                                        #     Parent Loop BB122_3 Depth=2
                                        #       Parent Loop BB122_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB122_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB122_9 Depth=4
	movq	imgY_org, %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-400(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-24(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB122_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_9
.LBB122_12:                             # %for.end
                                        #   in Loop: Header=BB122_7 Depth=3
	jmp	.LBB122_13
.LBB122_13:                             # %for.inc67
                                        #   in Loop: Header=BB122_7 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_7
.LBB122_14:                             # %for.end69
                                        #   in Loop: Header=BB122_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB122_3
.LBB122_16:                             # %for.end73
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_17
.LBB122_17:                             # %for.inc74
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_1
.LBB122_18:                             # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB122_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB122_29
# %bb.20:                               # %if.then79
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB122_21:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_23 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB122_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	$0, -12(%rbp)
.LBB122_23:                             # %for.cond84
                                        #   Parent Loop BB122_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB122_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB122_23 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-400(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB122_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_23
.LBB122_26:                             # %for.end97
                                        #   in Loop: Header=BB122_21 Depth=1
	jmp	.LBB122_27
.LBB122_27:                             # %for.inc98
                                        #   in Loop: Header=BB122_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_21
.LBB122_28:                             # %for.end100
	leaq	-656(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB122_29:                             # %if.end105
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB122_30:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$188570053, -60(%rbp)   # imm = 0xB3D59C5
	jne	.LBB122_32
.LBB122_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_32:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_31
.Lfunc_end122:
	.size	Get_Direct_Cost8x8.97, .Lfunc_end122-Get_Direct_Cost8x8.97
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.98
.LCPI123_0:
	.quad	4602678819172646912     # double 0.5
.LCPI123_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.98
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.98,@function
SubPelBlockMotionSearch.98:             # @SubPelBlockMotionSearch.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI123_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI123_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$131441115, -180(%rbp)  # imm = 0x7D5A1DB
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -136(%rbp)
	movl	%ecx, -152(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -144(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -104(%rbp)
	jne	.LBB123_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB123_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB123_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB123_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB123_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB123_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB123_7:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -196(%rbp)
	movq	input, %rax
	movslq	-104(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	movslq	-104(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB123_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB123_10
.LBB123_9:                              # %cond.false
	movl	$1, %eax
	jmp	.LBB123_10
.LBB123_10:                             # %cond.end
	movl	%eax, -192(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB123_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB123_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB123_14
.LBB123_13:                             # %cond.false34
	movl	48(%rbp), %eax
.LBB123_14:                             # %cond.end35
	jmp	.LBB123_16
.LBB123_15:                             # %cond.false37
	movl	48(%rbp), %eax
.LBB123_16:                             # %cond.end38
	movl	%eax, -184(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB123_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB123_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB123_20
.LBB123_19:                             # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB123_20
.LBB123_20:                             # %cond.end50
	movl	%ecx, -156(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB123_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB123_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB123_26
.LBB123_23:                             # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB123_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB123_25:                             # %land.end65
.LBB123_26:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB123_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB123_29
.LBB123_28:                             # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB123_29:                             # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -160(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-136(%rbp), %eax
	addl	-156(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB123_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB123_32
# %bb.31:                               # %if.then
	movl	-136(%rbp), %eax
	addl	-156(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB123_33
.LBB123_32:                             # %if.else
	movl	-136(%rbp), %eax
	addl	-156(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB123_33:                             # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-148(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-132(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB123_38
# %bb.34:                               # %land.lhs.true112
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_38
# %bb.35:                               # %land.lhs.true118
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB123_38
# %bb.36:                               # %land.lhs.true123
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB123_39
.LBB123_38:                             # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB123_39:                             # %if.end131
	movl	$0, -72(%rbp)
	movl	-192(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB123_40:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_47 Depth 2
                                        #       Child Loop BB123_51 Depth 3
                                        #         Child Loop BB123_57 Depth 4
                                        #           Child Loop BB123_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB123_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB123_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-96(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -196(%rbp)
	je	.LBB123_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB123_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB123_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB123_40 Depth=1
	movl	-144(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB123_44:                             # %if.end164
                                        #   in Loop: Header=BB123_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB123_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB123_40 Depth=1
	jmp	.LBB123_75
.LBB123_46:                             # %if.end168
                                        #   in Loop: Header=BB123_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -108(%rbp)
.LBB123_47:                             # %for.cond169
                                        #   Parent Loop BB123_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_51 Depth 3
                                        #         Child Loop BB123_57 Depth 4
                                        #           Child Loop BB123_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-132(%rbp), %ecx
	jge	.LBB123_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB123_47 Depth=2
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB123_49:                             # %land.end174
                                        #   in Loop: Header=BB123_47 Depth=2
	testb	$1, %al
	jne	.LBB123_50
	jmp	.LBB123_70
.LBB123_50:                             # %for.body176
                                        #   in Loop: Header=BB123_47 Depth=2
	movl	-140(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-96(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB123_51:                             # %for.cond180
                                        #   Parent Loop BB123_40 Depth=1
                                        #     Parent Loop BB123_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_57 Depth 4
                                        #           Child Loop BB123_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB123_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB123_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB123_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB123_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB123_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB123_47 Depth=2
	movl	$1, -108(%rbp)
	jmp	.LBB123_68
.LBB123_55:                             # %if.end342
                                        #   in Loop: Header=BB123_51 Depth=3
	jmp	.LBB123_65
.LBB123_56:                             # %if.else343
                                        #   in Loop: Header=BB123_51 Depth=3
	movl	$0, -84(%rbp)
	movl	$0, -92(%rbp)
.LBB123_57:                             # %for.cond344
                                        #   Parent Loop BB123_40 Depth=1
                                        #     Parent Loop BB123_47 Depth=2
                                        #       Parent Loop BB123_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB123_59 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB123_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB123_57 Depth=4
	movl	$0, -80(%rbp)
.LBB123_59:                             # %for.cond348
                                        #   Parent Loop BB123_40 Depth=1
                                        #     Parent Loop BB123_47 Depth=2
                                        #       Parent Loop BB123_51 Depth=3
                                        #         Parent Loop BB123_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB123_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB123_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB123_59 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB123_59
.LBB123_62:                             # %for.end
                                        #   in Loop: Header=BB123_57 Depth=4
	jmp	.LBB123_63
.LBB123_63:                             # %for.inc361
                                        #   in Loop: Header=BB123_57 Depth=4
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB123_57
.LBB123_64:                             # %for.end363
                                        #   in Loop: Header=BB123_51 Depth=3
	jmp	.LBB123_65
.LBB123_65:                             # %if.end364
                                        #   in Loop: Header=BB123_51 Depth=3
	jmp	.LBB123_66
.LBB123_66:                             # %for.inc365
                                        #   in Loop: Header=BB123_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_51
.LBB123_67:                             # %for.end367.loopexit
                                        #   in Loop: Header=BB123_47 Depth=2
	jmp	.LBB123_68
.LBB123_68:                             # %for.end367
                                        #   in Loop: Header=BB123_47 Depth=2
	jmp	.LBB123_69
.LBB123_69:                             # %for.inc368
                                        #   in Loop: Header=BB123_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB123_47
.LBB123_70:                             # %for.end370
                                        #   in Loop: Header=BB123_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB123_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB123_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-160(%rbp), %esi
	movl	-104(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB123_72:                             # %if.end377
                                        #   in Loop: Header=BB123_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB123_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB123_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB123_74:                             # %if.end381
                                        #   in Loop: Header=BB123_40 Depth=1
	jmp	.LBB123_75
.LBB123_75:                             # %for.inc382
                                        #   in Loop: Header=BB123_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB123_40
.LBB123_76:                             # %for.end384
	cmpl	$0, -72(%rbp)
	je	.LBB123_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB123_78:                             # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB123_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB123_80:                             # %if.end403
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB123_85
# %bb.81:                               # %land.lhs.true408
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_85
# %bb.82:                               # %land.lhs.true414
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB123_85
# %bb.83:                               # %land.lhs.true419
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB123_86
.LBB123_85:                             # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB123_86:                             # %if.end427
	movl	$0, -72(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB123_87:                             # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_91 Depth 2
                                        #       Child Loop BB123_95 Depth 3
                                        #         Child Loop BB123_101 Depth 4
                                        #           Child Loop BB123_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB123_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB123_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-96(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB123_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB123_87 Depth=1
	jmp	.LBB123_119
.LBB123_90:                             # %if.end456
                                        #   in Loop: Header=BB123_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -108(%rbp)
.LBB123_91:                             # %for.cond457
                                        #   Parent Loop BB123_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_95 Depth 3
                                        #         Child Loop BB123_101 Depth 4
                                        #           Child Loop BB123_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-132(%rbp), %ecx
	jge	.LBB123_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB123_91 Depth=2
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB123_93:                             # %land.end463
                                        #   in Loop: Header=BB123_91 Depth=2
	testb	$1, %al
	jne	.LBB123_94
	jmp	.LBB123_114
.LBB123_94:                             # %for.body465
                                        #   in Loop: Header=BB123_91 Depth=2
	movl	-140(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-96(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB123_95:                             # %for.cond469
                                        #   Parent Loop BB123_87 Depth=1
                                        #     Parent Loop BB123_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_101 Depth 4
                                        #           Child Loop BB123_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB123_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB123_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB123_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB123_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB123_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB123_91 Depth=2
	movl	$1, -108(%rbp)
	jmp	.LBB123_112
.LBB123_99:                             # %if.end636
                                        #   in Loop: Header=BB123_95 Depth=3
	jmp	.LBB123_109
.LBB123_100:                            # %if.else637
                                        #   in Loop: Header=BB123_95 Depth=3
	movl	$0, -84(%rbp)
	movl	$0, -92(%rbp)
.LBB123_101:                            # %for.cond638
                                        #   Parent Loop BB123_87 Depth=1
                                        #     Parent Loop BB123_91 Depth=2
                                        #       Parent Loop BB123_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB123_103 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB123_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB123_101 Depth=4
	movl	$0, -80(%rbp)
.LBB123_103:                            # %for.cond642
                                        #   Parent Loop BB123_87 Depth=1
                                        #     Parent Loop BB123_91 Depth=2
                                        #       Parent Loop BB123_95 Depth=3
                                        #         Parent Loop BB123_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB123_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB123_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB123_103 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB123_103
.LBB123_106:                            # %for.end657
                                        #   in Loop: Header=BB123_101 Depth=4
	jmp	.LBB123_107
.LBB123_107:                            # %for.inc658
                                        #   in Loop: Header=BB123_101 Depth=4
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB123_101
.LBB123_108:                            # %for.end660
                                        #   in Loop: Header=BB123_95 Depth=3
	jmp	.LBB123_109
.LBB123_109:                            # %if.end661
                                        #   in Loop: Header=BB123_95 Depth=3
	jmp	.LBB123_110
.LBB123_110:                            # %for.inc662
                                        #   in Loop: Header=BB123_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_95
.LBB123_111:                            # %for.end664.loopexit
                                        #   in Loop: Header=BB123_91 Depth=2
	jmp	.LBB123_112
.LBB123_112:                            # %for.end664
                                        #   in Loop: Header=BB123_91 Depth=2
	jmp	.LBB123_113
.LBB123_113:                            # %for.inc665
                                        #   in Loop: Header=BB123_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB123_91
.LBB123_114:                            # %for.end667
                                        #   in Loop: Header=BB123_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB123_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB123_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-104(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB123_116:                            # %if.end675
                                        #   in Loop: Header=BB123_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB123_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB123_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB123_118:                            # %if.end679
                                        #   in Loop: Header=BB123_87 Depth=1
	jmp	.LBB123_119
.LBB123_119:                            # %for.inc680
                                        #   in Loop: Header=BB123_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB123_87
.LBB123_120:                            # %for.end682
	cmpl	$0, -72(%rbp)
	je	.LBB123_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB123_122:                            # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$131441115, -180(%rbp)  # imm = 0x7D5A1DB
	jne	.LBB123_124
.LBB123_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_123
.Lfunc_end123:
	.size	SubPelBlockMotionSearch.98, .Lfunc_end123-SubPelBlockMotionSearch.98
	.cfi_endproc
                                        # -- End function
	.type	QP2QUANT,@object        # @QP2QUANT
	.section	.rodata,"a",@progbits
	.globl	QP2QUANT
	.p2align	4
QP2QUANT:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	10                      # 0xa
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	16                      # 0x10
	.long	18                      # 0x12
	.long	20                      # 0x14
	.long	23                      # 0x17
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	32                      # 0x20
	.long	36                      # 0x24
	.long	40                      # 0x28
	.long	45                      # 0x2d
	.long	51                      # 0x33
	.long	57                      # 0x39
	.long	64                      # 0x40
	.long	72                      # 0x48
	.long	81                      # 0x51
	.long	91                      # 0x5b
	.size	QP2QUANT, 160

	.type	BlockSAD,@object        # @BlockSAD
	.local	BlockSAD
	.comm	BlockSAD,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"InitializeFastFullIntegerSearch: BlockSAD"
	.size	.L.str, 42

	.type	search_setup_done,@object # @search_setup_done
	.local	search_setup_done
	.comm	search_setup_done,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"InitializeFastFullIntegerSearch: search_setup_done"
	.size	.L.str.1, 51

	.type	search_center_x,@object # @search_center_x
	.local	search_center_x
	.comm	search_center_x,8,8
	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"InitializeFastFullIntegerSearch: search_center_x"
	.size	.L.str.2, 49

	.type	search_center_y,@object # @search_center_y
	.local	search_center_y
	.comm	search_center_y,8,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"InitializeFastFullIntegerSearch: search_center_y"
	.size	.L.str.3, 49

	.type	pos_00,@object          # @pos_00
	.local	pos_00
	.comm	pos_00,8,8
	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"InitializeFastFullIntegerSearch: pos_00"
	.size	.L.str.4, 40

	.type	max_search_range,@object # @max_search_range
	.local	max_search_range
	.comm	max_search_range,8,8
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"InitializeFastFullIntegerSearch: max_search_range"
	.size	.L.str.5, 50

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	PelYline_11,@object     # @PelYline_11
	.local	PelYline_11
	.comm	PelYline_11,8,8
	.type	spiral_search_x,@object # @spiral_search_x
	.comm	spiral_search_x,8,8
	.type	spiral_search_y,@object # @spiral_search_y
	.comm	spiral_search_y,8,8
	.type	byte_abs,@object        # @byte_abs
	.comm	byte_abs,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	max_mvd,@object         # @max_mvd
	.comm	max_mvd,4,4
	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"Init_Motion_Search_Module: spiral_search_x"
	.size	.L.str.6, 43

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Init_Motion_Search_Module: spiral_search_y"
	.size	.L.str.7, 43

	.type	mvbits,@object          # @mvbits
	.comm	mvbits,8,8
	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"Init_Motion_Search_Module: mvbits"
	.size	.L.str.8, 34

	.type	refbits,@object         # @refbits
	.comm	refbits,8,8
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"Init_Motion_Search_Module: refbits"
	.size	.L.str.9, 35

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"Init_Motion_Search_Module: byte_abs"
	.size	.L.str.10, 36

	.type	motion_cost,@object     # @motion_cost
	.comm	motion_cost,8,8
	.type	PelY_14,@object         # @PelY_14
	.local	PelY_14
	.comm	PelY_14,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	PelY_14b,@object        # @PelY_14b
	.local	PelY_14b
	.comm	PelY_14b,8,8
	.type	BPredPartitionCost.bx0,@object # @BPredPartitionCost.bx0
	.data
	.p2align	4
BPredPartitionCost.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	BPredPartitionCost.bx0, 80

	.type	BPredPartitionCost.by0,@object # @BPredPartitionCost.by0
	.p2align	4
BPredPartitionCost.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	BPredPartitionCost.by0, 80

	.type	BlockMotionSearch.orig_val,@object # @BlockMotionSearch.orig_val
	.local	BlockMotionSearch.orig_val
	.comm	BlockMotionSearch.orig_val,512,16
	.type	BlockMotionSearch.orig_pic,@object # @BlockMotionSearch.orig_pic
	.p2align	4
BlockMotionSearch.orig_pic:
	.quad	BlockMotionSearch.orig_val
	.quad	BlockMotionSearch.orig_val+32
	.quad	BlockMotionSearch.orig_val+64
	.quad	BlockMotionSearch.orig_val+96
	.quad	BlockMotionSearch.orig_val+128
	.quad	BlockMotionSearch.orig_val+160
	.quad	BlockMotionSearch.orig_val+192
	.quad	BlockMotionSearch.orig_val+224
	.quad	BlockMotionSearch.orig_val+256
	.quad	BlockMotionSearch.orig_val+288
	.quad	BlockMotionSearch.orig_val+320
	.quad	BlockMotionSearch.orig_val+352
	.quad	BlockMotionSearch.orig_val+384
	.quad	BlockMotionSearch.orig_val+416
	.quad	BlockMotionSearch.orig_val+448
	.quad	BlockMotionSearch.orig_val+480
	.size	BlockMotionSearch.orig_pic, 128

	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	BIDPartitionCost.bx0,@object # @BIDPartitionCost.bx0
	.p2align	4
BIDPartitionCost.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	BIDPartitionCost.bx0, 80

	.type	BIDPartitionCost.by0,@object # @BIDPartitionCost.by0
	.p2align	4
BIDPartitionCost.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	BIDPartitionCost.by0, 80

	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	PartitionMotionSearch.bx0,@object # @PartitionMotionSearch.bx0
	.p2align	4
PartitionMotionSearch.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	PartitionMotionSearch.bx0, 80

	.type	PartitionMotionSearch.by0,@object # @PartitionMotionSearch.by0
	.p2align	4
PartitionMotionSearch.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	PartitionMotionSearch.by0, 80

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
