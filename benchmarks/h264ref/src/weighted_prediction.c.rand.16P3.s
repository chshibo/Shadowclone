	.text
	.file	"weighted_prediction.c"
	.globl	estimate_weighting_factor_P_slice # -- Begin function estimate_weighting_factor_P_slice
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice,@function
estimate_weighting_factor_P_slice:      # @estimate_weighting_factor_P_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_estimate_weighting_factor_P_slice.1
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_estimate_weighting_factor_P_slice.5
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_estimate_weighting_factor_P_slice.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_estimate_weighting_factor_P_slice.14
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.14
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_estimate_weighting_factor_P_slice.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_estimate_weighting_factor_P_slice.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_estimate_weighting_factor_P_slice.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_estimate_weighting_factor_P_slice.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_estimate_weighting_factor_P_slice.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_estimate_weighting_factor_P_slice.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_estimate_weighting_factor_P_slice.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_estimate_weighting_factor_P_slice.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_estimate_weighting_factor_P_slice.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.36
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_estimate_weighting_factor_P_slice.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_estimate_weighting_factor_P_slice.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_estimate_weighting_factor_P_slice.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.54
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	estimate_weighting_factor_P_slice, .Lfunc_end0-estimate_weighting_factor_P_slice
	.cfi_endproc
                                        # -- End function
	.globl	estimate_weighting_factor_B_slice # -- Begin function estimate_weighting_factor_B_slice
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice,@function
estimate_weighting_factor_B_slice:      # @estimate_weighting_factor_B_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_estimate_weighting_factor_B_slice.3
	callq	estimate_weighting_factor_B_slice.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_estimate_weighting_factor_B_slice.7
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_estimate_weighting_factor_B_slice.9
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.9
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_estimate_weighting_factor_B_slice.15
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_estimate_weighting_factor_B_slice.17
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_estimate_weighting_factor_B_slice.21
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_estimate_weighting_factor_B_slice.27
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_estimate_weighting_factor_B_slice.29
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.29
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_estimate_weighting_factor_B_slice.32
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_estimate_weighting_factor_B_slice.38
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_estimate_weighting_factor_B_slice.41
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_estimate_weighting_factor_B_slice.44
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.44
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_estimate_weighting_factor_B_slice.50
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_estimate_weighting_factor_B_slice.58
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_estimate_weighting_factor_B_slice.60
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_estimate_weighting_factor_B_slice.63
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	estimate_weighting_factor_B_slice, .Lfunc_end1-estimate_weighting_factor_B_slice
	.cfi_endproc
                                        # -- End function
	.globl	test_wp_P_slice         # -- Begin function test_wp_P_slice
	.p2align	4, 0x90
	.type	test_wp_P_slice,@function
test_wp_P_slice:                        # @test_wp_P_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_17
# %bb.1:                                # %func_test_wp_P_slice.6
	movl	%ebx, %edi
	callq	test_wp_P_slice.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_test_wp_P_slice.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_test_wp_P_slice.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_test_wp_P_slice.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.19
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_test_wp_P_slice.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.37
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_test_wp_P_slice.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.39
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_test_wp_P_slice.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.42
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_test_wp_P_slice.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %func_test_wp_P_slice.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_10:                               # %func_test_wp_P_slice.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.49
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_11:                               # %func_test_wp_P_slice.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.53
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_12:                               # %func_test_wp_P_slice.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_13:                               # %func_test_wp_P_slice.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_14:                               # %func_test_wp_P_slice.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_15:                               # %func_test_wp_P_slice.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.62
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_16:                               # %func_test_wp_P_slice.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.64
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB2_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB2_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB2_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB2_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB2_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB2_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB2_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB2_15
	jmp	.LBB2_16
.Lfunc_end2:
	.size	test_wp_P_slice, .Lfunc_end2-test_wp_P_slice
	.cfi_endproc
                                        # -- End function
	.globl	test_wp_B_slice         # -- Begin function test_wp_B_slice
	.p2align	4, 0x90
	.type	test_wp_B_slice,@function
test_wp_B_slice:                        # @test_wp_B_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_test_wp_B_slice.2
	movl	%ebx, %edi
	callq	test_wp_B_slice.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_test_wp_B_slice.4
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_test_wp_B_slice.11
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_test_wp_B_slice.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_test_wp_B_slice.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_test_wp_B_slice.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_test_wp_B_slice.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_test_wp_B_slice.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_test_wp_B_slice.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_test_wp_B_slice.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_test_wp_B_slice.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.40
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_test_wp_B_slice.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_test_wp_B_slice.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_test_wp_B_slice.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_test_wp_B_slice.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_test_wp_B_slice.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.57
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	test_wp_B_slice, .Lfunc_end3-test_wp_B_slice
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.1
.LCPI4_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.1
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.1,@function
estimate_weighting_factor_P_slice.1:    # @estimate_weighting_factor_P_slice.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1123662945, -60(%rbp)  # imm = 0x42F9BC61
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB4_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB4_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB4_4
.LBB4_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB4_4
.LBB4_4:                                # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB4_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_7 Depth 2
                                        #       Child Loop BB4_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB4_5 Depth=1
	movl	$0, -16(%rbp)
.LBB4_7:                                # %for.cond12
                                        #   Parent Loop BB4_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB4_7 Depth=2
	movl	$0, -4(%rbp)
.LBB4_9:                                # %for.cond17
                                        #   Parent Loop BB4_5 Depth=1
                                        #     Parent Loop BB4_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB4_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB4_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB4_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_9
.LBB4_12:                               # %for.end
                                        #   in Loop: Header=BB4_7 Depth=2
	jmp	.LBB4_13
.LBB4_13:                               # %for.inc48
                                        #   in Loop: Header=BB4_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_7
.LBB4_14:                               # %for.end50
                                        #   in Loop: Header=BB4_5 Depth=1
	jmp	.LBB4_15
.LBB4_15:                               # %for.inc51
                                        #   in Loop: Header=BB4_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_5
.LBB4_16:                               # %for.end53
	movl	$0, -12(%rbp)
.LBB4_17:                               # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB4_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB4_17 Depth=1
	movl	$0, -16(%rbp)
.LBB4_19:                               # %for.cond57
                                        #   Parent Loop BB4_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB4_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB4_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB4_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_19
.LBB4_22:                               # %for.end67
                                        #   in Loop: Header=BB4_17 Depth=1
	jmp	.LBB4_23
.LBB4_23:                               # %for.inc68
                                        #   in Loop: Header=BB4_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_17
.LBB4_24:                               # %for.end70
	movl	$0, -8(%rbp)
.LBB4_25:                               # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_27 Depth 2
                                        #       Child Loop BB4_29 Depth 3
                                        #       Child Loop BB4_48 Depth 3
                                        #       Child Loop BB4_58 Depth 3
                                        #         Child Loop BB4_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB4_25 Depth=1
	movl	$0, -4(%rbp)
.LBB4_27:                               # %for.cond76
                                        #   Parent Loop BB4_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_29 Depth 3
                                        #       Child Loop BB4_48 Depth 3
                                        #       Child Loop BB4_58 Depth 3
                                        #         Child Loop BB4_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB4_29:                               # %for.cond92
                                        #   Parent Loop BB4_25 Depth=1
                                        #     Parent Loop BB4_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB4_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB4_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_29
.LBB4_32:                               # %for.end106
                                        #   in Loop: Header=BB4_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB4_40
	jp	.LBB4_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB4_34
	jp	.LBB4_34
	jmp	.LBB4_35
.LBB4_34:                               # %if.then114
                                        #   in Loop: Header=BB4_27 Depth=2
	vmovsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB4_36
.LBB4_35:                               # %if.else
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB4_36:                               # %if.end
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB4_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB4_39
.LBB4_38:                               # %if.then147
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB4_39:                               # %if.end154
                                        #   in Loop: Header=BB4_27 Depth=2
	jmp	.LBB4_47
.LBB4_40:                               # %if.else155
                                        #   in Loop: Header=BB4_27 Depth=2
	vmovsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB4_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB4_46
.LBB4_42:                               # %cond.false179
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB4_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	$127, %eax
	jmp	.LBB4_45
.LBB4_44:                               # %cond.false188
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB4_45:                               # %cond.end194
                                        #   in Loop: Header=BB4_27 Depth=2
.LBB4_46:                               # %cond.end196
                                        #   in Loop: Header=BB4_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB4_47:                               # %if.end209
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB4_48:                               # %for.cond222
                                        #   Parent Loop BB4_25 Depth=1
                                        #     Parent Loop BB4_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB4_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB4_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB4_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB4_55
.LBB4_51:                               # %cond.false248
                                        #   in Loop: Header=BB4_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB4_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB4_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB4_54
.LBB4_53:                               # %cond.false270
                                        #   in Loop: Header=BB4_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB4_54:                               # %cond.end288
                                        #   in Loop: Header=BB4_48 Depth=3
.LBB4_55:                               # %cond.end290
                                        #   in Loop: Header=BB4_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB4_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_48
.LBB4_57:                               # %for.end297
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	$0, -12(%rbp)
.LBB4_58:                               # %for.cond298
                                        #   Parent Loop BB4_25 Depth=1
                                        #     Parent Loop BB4_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB4_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB4_58 Depth=3
	movl	$0, -16(%rbp)
.LBB4_60:                               # %for.cond305
                                        #   Parent Loop BB4_25 Depth=1
                                        #     Parent Loop BB4_27 Depth=2
                                        #       Parent Loop BB4_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB4_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB4_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB4_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB4_67
.LBB4_63:                               # %cond.false336
                                        #   in Loop: Header=BB4_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB4_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB4_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB4_66
.LBB4_65:                               # %cond.false364
                                        #   in Loop: Header=BB4_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB4_66:                               # %cond.end387
                                        #   in Loop: Header=BB4_60 Depth=4
.LBB4_67:                               # %cond.end389
                                        #   in Loop: Header=BB4_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB4_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_60
.LBB4_69:                               # %for.end400
                                        #   in Loop: Header=BB4_58 Depth=3
	jmp	.LBB4_70
.LBB4_70:                               # %for.inc401
                                        #   in Loop: Header=BB4_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_58
.LBB4_71:                               # %for.end403
                                        #   in Loop: Header=BB4_27 Depth=2
	jmp	.LBB4_72
.LBB4_72:                               # %for.inc404
                                        #   in Loop: Header=BB4_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_27
.LBB4_73:                               # %for.end406
                                        #   in Loop: Header=BB4_25 Depth=1
	jmp	.LBB4_74
.LBB4_74:                               # %for.inc407
                                        #   in Loop: Header=BB4_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_25
.LBB4_75:                               # %for.end409
	movl	$0, -8(%rbp)
.LBB4_76:                               # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_78 Depth 2
                                        #       Child Loop BB4_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB4_76 Depth=1
	movl	$0, -20(%rbp)
.LBB4_78:                               # %for.cond415
                                        #   Parent Loop BB4_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB4_78 Depth=2
	movl	$0, -24(%rbp)
.LBB4_80:                               # %for.cond421
                                        #   Parent Loop BB4_76 Depth=1
                                        #     Parent Loop BB4_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB4_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB4_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB4_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_80
.LBB4_83:                               # %for.end451
                                        #   in Loop: Header=BB4_78 Depth=2
	jmp	.LBB4_84
.LBB4_84:                               # %for.inc452
                                        #   in Loop: Header=BB4_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_78
.LBB4_85:                               # %for.end454
                                        #   in Loop: Header=BB4_76 Depth=1
	jmp	.LBB4_86
.LBB4_86:                               # %for.inc455
                                        #   in Loop: Header=BB4_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_76
.LBB4_87:                               # %for.end457
	cmpl	$1123662945, -60(%rbp)  # imm = 0x42F9BC61
	jne	.LBB4_89
.LBB4_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_89:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB4_88
.Lfunc_end4:
	.size	estimate_weighting_factor_P_slice.1, .Lfunc_end4-estimate_weighting_factor_P_slice.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.2
.LCPI5_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.2
	.p2align	4, 0x90
	.type	test_wp_B_slice.2,@function
test_wp_B_slice.2:                      # @test_wp_B_slice.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$86141632, -84(%rbp)    # imm = 0x5226AC0
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB5_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB5_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB5_4
.LBB5_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB5_4
.LBB5_4:                                # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB5_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_7 Depth 2
                                        #       Child Loop BB5_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB5_5 Depth=1
	movl	$0, -24(%rbp)
.LBB5_7:                                # %for.cond9
                                        #   Parent Loop BB5_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB5_7 Depth=2
	movl	$0, -32(%rbp)
.LBB5_9:                                # %for.cond14
                                        #   Parent Loop BB5_5 Depth=1
                                        #     Parent Loop BB5_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB5_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB5_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB5_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB5_9
.LBB5_12:                               # %for.end
                                        #   in Loop: Header=BB5_7 Depth=2
	jmp	.LBB5_13
.LBB5_13:                               # %for.inc41
                                        #   in Loop: Header=BB5_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_7
.LBB5_14:                               # %for.end43
                                        #   in Loop: Header=BB5_5 Depth=1
	jmp	.LBB5_15
.LBB5_15:                               # %for.inc44
                                        #   in Loop: Header=BB5_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_5
.LBB5_16:                               # %for.end46
	movl	$0, -12(%rbp)
.LBB5_17:                               # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_19 Depth 2
                                        #       Child Loop BB5_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB5_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB5_17 Depth=1
	movl	$0, -24(%rbp)
.LBB5_19:                               # %for.cond50
                                        #   Parent Loop BB5_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB5_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB5_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB5_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB5_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB5_26
.LBB5_22:                               # %cond.false61
                                        #   in Loop: Header=BB5_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB5_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB5_19 Depth=2
	movl	$127, %eax
	jmp	.LBB5_25
.LBB5_24:                               # %cond.false71
                                        #   in Loop: Header=BB5_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB5_25:                               # %cond.end79
                                        #   in Loop: Header=BB5_19 Depth=2
.LBB5_26:                               # %cond.end81
                                        #   in Loop: Header=BB5_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB5_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB5_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB5_32
.LBB5_28:                               # %cond.false90
                                        #   in Loop: Header=BB5_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB5_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB5_19 Depth=2
	movl	$127, %eax
	jmp	.LBB5_31
.LBB5_30:                               # %cond.false98
                                        #   in Loop: Header=BB5_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB5_31:                               # %cond.end104
                                        #   in Loop: Header=BB5_19 Depth=2
.LBB5_32:                               # %cond.end106
                                        #   in Loop: Header=BB5_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB5_33:                               # %for.cond108
                                        #   Parent Loop BB5_17 Depth=1
                                        #     Parent Loop BB5_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB5_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB5_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB5_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB5_46
.LBB5_36:                               # %if.else
                                        #   in Loop: Header=BB5_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB5_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB5_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB5_42
.LBB5_38:                               # %cond.false145
                                        #   in Loop: Header=BB5_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB5_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB5_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB5_41
.LBB5_40:                               # %cond.false151
                                        #   in Loop: Header=BB5_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB5_41:                               # %cond.end155
                                        #   in Loop: Header=BB5_33 Depth=3
.LBB5_42:                               # %cond.end157
                                        #   in Loop: Header=BB5_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB5_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB5_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB5_45
.LBB5_44:                               # %if.then183
                                        #   in Loop: Header=BB5_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB5_45:                               # %if.end
                                        #   in Loop: Header=BB5_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB5_46:                               # %if.end220
                                        #   in Loop: Header=BB5_33 Depth=3
	jmp	.LBB5_47
.LBB5_47:                               # %for.inc221
                                        #   in Loop: Header=BB5_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_33
.LBB5_48:                               # %for.end223
                                        #   in Loop: Header=BB5_19 Depth=2
	jmp	.LBB5_49
.LBB5_49:                               # %for.inc224
                                        #   in Loop: Header=BB5_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_19
.LBB5_50:                               # %for.end226
                                        #   in Loop: Header=BB5_17 Depth=1
	jmp	.LBB5_51
.LBB5_51:                               # %for.inc227
                                        #   in Loop: Header=BB5_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_17
.LBB5_52:                               # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB5_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB5_54:                               # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_56 Depth 2
                                        #       Child Loop BB5_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB5_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB5_54 Depth=1
	movl	$0, -24(%rbp)
.LBB5_56:                               # %for.cond235
                                        #   Parent Loop BB5_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB5_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB5_56 Depth=2
	movl	$0, -20(%rbp)
.LBB5_58:                               # %for.cond238
                                        #   Parent Loop BB5_54 Depth=1
                                        #     Parent Loop BB5_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB5_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB5_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB5_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB5_62
.LBB5_61:                               # %cond.false243
                                        #   in Loop: Header=BB5_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB5_62:                               # %cond.end244
                                        #   in Loop: Header=BB5_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB5_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_58
.LBB5_64:                               # %for.end276
                                        #   in Loop: Header=BB5_56 Depth=2
	jmp	.LBB5_65
.LBB5_65:                               # %for.inc277
                                        #   in Loop: Header=BB5_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_56
.LBB5_66:                               # %for.end279
                                        #   in Loop: Header=BB5_54 Depth=1
	jmp	.LBB5_67
.LBB5_67:                               # %for.inc280
                                        #   in Loop: Header=BB5_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_54
.LBB5_68:                               # %for.end282
	movl	$0, -16(%rbp)
.LBB5_69:                               # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB5_69 Depth=1
	movl	$0, -28(%rbp)
.LBB5_71:                               # %for.cond287
                                        #   Parent Loop BB5_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB5_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB5_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB5_71
.LBB5_74:                               # %for.end327
                                        #   in Loop: Header=BB5_69 Depth=1
	jmp	.LBB5_75
.LBB5_75:                               # %for.inc328
                                        #   in Loop: Header=BB5_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_69
.LBB5_76:                               # %for.end330
	jmp	.LBB5_142
.LBB5_77:                               # %if.else331
	movl	$0, -12(%rbp)
.LBB5_78:                               # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB5_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB5_78 Depth=1
	movl	$0, -24(%rbp)
.LBB5_80:                               # %for.cond335
                                        #   Parent Loop BB5_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB5_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB5_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB5_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_80
.LBB5_83:                               # %for.end345
                                        #   in Loop: Header=BB5_78 Depth=1
	jmp	.LBB5_84
.LBB5_84:                               # %for.inc346
                                        #   in Loop: Header=BB5_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_78
.LBB5_85:                               # %for.end348
	movl	$0, -16(%rbp)
.LBB5_86:                               # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_88 Depth 2
                                        #       Child Loop BB5_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB5_86 Depth=1
	movl	$0, -32(%rbp)
.LBB5_88:                               # %for.cond354
                                        #   Parent Loop BB5_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB5_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB5_90:                               # %for.cond372
                                        #   Parent Loop BB5_86 Depth=1
                                        #     Parent Loop BB5_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB5_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB5_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_90
.LBB5_93:                               # %for.end389
                                        #   in Loop: Header=BB5_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB5_94
	jp	.LBB5_94
	jmp	.LBB5_95
.LBB5_94:                               # %if.then396
                                        #   in Loop: Header=BB5_88 Depth=2
	vmovsd	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB5_96
.LBB5_95:                               # %if.else406
                                        #   in Loop: Header=BB5_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB5_96:                               # %if.end407
                                        #   in Loop: Header=BB5_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB5_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB5_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB5_99
.LBB5_98:                               # %if.then413
                                        #   in Loop: Header=BB5_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB5_99:                               # %if.end414
                                        #   in Loop: Header=BB5_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB5_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB5_88
.LBB5_101:                              # %for.end447
                                        #   in Loop: Header=BB5_86 Depth=1
	jmp	.LBB5_102
.LBB5_102:                              # %for.inc448
                                        #   in Loop: Header=BB5_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_86
.LBB5_103:                              # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB5_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB5_105:                              # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_107 Depth 2
                                        #       Child Loop BB5_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB5_105 Depth=1
	movl	$0, -28(%rbp)
.LBB5_107:                              # %for.cond459
                                        #   Parent Loop BB5_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB5_107 Depth=2
	movl	$0, -20(%rbp)
.LBB5_109:                              # %for.cond465
                                        #   Parent Loop BB5_105 Depth=1
                                        #     Parent Loop BB5_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB5_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB5_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_109
.LBB5_112:                              # %for.end495
                                        #   in Loop: Header=BB5_107 Depth=2
	jmp	.LBB5_113
.LBB5_113:                              # %for.inc496
                                        #   in Loop: Header=BB5_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB5_107
.LBB5_114:                              # %for.end498
                                        #   in Loop: Header=BB5_105 Depth=1
	jmp	.LBB5_115
.LBB5_115:                              # %for.inc499
                                        #   in Loop: Header=BB5_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_105
.LBB5_116:                              # %for.end501
	jmp	.LBB5_126
.LBB5_117:                              # %if.else502
	movl	$0, -16(%rbp)
.LBB5_118:                              # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB5_118 Depth=1
	movl	$0, -28(%rbp)
.LBB5_120:                              # %for.cond508
                                        #   Parent Loop BB5_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB5_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB5_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB5_120
.LBB5_123:                              # %for.end549
                                        #   in Loop: Header=BB5_118 Depth=1
	jmp	.LBB5_124
.LBB5_124:                              # %for.inc550
                                        #   in Loop: Header=BB5_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_118
.LBB5_125:                              # %for.end552
	jmp	.LBB5_126
.LBB5_126:                              # %if.end553
	movl	$0, -12(%rbp)
.LBB5_127:                              # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_129 Depth 2
                                        #       Child Loop BB5_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB5_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB5_127 Depth=1
	movl	$0, -24(%rbp)
.LBB5_129:                              # %for.cond558
                                        #   Parent Loop BB5_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB5_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB5_129 Depth=2
	movl	$0, -20(%rbp)
.LBB5_131:                              # %for.cond562
                                        #   Parent Loop BB5_127 Depth=1
                                        #     Parent Loop BB5_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB5_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB5_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB5_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB5_135
.LBB5_134:                              # %cond.false569
                                        #   in Loop: Header=BB5_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB5_135:                              # %cond.end570
                                        #   in Loop: Header=BB5_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB5_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_131
.LBB5_137:                              # %for.end598
                                        #   in Loop: Header=BB5_129 Depth=2
	jmp	.LBB5_138
.LBB5_138:                              # %for.inc599
                                        #   in Loop: Header=BB5_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_129
.LBB5_139:                              # %for.end601
                                        #   in Loop: Header=BB5_127 Depth=1
	jmp	.LBB5_140
.LBB5_140:                              # %for.inc602
                                        #   in Loop: Header=BB5_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_127
.LBB5_141:                              # %for.end604
	jmp	.LBB5_142
.LBB5_142:                              # %if.end605
	movl	$0, -16(%rbp)
.LBB5_143:                              # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_145 Depth 2
                                        #       Child Loop BB5_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB5_143 Depth=1
	movl	$0, -28(%rbp)
.LBB5_145:                              # %for.cond611
                                        #   Parent Loop BB5_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB5_145 Depth=2
	movl	$0, -20(%rbp)
.LBB5_147:                              # %for.cond617
                                        #   Parent Loop BB5_143 Depth=1
                                        #     Parent Loop BB5_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB5_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB5_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB5_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB5_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB5_151
.LBB5_150:                              # %if.then638
                                        #   in Loop: Header=BB5_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB5_154
.LBB5_151:                              # %if.end639
                                        #   in Loop: Header=BB5_147 Depth=3
	jmp	.LBB5_152
.LBB5_152:                              # %for.inc640
                                        #   in Loop: Header=BB5_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_147
.LBB5_153:                              # %for.end642.loopexit
                                        #   in Loop: Header=BB5_145 Depth=2
	jmp	.LBB5_154
.LBB5_154:                              # %for.end642
                                        #   in Loop: Header=BB5_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB5_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB5_143 Depth=1
	jmp	.LBB5_159
.LBB5_156:                              # %if.end646
                                        #   in Loop: Header=BB5_145 Depth=2
	jmp	.LBB5_157
.LBB5_157:                              # %for.inc647
                                        #   in Loop: Header=BB5_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB5_145
.LBB5_158:                              # %for.end649.loopexit
                                        #   in Loop: Header=BB5_143 Depth=1
	jmp	.LBB5_159
.LBB5_159:                              # %for.end649
                                        #   in Loop: Header=BB5_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB5_161
# %bb.160:                              # %if.then652
	jmp	.LBB5_164
.LBB5_161:                              # %if.end653
                                        #   in Loop: Header=BB5_143 Depth=1
	jmp	.LBB5_162
.LBB5_162:                              # %for.inc654
                                        #   in Loop: Header=BB5_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_143
.LBB5_163:                              # %for.end656.loopexit
	jmp	.LBB5_164
.LBB5_164:                              # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$86141632, -84(%rbp)    # imm = 0x5226AC0
	jne	.LBB5_166
.LBB5_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_166:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB5_165
.Lfunc_end5:
	.size	test_wp_B_slice.2, .Lfunc_end5-test_wp_B_slice.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.3
.LCPI6_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.3
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.3,@function
estimate_weighting_factor_B_slice.3:    # @estimate_weighting_factor_B_slice.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$22767854, -92(%rbp)    # imm = 0x15B68EE
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB6_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB6_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB6_4
.LBB6_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB6_4
.LBB6_4:                                # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB6_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB6_7
.LBB6_6:                                # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB6_7:                                # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB6_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_10 Depth 2
                                        #       Child Loop BB6_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB6_8 Depth=1
	movl	$0, -8(%rbp)
.LBB6_10:                               # %for.cond14
                                        #   Parent Loop BB6_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB6_10 Depth=2
	movl	$0, -16(%rbp)
.LBB6_12:                               # %for.cond19
                                        #   Parent Loop BB6_8 Depth=1
                                        #     Parent Loop BB6_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB6_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB6_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB6_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_12
.LBB6_15:                               # %for.end
                                        #   in Loop: Header=BB6_10 Depth=2
	jmp	.LBB6_16
.LBB6_16:                               # %for.inc50
                                        #   in Loop: Header=BB6_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_10
.LBB6_17:                               # %for.end52
                                        #   in Loop: Header=BB6_8 Depth=1
	jmp	.LBB6_18
.LBB6_18:                               # %for.inc53
                                        #   in Loop: Header=BB6_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_8
.LBB6_19:                               # %for.end55
	movl	$0, -4(%rbp)
.LBB6_20:                               # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_22 Depth 2
                                        #       Child Loop BB6_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB6_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB6_20 Depth=1
	movl	$0, -8(%rbp)
.LBB6_22:                               # %for.cond59
                                        #   Parent Loop BB6_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB6_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB6_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB6_29
.LBB6_25:                               # %cond.false70
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB6_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	$127, %eax
	jmp	.LBB6_28
.LBB6_27:                               # %cond.false80
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB6_28:                               # %cond.end88
                                        #   in Loop: Header=BB6_22 Depth=2
.LBB6_29:                               # %cond.end90
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB6_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB6_35
.LBB6_31:                               # %cond.false99
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB6_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	$127, %eax
	jmp	.LBB6_34
.LBB6_33:                               # %cond.false107
                                        #   in Loop: Header=BB6_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB6_34:                               # %cond.end113
                                        #   in Loop: Header=BB6_22 Depth=2
.LBB6_35:                               # %cond.end115
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB6_36:                               # %for.cond117
                                        #   Parent Loop BB6_20 Depth=1
                                        #     Parent Loop BB6_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB6_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB6_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB6_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB6_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB6_49
.LBB6_39:                               # %if.else154
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB6_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB6_45
.LBB6_41:                               # %cond.false160
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB6_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB6_44
.LBB6_43:                               # %cond.false166
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB6_44:                               # %cond.end170
                                        #   in Loop: Header=BB6_36 Depth=3
.LBB6_45:                               # %cond.end172
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB6_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB6_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB6_48
.LBB6_47:                               # %if.then198
                                        #   in Loop: Header=BB6_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB6_48:                               # %if.end208
                                        #   in Loop: Header=BB6_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB6_49:                               # %if.end238
                                        #   in Loop: Header=BB6_36 Depth=3
	jmp	.LBB6_50
.LBB6_50:                               # %for.inc239
                                        #   in Loop: Header=BB6_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_36
.LBB6_51:                               # %for.end241
                                        #   in Loop: Header=BB6_22 Depth=2
	jmp	.LBB6_52
.LBB6_52:                               # %for.inc242
                                        #   in Loop: Header=BB6_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_22
.LBB6_53:                               # %for.end244
                                        #   in Loop: Header=BB6_20 Depth=1
	jmp	.LBB6_54
.LBB6_54:                               # %for.inc245
                                        #   in Loop: Header=BB6_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_20
.LBB6_55:                               # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB6_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB6_57:                               # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_59 Depth 2
                                        #       Child Loop BB6_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB6_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB6_57 Depth=1
	movl	$0, -8(%rbp)
.LBB6_59:                               # %for.cond254
                                        #   Parent Loop BB6_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB6_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB6_59 Depth=2
	movl	$0, -20(%rbp)
.LBB6_61:                               # %for.cond257
                                        #   Parent Loop BB6_57 Depth=1
                                        #     Parent Loop BB6_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB6_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB6_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB6_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB6_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB6_65
.LBB6_64:                               # %cond.false262
                                        #   in Loop: Header=BB6_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB6_65:                               # %cond.end263
                                        #   in Loop: Header=BB6_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB6_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_61
.LBB6_67:                               # %for.end295
                                        #   in Loop: Header=BB6_59 Depth=2
	jmp	.LBB6_68
.LBB6_68:                               # %for.inc296
                                        #   in Loop: Header=BB6_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_59
.LBB6_69:                               # %for.end298
                                        #   in Loop: Header=BB6_57 Depth=1
	jmp	.LBB6_70
.LBB6_70:                               # %for.inc299
                                        #   in Loop: Header=BB6_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_57
.LBB6_71:                               # %for.end301
	movl	$0, -12(%rbp)
.LBB6_72:                               # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB6_72 Depth=1
	movl	$0, -24(%rbp)
.LBB6_74:                               # %for.cond306
                                        #   Parent Loop BB6_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB6_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB6_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_74
.LBB6_77:                               # %for.end346
                                        #   in Loop: Header=BB6_72 Depth=1
	jmp	.LBB6_78
.LBB6_78:                               # %for.inc347
                                        #   in Loop: Header=BB6_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_72
.LBB6_79:                               # %for.end349
	movl	$0, -4(%rbp)
.LBB6_80:                               # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_82 Depth 2
                                        #       Child Loop BB6_84 Depth 3
                                        #       Child Loop BB6_88 Depth 3
                                        #         Child Loop BB6_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB6_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB6_80 Depth=1
	movl	$0, -8(%rbp)
.LBB6_82:                               # %for.cond353
                                        #   Parent Loop BB6_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_84 Depth 3
                                        #       Child Loop BB6_88 Depth 3
                                        #         Child Loop BB6_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB6_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB6_82 Depth=2
	movl	$0, -16(%rbp)
.LBB6_84:                               # %for.cond356
                                        #   Parent Loop BB6_80 Depth=1
                                        #     Parent Loop BB6_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB6_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB6_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_84
.LBB6_87:                               # %for.end380
                                        #   in Loop: Header=BB6_82 Depth=2
	movl	$0, -16(%rbp)
.LBB6_88:                               # %for.cond381
                                        #   Parent Loop BB6_80 Depth=1
                                        #     Parent Loop BB6_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB6_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB6_88 Depth=3
	movl	$0, -32(%rbp)
.LBB6_90:                               # %for.cond387
                                        #   Parent Loop BB6_80 Depth=1
                                        #     Parent Loop BB6_82 Depth=2
                                        #       Parent Loop BB6_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB6_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB6_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB6_90
.LBB6_93:                               # %for.end421
                                        #   in Loop: Header=BB6_88 Depth=3
	jmp	.LBB6_94
.LBB6_94:                               # %for.inc422
                                        #   in Loop: Header=BB6_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_88
.LBB6_95:                               # %for.end424
                                        #   in Loop: Header=BB6_82 Depth=2
	jmp	.LBB6_96
.LBB6_96:                               # %for.inc425
                                        #   in Loop: Header=BB6_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_82
.LBB6_97:                               # %for.end427
                                        #   in Loop: Header=BB6_80 Depth=1
	jmp	.LBB6_98
.LBB6_98:                               # %for.inc428
                                        #   in Loop: Header=BB6_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_80
.LBB6_99:                               # %for.end430
	jmp	.LBB6_189
.LBB6_100:                              # %if.else431
	movl	$0, -4(%rbp)
.LBB6_101:                              # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB6_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB6_101 Depth=1
	movl	$0, -8(%rbp)
.LBB6_103:                              # %for.cond436
                                        #   Parent Loop BB6_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB6_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB6_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB6_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_103
.LBB6_106:                              # %for.end447
                                        #   in Loop: Header=BB6_101 Depth=1
	jmp	.LBB6_107
.LBB6_107:                              # %for.inc448
                                        #   in Loop: Header=BB6_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_101
.LBB6_108:                              # %for.end450
	movl	$0, -12(%rbp)
.LBB6_109:                              # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_111 Depth 2
                                        #       Child Loop BB6_113 Depth 3
                                        #       Child Loop BB6_123 Depth 3
                                        #       Child Loop BB6_133 Depth 3
                                        #         Child Loop BB6_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB6_109 Depth=1
	movl	$0, -16(%rbp)
.LBB6_111:                              # %for.cond456
                                        #   Parent Loop BB6_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_113 Depth 3
                                        #       Child Loop BB6_123 Depth 3
                                        #       Child Loop BB6_133 Depth 3
                                        #         Child Loop BB6_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB6_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB6_113:                              # %for.cond476
                                        #   Parent Loop BB6_109 Depth=1
                                        #     Parent Loop BB6_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB6_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB6_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_113
.LBB6_116:                              # %for.end493
                                        #   in Loop: Header=BB6_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB6_117
	jp	.LBB6_117
	jmp	.LBB6_118
.LBB6_117:                              # %if.then500
                                        #   in Loop: Header=BB6_111 Depth=2
	vmovsd	.LCPI6_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB6_119
.LBB6_118:                              # %if.else511
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB6_119:                              # %if.end513
                                        #   in Loop: Header=BB6_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB6_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB6_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB6_122
.LBB6_121:                              # %if.then519
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB6_122:                              # %if.end521
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB6_123:                              # %for.cond554
                                        #   Parent Loop BB6_109 Depth=1
                                        #     Parent Loop BB6_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB6_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB6_130
.LBB6_126:                              # %cond.false571
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB6_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB6_129
.LBB6_128:                              # %cond.false583
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB6_129:                              # %cond.end591
                                        #   in Loop: Header=BB6_123 Depth=3
.LBB6_130:                              # %cond.end593
                                        #   in Loop: Header=BB6_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB6_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_123
.LBB6_132:                              # %for.end600
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	$0, -4(%rbp)
.LBB6_133:                              # %for.cond601
                                        #   Parent Loop BB6_109 Depth=1
                                        #     Parent Loop BB6_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB6_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB6_133 Depth=3
	movl	$0, -8(%rbp)
.LBB6_135:                              # %for.cond608
                                        #   Parent Loop BB6_109 Depth=1
                                        #     Parent Loop BB6_111 Depth=2
                                        #       Parent Loop BB6_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB6_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB6_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB6_142
.LBB6_138:                              # %cond.false630
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB6_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB6_141
.LBB6_140:                              # %cond.false648
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB6_141:                              # %cond.end661
                                        #   in Loop: Header=BB6_135 Depth=4
.LBB6_142:                              # %cond.end663
                                        #   in Loop: Header=BB6_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB6_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_135
.LBB6_144:                              # %for.end675
                                        #   in Loop: Header=BB6_133 Depth=3
	jmp	.LBB6_145
.LBB6_145:                              # %for.inc676
                                        #   in Loop: Header=BB6_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_133
.LBB6_146:                              # %for.end678
                                        #   in Loop: Header=BB6_111 Depth=2
	jmp	.LBB6_147
.LBB6_147:                              # %for.inc679
                                        #   in Loop: Header=BB6_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_111
.LBB6_148:                              # %for.end681
                                        #   in Loop: Header=BB6_109 Depth=1
	jmp	.LBB6_149
.LBB6_149:                              # %for.inc682
                                        #   in Loop: Header=BB6_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_109
.LBB6_150:                              # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB6_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB6_152:                              # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_154 Depth 2
                                        #       Child Loop BB6_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB6_152 Depth=1
	movl	$0, -24(%rbp)
.LBB6_154:                              # %for.cond694
                                        #   Parent Loop BB6_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB6_154 Depth=2
	movl	$0, -20(%rbp)
.LBB6_156:                              # %for.cond700
                                        #   Parent Loop BB6_152 Depth=1
                                        #     Parent Loop BB6_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB6_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB6_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB6_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_156
.LBB6_159:                              # %for.end730
                                        #   in Loop: Header=BB6_154 Depth=2
	jmp	.LBB6_160
.LBB6_160:                              # %for.inc731
                                        #   in Loop: Header=BB6_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_154
.LBB6_161:                              # %for.end733
                                        #   in Loop: Header=BB6_152 Depth=1
	jmp	.LBB6_162
.LBB6_162:                              # %for.inc734
                                        #   in Loop: Header=BB6_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_152
.LBB6_163:                              # %for.end736
	jmp	.LBB6_173
.LBB6_164:                              # %if.else737
	movl	$0, -12(%rbp)
.LBB6_165:                              # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB6_165 Depth=1
	movl	$0, -24(%rbp)
.LBB6_167:                              # %for.cond743
                                        #   Parent Loop BB6_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB6_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB6_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_167
.LBB6_170:                              # %for.end784
                                        #   in Loop: Header=BB6_165 Depth=1
	jmp	.LBB6_171
.LBB6_171:                              # %for.inc785
                                        #   in Loop: Header=BB6_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_165
.LBB6_172:                              # %for.end787
	jmp	.LBB6_173
.LBB6_173:                              # %if.end788
	movl	$0, -4(%rbp)
.LBB6_174:                              # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_176 Depth 2
                                        #       Child Loop BB6_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB6_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB6_174 Depth=1
	movl	$0, -8(%rbp)
.LBB6_176:                              # %for.cond793
                                        #   Parent Loop BB6_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB6_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB6_176 Depth=2
	movl	$0, -20(%rbp)
.LBB6_178:                              # %for.cond797
                                        #   Parent Loop BB6_174 Depth=1
                                        #     Parent Loop BB6_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB6_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB6_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB6_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB6_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB6_182
.LBB6_181:                              # %cond.false804
                                        #   in Loop: Header=BB6_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB6_182:                              # %cond.end805
                                        #   in Loop: Header=BB6_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB6_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_178
.LBB6_184:                              # %for.end833
                                        #   in Loop: Header=BB6_176 Depth=2
	jmp	.LBB6_185
.LBB6_185:                              # %for.inc834
                                        #   in Loop: Header=BB6_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB6_176
.LBB6_186:                              # %for.end836
                                        #   in Loop: Header=BB6_174 Depth=1
	jmp	.LBB6_187
.LBB6_187:                              # %for.inc837
                                        #   in Loop: Header=BB6_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB6_174
.LBB6_188:                              # %for.end839
	jmp	.LBB6_189
.LBB6_189:                              # %if.end840
	cmpl	$22767854, -92(%rbp)    # imm = 0x15B68EE
	jne	.LBB6_191
.LBB6_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_191:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB6_190
.Lfunc_end6:
	.size	estimate_weighting_factor_B_slice.3, .Lfunc_end6-estimate_weighting_factor_B_slice.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.4
.LCPI7_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.4
	.p2align	4, 0x90
	.type	test_wp_B_slice.4,@function
test_wp_B_slice.4:                      # @test_wp_B_slice.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$451089620, -76(%rbp)   # imm = 0x1AE314D4
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB7_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB7_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB7_4
.LBB7_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB7_4
.LBB7_4:                                # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB7_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_7 Depth 2
                                        #       Child Loop BB7_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB7_5 Depth=1
	movl	$0, -24(%rbp)
.LBB7_7:                                # %for.cond9
                                        #   Parent Loop BB7_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB7_7 Depth=2
	movl	$0, -32(%rbp)
.LBB7_9:                                # %for.cond14
                                        #   Parent Loop BB7_5 Depth=1
                                        #     Parent Loop BB7_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB7_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB7_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB7_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB7_9
.LBB7_12:                               # %for.end
                                        #   in Loop: Header=BB7_7 Depth=2
	jmp	.LBB7_13
.LBB7_13:                               # %for.inc41
                                        #   in Loop: Header=BB7_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_7
.LBB7_14:                               # %for.end43
                                        #   in Loop: Header=BB7_5 Depth=1
	jmp	.LBB7_15
.LBB7_15:                               # %for.inc44
                                        #   in Loop: Header=BB7_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_5
.LBB7_16:                               # %for.end46
	movl	$0, -12(%rbp)
.LBB7_17:                               # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_19 Depth 2
                                        #       Child Loop BB7_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB7_17 Depth=1
	movl	$0, -24(%rbp)
.LBB7_19:                               # %for.cond50
                                        #   Parent Loop BB7_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB7_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB7_26
.LBB7_22:                               # %cond.false61
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB7_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$127, %eax
	jmp	.LBB7_25
.LBB7_24:                               # %cond.false71
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB7_25:                               # %cond.end79
                                        #   in Loop: Header=BB7_19 Depth=2
.LBB7_26:                               # %cond.end81
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB7_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB7_32
.LBB7_28:                               # %cond.false90
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB7_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$127, %eax
	jmp	.LBB7_31
.LBB7_30:                               # %cond.false98
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB7_31:                               # %cond.end104
                                        #   in Loop: Header=BB7_19 Depth=2
.LBB7_32:                               # %cond.end106
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB7_33:                               # %for.cond108
                                        #   Parent Loop BB7_17 Depth=1
                                        #     Parent Loop BB7_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB7_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB7_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB7_46
.LBB7_36:                               # %if.else
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB7_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB7_42
.LBB7_38:                               # %cond.false145
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB7_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB7_41
.LBB7_40:                               # %cond.false151
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB7_41:                               # %cond.end155
                                        #   in Loop: Header=BB7_33 Depth=3
.LBB7_42:                               # %cond.end157
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB7_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB7_45
.LBB7_44:                               # %if.then183
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB7_45:                               # %if.end
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB7_46:                               # %if.end220
                                        #   in Loop: Header=BB7_33 Depth=3
	jmp	.LBB7_47
.LBB7_47:                               # %for.inc221
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_33
.LBB7_48:                               # %for.end223
                                        #   in Loop: Header=BB7_19 Depth=2
	jmp	.LBB7_49
.LBB7_49:                               # %for.inc224
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_19
.LBB7_50:                               # %for.end226
                                        #   in Loop: Header=BB7_17 Depth=1
	jmp	.LBB7_51
.LBB7_51:                               # %for.inc227
                                        #   in Loop: Header=BB7_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_17
.LBB7_52:                               # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB7_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB7_54:                               # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_56 Depth 2
                                        #       Child Loop BB7_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB7_54 Depth=1
	movl	$0, -24(%rbp)
.LBB7_56:                               # %for.cond235
                                        #   Parent Loop BB7_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB7_56 Depth=2
	movl	$0, -20(%rbp)
.LBB7_58:                               # %for.cond238
                                        #   Parent Loop BB7_54 Depth=1
                                        #     Parent Loop BB7_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB7_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB7_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB7_62
.LBB7_61:                               # %cond.false243
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB7_62:                               # %cond.end244
                                        #   in Loop: Header=BB7_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -80(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_58
.LBB7_64:                               # %for.end276
                                        #   in Loop: Header=BB7_56 Depth=2
	jmp	.LBB7_65
.LBB7_65:                               # %for.inc277
                                        #   in Loop: Header=BB7_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_56
.LBB7_66:                               # %for.end279
                                        #   in Loop: Header=BB7_54 Depth=1
	jmp	.LBB7_67
.LBB7_67:                               # %for.inc280
                                        #   in Loop: Header=BB7_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_54
.LBB7_68:                               # %for.end282
	movl	$0, -16(%rbp)
.LBB7_69:                               # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB7_69 Depth=1
	movl	$0, -28(%rbp)
.LBB7_71:                               # %for.cond287
                                        #   Parent Loop BB7_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB7_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB7_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_71
.LBB7_74:                               # %for.end327
                                        #   in Loop: Header=BB7_69 Depth=1
	jmp	.LBB7_75
.LBB7_75:                               # %for.inc328
                                        #   in Loop: Header=BB7_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_69
.LBB7_76:                               # %for.end330
	jmp	.LBB7_142
.LBB7_77:                               # %if.else331
	movl	$0, -12(%rbp)
.LBB7_78:                               # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB7_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB7_78 Depth=1
	movl	$0, -24(%rbp)
.LBB7_80:                               # %for.cond335
                                        #   Parent Loop BB7_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB7_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB7_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB7_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_80
.LBB7_83:                               # %for.end345
                                        #   in Loop: Header=BB7_78 Depth=1
	jmp	.LBB7_84
.LBB7_84:                               # %for.inc346
                                        #   in Loop: Header=BB7_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_78
.LBB7_85:                               # %for.end348
	movl	$0, -16(%rbp)
.LBB7_86:                               # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_88 Depth 2
                                        #       Child Loop BB7_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB7_86 Depth=1
	movl	$0, -32(%rbp)
.LBB7_88:                               # %for.cond354
                                        #   Parent Loop BB7_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB7_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB7_90:                               # %for.cond372
                                        #   Parent Loop BB7_86 Depth=1
                                        #     Parent Loop BB7_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB7_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB7_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_90
.LBB7_93:                               # %for.end389
                                        #   in Loop: Header=BB7_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB7_94
	jp	.LBB7_94
	jmp	.LBB7_95
.LBB7_94:                               # %if.then396
                                        #   in Loop: Header=BB7_88 Depth=2
	vmovsd	.LCPI7_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_96
.LBB7_95:                               # %if.else406
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB7_96:                               # %if.end407
                                        #   in Loop: Header=BB7_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB7_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB7_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB7_99
.LBB7_98:                               # %if.then413
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB7_99:                               # %if.end414
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB7_88
.LBB7_101:                              # %for.end447
                                        #   in Loop: Header=BB7_86 Depth=1
	jmp	.LBB7_102
.LBB7_102:                              # %for.inc448
                                        #   in Loop: Header=BB7_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_86
.LBB7_103:                              # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB7_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB7_105:                              # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_107 Depth 2
                                        #       Child Loop BB7_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB7_105 Depth=1
	movl	$0, -28(%rbp)
.LBB7_107:                              # %for.cond459
                                        #   Parent Loop BB7_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB7_107 Depth=2
	movl	$0, -20(%rbp)
.LBB7_109:                              # %for.cond465
                                        #   Parent Loop BB7_105 Depth=1
                                        #     Parent Loop BB7_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB7_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB7_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_109
.LBB7_112:                              # %for.end495
                                        #   in Loop: Header=BB7_107 Depth=2
	jmp	.LBB7_113
.LBB7_113:                              # %for.inc496
                                        #   in Loop: Header=BB7_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_107
.LBB7_114:                              # %for.end498
                                        #   in Loop: Header=BB7_105 Depth=1
	jmp	.LBB7_115
.LBB7_115:                              # %for.inc499
                                        #   in Loop: Header=BB7_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_105
.LBB7_116:                              # %for.end501
	jmp	.LBB7_126
.LBB7_117:                              # %if.else502
	movl	$0, -16(%rbp)
.LBB7_118:                              # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB7_118 Depth=1
	movl	$0, -28(%rbp)
.LBB7_120:                              # %for.cond508
                                        #   Parent Loop BB7_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB7_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB7_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_120
.LBB7_123:                              # %for.end549
                                        #   in Loop: Header=BB7_118 Depth=1
	jmp	.LBB7_124
.LBB7_124:                              # %for.inc550
                                        #   in Loop: Header=BB7_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_118
.LBB7_125:                              # %for.end552
	jmp	.LBB7_126
.LBB7_126:                              # %if.end553
	movl	$0, -12(%rbp)
.LBB7_127:                              # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_129 Depth 2
                                        #       Child Loop BB7_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB7_127 Depth=1
	movl	$0, -24(%rbp)
.LBB7_129:                              # %for.cond558
                                        #   Parent Loop BB7_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB7_129 Depth=2
	movl	$0, -20(%rbp)
.LBB7_131:                              # %for.cond562
                                        #   Parent Loop BB7_127 Depth=1
                                        #     Parent Loop BB7_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB7_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB7_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB7_135
.LBB7_134:                              # %cond.false569
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB7_135:                              # %cond.end570
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	%eax, -80(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_131
.LBB7_137:                              # %for.end598
                                        #   in Loop: Header=BB7_129 Depth=2
	jmp	.LBB7_138
.LBB7_138:                              # %for.inc599
                                        #   in Loop: Header=BB7_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_129
.LBB7_139:                              # %for.end601
                                        #   in Loop: Header=BB7_127 Depth=1
	jmp	.LBB7_140
.LBB7_140:                              # %for.inc602
                                        #   in Loop: Header=BB7_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_127
.LBB7_141:                              # %for.end604
	jmp	.LBB7_142
.LBB7_142:                              # %if.end605
	movl	$0, -16(%rbp)
.LBB7_143:                              # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_145 Depth 2
                                        #       Child Loop BB7_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB7_143 Depth=1
	movl	$0, -28(%rbp)
.LBB7_145:                              # %for.cond611
                                        #   Parent Loop BB7_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	$0, -20(%rbp)
.LBB7_147:                              # %for.cond617
                                        #   Parent Loop BB7_143 Depth=1
                                        #     Parent Loop BB7_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB7_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB7_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB7_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB7_151
.LBB7_150:                              # %if.then638
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB7_154
.LBB7_151:                              # %if.end639
                                        #   in Loop: Header=BB7_147 Depth=3
	jmp	.LBB7_152
.LBB7_152:                              # %for.inc640
                                        #   in Loop: Header=BB7_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_147
.LBB7_153:                              # %for.end642.loopexit
                                        #   in Loop: Header=BB7_145 Depth=2
	jmp	.LBB7_154
.LBB7_154:                              # %for.end642
                                        #   in Loop: Header=BB7_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB7_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_159
.LBB7_156:                              # %if.end646
                                        #   in Loop: Header=BB7_145 Depth=2
	jmp	.LBB7_157
.LBB7_157:                              # %for.inc647
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_145
.LBB7_158:                              # %for.end649.loopexit
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_159
.LBB7_159:                              # %for.end649
                                        #   in Loop: Header=BB7_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB7_161
# %bb.160:                              # %if.then652
	jmp	.LBB7_164
.LBB7_161:                              # %if.end653
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_162
.LBB7_162:                              # %for.inc654
                                        #   in Loop: Header=BB7_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_143
.LBB7_163:                              # %for.end656.loopexit
	jmp	.LBB7_164
.LBB7_164:                              # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$451089620, -76(%rbp)   # imm = 0x1AE314D4
	jne	.LBB7_166
.LBB7_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_166:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB7_165
.Lfunc_end7:
	.size	test_wp_B_slice.4, .Lfunc_end7-test_wp_B_slice.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.5
.LCPI8_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.5
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.5,@function
estimate_weighting_factor_P_slice.5:    # @estimate_weighting_factor_P_slice.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$693914926, -60(%rbp)   # imm = 0x295C4D2E
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB8_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB8_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB8_4
.LBB8_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB8_4
.LBB8_4:                                # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB8_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_7 Depth 2
                                        #       Child Loop BB8_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB8_5 Depth=1
	movl	$0, -16(%rbp)
.LBB8_7:                                # %for.cond12
                                        #   Parent Loop BB8_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB8_7 Depth=2
	movl	$0, -4(%rbp)
.LBB8_9:                                # %for.cond17
                                        #   Parent Loop BB8_5 Depth=1
                                        #     Parent Loop BB8_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB8_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB8_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB8_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_9
.LBB8_12:                               # %for.end
                                        #   in Loop: Header=BB8_7 Depth=2
	jmp	.LBB8_13
.LBB8_13:                               # %for.inc48
                                        #   in Loop: Header=BB8_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB8_7
.LBB8_14:                               # %for.end50
                                        #   in Loop: Header=BB8_5 Depth=1
	jmp	.LBB8_15
.LBB8_15:                               # %for.inc51
                                        #   in Loop: Header=BB8_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_5
.LBB8_16:                               # %for.end53
	movl	$0, -12(%rbp)
.LBB8_17:                               # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB8_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB8_17 Depth=1
	movl	$0, -16(%rbp)
.LBB8_19:                               # %for.cond57
                                        #   Parent Loop BB8_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB8_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB8_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB8_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB8_19
.LBB8_22:                               # %for.end67
                                        #   in Loop: Header=BB8_17 Depth=1
	jmp	.LBB8_23
.LBB8_23:                               # %for.inc68
                                        #   in Loop: Header=BB8_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_17
.LBB8_24:                               # %for.end70
	movl	$0, -8(%rbp)
.LBB8_25:                               # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_27 Depth 2
                                        #       Child Loop BB8_29 Depth 3
                                        #       Child Loop BB8_48 Depth 3
                                        #       Child Loop BB8_58 Depth 3
                                        #         Child Loop BB8_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB8_25 Depth=1
	movl	$0, -4(%rbp)
.LBB8_27:                               # %for.cond76
                                        #   Parent Loop BB8_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_29 Depth 3
                                        #       Child Loop BB8_48 Depth 3
                                        #       Child Loop BB8_58 Depth 3
                                        #         Child Loop BB8_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB8_29:                               # %for.cond92
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB8_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB8_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_29
.LBB8_32:                               # %for.end106
                                        #   in Loop: Header=BB8_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB8_40
	jp	.LBB8_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB8_34
	jp	.LBB8_34
	jmp	.LBB8_35
.LBB8_34:                               # %if.then114
                                        #   in Loop: Header=BB8_27 Depth=2
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB8_36
.LBB8_35:                               # %if.else
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB8_36:                               # %if.end
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB8_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB8_39
.LBB8_38:                               # %if.then147
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB8_39:                               # %if.end154
                                        #   in Loop: Header=BB8_27 Depth=2
	jmp	.LBB8_47
.LBB8_40:                               # %if.else155
                                        #   in Loop: Header=BB8_27 Depth=2
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB8_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB8_46
.LBB8_42:                               # %cond.false179
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB8_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	$127, %eax
	jmp	.LBB8_45
.LBB8_44:                               # %cond.false188
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB8_45:                               # %cond.end194
                                        #   in Loop: Header=BB8_27 Depth=2
.LBB8_46:                               # %cond.end196
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB8_47:                               # %if.end209
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB8_48:                               # %for.cond222
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB8_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB8_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB8_55
.LBB8_51:                               # %cond.false248
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB8_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB8_54
.LBB8_53:                               # %cond.false270
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB8_54:                               # %cond.end288
                                        #   in Loop: Header=BB8_48 Depth=3
.LBB8_55:                               # %cond.end290
                                        #   in Loop: Header=BB8_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB8_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_48
.LBB8_57:                               # %for.end297
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	$0, -12(%rbp)
.LBB8_58:                               # %for.cond298
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB8_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB8_58 Depth=3
	movl	$0, -16(%rbp)
.LBB8_60:                               # %for.cond305
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        #       Parent Loop BB8_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB8_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB8_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB8_67
.LBB8_63:                               # %cond.false336
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB8_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB8_66
.LBB8_65:                               # %cond.false364
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB8_66:                               # %cond.end387
                                        #   in Loop: Header=BB8_60 Depth=4
.LBB8_67:                               # %cond.end389
                                        #   in Loop: Header=BB8_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB8_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB8_60
.LBB8_69:                               # %for.end400
                                        #   in Loop: Header=BB8_58 Depth=3
	jmp	.LBB8_70
.LBB8_70:                               # %for.inc401
                                        #   in Loop: Header=BB8_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_58
.LBB8_71:                               # %for.end403
                                        #   in Loop: Header=BB8_27 Depth=2
	jmp	.LBB8_72
.LBB8_72:                               # %for.inc404
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_27
.LBB8_73:                               # %for.end406
                                        #   in Loop: Header=BB8_25 Depth=1
	jmp	.LBB8_74
.LBB8_74:                               # %for.inc407
                                        #   in Loop: Header=BB8_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_25
.LBB8_75:                               # %for.end409
	movl	$0, -8(%rbp)
.LBB8_76:                               # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_78 Depth 2
                                        #       Child Loop BB8_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB8_76 Depth=1
	movl	$0, -24(%rbp)
.LBB8_78:                               # %for.cond415
                                        #   Parent Loop BB8_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB8_78 Depth=2
	movl	$0, -20(%rbp)
.LBB8_80:                               # %for.cond421
                                        #   Parent Loop BB8_76 Depth=1
                                        #     Parent Loop BB8_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB8_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB8_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB8_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB8_80
.LBB8_83:                               # %for.end451
                                        #   in Loop: Header=BB8_78 Depth=2
	jmp	.LBB8_84
.LBB8_84:                               # %for.inc452
                                        #   in Loop: Header=BB8_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_78
.LBB8_85:                               # %for.end454
                                        #   in Loop: Header=BB8_76 Depth=1
	jmp	.LBB8_86
.LBB8_86:                               # %for.inc455
                                        #   in Loop: Header=BB8_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_76
.LBB8_87:                               # %for.end457
	cmpl	$693914926, -60(%rbp)   # imm = 0x295C4D2E
	jne	.LBB8_89
.LBB8_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_89:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_88
.Lfunc_end8:
	.size	estimate_weighting_factor_P_slice.5, .Lfunc_end8-estimate_weighting_factor_P_slice.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.6
.LCPI9_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.6
	.p2align	4, 0x90
	.type	test_wp_P_slice.6,@function
test_wp_P_slice.6:                      # @test_wp_P_slice.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$992380861, -64(%rbp)   # imm = 0x3B2687BD
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB9_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB9_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB9_4
.LBB9_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB9_4
.LBB9_4:                                # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB9_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_7 Depth 2
                                        #       Child Loop BB9_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB9_5 Depth=1
	movl	$0, -24(%rbp)
.LBB9_7:                                # %for.cond9
                                        #   Parent Loop BB9_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB9_7 Depth=2
	movl	$0, -12(%rbp)
.LBB9_9:                                # %for.cond14
                                        #   Parent Loop BB9_5 Depth=1
                                        #     Parent Loop BB9_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB9_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB9_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB9_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_9
.LBB9_12:                               # %for.end
                                        #   in Loop: Header=BB9_7 Depth=2
	jmp	.LBB9_13
.LBB9_13:                               # %for.inc41
                                        #   in Loop: Header=BB9_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB9_7
.LBB9_14:                               # %for.end43
                                        #   in Loop: Header=BB9_5 Depth=1
	jmp	.LBB9_15
.LBB9_15:                               # %for.inc44
                                        #   in Loop: Header=BB9_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB9_5
.LBB9_16:                               # %for.end46
	movl	$0, -20(%rbp)
.LBB9_17:                               # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB9_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB9_17 Depth=1
	movl	$0, -24(%rbp)
.LBB9_19:                               # %for.cond50
                                        #   Parent Loop BB9_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB9_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB9_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB9_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB9_19
.LBB9_22:                               # %for.end60
                                        #   in Loop: Header=BB9_17 Depth=1
	jmp	.LBB9_23
.LBB9_23:                               # %for.inc61
                                        #   in Loop: Header=BB9_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB9_17
.LBB9_24:                               # %for.end63
	movl	$0, -16(%rbp)
.LBB9_25:                               # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_27 Depth 2
                                        #       Child Loop BB9_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB9_25 Depth=1
	movl	$0, -12(%rbp)
.LBB9_27:                               # %for.cond69
                                        #   Parent Loop BB9_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB9_29:                               # %for.cond85
                                        #   Parent Loop BB9_25 Depth=1
                                        #     Parent Loop BB9_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB9_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB9_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB9_29
.LBB9_32:                               # %for.end99
                                        #   in Loop: Header=BB9_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB9_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB9_34
	jp	.LBB9_34
	jmp	.LBB9_35
.LBB9_34:                               # %if.then106
                                        #   in Loop: Header=BB9_27 Depth=2
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB9_36
.LBB9_35:                               # %if.else
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB9_36:                               # %if.end
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB9_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB9_39
.LBB9_38:                               # %if.then137
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB9_39:                               # %if.end143
                                        #   in Loop: Header=BB9_27 Depth=2
	jmp	.LBB9_47
.LBB9_40:                               # %if.else144
                                        #   in Loop: Header=BB9_27 Depth=2
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB9_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB9_46
.LBB9_42:                               # %cond.false168
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB9_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	$127, %eax
	jmp	.LBB9_45
.LBB9_44:                               # %cond.false177
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB9_45:                               # %cond.end183
                                        #   in Loop: Header=BB9_27 Depth=2
.LBB9_46:                               # %cond.end185
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB9_47:                               # %if.end197
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_27
.LBB9_49:                               # %for.end210
                                        #   in Loop: Header=BB9_25 Depth=1
	jmp	.LBB9_50
.LBB9_50:                               # %for.inc211
                                        #   in Loop: Header=BB9_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_25
.LBB9_51:                               # %for.end213
	movl	$0, -16(%rbp)
.LBB9_52:                               # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_54 Depth 2
                                        #       Child Loop BB9_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB9_52 Depth=1
	movl	$0, -36(%rbp)
.LBB9_54:                               # %for.cond219
                                        #   Parent Loop BB9_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB9_54 Depth=2
	movl	$0, -32(%rbp)
.LBB9_56:                               # %for.cond225
                                        #   Parent Loop BB9_52 Depth=1
                                        #     Parent Loop BB9_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB9_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB9_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB9_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB9_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB9_60
.LBB9_59:                               # %if.then246
                                        #   in Loop: Header=BB9_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB9_63
.LBB9_60:                               # %if.end247
                                        #   in Loop: Header=BB9_56 Depth=3
	jmp	.LBB9_61
.LBB9_61:                               # %for.inc248
                                        #   in Loop: Header=BB9_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB9_56
.LBB9_62:                               # %for.end250.loopexit
                                        #   in Loop: Header=BB9_54 Depth=2
	jmp	.LBB9_63
.LBB9_63:                               # %for.end250
                                        #   in Loop: Header=BB9_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB9_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB9_52 Depth=1
	jmp	.LBB9_68
.LBB9_65:                               # %if.end254
                                        #   in Loop: Header=BB9_54 Depth=2
	jmp	.LBB9_66
.LBB9_66:                               # %for.inc255
                                        #   in Loop: Header=BB9_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB9_54
.LBB9_67:                               # %for.end257.loopexit
                                        #   in Loop: Header=BB9_52 Depth=1
	jmp	.LBB9_68
.LBB9_68:                               # %for.end257
                                        #   in Loop: Header=BB9_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB9_70
# %bb.69:                               # %if.then260
	jmp	.LBB9_73
.LBB9_70:                               # %if.end261
                                        #   in Loop: Header=BB9_52 Depth=1
	jmp	.LBB9_71
.LBB9_71:                               # %for.inc262
                                        #   in Loop: Header=BB9_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_52
.LBB9_72:                               # %for.end264.loopexit
	jmp	.LBB9_73
.LBB9_73:                               # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$992380861, -64(%rbp)   # imm = 0x3B2687BD
	jne	.LBB9_75
.LBB9_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_75:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_74
.Lfunc_end9:
	.size	test_wp_P_slice.6, .Lfunc_end9-test_wp_P_slice.6
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.7
.LCPI10_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.7
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.7,@function
estimate_weighting_factor_B_slice.7:    # @estimate_weighting_factor_B_slice.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$530358452, -88(%rbp)   # imm = 0x1F9CA0B4
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB10_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB10_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB10_4
.LBB10_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB10_4
.LBB10_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB10_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB10_7
.LBB10_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB10_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB10_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_10 Depth 2
                                        #       Child Loop BB10_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	$0, -8(%rbp)
.LBB10_10:                              # %for.cond14
                                        #   Parent Loop BB10_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB10_10 Depth=2
	movl	$0, -16(%rbp)
.LBB10_12:                              # %for.cond19
                                        #   Parent Loop BB10_8 Depth=1
                                        #     Parent Loop BB10_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB10_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB10_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB10_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_12
.LBB10_15:                              # %for.end
                                        #   in Loop: Header=BB10_10 Depth=2
	jmp	.LBB10_16
.LBB10_16:                              # %for.inc50
                                        #   in Loop: Header=BB10_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_10
.LBB10_17:                              # %for.end52
                                        #   in Loop: Header=BB10_8 Depth=1
	jmp	.LBB10_18
.LBB10_18:                              # %for.inc53
                                        #   in Loop: Header=BB10_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_8
.LBB10_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB10_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_22 Depth 2
                                        #       Child Loop BB10_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB10_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB10_20 Depth=1
	movl	$0, -8(%rbp)
.LBB10_22:                              # %for.cond59
                                        #   Parent Loop BB10_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB10_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB10_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB10_29
.LBB10_25:                              # %cond.false70
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB10_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	$127, %eax
	jmp	.LBB10_28
.LBB10_27:                              # %cond.false80
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB10_28:                              # %cond.end88
                                        #   in Loop: Header=BB10_22 Depth=2
.LBB10_29:                              # %cond.end90
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB10_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB10_35
.LBB10_31:                              # %cond.false99
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB10_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	$127, %eax
	jmp	.LBB10_34
.LBB10_33:                              # %cond.false107
                                        #   in Loop: Header=BB10_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB10_34:                              # %cond.end113
                                        #   in Loop: Header=BB10_22 Depth=2
.LBB10_35:                              # %cond.end115
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB10_36:                              # %for.cond117
                                        #   Parent Loop BB10_20 Depth=1
                                        #     Parent Loop BB10_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB10_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB10_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB10_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB10_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB10_49
.LBB10_39:                              # %if.else154
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB10_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB10_45
.LBB10_41:                              # %cond.false160
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB10_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB10_44
.LBB10_43:                              # %cond.false166
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB10_44:                              # %cond.end170
                                        #   in Loop: Header=BB10_36 Depth=3
.LBB10_45:                              # %cond.end172
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB10_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB10_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB10_48
.LBB10_47:                              # %if.then198
                                        #   in Loop: Header=BB10_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB10_48:                              # %if.end208
                                        #   in Loop: Header=BB10_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB10_49:                              # %if.end238
                                        #   in Loop: Header=BB10_36 Depth=3
	jmp	.LBB10_50
.LBB10_50:                              # %for.inc239
                                        #   in Loop: Header=BB10_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_36
.LBB10_51:                              # %for.end241
                                        #   in Loop: Header=BB10_22 Depth=2
	jmp	.LBB10_52
.LBB10_52:                              # %for.inc242
                                        #   in Loop: Header=BB10_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_22
.LBB10_53:                              # %for.end244
                                        #   in Loop: Header=BB10_20 Depth=1
	jmp	.LBB10_54
.LBB10_54:                              # %for.inc245
                                        #   in Loop: Header=BB10_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_20
.LBB10_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB10_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB10_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_59 Depth 2
                                        #       Child Loop BB10_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB10_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB10_57 Depth=1
	movl	$0, -8(%rbp)
.LBB10_59:                              # %for.cond254
                                        #   Parent Loop BB10_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB10_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB10_59 Depth=2
	movl	$0, -20(%rbp)
.LBB10_61:                              # %for.cond257
                                        #   Parent Loop BB10_57 Depth=1
                                        #     Parent Loop BB10_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB10_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB10_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB10_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB10_65
.LBB10_64:                              # %cond.false262
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB10_65:                              # %cond.end263
                                        #   in Loop: Header=BB10_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB10_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_61
.LBB10_67:                              # %for.end295
                                        #   in Loop: Header=BB10_59 Depth=2
	jmp	.LBB10_68
.LBB10_68:                              # %for.inc296
                                        #   in Loop: Header=BB10_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_59
.LBB10_69:                              # %for.end298
                                        #   in Loop: Header=BB10_57 Depth=1
	jmp	.LBB10_70
.LBB10_70:                              # %for.inc299
                                        #   in Loop: Header=BB10_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_57
.LBB10_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB10_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB10_72 Depth=1
	movl	$0, -24(%rbp)
.LBB10_74:                              # %for.cond306
                                        #   Parent Loop BB10_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB10_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB10_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_74
.LBB10_77:                              # %for.end346
                                        #   in Loop: Header=BB10_72 Depth=1
	jmp	.LBB10_78
.LBB10_78:                              # %for.inc347
                                        #   in Loop: Header=BB10_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_72
.LBB10_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB10_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_82 Depth 2
                                        #       Child Loop BB10_84 Depth 3
                                        #       Child Loop BB10_88 Depth 3
                                        #         Child Loop BB10_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB10_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB10_80 Depth=1
	movl	$0, -8(%rbp)
.LBB10_82:                              # %for.cond353
                                        #   Parent Loop BB10_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_84 Depth 3
                                        #       Child Loop BB10_88 Depth 3
                                        #         Child Loop BB10_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB10_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	$0, -16(%rbp)
.LBB10_84:                              # %for.cond356
                                        #   Parent Loop BB10_80 Depth=1
                                        #     Parent Loop BB10_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB10_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB10_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_84
.LBB10_87:                              # %for.end380
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	$0, -16(%rbp)
.LBB10_88:                              # %for.cond381
                                        #   Parent Loop BB10_80 Depth=1
                                        #     Parent Loop BB10_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB10_88 Depth=3
	movl	$0, -32(%rbp)
.LBB10_90:                              # %for.cond387
                                        #   Parent Loop BB10_80 Depth=1
                                        #     Parent Loop BB10_82 Depth=2
                                        #       Parent Loop BB10_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB10_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB10_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB10_90
.LBB10_93:                              # %for.end421
                                        #   in Loop: Header=BB10_88 Depth=3
	jmp	.LBB10_94
.LBB10_94:                              # %for.inc422
                                        #   in Loop: Header=BB10_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_88
.LBB10_95:                              # %for.end424
                                        #   in Loop: Header=BB10_82 Depth=2
	jmp	.LBB10_96
.LBB10_96:                              # %for.inc425
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_82
.LBB10_97:                              # %for.end427
                                        #   in Loop: Header=BB10_80 Depth=1
	jmp	.LBB10_98
.LBB10_98:                              # %for.inc428
                                        #   in Loop: Header=BB10_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_80
.LBB10_99:                              # %for.end430
	jmp	.LBB10_189
.LBB10_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB10_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB10_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB10_101 Depth=1
	movl	$0, -8(%rbp)
.LBB10_103:                             # %for.cond436
                                        #   Parent Loop BB10_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB10_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB10_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB10_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_103
.LBB10_106:                             # %for.end447
                                        #   in Loop: Header=BB10_101 Depth=1
	jmp	.LBB10_107
.LBB10_107:                             # %for.inc448
                                        #   in Loop: Header=BB10_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_101
.LBB10_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB10_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_111 Depth 2
                                        #       Child Loop BB10_113 Depth 3
                                        #       Child Loop BB10_123 Depth 3
                                        #       Child Loop BB10_133 Depth 3
                                        #         Child Loop BB10_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB10_109 Depth=1
	movl	$0, -16(%rbp)
.LBB10_111:                             # %for.cond456
                                        #   Parent Loop BB10_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_113 Depth 3
                                        #       Child Loop BB10_123 Depth 3
                                        #       Child Loop BB10_133 Depth 3
                                        #         Child Loop BB10_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB10_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB10_113:                             # %for.cond476
                                        #   Parent Loop BB10_109 Depth=1
                                        #     Parent Loop BB10_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB10_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB10_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_113
.LBB10_116:                             # %for.end493
                                        #   in Loop: Header=BB10_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB10_117
	jp	.LBB10_117
	jmp	.LBB10_118
.LBB10_117:                             # %if.then500
                                        #   in Loop: Header=BB10_111 Depth=2
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB10_119
.LBB10_118:                             # %if.else511
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB10_119:                             # %if.end513
                                        #   in Loop: Header=BB10_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB10_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB10_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB10_122
.LBB10_121:                             # %if.then519
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB10_122:                             # %if.end521
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB10_123:                             # %for.cond554
                                        #   Parent Loop BB10_109 Depth=1
                                        #     Parent Loop BB10_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB10_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB10_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB10_130
.LBB10_126:                             # %cond.false571
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB10_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_129
.LBB10_128:                             # %cond.false583
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB10_129:                             # %cond.end591
                                        #   in Loop: Header=BB10_123 Depth=3
.LBB10_130:                             # %cond.end593
                                        #   in Loop: Header=BB10_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB10_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_123
.LBB10_132:                             # %for.end600
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	$0, -4(%rbp)
.LBB10_133:                             # %for.cond601
                                        #   Parent Loop BB10_109 Depth=1
                                        #     Parent Loop BB10_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB10_133 Depth=3
	movl	$0, -8(%rbp)
.LBB10_135:                             # %for.cond608
                                        #   Parent Loop BB10_109 Depth=1
                                        #     Parent Loop BB10_111 Depth=2
                                        #       Parent Loop BB10_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB10_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB10_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB10_142
.LBB10_138:                             # %cond.false630
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB10_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_141
.LBB10_140:                             # %cond.false648
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB10_141:                             # %cond.end661
                                        #   in Loop: Header=BB10_135 Depth=4
.LBB10_142:                             # %cond.end663
                                        #   in Loop: Header=BB10_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB10_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_135
.LBB10_144:                             # %for.end675
                                        #   in Loop: Header=BB10_133 Depth=3
	jmp	.LBB10_145
.LBB10_145:                             # %for.inc676
                                        #   in Loop: Header=BB10_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_133
.LBB10_146:                             # %for.end678
                                        #   in Loop: Header=BB10_111 Depth=2
	jmp	.LBB10_147
.LBB10_147:                             # %for.inc679
                                        #   in Loop: Header=BB10_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_111
.LBB10_148:                             # %for.end681
                                        #   in Loop: Header=BB10_109 Depth=1
	jmp	.LBB10_149
.LBB10_149:                             # %for.inc682
                                        #   in Loop: Header=BB10_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_109
.LBB10_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB10_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB10_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_154 Depth 2
                                        #       Child Loop BB10_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB10_152 Depth=1
	movl	$0, -24(%rbp)
.LBB10_154:                             # %for.cond694
                                        #   Parent Loop BB10_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB10_154 Depth=2
	movl	$0, -20(%rbp)
.LBB10_156:                             # %for.cond700
                                        #   Parent Loop BB10_152 Depth=1
                                        #     Parent Loop BB10_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB10_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB10_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB10_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_156
.LBB10_159:                             # %for.end730
                                        #   in Loop: Header=BB10_154 Depth=2
	jmp	.LBB10_160
.LBB10_160:                             # %for.inc731
                                        #   in Loop: Header=BB10_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_154
.LBB10_161:                             # %for.end733
                                        #   in Loop: Header=BB10_152 Depth=1
	jmp	.LBB10_162
.LBB10_162:                             # %for.inc734
                                        #   in Loop: Header=BB10_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_152
.LBB10_163:                             # %for.end736
	jmp	.LBB10_173
.LBB10_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB10_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB10_165 Depth=1
	movl	$0, -24(%rbp)
.LBB10_167:                             # %for.cond743
                                        #   Parent Loop BB10_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB10_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB10_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_167
.LBB10_170:                             # %for.end784
                                        #   in Loop: Header=BB10_165 Depth=1
	jmp	.LBB10_171
.LBB10_171:                             # %for.inc785
                                        #   in Loop: Header=BB10_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_165
.LBB10_172:                             # %for.end787
	jmp	.LBB10_173
.LBB10_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB10_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_176 Depth 2
                                        #       Child Loop BB10_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB10_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB10_174 Depth=1
	movl	$0, -8(%rbp)
.LBB10_176:                             # %for.cond793
                                        #   Parent Loop BB10_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB10_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB10_176 Depth=2
	movl	$0, -20(%rbp)
.LBB10_178:                             # %for.cond797
                                        #   Parent Loop BB10_174 Depth=1
                                        #     Parent Loop BB10_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB10_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB10_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB10_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB10_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB10_182
.LBB10_181:                             # %cond.false804
                                        #   in Loop: Header=BB10_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB10_182:                             # %cond.end805
                                        #   in Loop: Header=BB10_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB10_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_178
.LBB10_184:                             # %for.end833
                                        #   in Loop: Header=BB10_176 Depth=2
	jmp	.LBB10_185
.LBB10_185:                             # %for.inc834
                                        #   in Loop: Header=BB10_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_176
.LBB10_186:                             # %for.end836
                                        #   in Loop: Header=BB10_174 Depth=1
	jmp	.LBB10_187
.LBB10_187:                             # %for.inc837
                                        #   in Loop: Header=BB10_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_174
.LBB10_188:                             # %for.end839
	jmp	.LBB10_189
.LBB10_189:                             # %if.end840
	cmpl	$530358452, -88(%rbp)   # imm = 0x1F9CA0B4
	jne	.LBB10_191
.LBB10_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_190
.Lfunc_end10:
	.size	estimate_weighting_factor_B_slice.7, .Lfunc_end10-estimate_weighting_factor_B_slice.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.8
.LCPI11_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.8
	.p2align	4, 0x90
	.type	test_wp_P_slice.8,@function
test_wp_P_slice.8:                      # @test_wp_P_slice.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1142710714, -64(%rbp)  # imm = 0x441C61BA
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB11_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB11_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB11_4
.LBB11_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB11_4
.LBB11_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB11_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_7 Depth 2
                                        #       Child Loop BB11_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB11_5 Depth=1
	movl	$0, -24(%rbp)
.LBB11_7:                               # %for.cond9
                                        #   Parent Loop BB11_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB11_7 Depth=2
	movl	$0, -12(%rbp)
.LBB11_9:                               # %for.cond14
                                        #   Parent Loop BB11_5 Depth=1
                                        #     Parent Loop BB11_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB11_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB11_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB11_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_9
.LBB11_12:                              # %for.end
                                        #   in Loop: Header=BB11_7 Depth=2
	jmp	.LBB11_13
.LBB11_13:                              # %for.inc41
                                        #   in Loop: Header=BB11_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_7
.LBB11_14:                              # %for.end43
                                        #   in Loop: Header=BB11_5 Depth=1
	jmp	.LBB11_15
.LBB11_15:                              # %for.inc44
                                        #   in Loop: Header=BB11_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_5
.LBB11_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB11_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB11_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	$0, -24(%rbp)
.LBB11_19:                              # %for.cond50
                                        #   Parent Loop BB11_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB11_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB11_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB11_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_19
.LBB11_22:                              # %for.end60
                                        #   in Loop: Header=BB11_17 Depth=1
	jmp	.LBB11_23
.LBB11_23:                              # %for.inc61
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_17
.LBB11_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB11_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_27 Depth 2
                                        #       Child Loop BB11_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB11_25 Depth=1
	movl	$0, -12(%rbp)
.LBB11_27:                              # %for.cond69
                                        #   Parent Loop BB11_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB11_29:                              # %for.cond85
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB11_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB11_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_29
.LBB11_32:                              # %for.end99
                                        #   in Loop: Header=BB11_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB11_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB11_34
	jp	.LBB11_34
	jmp	.LBB11_35
.LBB11_34:                              # %if.then106
                                        #   in Loop: Header=BB11_27 Depth=2
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB11_36
.LBB11_35:                              # %if.else
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB11_36:                              # %if.end
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB11_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB11_39
.LBB11_38:                              # %if.then137
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB11_39:                              # %if.end143
                                        #   in Loop: Header=BB11_27 Depth=2
	jmp	.LBB11_47
.LBB11_40:                              # %if.else144
                                        #   in Loop: Header=BB11_27 Depth=2
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB11_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB11_46
.LBB11_42:                              # %cond.false168
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB11_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	$127, %eax
	jmp	.LBB11_45
.LBB11_44:                              # %cond.false177
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB11_45:                              # %cond.end183
                                        #   in Loop: Header=BB11_27 Depth=2
.LBB11_46:                              # %cond.end185
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB11_47:                              # %if.end197
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_27
.LBB11_49:                              # %for.end210
                                        #   in Loop: Header=BB11_25 Depth=1
	jmp	.LBB11_50
.LBB11_50:                              # %for.inc211
                                        #   in Loop: Header=BB11_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_25
.LBB11_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB11_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_54 Depth 2
                                        #       Child Loop BB11_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB11_52 Depth=1
	movl	$0, -36(%rbp)
.LBB11_54:                              # %for.cond219
                                        #   Parent Loop BB11_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB11_54 Depth=2
	movl	$0, -32(%rbp)
.LBB11_56:                              # %for.cond225
                                        #   Parent Loop BB11_52 Depth=1
                                        #     Parent Loop BB11_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB11_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB11_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB11_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB11_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB11_60
.LBB11_59:                              # %if.then246
                                        #   in Loop: Header=BB11_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB11_63
.LBB11_60:                              # %if.end247
                                        #   in Loop: Header=BB11_56 Depth=3
	jmp	.LBB11_61
.LBB11_61:                              # %for.inc248
                                        #   in Loop: Header=BB11_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB11_56
.LBB11_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB11_54 Depth=2
	jmp	.LBB11_63
.LBB11_63:                              # %for.end250
                                        #   in Loop: Header=BB11_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB11_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB11_52 Depth=1
	jmp	.LBB11_68
.LBB11_65:                              # %if.end254
                                        #   in Loop: Header=BB11_54 Depth=2
	jmp	.LBB11_66
.LBB11_66:                              # %for.inc255
                                        #   in Loop: Header=BB11_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB11_54
.LBB11_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB11_52 Depth=1
	jmp	.LBB11_68
.LBB11_68:                              # %for.end257
                                        #   in Loop: Header=BB11_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB11_70
# %bb.69:                               # %if.then260
	jmp	.LBB11_73
.LBB11_70:                              # %if.end261
                                        #   in Loop: Header=BB11_52 Depth=1
	jmp	.LBB11_71
.LBB11_71:                              # %for.inc262
                                        #   in Loop: Header=BB11_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_52
.LBB11_72:                              # %for.end264.loopexit
	jmp	.LBB11_73
.LBB11_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1142710714, -64(%rbp)  # imm = 0x441C61BA
	jne	.LBB11_75
.LBB11_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_74
.Lfunc_end11:
	.size	test_wp_P_slice.8, .Lfunc_end11-test_wp_P_slice.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.9
.LCPI12_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.9
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.9,@function
estimate_weighting_factor_B_slice.9:    # @estimate_weighting_factor_B_slice.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$534846105, -84(%rbp)   # imm = 0x1FE11A99
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB12_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB12_4
.LBB12_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB12_4
.LBB12_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB12_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB12_7
.LBB12_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB12_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB12_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_10 Depth 2
                                        #       Child Loop BB12_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB12_8 Depth=1
	movl	$0, -8(%rbp)
.LBB12_10:                              # %for.cond14
                                        #   Parent Loop BB12_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB12_10 Depth=2
	movl	$0, -16(%rbp)
.LBB12_12:                              # %for.cond19
                                        #   Parent Loop BB12_8 Depth=1
                                        #     Parent Loop BB12_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB12_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB12_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB12_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_12
.LBB12_15:                              # %for.end
                                        #   in Loop: Header=BB12_10 Depth=2
	jmp	.LBB12_16
.LBB12_16:                              # %for.inc50
                                        #   in Loop: Header=BB12_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_10
.LBB12_17:                              # %for.end52
                                        #   in Loop: Header=BB12_8 Depth=1
	jmp	.LBB12_18
.LBB12_18:                              # %for.inc53
                                        #   in Loop: Header=BB12_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_8
.LBB12_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB12_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_22 Depth 2
                                        #       Child Loop BB12_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB12_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB12_20 Depth=1
	movl	$0, -8(%rbp)
.LBB12_22:                              # %for.cond59
                                        #   Parent Loop BB12_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB12_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB12_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB12_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB12_29
.LBB12_25:                              # %cond.false70
                                        #   in Loop: Header=BB12_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB12_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	$127, %eax
	jmp	.LBB12_28
.LBB12_27:                              # %cond.false80
                                        #   in Loop: Header=BB12_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB12_28:                              # %cond.end88
                                        #   in Loop: Header=BB12_22 Depth=2
.LBB12_29:                              # %cond.end90
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB12_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB12_35
.LBB12_31:                              # %cond.false99
                                        #   in Loop: Header=BB12_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB12_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	$127, %eax
	jmp	.LBB12_34
.LBB12_33:                              # %cond.false107
                                        #   in Loop: Header=BB12_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB12_34:                              # %cond.end113
                                        #   in Loop: Header=BB12_22 Depth=2
.LBB12_35:                              # %cond.end115
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB12_36:                              # %for.cond117
                                        #   Parent Loop BB12_20 Depth=1
                                        #     Parent Loop BB12_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB12_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB12_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB12_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB12_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB12_49
.LBB12_39:                              # %if.else154
                                        #   in Loop: Header=BB12_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB12_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB12_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB12_45
.LBB12_41:                              # %cond.false160
                                        #   in Loop: Header=BB12_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB12_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB12_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB12_44
.LBB12_43:                              # %cond.false166
                                        #   in Loop: Header=BB12_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB12_44:                              # %cond.end170
                                        #   in Loop: Header=BB12_36 Depth=3
.LBB12_45:                              # %cond.end172
                                        #   in Loop: Header=BB12_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB12_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB12_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB12_48
.LBB12_47:                              # %if.then198
                                        #   in Loop: Header=BB12_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB12_48:                              # %if.end208
                                        #   in Loop: Header=BB12_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB12_49:                              # %if.end238
                                        #   in Loop: Header=BB12_36 Depth=3
	jmp	.LBB12_50
.LBB12_50:                              # %for.inc239
                                        #   in Loop: Header=BB12_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_36
.LBB12_51:                              # %for.end241
                                        #   in Loop: Header=BB12_22 Depth=2
	jmp	.LBB12_52
.LBB12_52:                              # %for.inc242
                                        #   in Loop: Header=BB12_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_22
.LBB12_53:                              # %for.end244
                                        #   in Loop: Header=BB12_20 Depth=1
	jmp	.LBB12_54
.LBB12_54:                              # %for.inc245
                                        #   in Loop: Header=BB12_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_20
.LBB12_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB12_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB12_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_59 Depth 2
                                        #       Child Loop BB12_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB12_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB12_57 Depth=1
	movl	$0, -8(%rbp)
.LBB12_59:                              # %for.cond254
                                        #   Parent Loop BB12_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB12_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB12_59 Depth=2
	movl	$0, -20(%rbp)
.LBB12_61:                              # %for.cond257
                                        #   Parent Loop BB12_57 Depth=1
                                        #     Parent Loop BB12_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB12_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB12_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB12_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB12_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB12_65
.LBB12_64:                              # %cond.false262
                                        #   in Loop: Header=BB12_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB12_65:                              # %cond.end263
                                        #   in Loop: Header=BB12_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB12_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_61
.LBB12_67:                              # %for.end295
                                        #   in Loop: Header=BB12_59 Depth=2
	jmp	.LBB12_68
.LBB12_68:                              # %for.inc296
                                        #   in Loop: Header=BB12_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_59
.LBB12_69:                              # %for.end298
                                        #   in Loop: Header=BB12_57 Depth=1
	jmp	.LBB12_70
.LBB12_70:                              # %for.inc299
                                        #   in Loop: Header=BB12_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_57
.LBB12_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB12_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB12_72 Depth=1
	movl	$0, -24(%rbp)
.LBB12_74:                              # %for.cond306
                                        #   Parent Loop BB12_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB12_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB12_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_74
.LBB12_77:                              # %for.end346
                                        #   in Loop: Header=BB12_72 Depth=1
	jmp	.LBB12_78
.LBB12_78:                              # %for.inc347
                                        #   in Loop: Header=BB12_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_72
.LBB12_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB12_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_82 Depth 2
                                        #       Child Loop BB12_84 Depth 3
                                        #       Child Loop BB12_88 Depth 3
                                        #         Child Loop BB12_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB12_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB12_80 Depth=1
	movl	$0, -8(%rbp)
.LBB12_82:                              # %for.cond353
                                        #   Parent Loop BB12_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_84 Depth 3
                                        #       Child Loop BB12_88 Depth 3
                                        #         Child Loop BB12_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB12_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB12_82 Depth=2
	movl	$0, -16(%rbp)
.LBB12_84:                              # %for.cond356
                                        #   Parent Loop BB12_80 Depth=1
                                        #     Parent Loop BB12_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB12_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB12_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_84
.LBB12_87:                              # %for.end380
                                        #   in Loop: Header=BB12_82 Depth=2
	movl	$0, -16(%rbp)
.LBB12_88:                              # %for.cond381
                                        #   Parent Loop BB12_80 Depth=1
                                        #     Parent Loop BB12_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB12_88 Depth=3
	movl	$0, -32(%rbp)
.LBB12_90:                              # %for.cond387
                                        #   Parent Loop BB12_80 Depth=1
                                        #     Parent Loop BB12_82 Depth=2
                                        #       Parent Loop BB12_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB12_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB12_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB12_90
.LBB12_93:                              # %for.end421
                                        #   in Loop: Header=BB12_88 Depth=3
	jmp	.LBB12_94
.LBB12_94:                              # %for.inc422
                                        #   in Loop: Header=BB12_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_88
.LBB12_95:                              # %for.end424
                                        #   in Loop: Header=BB12_82 Depth=2
	jmp	.LBB12_96
.LBB12_96:                              # %for.inc425
                                        #   in Loop: Header=BB12_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_82
.LBB12_97:                              # %for.end427
                                        #   in Loop: Header=BB12_80 Depth=1
	jmp	.LBB12_98
.LBB12_98:                              # %for.inc428
                                        #   in Loop: Header=BB12_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_80
.LBB12_99:                              # %for.end430
	jmp	.LBB12_189
.LBB12_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB12_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB12_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB12_101 Depth=1
	movl	$0, -8(%rbp)
.LBB12_103:                             # %for.cond436
                                        #   Parent Loop BB12_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB12_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB12_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB12_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_103
.LBB12_106:                             # %for.end447
                                        #   in Loop: Header=BB12_101 Depth=1
	jmp	.LBB12_107
.LBB12_107:                             # %for.inc448
                                        #   in Loop: Header=BB12_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_101
.LBB12_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB12_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_111 Depth 2
                                        #       Child Loop BB12_113 Depth 3
                                        #       Child Loop BB12_123 Depth 3
                                        #       Child Loop BB12_133 Depth 3
                                        #         Child Loop BB12_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB12_109 Depth=1
	movl	$0, -16(%rbp)
.LBB12_111:                             # %for.cond456
                                        #   Parent Loop BB12_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_113 Depth 3
                                        #       Child Loop BB12_123 Depth 3
                                        #       Child Loop BB12_133 Depth 3
                                        #         Child Loop BB12_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB12_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB12_113:                             # %for.cond476
                                        #   Parent Loop BB12_109 Depth=1
                                        #     Parent Loop BB12_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB12_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB12_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_113
.LBB12_116:                             # %for.end493
                                        #   in Loop: Header=BB12_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB12_117
	jp	.LBB12_117
	jmp	.LBB12_118
.LBB12_117:                             # %if.then500
                                        #   in Loop: Header=BB12_111 Depth=2
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB12_119
.LBB12_118:                             # %if.else511
                                        #   in Loop: Header=BB12_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB12_119:                             # %if.end513
                                        #   in Loop: Header=BB12_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB12_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB12_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB12_122
.LBB12_121:                             # %if.then519
                                        #   in Loop: Header=BB12_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB12_122:                             # %if.end521
                                        #   in Loop: Header=BB12_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB12_123:                             # %for.cond554
                                        #   Parent Loop BB12_109 Depth=1
                                        #     Parent Loop BB12_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB12_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB12_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB12_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB12_130
.LBB12_126:                             # %cond.false571
                                        #   in Loop: Header=BB12_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB12_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB12_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_129
.LBB12_128:                             # %cond.false583
                                        #   in Loop: Header=BB12_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB12_129:                             # %cond.end591
                                        #   in Loop: Header=BB12_123 Depth=3
.LBB12_130:                             # %cond.end593
                                        #   in Loop: Header=BB12_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB12_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_123
.LBB12_132:                             # %for.end600
                                        #   in Loop: Header=BB12_111 Depth=2
	movl	$0, -4(%rbp)
.LBB12_133:                             # %for.cond601
                                        #   Parent Loop BB12_109 Depth=1
                                        #     Parent Loop BB12_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB12_133 Depth=3
	movl	$0, -8(%rbp)
.LBB12_135:                             # %for.cond608
                                        #   Parent Loop BB12_109 Depth=1
                                        #     Parent Loop BB12_111 Depth=2
                                        #       Parent Loop BB12_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB12_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB12_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB12_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB12_142
.LBB12_138:                             # %cond.false630
                                        #   in Loop: Header=BB12_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB12_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB12_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB12_141
.LBB12_140:                             # %cond.false648
                                        #   in Loop: Header=BB12_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB12_141:                             # %cond.end661
                                        #   in Loop: Header=BB12_135 Depth=4
.LBB12_142:                             # %cond.end663
                                        #   in Loop: Header=BB12_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB12_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_135
.LBB12_144:                             # %for.end675
                                        #   in Loop: Header=BB12_133 Depth=3
	jmp	.LBB12_145
.LBB12_145:                             # %for.inc676
                                        #   in Loop: Header=BB12_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_133
.LBB12_146:                             # %for.end678
                                        #   in Loop: Header=BB12_111 Depth=2
	jmp	.LBB12_147
.LBB12_147:                             # %for.inc679
                                        #   in Loop: Header=BB12_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_111
.LBB12_148:                             # %for.end681
                                        #   in Loop: Header=BB12_109 Depth=1
	jmp	.LBB12_149
.LBB12_149:                             # %for.inc682
                                        #   in Loop: Header=BB12_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_109
.LBB12_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB12_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB12_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_154 Depth 2
                                        #       Child Loop BB12_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB12_152 Depth=1
	movl	$0, -24(%rbp)
.LBB12_154:                             # %for.cond694
                                        #   Parent Loop BB12_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB12_154 Depth=2
	movl	$0, -20(%rbp)
.LBB12_156:                             # %for.cond700
                                        #   Parent Loop BB12_152 Depth=1
                                        #     Parent Loop BB12_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB12_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB12_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB12_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_156
.LBB12_159:                             # %for.end730
                                        #   in Loop: Header=BB12_154 Depth=2
	jmp	.LBB12_160
.LBB12_160:                             # %for.inc731
                                        #   in Loop: Header=BB12_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_154
.LBB12_161:                             # %for.end733
                                        #   in Loop: Header=BB12_152 Depth=1
	jmp	.LBB12_162
.LBB12_162:                             # %for.inc734
                                        #   in Loop: Header=BB12_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_152
.LBB12_163:                             # %for.end736
	jmp	.LBB12_173
.LBB12_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB12_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB12_165 Depth=1
	movl	$0, -24(%rbp)
.LBB12_167:                             # %for.cond743
                                        #   Parent Loop BB12_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB12_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB12_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_167
.LBB12_170:                             # %for.end784
                                        #   in Loop: Header=BB12_165 Depth=1
	jmp	.LBB12_171
.LBB12_171:                             # %for.inc785
                                        #   in Loop: Header=BB12_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_165
.LBB12_172:                             # %for.end787
	jmp	.LBB12_173
.LBB12_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB12_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_176 Depth 2
                                        #       Child Loop BB12_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB12_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB12_174 Depth=1
	movl	$0, -8(%rbp)
.LBB12_176:                             # %for.cond793
                                        #   Parent Loop BB12_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB12_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB12_176 Depth=2
	movl	$0, -20(%rbp)
.LBB12_178:                             # %for.cond797
                                        #   Parent Loop BB12_174 Depth=1
                                        #     Parent Loop BB12_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB12_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB12_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB12_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB12_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB12_182
.LBB12_181:                             # %cond.false804
                                        #   in Loop: Header=BB12_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB12_182:                             # %cond.end805
                                        #   in Loop: Header=BB12_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB12_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_178
.LBB12_184:                             # %for.end833
                                        #   in Loop: Header=BB12_176 Depth=2
	jmp	.LBB12_185
.LBB12_185:                             # %for.inc834
                                        #   in Loop: Header=BB12_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_176
.LBB12_186:                             # %for.end836
                                        #   in Loop: Header=BB12_174 Depth=1
	jmp	.LBB12_187
.LBB12_187:                             # %for.inc837
                                        #   in Loop: Header=BB12_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_174
.LBB12_188:                             # %for.end839
	jmp	.LBB12_189
.LBB12_189:                             # %if.end840
	cmpl	$534846105, -84(%rbp)   # imm = 0x1FE11A99
	jne	.LBB12_191
.LBB12_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_190
.Lfunc_end12:
	.size	estimate_weighting_factor_B_slice.9, .Lfunc_end12-estimate_weighting_factor_B_slice.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.10
.LCPI13_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.10
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.10,@function
estimate_weighting_factor_P_slice.10:   # @estimate_weighting_factor_P_slice.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1552114129, -60(%rbp)  # imm = 0x5C8361D1
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB13_4
.LBB13_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB13_4
.LBB13_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB13_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_7 Depth 2
                                        #       Child Loop BB13_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB13_5 Depth=1
	movl	$0, -16(%rbp)
.LBB13_7:                               # %for.cond12
                                        #   Parent Loop BB13_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB13_7 Depth=2
	movl	$0, -4(%rbp)
.LBB13_9:                               # %for.cond17
                                        #   Parent Loop BB13_5 Depth=1
                                        #     Parent Loop BB13_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB13_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB13_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB13_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_9
.LBB13_12:                              # %for.end
                                        #   in Loop: Header=BB13_7 Depth=2
	jmp	.LBB13_13
.LBB13_13:                              # %for.inc48
                                        #   in Loop: Header=BB13_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_7
.LBB13_14:                              # %for.end50
                                        #   in Loop: Header=BB13_5 Depth=1
	jmp	.LBB13_15
.LBB13_15:                              # %for.inc51
                                        #   in Loop: Header=BB13_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_5
.LBB13_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB13_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB13_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	$0, -16(%rbp)
.LBB13_19:                              # %for.cond57
                                        #   Parent Loop BB13_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB13_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB13_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_19
.LBB13_22:                              # %for.end67
                                        #   in Loop: Header=BB13_17 Depth=1
	jmp	.LBB13_23
.LBB13_23:                              # %for.inc68
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_17
.LBB13_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB13_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_27 Depth 2
                                        #       Child Loop BB13_29 Depth 3
                                        #       Child Loop BB13_48 Depth 3
                                        #       Child Loop BB13_58 Depth 3
                                        #         Child Loop BB13_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB13_25 Depth=1
	movl	$0, -4(%rbp)
.LBB13_27:                              # %for.cond76
                                        #   Parent Loop BB13_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_29 Depth 3
                                        #       Child Loop BB13_48 Depth 3
                                        #       Child Loop BB13_58 Depth 3
                                        #         Child Loop BB13_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB13_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB13_29:                              # %for.cond92
                                        #   Parent Loop BB13_25 Depth=1
                                        #     Parent Loop BB13_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB13_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB13_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_29
.LBB13_32:                              # %for.end106
                                        #   in Loop: Header=BB13_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB13_40
	jp	.LBB13_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB13_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB13_34
	jp	.LBB13_34
	jmp	.LBB13_35
.LBB13_34:                              # %if.then114
                                        #   in Loop: Header=BB13_27 Depth=2
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB13_36
.LBB13_35:                              # %if.else
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB13_36:                              # %if.end
                                        #   in Loop: Header=BB13_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB13_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB13_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB13_39
.LBB13_38:                              # %if.then147
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB13_39:                              # %if.end154
                                        #   in Loop: Header=BB13_27 Depth=2
	jmp	.LBB13_47
.LBB13_40:                              # %if.else155
                                        #   in Loop: Header=BB13_27 Depth=2
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB13_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB13_46
.LBB13_42:                              # %cond.false179
                                        #   in Loop: Header=BB13_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB13_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	$127, %eax
	jmp	.LBB13_45
.LBB13_44:                              # %cond.false188
                                        #   in Loop: Header=BB13_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB13_45:                              # %cond.end194
                                        #   in Loop: Header=BB13_27 Depth=2
.LBB13_46:                              # %cond.end196
                                        #   in Loop: Header=BB13_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB13_47:                              # %if.end209
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB13_48:                              # %for.cond222
                                        #   Parent Loop BB13_25 Depth=1
                                        #     Parent Loop BB13_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB13_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB13_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB13_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB13_55
.LBB13_51:                              # %cond.false248
                                        #   in Loop: Header=BB13_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB13_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB13_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_54
.LBB13_53:                              # %cond.false270
                                        #   in Loop: Header=BB13_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB13_54:                              # %cond.end288
                                        #   in Loop: Header=BB13_48 Depth=3
.LBB13_55:                              # %cond.end290
                                        #   in Loop: Header=BB13_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB13_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_48
.LBB13_57:                              # %for.end297
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	$0, -12(%rbp)
.LBB13_58:                              # %for.cond298
                                        #   Parent Loop BB13_25 Depth=1
                                        #     Parent Loop BB13_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB13_58 Depth=3
	movl	$0, -16(%rbp)
.LBB13_60:                              # %for.cond305
                                        #   Parent Loop BB13_25 Depth=1
                                        #     Parent Loop BB13_27 Depth=2
                                        #       Parent Loop BB13_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB13_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB13_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB13_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB13_67
.LBB13_63:                              # %cond.false336
                                        #   in Loop: Header=BB13_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB13_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB13_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_66
.LBB13_65:                              # %cond.false364
                                        #   in Loop: Header=BB13_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB13_66:                              # %cond.end387
                                        #   in Loop: Header=BB13_60 Depth=4
.LBB13_67:                              # %cond.end389
                                        #   in Loop: Header=BB13_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB13_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_60
.LBB13_69:                              # %for.end400
                                        #   in Loop: Header=BB13_58 Depth=3
	jmp	.LBB13_70
.LBB13_70:                              # %for.inc401
                                        #   in Loop: Header=BB13_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_58
.LBB13_71:                              # %for.end403
                                        #   in Loop: Header=BB13_27 Depth=2
	jmp	.LBB13_72
.LBB13_72:                              # %for.inc404
                                        #   in Loop: Header=BB13_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_27
.LBB13_73:                              # %for.end406
                                        #   in Loop: Header=BB13_25 Depth=1
	jmp	.LBB13_74
.LBB13_74:                              # %for.inc407
                                        #   in Loop: Header=BB13_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_25
.LBB13_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB13_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_78 Depth 2
                                        #       Child Loop BB13_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB13_76 Depth=1
	movl	$0, -20(%rbp)
.LBB13_78:                              # %for.cond415
                                        #   Parent Loop BB13_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB13_78 Depth=2
	movl	$0, -24(%rbp)
.LBB13_80:                              # %for.cond421
                                        #   Parent Loop BB13_76 Depth=1
                                        #     Parent Loop BB13_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB13_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB13_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB13_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_80
.LBB13_83:                              # %for.end451
                                        #   in Loop: Header=BB13_78 Depth=2
	jmp	.LBB13_84
.LBB13_84:                              # %for.inc452
                                        #   in Loop: Header=BB13_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_78
.LBB13_85:                              # %for.end454
                                        #   in Loop: Header=BB13_76 Depth=1
	jmp	.LBB13_86
.LBB13_86:                              # %for.inc455
                                        #   in Loop: Header=BB13_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_76
.LBB13_87:                              # %for.end457
	cmpl	$1552114129, -60(%rbp)  # imm = 0x5C8361D1
	jne	.LBB13_89
.LBB13_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_88
.Lfunc_end13:
	.size	estimate_weighting_factor_P_slice.10, .Lfunc_end13-estimate_weighting_factor_P_slice.10
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.11
.LCPI14_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.11
	.p2align	4, 0x90
	.type	test_wp_B_slice.11,@function
test_wp_B_slice.11:                     # @test_wp_B_slice.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1917415031, -84(%rbp)  # imm = 0x72496E77
	movl	%edi, -88(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB14_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB14_4
.LBB14_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB14_4
.LBB14_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB14_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_7 Depth 2
                                        #       Child Loop BB14_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB14_5 Depth=1
	movl	$0, -24(%rbp)
.LBB14_7:                               # %for.cond9
                                        #   Parent Loop BB14_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB14_7 Depth=2
	movl	$0, -32(%rbp)
.LBB14_9:                               # %for.cond14
                                        #   Parent Loop BB14_5 Depth=1
                                        #     Parent Loop BB14_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB14_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB14_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB14_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB14_9
.LBB14_12:                              # %for.end
                                        #   in Loop: Header=BB14_7 Depth=2
	jmp	.LBB14_13
.LBB14_13:                              # %for.inc41
                                        #   in Loop: Header=BB14_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_7
.LBB14_14:                              # %for.end43
                                        #   in Loop: Header=BB14_5 Depth=1
	jmp	.LBB14_15
.LBB14_15:                              # %for.inc44
                                        #   in Loop: Header=BB14_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_5
.LBB14_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB14_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_19 Depth 2
                                        #       Child Loop BB14_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB14_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	$0, -24(%rbp)
.LBB14_19:                              # %for.cond50
                                        #   Parent Loop BB14_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB14_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB14_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB14_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB14_26
.LBB14_22:                              # %cond.false61
                                        #   in Loop: Header=BB14_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB14_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	$127, %eax
	jmp	.LBB14_25
.LBB14_24:                              # %cond.false71
                                        #   in Loop: Header=BB14_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB14_25:                              # %cond.end79
                                        #   in Loop: Header=BB14_19 Depth=2
.LBB14_26:                              # %cond.end81
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB14_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB14_32
.LBB14_28:                              # %cond.false90
                                        #   in Loop: Header=BB14_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB14_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	$127, %eax
	jmp	.LBB14_31
.LBB14_30:                              # %cond.false98
                                        #   in Loop: Header=BB14_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB14_31:                              # %cond.end104
                                        #   in Loop: Header=BB14_19 Depth=2
.LBB14_32:                              # %cond.end106
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB14_33:                              # %for.cond108
                                        #   Parent Loop BB14_17 Depth=1
                                        #     Parent Loop BB14_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB14_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB14_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB14_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB14_46
.LBB14_36:                              # %if.else
                                        #   in Loop: Header=BB14_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB14_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB14_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB14_42
.LBB14_38:                              # %cond.false145
                                        #   in Loop: Header=BB14_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB14_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB14_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB14_41
.LBB14_40:                              # %cond.false151
                                        #   in Loop: Header=BB14_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB14_41:                              # %cond.end155
                                        #   in Loop: Header=BB14_33 Depth=3
.LBB14_42:                              # %cond.end157
                                        #   in Loop: Header=BB14_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB14_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB14_45
.LBB14_44:                              # %if.then183
                                        #   in Loop: Header=BB14_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB14_45:                              # %if.end
                                        #   in Loop: Header=BB14_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB14_46:                              # %if.end220
                                        #   in Loop: Header=BB14_33 Depth=3
	jmp	.LBB14_47
.LBB14_47:                              # %for.inc221
                                        #   in Loop: Header=BB14_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_33
.LBB14_48:                              # %for.end223
                                        #   in Loop: Header=BB14_19 Depth=2
	jmp	.LBB14_49
.LBB14_49:                              # %for.inc224
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_19
.LBB14_50:                              # %for.end226
                                        #   in Loop: Header=BB14_17 Depth=1
	jmp	.LBB14_51
.LBB14_51:                              # %for.inc227
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_17
.LBB14_52:                              # %for.end229
	cmpl	$1, -88(%rbp)
	jne	.LBB14_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB14_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_56 Depth 2
                                        #       Child Loop BB14_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB14_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB14_54 Depth=1
	movl	$0, -24(%rbp)
.LBB14_56:                              # %for.cond235
                                        #   Parent Loop BB14_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB14_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB14_56 Depth=2
	movl	$0, -20(%rbp)
.LBB14_58:                              # %for.cond238
                                        #   Parent Loop BB14_54 Depth=1
                                        #     Parent Loop BB14_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB14_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB14_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB14_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB14_62
.LBB14_61:                              # %cond.false243
                                        #   in Loop: Header=BB14_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB14_62:                              # %cond.end244
                                        #   in Loop: Header=BB14_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -80(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB14_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_58
.LBB14_64:                              # %for.end276
                                        #   in Loop: Header=BB14_56 Depth=2
	jmp	.LBB14_65
.LBB14_65:                              # %for.inc277
                                        #   in Loop: Header=BB14_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_56
.LBB14_66:                              # %for.end279
                                        #   in Loop: Header=BB14_54 Depth=1
	jmp	.LBB14_67
.LBB14_67:                              # %for.inc280
                                        #   in Loop: Header=BB14_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_54
.LBB14_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB14_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB14_69 Depth=1
	movl	$0, -28(%rbp)
.LBB14_71:                              # %for.cond287
                                        #   Parent Loop BB14_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB14_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB14_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB14_71
.LBB14_74:                              # %for.end327
                                        #   in Loop: Header=BB14_69 Depth=1
	jmp	.LBB14_75
.LBB14_75:                              # %for.inc328
                                        #   in Loop: Header=BB14_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_69
.LBB14_76:                              # %for.end330
	jmp	.LBB14_142
.LBB14_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB14_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB14_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB14_78 Depth=1
	movl	$0, -24(%rbp)
.LBB14_80:                              # %for.cond335
                                        #   Parent Loop BB14_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB14_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB14_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB14_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_80
.LBB14_83:                              # %for.end345
                                        #   in Loop: Header=BB14_78 Depth=1
	jmp	.LBB14_84
.LBB14_84:                              # %for.inc346
                                        #   in Loop: Header=BB14_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_78
.LBB14_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB14_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_88 Depth 2
                                        #       Child Loop BB14_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB14_86 Depth=1
	movl	$0, -32(%rbp)
.LBB14_88:                              # %for.cond354
                                        #   Parent Loop BB14_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB14_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB14_90:                              # %for.cond372
                                        #   Parent Loop BB14_86 Depth=1
                                        #     Parent Loop BB14_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB14_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB14_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_90
.LBB14_93:                              # %for.end389
                                        #   in Loop: Header=BB14_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB14_94
	jp	.LBB14_94
	jmp	.LBB14_95
.LBB14_94:                              # %if.then396
                                        #   in Loop: Header=BB14_88 Depth=2
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_96
.LBB14_95:                              # %if.else406
                                        #   in Loop: Header=BB14_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB14_96:                              # %if.end407
                                        #   in Loop: Header=BB14_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB14_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB14_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB14_99
.LBB14_98:                              # %if.then413
                                        #   in Loop: Header=BB14_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB14_99:                              # %if.end414
                                        #   in Loop: Header=BB14_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB14_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB14_88
.LBB14_101:                             # %for.end447
                                        #   in Loop: Header=BB14_86 Depth=1
	jmp	.LBB14_102
.LBB14_102:                             # %for.inc448
                                        #   in Loop: Header=BB14_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_86
.LBB14_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB14_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB14_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_107 Depth 2
                                        #       Child Loop BB14_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB14_105 Depth=1
	movl	$0, -28(%rbp)
.LBB14_107:                             # %for.cond459
                                        #   Parent Loop BB14_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB14_107 Depth=2
	movl	$0, -20(%rbp)
.LBB14_109:                             # %for.cond465
                                        #   Parent Loop BB14_105 Depth=1
                                        #     Parent Loop BB14_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB14_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB14_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_109
.LBB14_112:                             # %for.end495
                                        #   in Loop: Header=BB14_107 Depth=2
	jmp	.LBB14_113
.LBB14_113:                             # %for.inc496
                                        #   in Loop: Header=BB14_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB14_107
.LBB14_114:                             # %for.end498
                                        #   in Loop: Header=BB14_105 Depth=1
	jmp	.LBB14_115
.LBB14_115:                             # %for.inc499
                                        #   in Loop: Header=BB14_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_105
.LBB14_116:                             # %for.end501
	jmp	.LBB14_126
.LBB14_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB14_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB14_118 Depth=1
	movl	$0, -28(%rbp)
.LBB14_120:                             # %for.cond508
                                        #   Parent Loop BB14_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB14_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB14_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB14_120
.LBB14_123:                             # %for.end549
                                        #   in Loop: Header=BB14_118 Depth=1
	jmp	.LBB14_124
.LBB14_124:                             # %for.inc550
                                        #   in Loop: Header=BB14_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_118
.LBB14_125:                             # %for.end552
	jmp	.LBB14_126
.LBB14_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB14_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_129 Depth 2
                                        #       Child Loop BB14_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB14_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB14_127 Depth=1
	movl	$0, -24(%rbp)
.LBB14_129:                             # %for.cond558
                                        #   Parent Loop BB14_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB14_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB14_129 Depth=2
	movl	$0, -20(%rbp)
.LBB14_131:                             # %for.cond562
                                        #   Parent Loop BB14_127 Depth=1
                                        #     Parent Loop BB14_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB14_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB14_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB14_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB14_135
.LBB14_134:                             # %cond.false569
                                        #   in Loop: Header=BB14_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB14_135:                             # %cond.end570
                                        #   in Loop: Header=BB14_131 Depth=3
	movl	%eax, -80(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB14_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_131
.LBB14_137:                             # %for.end598
                                        #   in Loop: Header=BB14_129 Depth=2
	jmp	.LBB14_138
.LBB14_138:                             # %for.inc599
                                        #   in Loop: Header=BB14_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_129
.LBB14_139:                             # %for.end601
                                        #   in Loop: Header=BB14_127 Depth=1
	jmp	.LBB14_140
.LBB14_140:                             # %for.inc602
                                        #   in Loop: Header=BB14_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_127
.LBB14_141:                             # %for.end604
	jmp	.LBB14_142
.LBB14_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB14_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_145 Depth 2
                                        #       Child Loop BB14_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB14_143 Depth=1
	movl	$0, -28(%rbp)
.LBB14_145:                             # %for.cond611
                                        #   Parent Loop BB14_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB14_145 Depth=2
	movl	$0, -20(%rbp)
.LBB14_147:                             # %for.cond617
                                        #   Parent Loop BB14_143 Depth=1
                                        #     Parent Loop BB14_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB14_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB14_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB14_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB14_151
.LBB14_150:                             # %if.then638
                                        #   in Loop: Header=BB14_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB14_154
.LBB14_151:                             # %if.end639
                                        #   in Loop: Header=BB14_147 Depth=3
	jmp	.LBB14_152
.LBB14_152:                             # %for.inc640
                                        #   in Loop: Header=BB14_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_147
.LBB14_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB14_145 Depth=2
	jmp	.LBB14_154
.LBB14_154:                             # %for.end642
                                        #   in Loop: Header=BB14_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB14_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB14_143 Depth=1
	jmp	.LBB14_159
.LBB14_156:                             # %if.end646
                                        #   in Loop: Header=BB14_145 Depth=2
	jmp	.LBB14_157
.LBB14_157:                             # %for.inc647
                                        #   in Loop: Header=BB14_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB14_145
.LBB14_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB14_143 Depth=1
	jmp	.LBB14_159
.LBB14_159:                             # %for.end649
                                        #   in Loop: Header=BB14_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB14_161
# %bb.160:                              # %if.then652
	jmp	.LBB14_164
.LBB14_161:                             # %if.end653
                                        #   in Loop: Header=BB14_143 Depth=1
	jmp	.LBB14_162
.LBB14_162:                             # %for.inc654
                                        #   in Loop: Header=BB14_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_143
.LBB14_163:                             # %for.end656.loopexit
	jmp	.LBB14_164
.LBB14_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1917415031, -84(%rbp)  # imm = 0x72496E77
	jne	.LBB14_166
.LBB14_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_165
.Lfunc_end14:
	.size	test_wp_B_slice.11, .Lfunc_end14-test_wp_B_slice.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.12
.LCPI15_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.12
	.p2align	4, 0x90
	.type	test_wp_B_slice.12,@function
test_wp_B_slice.12:                     # @test_wp_B_slice.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$836789694, -76(%rbp)   # imm = 0x31E065BE
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB15_4
.LBB15_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB15_4
.LBB15_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB15_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_7 Depth 2
                                        #       Child Loop BB15_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	$0, -24(%rbp)
.LBB15_7:                               # %for.cond9
                                        #   Parent Loop BB15_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	$0, -32(%rbp)
.LBB15_9:                               # %for.cond14
                                        #   Parent Loop BB15_5 Depth=1
                                        #     Parent Loop BB15_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB15_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB15_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB15_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB15_9
.LBB15_12:                              # %for.end
                                        #   in Loop: Header=BB15_7 Depth=2
	jmp	.LBB15_13
.LBB15_13:                              # %for.inc41
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_7
.LBB15_14:                              # %for.end43
                                        #   in Loop: Header=BB15_5 Depth=1
	jmp	.LBB15_15
.LBB15_15:                              # %for.inc44
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_5
.LBB15_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB15_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_19 Depth 2
                                        #       Child Loop BB15_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB15_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	$0, -24(%rbp)
.LBB15_19:                              # %for.cond50
                                        #   Parent Loop BB15_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB15_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB15_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB15_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB15_26
.LBB15_22:                              # %cond.false61
                                        #   in Loop: Header=BB15_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB15_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	$127, %eax
	jmp	.LBB15_25
.LBB15_24:                              # %cond.false71
                                        #   in Loop: Header=BB15_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB15_25:                              # %cond.end79
                                        #   in Loop: Header=BB15_19 Depth=2
.LBB15_26:                              # %cond.end81
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB15_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB15_32
.LBB15_28:                              # %cond.false90
                                        #   in Loop: Header=BB15_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB15_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	$127, %eax
	jmp	.LBB15_31
.LBB15_30:                              # %cond.false98
                                        #   in Loop: Header=BB15_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB15_31:                              # %cond.end104
                                        #   in Loop: Header=BB15_19 Depth=2
.LBB15_32:                              # %cond.end106
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB15_33:                              # %for.cond108
                                        #   Parent Loop BB15_17 Depth=1
                                        #     Parent Loop BB15_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB15_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB15_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB15_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB15_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB15_46
.LBB15_36:                              # %if.else
                                        #   in Loop: Header=BB15_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB15_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB15_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB15_42
.LBB15_38:                              # %cond.false145
                                        #   in Loop: Header=BB15_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB15_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB15_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB15_41
.LBB15_40:                              # %cond.false151
                                        #   in Loop: Header=BB15_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB15_41:                              # %cond.end155
                                        #   in Loop: Header=BB15_33 Depth=3
.LBB15_42:                              # %cond.end157
                                        #   in Loop: Header=BB15_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB15_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB15_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB15_45
.LBB15_44:                              # %if.then183
                                        #   in Loop: Header=BB15_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB15_45:                              # %if.end
                                        #   in Loop: Header=BB15_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB15_46:                              # %if.end220
                                        #   in Loop: Header=BB15_33 Depth=3
	jmp	.LBB15_47
.LBB15_47:                              # %for.inc221
                                        #   in Loop: Header=BB15_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_33
.LBB15_48:                              # %for.end223
                                        #   in Loop: Header=BB15_19 Depth=2
	jmp	.LBB15_49
.LBB15_49:                              # %for.inc224
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_19
.LBB15_50:                              # %for.end226
                                        #   in Loop: Header=BB15_17 Depth=1
	jmp	.LBB15_51
.LBB15_51:                              # %for.inc227
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_17
.LBB15_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB15_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB15_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_56 Depth 2
                                        #       Child Loop BB15_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB15_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB15_54 Depth=1
	movl	$0, -24(%rbp)
.LBB15_56:                              # %for.cond235
                                        #   Parent Loop BB15_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB15_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB15_56 Depth=2
	movl	$0, -20(%rbp)
.LBB15_58:                              # %for.cond238
                                        #   Parent Loop BB15_54 Depth=1
                                        #     Parent Loop BB15_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB15_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB15_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB15_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB15_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB15_62
.LBB15_61:                              # %cond.false243
                                        #   in Loop: Header=BB15_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB15_62:                              # %cond.end244
                                        #   in Loop: Header=BB15_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB15_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_58
.LBB15_64:                              # %for.end276
                                        #   in Loop: Header=BB15_56 Depth=2
	jmp	.LBB15_65
.LBB15_65:                              # %for.inc277
                                        #   in Loop: Header=BB15_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_56
.LBB15_66:                              # %for.end279
                                        #   in Loop: Header=BB15_54 Depth=1
	jmp	.LBB15_67
.LBB15_67:                              # %for.inc280
                                        #   in Loop: Header=BB15_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_54
.LBB15_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB15_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB15_69 Depth=1
	movl	$0, -28(%rbp)
.LBB15_71:                              # %for.cond287
                                        #   Parent Loop BB15_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB15_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB15_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_71
.LBB15_74:                              # %for.end327
                                        #   in Loop: Header=BB15_69 Depth=1
	jmp	.LBB15_75
.LBB15_75:                              # %for.inc328
                                        #   in Loop: Header=BB15_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_69
.LBB15_76:                              # %for.end330
	jmp	.LBB15_142
.LBB15_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB15_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB15_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB15_78 Depth=1
	movl	$0, -24(%rbp)
.LBB15_80:                              # %for.cond335
                                        #   Parent Loop BB15_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB15_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB15_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_80
.LBB15_83:                              # %for.end345
                                        #   in Loop: Header=BB15_78 Depth=1
	jmp	.LBB15_84
.LBB15_84:                              # %for.inc346
                                        #   in Loop: Header=BB15_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_78
.LBB15_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB15_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_88 Depth 2
                                        #       Child Loop BB15_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	$0, -32(%rbp)
.LBB15_88:                              # %for.cond354
                                        #   Parent Loop BB15_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB15_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB15_90:                              # %for.cond372
                                        #   Parent Loop BB15_86 Depth=1
                                        #     Parent Loop BB15_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB15_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB15_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_90
.LBB15_93:                              # %for.end389
                                        #   in Loop: Header=BB15_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB15_94
	jp	.LBB15_94
	jmp	.LBB15_95
.LBB15_94:                              # %if.then396
                                        #   in Loop: Header=BB15_88 Depth=2
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_96
.LBB15_95:                              # %if.else406
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB15_96:                              # %if.end407
                                        #   in Loop: Header=BB15_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB15_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB15_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB15_99
.LBB15_98:                              # %if.then413
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB15_99:                              # %if.end414
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB15_88
.LBB15_101:                             # %for.end447
                                        #   in Loop: Header=BB15_86 Depth=1
	jmp	.LBB15_102
.LBB15_102:                             # %for.inc448
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_86
.LBB15_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB15_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB15_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_107 Depth 2
                                        #       Child Loop BB15_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB15_105 Depth=1
	movl	$0, -28(%rbp)
.LBB15_107:                             # %for.cond459
                                        #   Parent Loop BB15_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB15_107 Depth=2
	movl	$0, -20(%rbp)
.LBB15_109:                             # %for.cond465
                                        #   Parent Loop BB15_105 Depth=1
                                        #     Parent Loop BB15_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB15_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB15_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB15_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_109
.LBB15_112:                             # %for.end495
                                        #   in Loop: Header=BB15_107 Depth=2
	jmp	.LBB15_113
.LBB15_113:                             # %for.inc496
                                        #   in Loop: Header=BB15_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_107
.LBB15_114:                             # %for.end498
                                        #   in Loop: Header=BB15_105 Depth=1
	jmp	.LBB15_115
.LBB15_115:                             # %for.inc499
                                        #   in Loop: Header=BB15_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_105
.LBB15_116:                             # %for.end501
	jmp	.LBB15_126
.LBB15_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB15_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB15_118 Depth=1
	movl	$0, -28(%rbp)
.LBB15_120:                             # %for.cond508
                                        #   Parent Loop BB15_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB15_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB15_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_120
.LBB15_123:                             # %for.end549
                                        #   in Loop: Header=BB15_118 Depth=1
	jmp	.LBB15_124
.LBB15_124:                             # %for.inc550
                                        #   in Loop: Header=BB15_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_118
.LBB15_125:                             # %for.end552
	jmp	.LBB15_126
.LBB15_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB15_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_129 Depth 2
                                        #       Child Loop BB15_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB15_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB15_127 Depth=1
	movl	$0, -24(%rbp)
.LBB15_129:                             # %for.cond558
                                        #   Parent Loop BB15_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB15_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB15_129 Depth=2
	movl	$0, -20(%rbp)
.LBB15_131:                             # %for.cond562
                                        #   Parent Loop BB15_127 Depth=1
                                        #     Parent Loop BB15_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB15_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB15_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB15_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB15_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB15_135
.LBB15_134:                             # %cond.false569
                                        #   in Loop: Header=BB15_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB15_135:                             # %cond.end570
                                        #   in Loop: Header=BB15_131 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB15_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_131
.LBB15_137:                             # %for.end598
                                        #   in Loop: Header=BB15_129 Depth=2
	jmp	.LBB15_138
.LBB15_138:                             # %for.inc599
                                        #   in Loop: Header=BB15_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_129
.LBB15_139:                             # %for.end601
                                        #   in Loop: Header=BB15_127 Depth=1
	jmp	.LBB15_140
.LBB15_140:                             # %for.inc602
                                        #   in Loop: Header=BB15_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_127
.LBB15_141:                             # %for.end604
	jmp	.LBB15_142
.LBB15_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB15_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_145 Depth 2
                                        #       Child Loop BB15_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB15_143 Depth=1
	movl	$0, -28(%rbp)
.LBB15_145:                             # %for.cond611
                                        #   Parent Loop BB15_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB15_145 Depth=2
	movl	$0, -20(%rbp)
.LBB15_147:                             # %for.cond617
                                        #   Parent Loop BB15_143 Depth=1
                                        #     Parent Loop BB15_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB15_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB15_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB15_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB15_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB15_151
.LBB15_150:                             # %if.then638
                                        #   in Loop: Header=BB15_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB15_154
.LBB15_151:                             # %if.end639
                                        #   in Loop: Header=BB15_147 Depth=3
	jmp	.LBB15_152
.LBB15_152:                             # %for.inc640
                                        #   in Loop: Header=BB15_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_147
.LBB15_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB15_145 Depth=2
	jmp	.LBB15_154
.LBB15_154:                             # %for.end642
                                        #   in Loop: Header=BB15_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB15_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB15_143 Depth=1
	jmp	.LBB15_159
.LBB15_156:                             # %if.end646
                                        #   in Loop: Header=BB15_145 Depth=2
	jmp	.LBB15_157
.LBB15_157:                             # %for.inc647
                                        #   in Loop: Header=BB15_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB15_145
.LBB15_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB15_143 Depth=1
	jmp	.LBB15_159
.LBB15_159:                             # %for.end649
                                        #   in Loop: Header=BB15_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB15_161
# %bb.160:                              # %if.then652
	jmp	.LBB15_164
.LBB15_161:                             # %if.end653
                                        #   in Loop: Header=BB15_143 Depth=1
	jmp	.LBB15_162
.LBB15_162:                             # %for.inc654
                                        #   in Loop: Header=BB15_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_143
.LBB15_163:                             # %for.end656.loopexit
	jmp	.LBB15_164
.LBB15_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$836789694, -76(%rbp)   # imm = 0x31E065BE
	jne	.LBB15_166
.LBB15_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_165
.Lfunc_end15:
	.size	test_wp_B_slice.12, .Lfunc_end15-test_wp_B_slice.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.13
.LCPI16_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.13
	.p2align	4, 0x90
	.type	test_wp_B_slice.13,@function
test_wp_B_slice.13:                     # @test_wp_B_slice.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$2008820013, -88(%rbp)  # imm = 0x77BC292D
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB16_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB16_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB16_4
.LBB16_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB16_4
.LBB16_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB16_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_7 Depth 2
                                        #       Child Loop BB16_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB16_5 Depth=1
	movl	$0, -24(%rbp)
.LBB16_7:                               # %for.cond9
                                        #   Parent Loop BB16_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB16_7 Depth=2
	movl	$0, -32(%rbp)
.LBB16_9:                               # %for.cond14
                                        #   Parent Loop BB16_5 Depth=1
                                        #     Parent Loop BB16_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB16_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB16_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB16_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB16_9
.LBB16_12:                              # %for.end
                                        #   in Loop: Header=BB16_7 Depth=2
	jmp	.LBB16_13
.LBB16_13:                              # %for.inc41
                                        #   in Loop: Header=BB16_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_7
.LBB16_14:                              # %for.end43
                                        #   in Loop: Header=BB16_5 Depth=1
	jmp	.LBB16_15
.LBB16_15:                              # %for.inc44
                                        #   in Loop: Header=BB16_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_5
.LBB16_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB16_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_19 Depth 2
                                        #       Child Loop BB16_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB16_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	$0, -24(%rbp)
.LBB16_19:                              # %for.cond50
                                        #   Parent Loop BB16_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB16_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB16_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB16_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB16_26
.LBB16_22:                              # %cond.false61
                                        #   in Loop: Header=BB16_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB16_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$127, %eax
	jmp	.LBB16_25
.LBB16_24:                              # %cond.false71
                                        #   in Loop: Header=BB16_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB16_25:                              # %cond.end79
                                        #   in Loop: Header=BB16_19 Depth=2
.LBB16_26:                              # %cond.end81
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB16_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB16_32
.LBB16_28:                              # %cond.false90
                                        #   in Loop: Header=BB16_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB16_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$127, %eax
	jmp	.LBB16_31
.LBB16_30:                              # %cond.false98
                                        #   in Loop: Header=BB16_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB16_31:                              # %cond.end104
                                        #   in Loop: Header=BB16_19 Depth=2
.LBB16_32:                              # %cond.end106
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB16_33:                              # %for.cond108
                                        #   Parent Loop BB16_17 Depth=1
                                        #     Parent Loop BB16_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB16_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB16_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB16_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB16_46
.LBB16_36:                              # %if.else
                                        #   in Loop: Header=BB16_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB16_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB16_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB16_42
.LBB16_38:                              # %cond.false145
                                        #   in Loop: Header=BB16_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB16_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB16_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB16_41
.LBB16_40:                              # %cond.false151
                                        #   in Loop: Header=BB16_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB16_41:                              # %cond.end155
                                        #   in Loop: Header=BB16_33 Depth=3
.LBB16_42:                              # %cond.end157
                                        #   in Loop: Header=BB16_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB16_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB16_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB16_45
.LBB16_44:                              # %if.then183
                                        #   in Loop: Header=BB16_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB16_45:                              # %if.end
                                        #   in Loop: Header=BB16_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB16_46:                              # %if.end220
                                        #   in Loop: Header=BB16_33 Depth=3
	jmp	.LBB16_47
.LBB16_47:                              # %for.inc221
                                        #   in Loop: Header=BB16_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_33
.LBB16_48:                              # %for.end223
                                        #   in Loop: Header=BB16_19 Depth=2
	jmp	.LBB16_49
.LBB16_49:                              # %for.inc224
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_19
.LBB16_50:                              # %for.end226
                                        #   in Loop: Header=BB16_17 Depth=1
	jmp	.LBB16_51
.LBB16_51:                              # %for.inc227
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_17
.LBB16_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB16_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB16_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_56 Depth 2
                                        #       Child Loop BB16_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB16_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB16_54 Depth=1
	movl	$0, -24(%rbp)
.LBB16_56:                              # %for.cond235
                                        #   Parent Loop BB16_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB16_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB16_56 Depth=2
	movl	$0, -20(%rbp)
.LBB16_58:                              # %for.cond238
                                        #   Parent Loop BB16_54 Depth=1
                                        #     Parent Loop BB16_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB16_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB16_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB16_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB16_62
.LBB16_61:                              # %cond.false243
                                        #   in Loop: Header=BB16_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB16_62:                              # %cond.end244
                                        #   in Loop: Header=BB16_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -80(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB16_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_58
.LBB16_64:                              # %for.end276
                                        #   in Loop: Header=BB16_56 Depth=2
	jmp	.LBB16_65
.LBB16_65:                              # %for.inc277
                                        #   in Loop: Header=BB16_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_56
.LBB16_66:                              # %for.end279
                                        #   in Loop: Header=BB16_54 Depth=1
	jmp	.LBB16_67
.LBB16_67:                              # %for.inc280
                                        #   in Loop: Header=BB16_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_54
.LBB16_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB16_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB16_69 Depth=1
	movl	$0, -28(%rbp)
.LBB16_71:                              # %for.cond287
                                        #   Parent Loop BB16_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB16_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB16_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB16_71
.LBB16_74:                              # %for.end327
                                        #   in Loop: Header=BB16_69 Depth=1
	jmp	.LBB16_75
.LBB16_75:                              # %for.inc328
                                        #   in Loop: Header=BB16_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_69
.LBB16_76:                              # %for.end330
	jmp	.LBB16_142
.LBB16_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB16_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB16_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB16_78 Depth=1
	movl	$0, -24(%rbp)
.LBB16_80:                              # %for.cond335
                                        #   Parent Loop BB16_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB16_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB16_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB16_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_80
.LBB16_83:                              # %for.end345
                                        #   in Loop: Header=BB16_78 Depth=1
	jmp	.LBB16_84
.LBB16_84:                              # %for.inc346
                                        #   in Loop: Header=BB16_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_78
.LBB16_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB16_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_88 Depth 2
                                        #       Child Loop BB16_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB16_86 Depth=1
	movl	$0, -32(%rbp)
.LBB16_88:                              # %for.cond354
                                        #   Parent Loop BB16_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB16_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB16_90:                              # %for.cond372
                                        #   Parent Loop BB16_86 Depth=1
                                        #     Parent Loop BB16_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB16_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB16_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_90
.LBB16_93:                              # %for.end389
                                        #   in Loop: Header=BB16_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB16_94
	jp	.LBB16_94
	jmp	.LBB16_95
.LBB16_94:                              # %if.then396
                                        #   in Loop: Header=BB16_88 Depth=2
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_96
.LBB16_95:                              # %if.else406
                                        #   in Loop: Header=BB16_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB16_96:                              # %if.end407
                                        #   in Loop: Header=BB16_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB16_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB16_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB16_99
.LBB16_98:                              # %if.then413
                                        #   in Loop: Header=BB16_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB16_99:                              # %if.end414
                                        #   in Loop: Header=BB16_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB16_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB16_88
.LBB16_101:                             # %for.end447
                                        #   in Loop: Header=BB16_86 Depth=1
	jmp	.LBB16_102
.LBB16_102:                             # %for.inc448
                                        #   in Loop: Header=BB16_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_86
.LBB16_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB16_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB16_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_107 Depth 2
                                        #       Child Loop BB16_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB16_105 Depth=1
	movl	$0, -28(%rbp)
.LBB16_107:                             # %for.cond459
                                        #   Parent Loop BB16_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB16_107 Depth=2
	movl	$0, -20(%rbp)
.LBB16_109:                             # %for.cond465
                                        #   Parent Loop BB16_105 Depth=1
                                        #     Parent Loop BB16_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB16_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB16_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_109
.LBB16_112:                             # %for.end495
                                        #   in Loop: Header=BB16_107 Depth=2
	jmp	.LBB16_113
.LBB16_113:                             # %for.inc496
                                        #   in Loop: Header=BB16_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB16_107
.LBB16_114:                             # %for.end498
                                        #   in Loop: Header=BB16_105 Depth=1
	jmp	.LBB16_115
.LBB16_115:                             # %for.inc499
                                        #   in Loop: Header=BB16_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_105
.LBB16_116:                             # %for.end501
	jmp	.LBB16_126
.LBB16_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB16_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB16_118 Depth=1
	movl	$0, -28(%rbp)
.LBB16_120:                             # %for.cond508
                                        #   Parent Loop BB16_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB16_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB16_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB16_120
.LBB16_123:                             # %for.end549
                                        #   in Loop: Header=BB16_118 Depth=1
	jmp	.LBB16_124
.LBB16_124:                             # %for.inc550
                                        #   in Loop: Header=BB16_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_118
.LBB16_125:                             # %for.end552
	jmp	.LBB16_126
.LBB16_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB16_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_129 Depth 2
                                        #       Child Loop BB16_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB16_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB16_127 Depth=1
	movl	$0, -24(%rbp)
.LBB16_129:                             # %for.cond558
                                        #   Parent Loop BB16_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB16_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB16_129 Depth=2
	movl	$0, -20(%rbp)
.LBB16_131:                             # %for.cond562
                                        #   Parent Loop BB16_127 Depth=1
                                        #     Parent Loop BB16_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB16_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB16_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB16_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB16_135
.LBB16_134:                             # %cond.false569
                                        #   in Loop: Header=BB16_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB16_135:                             # %cond.end570
                                        #   in Loop: Header=BB16_131 Depth=3
	movl	%eax, -80(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB16_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_131
.LBB16_137:                             # %for.end598
                                        #   in Loop: Header=BB16_129 Depth=2
	jmp	.LBB16_138
.LBB16_138:                             # %for.inc599
                                        #   in Loop: Header=BB16_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_129
.LBB16_139:                             # %for.end601
                                        #   in Loop: Header=BB16_127 Depth=1
	jmp	.LBB16_140
.LBB16_140:                             # %for.inc602
                                        #   in Loop: Header=BB16_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_127
.LBB16_141:                             # %for.end604
	jmp	.LBB16_142
.LBB16_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB16_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_145 Depth 2
                                        #       Child Loop BB16_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB16_143 Depth=1
	movl	$0, -28(%rbp)
.LBB16_145:                             # %for.cond611
                                        #   Parent Loop BB16_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB16_145 Depth=2
	movl	$0, -20(%rbp)
.LBB16_147:                             # %for.cond617
                                        #   Parent Loop BB16_143 Depth=1
                                        #     Parent Loop BB16_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB16_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB16_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB16_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB16_151
.LBB16_150:                             # %if.then638
                                        #   in Loop: Header=BB16_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB16_154
.LBB16_151:                             # %if.end639
                                        #   in Loop: Header=BB16_147 Depth=3
	jmp	.LBB16_152
.LBB16_152:                             # %for.inc640
                                        #   in Loop: Header=BB16_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_147
.LBB16_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB16_145 Depth=2
	jmp	.LBB16_154
.LBB16_154:                             # %for.end642
                                        #   in Loop: Header=BB16_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB16_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB16_143 Depth=1
	jmp	.LBB16_159
.LBB16_156:                             # %if.end646
                                        #   in Loop: Header=BB16_145 Depth=2
	jmp	.LBB16_157
.LBB16_157:                             # %for.inc647
                                        #   in Loop: Header=BB16_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB16_145
.LBB16_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB16_143 Depth=1
	jmp	.LBB16_159
.LBB16_159:                             # %for.end649
                                        #   in Loop: Header=BB16_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB16_161
# %bb.160:                              # %if.then652
	jmp	.LBB16_164
.LBB16_161:                             # %if.end653
                                        #   in Loop: Header=BB16_143 Depth=1
	jmp	.LBB16_162
.LBB16_162:                             # %for.inc654
                                        #   in Loop: Header=BB16_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_143
.LBB16_163:                             # %for.end656.loopexit
	jmp	.LBB16_164
.LBB16_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$2008820013, -88(%rbp)  # imm = 0x77BC292D
	jne	.LBB16_166
.LBB16_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_165
.Lfunc_end16:
	.size	test_wp_B_slice.13, .Lfunc_end16-test_wp_B_slice.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.14
.LCPI17_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.14
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.14,@function
estimate_weighting_factor_P_slice.14:   # @estimate_weighting_factor_P_slice.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$872874146, -60(%rbp)   # imm = 0x340700A2
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB17_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB17_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB17_4
.LBB17_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB17_4
.LBB17_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB17_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_7 Depth 2
                                        #       Child Loop BB17_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB17_5 Depth=1
	movl	$0, -16(%rbp)
.LBB17_7:                               # %for.cond12
                                        #   Parent Loop BB17_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB17_7 Depth=2
	movl	$0, -4(%rbp)
.LBB17_9:                               # %for.cond17
                                        #   Parent Loop BB17_5 Depth=1
                                        #     Parent Loop BB17_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB17_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB17_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB17_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_9
.LBB17_12:                              # %for.end
                                        #   in Loop: Header=BB17_7 Depth=2
	jmp	.LBB17_13
.LBB17_13:                              # %for.inc48
                                        #   in Loop: Header=BB17_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_7
.LBB17_14:                              # %for.end50
                                        #   in Loop: Header=BB17_5 Depth=1
	jmp	.LBB17_15
.LBB17_15:                              # %for.inc51
                                        #   in Loop: Header=BB17_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_5
.LBB17_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB17_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB17_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB17_17 Depth=1
	movl	$0, -16(%rbp)
.LBB17_19:                              # %for.cond57
                                        #   Parent Loop BB17_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB17_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB17_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB17_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_19
.LBB17_22:                              # %for.end67
                                        #   in Loop: Header=BB17_17 Depth=1
	jmp	.LBB17_23
.LBB17_23:                              # %for.inc68
                                        #   in Loop: Header=BB17_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_17
.LBB17_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB17_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_27 Depth 2
                                        #       Child Loop BB17_29 Depth 3
                                        #       Child Loop BB17_48 Depth 3
                                        #       Child Loop BB17_58 Depth 3
                                        #         Child Loop BB17_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB17_25 Depth=1
	movl	$0, -4(%rbp)
.LBB17_27:                              # %for.cond76
                                        #   Parent Loop BB17_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_29 Depth 3
                                        #       Child Loop BB17_48 Depth 3
                                        #       Child Loop BB17_58 Depth 3
                                        #         Child Loop BB17_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB17_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB17_29:                              # %for.cond92
                                        #   Parent Loop BB17_25 Depth=1
                                        #     Parent Loop BB17_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB17_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB17_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_29
.LBB17_32:                              # %for.end106
                                        #   in Loop: Header=BB17_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB17_40
	jp	.LBB17_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB17_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB17_34
	jp	.LBB17_34
	jmp	.LBB17_35
.LBB17_34:                              # %if.then114
                                        #   in Loop: Header=BB17_27 Depth=2
	vmovsd	.LCPI17_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB17_36
.LBB17_35:                              # %if.else
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB17_36:                              # %if.end
                                        #   in Loop: Header=BB17_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB17_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB17_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB17_39
.LBB17_38:                              # %if.then147
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB17_39:                              # %if.end154
                                        #   in Loop: Header=BB17_27 Depth=2
	jmp	.LBB17_47
.LBB17_40:                              # %if.else155
                                        #   in Loop: Header=BB17_27 Depth=2
	vmovsd	.LCPI17_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB17_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB17_46
.LBB17_42:                              # %cond.false179
                                        #   in Loop: Header=BB17_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB17_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	$127, %eax
	jmp	.LBB17_45
.LBB17_44:                              # %cond.false188
                                        #   in Loop: Header=BB17_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB17_45:                              # %cond.end194
                                        #   in Loop: Header=BB17_27 Depth=2
.LBB17_46:                              # %cond.end196
                                        #   in Loop: Header=BB17_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB17_47:                              # %if.end209
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB17_48:                              # %for.cond222
                                        #   Parent Loop BB17_25 Depth=1
                                        #     Parent Loop BB17_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB17_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB17_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB17_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB17_55
.LBB17_51:                              # %cond.false248
                                        #   in Loop: Header=BB17_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB17_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB17_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_54
.LBB17_53:                              # %cond.false270
                                        #   in Loop: Header=BB17_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB17_54:                              # %cond.end288
                                        #   in Loop: Header=BB17_48 Depth=3
.LBB17_55:                              # %cond.end290
                                        #   in Loop: Header=BB17_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB17_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_48
.LBB17_57:                              # %for.end297
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	$0, -12(%rbp)
.LBB17_58:                              # %for.cond298
                                        #   Parent Loop BB17_25 Depth=1
                                        #     Parent Loop BB17_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB17_58 Depth=3
	movl	$0, -16(%rbp)
.LBB17_60:                              # %for.cond305
                                        #   Parent Loop BB17_25 Depth=1
                                        #     Parent Loop BB17_27 Depth=2
                                        #       Parent Loop BB17_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB17_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB17_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB17_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB17_67
.LBB17_63:                              # %cond.false336
                                        #   in Loop: Header=BB17_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB17_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB17_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_66
.LBB17_65:                              # %cond.false364
                                        #   in Loop: Header=BB17_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB17_66:                              # %cond.end387
                                        #   in Loop: Header=BB17_60 Depth=4
.LBB17_67:                              # %cond.end389
                                        #   in Loop: Header=BB17_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB17_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_60
.LBB17_69:                              # %for.end400
                                        #   in Loop: Header=BB17_58 Depth=3
	jmp	.LBB17_70
.LBB17_70:                              # %for.inc401
                                        #   in Loop: Header=BB17_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_58
.LBB17_71:                              # %for.end403
                                        #   in Loop: Header=BB17_27 Depth=2
	jmp	.LBB17_72
.LBB17_72:                              # %for.inc404
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_27
.LBB17_73:                              # %for.end406
                                        #   in Loop: Header=BB17_25 Depth=1
	jmp	.LBB17_74
.LBB17_74:                              # %for.inc407
                                        #   in Loop: Header=BB17_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_25
.LBB17_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB17_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_78 Depth 2
                                        #       Child Loop BB17_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB17_76 Depth=1
	movl	$0, -20(%rbp)
.LBB17_78:                              # %for.cond415
                                        #   Parent Loop BB17_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB17_78 Depth=2
	movl	$0, -24(%rbp)
.LBB17_80:                              # %for.cond421
                                        #   Parent Loop BB17_76 Depth=1
                                        #     Parent Loop BB17_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB17_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB17_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB17_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_80
.LBB17_83:                              # %for.end451
                                        #   in Loop: Header=BB17_78 Depth=2
	jmp	.LBB17_84
.LBB17_84:                              # %for.inc452
                                        #   in Loop: Header=BB17_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_78
.LBB17_85:                              # %for.end454
                                        #   in Loop: Header=BB17_76 Depth=1
	jmp	.LBB17_86
.LBB17_86:                              # %for.inc455
                                        #   in Loop: Header=BB17_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_76
.LBB17_87:                              # %for.end457
	cmpl	$872874146, -60(%rbp)   # imm = 0x340700A2
	jne	.LBB17_89
.LBB17_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_88
.Lfunc_end17:
	.size	estimate_weighting_factor_P_slice.14, .Lfunc_end17-estimate_weighting_factor_P_slice.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.15
.LCPI18_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.15
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.15,@function
estimate_weighting_factor_B_slice.15:   # @estimate_weighting_factor_B_slice.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1717680231, -88(%rbp)  # imm = 0x6661B867
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB18_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB18_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB18_4
.LBB18_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB18_4
.LBB18_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB18_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB18_7
.LBB18_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB18_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB18_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_10 Depth 2
                                        #       Child Loop BB18_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB18_8 Depth=1
	movl	$0, -8(%rbp)
.LBB18_10:                              # %for.cond14
                                        #   Parent Loop BB18_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB18_10 Depth=2
	movl	$0, -16(%rbp)
.LBB18_12:                              # %for.cond19
                                        #   Parent Loop BB18_8 Depth=1
                                        #     Parent Loop BB18_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB18_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB18_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB18_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_12
.LBB18_15:                              # %for.end
                                        #   in Loop: Header=BB18_10 Depth=2
	jmp	.LBB18_16
.LBB18_16:                              # %for.inc50
                                        #   in Loop: Header=BB18_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_10
.LBB18_17:                              # %for.end52
                                        #   in Loop: Header=BB18_8 Depth=1
	jmp	.LBB18_18
.LBB18_18:                              # %for.inc53
                                        #   in Loop: Header=BB18_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_8
.LBB18_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB18_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_22 Depth 2
                                        #       Child Loop BB18_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB18_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB18_20 Depth=1
	movl	$0, -8(%rbp)
.LBB18_22:                              # %for.cond59
                                        #   Parent Loop BB18_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB18_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB18_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB18_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB18_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB18_29
.LBB18_25:                              # %cond.false70
                                        #   in Loop: Header=BB18_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB18_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB18_22 Depth=2
	movl	$127, %eax
	jmp	.LBB18_28
.LBB18_27:                              # %cond.false80
                                        #   in Loop: Header=BB18_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB18_28:                              # %cond.end88
                                        #   in Loop: Header=BB18_22 Depth=2
.LBB18_29:                              # %cond.end90
                                        #   in Loop: Header=BB18_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB18_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB18_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB18_35
.LBB18_31:                              # %cond.false99
                                        #   in Loop: Header=BB18_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB18_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB18_22 Depth=2
	movl	$127, %eax
	jmp	.LBB18_34
.LBB18_33:                              # %cond.false107
                                        #   in Loop: Header=BB18_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB18_34:                              # %cond.end113
                                        #   in Loop: Header=BB18_22 Depth=2
.LBB18_35:                              # %cond.end115
                                        #   in Loop: Header=BB18_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB18_36:                              # %for.cond117
                                        #   Parent Loop BB18_20 Depth=1
                                        #     Parent Loop BB18_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB18_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB18_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB18_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB18_49
.LBB18_39:                              # %if.else154
                                        #   in Loop: Header=BB18_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB18_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB18_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB18_45
.LBB18_41:                              # %cond.false160
                                        #   in Loop: Header=BB18_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB18_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB18_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB18_44
.LBB18_43:                              # %cond.false166
                                        #   in Loop: Header=BB18_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB18_44:                              # %cond.end170
                                        #   in Loop: Header=BB18_36 Depth=3
.LBB18_45:                              # %cond.end172
                                        #   in Loop: Header=BB18_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB18_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB18_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB18_48
.LBB18_47:                              # %if.then198
                                        #   in Loop: Header=BB18_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB18_48:                              # %if.end208
                                        #   in Loop: Header=BB18_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB18_49:                              # %if.end238
                                        #   in Loop: Header=BB18_36 Depth=3
	jmp	.LBB18_50
.LBB18_50:                              # %for.inc239
                                        #   in Loop: Header=BB18_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_36
.LBB18_51:                              # %for.end241
                                        #   in Loop: Header=BB18_22 Depth=2
	jmp	.LBB18_52
.LBB18_52:                              # %for.inc242
                                        #   in Loop: Header=BB18_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_22
.LBB18_53:                              # %for.end244
                                        #   in Loop: Header=BB18_20 Depth=1
	jmp	.LBB18_54
.LBB18_54:                              # %for.inc245
                                        #   in Loop: Header=BB18_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_20
.LBB18_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB18_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB18_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_59 Depth 2
                                        #       Child Loop BB18_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB18_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB18_57 Depth=1
	movl	$0, -8(%rbp)
.LBB18_59:                              # %for.cond254
                                        #   Parent Loop BB18_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB18_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB18_59 Depth=2
	movl	$0, -20(%rbp)
.LBB18_61:                              # %for.cond257
                                        #   Parent Loop BB18_57 Depth=1
                                        #     Parent Loop BB18_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB18_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB18_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB18_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB18_65
.LBB18_64:                              # %cond.false262
                                        #   in Loop: Header=BB18_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB18_65:                              # %cond.end263
                                        #   in Loop: Header=BB18_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB18_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_61
.LBB18_67:                              # %for.end295
                                        #   in Loop: Header=BB18_59 Depth=2
	jmp	.LBB18_68
.LBB18_68:                              # %for.inc296
                                        #   in Loop: Header=BB18_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_59
.LBB18_69:                              # %for.end298
                                        #   in Loop: Header=BB18_57 Depth=1
	jmp	.LBB18_70
.LBB18_70:                              # %for.inc299
                                        #   in Loop: Header=BB18_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_57
.LBB18_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB18_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB18_72 Depth=1
	movl	$0, -24(%rbp)
.LBB18_74:                              # %for.cond306
                                        #   Parent Loop BB18_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB18_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB18_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_74
.LBB18_77:                              # %for.end346
                                        #   in Loop: Header=BB18_72 Depth=1
	jmp	.LBB18_78
.LBB18_78:                              # %for.inc347
                                        #   in Loop: Header=BB18_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_72
.LBB18_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB18_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_82 Depth 2
                                        #       Child Loop BB18_84 Depth 3
                                        #       Child Loop BB18_88 Depth 3
                                        #         Child Loop BB18_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB18_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB18_80 Depth=1
	movl	$0, -8(%rbp)
.LBB18_82:                              # %for.cond353
                                        #   Parent Loop BB18_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_84 Depth 3
                                        #       Child Loop BB18_88 Depth 3
                                        #         Child Loop BB18_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB18_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB18_82 Depth=2
	movl	$0, -16(%rbp)
.LBB18_84:                              # %for.cond356
                                        #   Parent Loop BB18_80 Depth=1
                                        #     Parent Loop BB18_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB18_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB18_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_84
.LBB18_87:                              # %for.end380
                                        #   in Loop: Header=BB18_82 Depth=2
	movl	$0, -16(%rbp)
.LBB18_88:                              # %for.cond381
                                        #   Parent Loop BB18_80 Depth=1
                                        #     Parent Loop BB18_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB18_88 Depth=3
	movl	$0, -32(%rbp)
.LBB18_90:                              # %for.cond387
                                        #   Parent Loop BB18_80 Depth=1
                                        #     Parent Loop BB18_82 Depth=2
                                        #       Parent Loop BB18_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB18_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB18_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB18_90
.LBB18_93:                              # %for.end421
                                        #   in Loop: Header=BB18_88 Depth=3
	jmp	.LBB18_94
.LBB18_94:                              # %for.inc422
                                        #   in Loop: Header=BB18_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_88
.LBB18_95:                              # %for.end424
                                        #   in Loop: Header=BB18_82 Depth=2
	jmp	.LBB18_96
.LBB18_96:                              # %for.inc425
                                        #   in Loop: Header=BB18_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_82
.LBB18_97:                              # %for.end427
                                        #   in Loop: Header=BB18_80 Depth=1
	jmp	.LBB18_98
.LBB18_98:                              # %for.inc428
                                        #   in Loop: Header=BB18_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_80
.LBB18_99:                              # %for.end430
	jmp	.LBB18_189
.LBB18_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB18_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB18_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB18_101 Depth=1
	movl	$0, -8(%rbp)
.LBB18_103:                             # %for.cond436
                                        #   Parent Loop BB18_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB18_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB18_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB18_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_103
.LBB18_106:                             # %for.end447
                                        #   in Loop: Header=BB18_101 Depth=1
	jmp	.LBB18_107
.LBB18_107:                             # %for.inc448
                                        #   in Loop: Header=BB18_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_101
.LBB18_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB18_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_111 Depth 2
                                        #       Child Loop BB18_113 Depth 3
                                        #       Child Loop BB18_123 Depth 3
                                        #       Child Loop BB18_133 Depth 3
                                        #         Child Loop BB18_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB18_109 Depth=1
	movl	$0, -16(%rbp)
.LBB18_111:                             # %for.cond456
                                        #   Parent Loop BB18_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_113 Depth 3
                                        #       Child Loop BB18_123 Depth 3
                                        #       Child Loop BB18_133 Depth 3
                                        #         Child Loop BB18_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB18_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB18_113:                             # %for.cond476
                                        #   Parent Loop BB18_109 Depth=1
                                        #     Parent Loop BB18_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB18_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB18_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_113
.LBB18_116:                             # %for.end493
                                        #   in Loop: Header=BB18_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB18_117
	jp	.LBB18_117
	jmp	.LBB18_118
.LBB18_117:                             # %if.then500
                                        #   in Loop: Header=BB18_111 Depth=2
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB18_119
.LBB18_118:                             # %if.else511
                                        #   in Loop: Header=BB18_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB18_119:                             # %if.end513
                                        #   in Loop: Header=BB18_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB18_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB18_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB18_122
.LBB18_121:                             # %if.then519
                                        #   in Loop: Header=BB18_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB18_122:                             # %if.end521
                                        #   in Loop: Header=BB18_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB18_123:                             # %for.cond554
                                        #   Parent Loop BB18_109 Depth=1
                                        #     Parent Loop BB18_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB18_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB18_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB18_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB18_130
.LBB18_126:                             # %cond.false571
                                        #   in Loop: Header=BB18_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB18_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB18_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_129
.LBB18_128:                             # %cond.false583
                                        #   in Loop: Header=BB18_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB18_129:                             # %cond.end591
                                        #   in Loop: Header=BB18_123 Depth=3
.LBB18_130:                             # %cond.end593
                                        #   in Loop: Header=BB18_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB18_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_123
.LBB18_132:                             # %for.end600
                                        #   in Loop: Header=BB18_111 Depth=2
	movl	$0, -4(%rbp)
.LBB18_133:                             # %for.cond601
                                        #   Parent Loop BB18_109 Depth=1
                                        #     Parent Loop BB18_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB18_133 Depth=3
	movl	$0, -8(%rbp)
.LBB18_135:                             # %for.cond608
                                        #   Parent Loop BB18_109 Depth=1
                                        #     Parent Loop BB18_111 Depth=2
                                        #       Parent Loop BB18_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB18_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB18_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB18_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB18_142
.LBB18_138:                             # %cond.false630
                                        #   in Loop: Header=BB18_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB18_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB18_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB18_141
.LBB18_140:                             # %cond.false648
                                        #   in Loop: Header=BB18_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB18_141:                             # %cond.end661
                                        #   in Loop: Header=BB18_135 Depth=4
.LBB18_142:                             # %cond.end663
                                        #   in Loop: Header=BB18_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB18_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_135
.LBB18_144:                             # %for.end675
                                        #   in Loop: Header=BB18_133 Depth=3
	jmp	.LBB18_145
.LBB18_145:                             # %for.inc676
                                        #   in Loop: Header=BB18_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_133
.LBB18_146:                             # %for.end678
                                        #   in Loop: Header=BB18_111 Depth=2
	jmp	.LBB18_147
.LBB18_147:                             # %for.inc679
                                        #   in Loop: Header=BB18_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_111
.LBB18_148:                             # %for.end681
                                        #   in Loop: Header=BB18_109 Depth=1
	jmp	.LBB18_149
.LBB18_149:                             # %for.inc682
                                        #   in Loop: Header=BB18_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_109
.LBB18_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB18_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB18_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_154 Depth 2
                                        #       Child Loop BB18_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB18_152 Depth=1
	movl	$0, -24(%rbp)
.LBB18_154:                             # %for.cond694
                                        #   Parent Loop BB18_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB18_154 Depth=2
	movl	$0, -20(%rbp)
.LBB18_156:                             # %for.cond700
                                        #   Parent Loop BB18_152 Depth=1
                                        #     Parent Loop BB18_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB18_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB18_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_156
.LBB18_159:                             # %for.end730
                                        #   in Loop: Header=BB18_154 Depth=2
	jmp	.LBB18_160
.LBB18_160:                             # %for.inc731
                                        #   in Loop: Header=BB18_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_154
.LBB18_161:                             # %for.end733
                                        #   in Loop: Header=BB18_152 Depth=1
	jmp	.LBB18_162
.LBB18_162:                             # %for.inc734
                                        #   in Loop: Header=BB18_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_152
.LBB18_163:                             # %for.end736
	jmp	.LBB18_173
.LBB18_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB18_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB18_165 Depth=1
	movl	$0, -24(%rbp)
.LBB18_167:                             # %for.cond743
                                        #   Parent Loop BB18_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB18_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB18_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_167
.LBB18_170:                             # %for.end784
                                        #   in Loop: Header=BB18_165 Depth=1
	jmp	.LBB18_171
.LBB18_171:                             # %for.inc785
                                        #   in Loop: Header=BB18_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_165
.LBB18_172:                             # %for.end787
	jmp	.LBB18_173
.LBB18_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB18_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_176 Depth 2
                                        #       Child Loop BB18_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB18_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB18_174 Depth=1
	movl	$0, -8(%rbp)
.LBB18_176:                             # %for.cond793
                                        #   Parent Loop BB18_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB18_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB18_176 Depth=2
	movl	$0, -20(%rbp)
.LBB18_178:                             # %for.cond797
                                        #   Parent Loop BB18_174 Depth=1
                                        #     Parent Loop BB18_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB18_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB18_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB18_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB18_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB18_182
.LBB18_181:                             # %cond.false804
                                        #   in Loop: Header=BB18_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB18_182:                             # %cond.end805
                                        #   in Loop: Header=BB18_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB18_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_178
.LBB18_184:                             # %for.end833
                                        #   in Loop: Header=BB18_176 Depth=2
	jmp	.LBB18_185
.LBB18_185:                             # %for.inc834
                                        #   in Loop: Header=BB18_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_176
.LBB18_186:                             # %for.end836
                                        #   in Loop: Header=BB18_174 Depth=1
	jmp	.LBB18_187
.LBB18_187:                             # %for.inc837
                                        #   in Loop: Header=BB18_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_174
.LBB18_188:                             # %for.end839
	jmp	.LBB18_189
.LBB18_189:                             # %if.end840
	cmpl	$1717680231, -88(%rbp)  # imm = 0x6661B867
	jne	.LBB18_191
.LBB18_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_190
.Lfunc_end18:
	.size	estimate_weighting_factor_B_slice.15, .Lfunc_end18-estimate_weighting_factor_B_slice.15
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.16
.LCPI19_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.16
	.p2align	4, 0x90
	.type	test_wp_P_slice.16,@function
test_wp_P_slice.16:                     # @test_wp_P_slice.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1026883679, -64(%rbp)  # imm = 0x3D35005F
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB19_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB19_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB19_4
.LBB19_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB19_4
.LBB19_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB19_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_7 Depth 2
                                        #       Child Loop BB19_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB19_5 Depth=1
	movl	$0, -24(%rbp)
.LBB19_7:                               # %for.cond9
                                        #   Parent Loop BB19_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB19_7 Depth=2
	movl	$0, -12(%rbp)
.LBB19_9:                               # %for.cond14
                                        #   Parent Loop BB19_5 Depth=1
                                        #     Parent Loop BB19_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB19_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB19_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB19_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_9
.LBB19_12:                              # %for.end
                                        #   in Loop: Header=BB19_7 Depth=2
	jmp	.LBB19_13
.LBB19_13:                              # %for.inc41
                                        #   in Loop: Header=BB19_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_7
.LBB19_14:                              # %for.end43
                                        #   in Loop: Header=BB19_5 Depth=1
	jmp	.LBB19_15
.LBB19_15:                              # %for.inc44
                                        #   in Loop: Header=BB19_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_5
.LBB19_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB19_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB19_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	$0, -24(%rbp)
.LBB19_19:                              # %for.cond50
                                        #   Parent Loop BB19_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB19_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB19_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB19_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_19
.LBB19_22:                              # %for.end60
                                        #   in Loop: Header=BB19_17 Depth=1
	jmp	.LBB19_23
.LBB19_23:                              # %for.inc61
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_17
.LBB19_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB19_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_27 Depth 2
                                        #       Child Loop BB19_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	$0, -12(%rbp)
.LBB19_27:                              # %for.cond69
                                        #   Parent Loop BB19_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB19_29:                              # %for.cond85
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB19_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB19_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_29
.LBB19_32:                              # %for.end99
                                        #   in Loop: Header=BB19_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB19_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB19_34
	jp	.LBB19_34
	jmp	.LBB19_35
.LBB19_34:                              # %if.then106
                                        #   in Loop: Header=BB19_27 Depth=2
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB19_36
.LBB19_35:                              # %if.else
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB19_36:                              # %if.end
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB19_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB19_39
.LBB19_38:                              # %if.then137
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB19_39:                              # %if.end143
                                        #   in Loop: Header=BB19_27 Depth=2
	jmp	.LBB19_47
.LBB19_40:                              # %if.else144
                                        #   in Loop: Header=BB19_27 Depth=2
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB19_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB19_46
.LBB19_42:                              # %cond.false168
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB19_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	$127, %eax
	jmp	.LBB19_45
.LBB19_44:                              # %cond.false177
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB19_45:                              # %cond.end183
                                        #   in Loop: Header=BB19_27 Depth=2
.LBB19_46:                              # %cond.end185
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB19_47:                              # %if.end197
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_27
.LBB19_49:                              # %for.end210
                                        #   in Loop: Header=BB19_25 Depth=1
	jmp	.LBB19_50
.LBB19_50:                              # %for.inc211
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_25
.LBB19_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB19_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_54 Depth 2
                                        #       Child Loop BB19_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB19_52 Depth=1
	movl	$0, -36(%rbp)
.LBB19_54:                              # %for.cond219
                                        #   Parent Loop BB19_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB19_54 Depth=2
	movl	$0, -32(%rbp)
.LBB19_56:                              # %for.cond225
                                        #   Parent Loop BB19_52 Depth=1
                                        #     Parent Loop BB19_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB19_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB19_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB19_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB19_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB19_60
.LBB19_59:                              # %if.then246
                                        #   in Loop: Header=BB19_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB19_63
.LBB19_60:                              # %if.end247
                                        #   in Loop: Header=BB19_56 Depth=3
	jmp	.LBB19_61
.LBB19_61:                              # %for.inc248
                                        #   in Loop: Header=BB19_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB19_56
.LBB19_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB19_54 Depth=2
	jmp	.LBB19_63
.LBB19_63:                              # %for.end250
                                        #   in Loop: Header=BB19_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB19_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB19_52 Depth=1
	jmp	.LBB19_68
.LBB19_65:                              # %if.end254
                                        #   in Loop: Header=BB19_54 Depth=2
	jmp	.LBB19_66
.LBB19_66:                              # %for.inc255
                                        #   in Loop: Header=BB19_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB19_54
.LBB19_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB19_52 Depth=1
	jmp	.LBB19_68
.LBB19_68:                              # %for.end257
                                        #   in Loop: Header=BB19_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB19_70
# %bb.69:                               # %if.then260
	jmp	.LBB19_73
.LBB19_70:                              # %if.end261
                                        #   in Loop: Header=BB19_52 Depth=1
	jmp	.LBB19_71
.LBB19_71:                              # %for.inc262
                                        #   in Loop: Header=BB19_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_52
.LBB19_72:                              # %for.end264.loopexit
	jmp	.LBB19_73
.LBB19_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1026883679, -64(%rbp)  # imm = 0x3D35005F
	jne	.LBB19_75
.LBB19_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_74
.Lfunc_end19:
	.size	test_wp_P_slice.16, .Lfunc_end19-test_wp_P_slice.16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.17
.LCPI20_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.17
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.17,@function
estimate_weighting_factor_B_slice.17:   # @estimate_weighting_factor_B_slice.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$313702349, -84(%rbp)   # imm = 0x12B2B7CD
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB20_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB20_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB20_4
.LBB20_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB20_4
.LBB20_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB20_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB20_7
.LBB20_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB20_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB20_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_10 Depth 2
                                        #       Child Loop BB20_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB20_8 Depth=1
	movl	$0, -8(%rbp)
.LBB20_10:                              # %for.cond14
                                        #   Parent Loop BB20_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB20_10 Depth=2
	movl	$0, -16(%rbp)
.LBB20_12:                              # %for.cond19
                                        #   Parent Loop BB20_8 Depth=1
                                        #     Parent Loop BB20_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB20_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB20_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB20_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_12
.LBB20_15:                              # %for.end
                                        #   in Loop: Header=BB20_10 Depth=2
	jmp	.LBB20_16
.LBB20_16:                              # %for.inc50
                                        #   in Loop: Header=BB20_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_10
.LBB20_17:                              # %for.end52
                                        #   in Loop: Header=BB20_8 Depth=1
	jmp	.LBB20_18
.LBB20_18:                              # %for.inc53
                                        #   in Loop: Header=BB20_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_8
.LBB20_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB20_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_22 Depth 2
                                        #       Child Loop BB20_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB20_20 Depth=1
	movl	$0, -8(%rbp)
.LBB20_22:                              # %for.cond59
                                        #   Parent Loop BB20_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB20_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB20_29
.LBB20_25:                              # %cond.false70
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB20_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	$127, %eax
	jmp	.LBB20_28
.LBB20_27:                              # %cond.false80
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB20_28:                              # %cond.end88
                                        #   in Loop: Header=BB20_22 Depth=2
.LBB20_29:                              # %cond.end90
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB20_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB20_35
.LBB20_31:                              # %cond.false99
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB20_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	$127, %eax
	jmp	.LBB20_34
.LBB20_33:                              # %cond.false107
                                        #   in Loop: Header=BB20_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB20_34:                              # %cond.end113
                                        #   in Loop: Header=BB20_22 Depth=2
.LBB20_35:                              # %cond.end115
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB20_36:                              # %for.cond117
                                        #   Parent Loop BB20_20 Depth=1
                                        #     Parent Loop BB20_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB20_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB20_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB20_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB20_49
.LBB20_39:                              # %if.else154
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB20_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB20_45
.LBB20_41:                              # %cond.false160
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB20_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB20_44
.LBB20_43:                              # %cond.false166
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB20_44:                              # %cond.end170
                                        #   in Loop: Header=BB20_36 Depth=3
.LBB20_45:                              # %cond.end172
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB20_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB20_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB20_48
.LBB20_47:                              # %if.then198
                                        #   in Loop: Header=BB20_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB20_48:                              # %if.end208
                                        #   in Loop: Header=BB20_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB20_49:                              # %if.end238
                                        #   in Loop: Header=BB20_36 Depth=3
	jmp	.LBB20_50
.LBB20_50:                              # %for.inc239
                                        #   in Loop: Header=BB20_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_36
.LBB20_51:                              # %for.end241
                                        #   in Loop: Header=BB20_22 Depth=2
	jmp	.LBB20_52
.LBB20_52:                              # %for.inc242
                                        #   in Loop: Header=BB20_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_22
.LBB20_53:                              # %for.end244
                                        #   in Loop: Header=BB20_20 Depth=1
	jmp	.LBB20_54
.LBB20_54:                              # %for.inc245
                                        #   in Loop: Header=BB20_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_20
.LBB20_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB20_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB20_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_59 Depth 2
                                        #       Child Loop BB20_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB20_57 Depth=1
	movl	$0, -8(%rbp)
.LBB20_59:                              # %for.cond254
                                        #   Parent Loop BB20_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB20_59 Depth=2
	movl	$0, -20(%rbp)
.LBB20_61:                              # %for.cond257
                                        #   Parent Loop BB20_57 Depth=1
                                        #     Parent Loop BB20_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB20_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB20_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB20_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB20_65
.LBB20_64:                              # %cond.false262
                                        #   in Loop: Header=BB20_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB20_65:                              # %cond.end263
                                        #   in Loop: Header=BB20_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB20_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_61
.LBB20_67:                              # %for.end295
                                        #   in Loop: Header=BB20_59 Depth=2
	jmp	.LBB20_68
.LBB20_68:                              # %for.inc296
                                        #   in Loop: Header=BB20_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_59
.LBB20_69:                              # %for.end298
                                        #   in Loop: Header=BB20_57 Depth=1
	jmp	.LBB20_70
.LBB20_70:                              # %for.inc299
                                        #   in Loop: Header=BB20_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_57
.LBB20_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB20_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB20_72 Depth=1
	movl	$0, -24(%rbp)
.LBB20_74:                              # %for.cond306
                                        #   Parent Loop BB20_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB20_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB20_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_74
.LBB20_77:                              # %for.end346
                                        #   in Loop: Header=BB20_72 Depth=1
	jmp	.LBB20_78
.LBB20_78:                              # %for.inc347
                                        #   in Loop: Header=BB20_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_72
.LBB20_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB20_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_82 Depth 2
                                        #       Child Loop BB20_84 Depth 3
                                        #       Child Loop BB20_88 Depth 3
                                        #         Child Loop BB20_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB20_80 Depth=1
	movl	$0, -8(%rbp)
.LBB20_82:                              # %for.cond353
                                        #   Parent Loop BB20_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_84 Depth 3
                                        #       Child Loop BB20_88 Depth 3
                                        #         Child Loop BB20_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB20_82 Depth=2
	movl	$0, -16(%rbp)
.LBB20_84:                              # %for.cond356
                                        #   Parent Loop BB20_80 Depth=1
                                        #     Parent Loop BB20_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB20_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB20_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_84
.LBB20_87:                              # %for.end380
                                        #   in Loop: Header=BB20_82 Depth=2
	movl	$0, -16(%rbp)
.LBB20_88:                              # %for.cond381
                                        #   Parent Loop BB20_80 Depth=1
                                        #     Parent Loop BB20_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB20_88 Depth=3
	movl	$0, -32(%rbp)
.LBB20_90:                              # %for.cond387
                                        #   Parent Loop BB20_80 Depth=1
                                        #     Parent Loop BB20_82 Depth=2
                                        #       Parent Loop BB20_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB20_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB20_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB20_90
.LBB20_93:                              # %for.end421
                                        #   in Loop: Header=BB20_88 Depth=3
	jmp	.LBB20_94
.LBB20_94:                              # %for.inc422
                                        #   in Loop: Header=BB20_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_88
.LBB20_95:                              # %for.end424
                                        #   in Loop: Header=BB20_82 Depth=2
	jmp	.LBB20_96
.LBB20_96:                              # %for.inc425
                                        #   in Loop: Header=BB20_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_82
.LBB20_97:                              # %for.end427
                                        #   in Loop: Header=BB20_80 Depth=1
	jmp	.LBB20_98
.LBB20_98:                              # %for.inc428
                                        #   in Loop: Header=BB20_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_80
.LBB20_99:                              # %for.end430
	jmp	.LBB20_189
.LBB20_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB20_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB20_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB20_101 Depth=1
	movl	$0, -8(%rbp)
.LBB20_103:                             # %for.cond436
                                        #   Parent Loop BB20_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB20_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB20_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB20_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_103
.LBB20_106:                             # %for.end447
                                        #   in Loop: Header=BB20_101 Depth=1
	jmp	.LBB20_107
.LBB20_107:                             # %for.inc448
                                        #   in Loop: Header=BB20_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_101
.LBB20_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB20_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_111 Depth 2
                                        #       Child Loop BB20_113 Depth 3
                                        #       Child Loop BB20_123 Depth 3
                                        #       Child Loop BB20_133 Depth 3
                                        #         Child Loop BB20_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB20_109 Depth=1
	movl	$0, -16(%rbp)
.LBB20_111:                             # %for.cond456
                                        #   Parent Loop BB20_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_113 Depth 3
                                        #       Child Loop BB20_123 Depth 3
                                        #       Child Loop BB20_133 Depth 3
                                        #         Child Loop BB20_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB20_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB20_113:                             # %for.cond476
                                        #   Parent Loop BB20_109 Depth=1
                                        #     Parent Loop BB20_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB20_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB20_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_113
.LBB20_116:                             # %for.end493
                                        #   in Loop: Header=BB20_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB20_117
	jp	.LBB20_117
	jmp	.LBB20_118
.LBB20_117:                             # %if.then500
                                        #   in Loop: Header=BB20_111 Depth=2
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB20_119
.LBB20_118:                             # %if.else511
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB20_119:                             # %if.end513
                                        #   in Loop: Header=BB20_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB20_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB20_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB20_122
.LBB20_121:                             # %if.then519
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB20_122:                             # %if.end521
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB20_123:                             # %for.cond554
                                        #   Parent Loop BB20_109 Depth=1
                                        #     Parent Loop BB20_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB20_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB20_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB20_130
.LBB20_126:                             # %cond.false571
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB20_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_129
.LBB20_128:                             # %cond.false583
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB20_129:                             # %cond.end591
                                        #   in Loop: Header=BB20_123 Depth=3
.LBB20_130:                             # %cond.end593
                                        #   in Loop: Header=BB20_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB20_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_123
.LBB20_132:                             # %for.end600
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	$0, -4(%rbp)
.LBB20_133:                             # %for.cond601
                                        #   Parent Loop BB20_109 Depth=1
                                        #     Parent Loop BB20_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB20_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB20_133 Depth=3
	movl	$0, -8(%rbp)
.LBB20_135:                             # %for.cond608
                                        #   Parent Loop BB20_109 Depth=1
                                        #     Parent Loop BB20_111 Depth=2
                                        #       Parent Loop BB20_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB20_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB20_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB20_142
.LBB20_138:                             # %cond.false630
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB20_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_141
.LBB20_140:                             # %cond.false648
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB20_141:                             # %cond.end661
                                        #   in Loop: Header=BB20_135 Depth=4
.LBB20_142:                             # %cond.end663
                                        #   in Loop: Header=BB20_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB20_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_135
.LBB20_144:                             # %for.end675
                                        #   in Loop: Header=BB20_133 Depth=3
	jmp	.LBB20_145
.LBB20_145:                             # %for.inc676
                                        #   in Loop: Header=BB20_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_133
.LBB20_146:                             # %for.end678
                                        #   in Loop: Header=BB20_111 Depth=2
	jmp	.LBB20_147
.LBB20_147:                             # %for.inc679
                                        #   in Loop: Header=BB20_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_111
.LBB20_148:                             # %for.end681
                                        #   in Loop: Header=BB20_109 Depth=1
	jmp	.LBB20_149
.LBB20_149:                             # %for.inc682
                                        #   in Loop: Header=BB20_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_109
.LBB20_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB20_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB20_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_154 Depth 2
                                        #       Child Loop BB20_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB20_152 Depth=1
	movl	$0, -24(%rbp)
.LBB20_154:                             # %for.cond694
                                        #   Parent Loop BB20_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB20_154 Depth=2
	movl	$0, -20(%rbp)
.LBB20_156:                             # %for.cond700
                                        #   Parent Loop BB20_152 Depth=1
                                        #     Parent Loop BB20_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB20_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB20_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_156
.LBB20_159:                             # %for.end730
                                        #   in Loop: Header=BB20_154 Depth=2
	jmp	.LBB20_160
.LBB20_160:                             # %for.inc731
                                        #   in Loop: Header=BB20_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_154
.LBB20_161:                             # %for.end733
                                        #   in Loop: Header=BB20_152 Depth=1
	jmp	.LBB20_162
.LBB20_162:                             # %for.inc734
                                        #   in Loop: Header=BB20_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_152
.LBB20_163:                             # %for.end736
	jmp	.LBB20_173
.LBB20_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB20_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB20_165 Depth=1
	movl	$0, -24(%rbp)
.LBB20_167:                             # %for.cond743
                                        #   Parent Loop BB20_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB20_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB20_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_167
.LBB20_170:                             # %for.end784
                                        #   in Loop: Header=BB20_165 Depth=1
	jmp	.LBB20_171
.LBB20_171:                             # %for.inc785
                                        #   in Loop: Header=BB20_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_165
.LBB20_172:                             # %for.end787
	jmp	.LBB20_173
.LBB20_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB20_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_176 Depth 2
                                        #       Child Loop BB20_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB20_174 Depth=1
	movl	$0, -8(%rbp)
.LBB20_176:                             # %for.cond793
                                        #   Parent Loop BB20_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB20_176 Depth=2
	movl	$0, -20(%rbp)
.LBB20_178:                             # %for.cond797
                                        #   Parent Loop BB20_174 Depth=1
                                        #     Parent Loop BB20_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB20_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB20_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB20_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB20_182
.LBB20_181:                             # %cond.false804
                                        #   in Loop: Header=BB20_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB20_182:                             # %cond.end805
                                        #   in Loop: Header=BB20_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB20_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_178
.LBB20_184:                             # %for.end833
                                        #   in Loop: Header=BB20_176 Depth=2
	jmp	.LBB20_185
.LBB20_185:                             # %for.inc834
                                        #   in Loop: Header=BB20_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_176
.LBB20_186:                             # %for.end836
                                        #   in Loop: Header=BB20_174 Depth=1
	jmp	.LBB20_187
.LBB20_187:                             # %for.inc837
                                        #   in Loop: Header=BB20_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_174
.LBB20_188:                             # %for.end839
	jmp	.LBB20_189
.LBB20_189:                             # %if.end840
	cmpl	$313702349, -84(%rbp)   # imm = 0x12B2B7CD
	jne	.LBB20_191
.LBB20_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_190
.Lfunc_end20:
	.size	estimate_weighting_factor_B_slice.17, .Lfunc_end20-estimate_weighting_factor_B_slice.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.18
.LCPI21_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.18
	.p2align	4, 0x90
	.type	test_wp_B_slice.18,@function
test_wp_B_slice.18:                     # @test_wp_B_slice.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1490425186, -88(%rbp)  # imm = 0x58D61562
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB21_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB21_4
.LBB21_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB21_4
.LBB21_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB21_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_7 Depth 2
                                        #       Child Loop BB21_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB21_5 Depth=1
	movl	$0, -24(%rbp)
.LBB21_7:                               # %for.cond9
                                        #   Parent Loop BB21_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB21_7 Depth=2
	movl	$0, -32(%rbp)
.LBB21_9:                               # %for.cond14
                                        #   Parent Loop BB21_5 Depth=1
                                        #     Parent Loop BB21_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB21_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB21_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB21_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB21_9
.LBB21_12:                              # %for.end
                                        #   in Loop: Header=BB21_7 Depth=2
	jmp	.LBB21_13
.LBB21_13:                              # %for.inc41
                                        #   in Loop: Header=BB21_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_7
.LBB21_14:                              # %for.end43
                                        #   in Loop: Header=BB21_5 Depth=1
	jmp	.LBB21_15
.LBB21_15:                              # %for.inc44
                                        #   in Loop: Header=BB21_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_5
.LBB21_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB21_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_19 Depth 2
                                        #       Child Loop BB21_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB21_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	$0, -24(%rbp)
.LBB21_19:                              # %for.cond50
                                        #   Parent Loop BB21_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB21_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB21_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB21_26
.LBB21_22:                              # %cond.false61
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB21_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$127, %eax
	jmp	.LBB21_25
.LBB21_24:                              # %cond.false71
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB21_25:                              # %cond.end79
                                        #   in Loop: Header=BB21_19 Depth=2
.LBB21_26:                              # %cond.end81
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB21_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB21_32
.LBB21_28:                              # %cond.false90
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB21_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$127, %eax
	jmp	.LBB21_31
.LBB21_30:                              # %cond.false98
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB21_31:                              # %cond.end104
                                        #   in Loop: Header=BB21_19 Depth=2
.LBB21_32:                              # %cond.end106
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB21_33:                              # %for.cond108
                                        #   Parent Loop BB21_17 Depth=1
                                        #     Parent Loop BB21_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB21_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB21_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB21_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB21_46
.LBB21_36:                              # %if.else
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB21_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB21_42
.LBB21_38:                              # %cond.false145
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB21_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB21_41
.LBB21_40:                              # %cond.false151
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB21_41:                              # %cond.end155
                                        #   in Loop: Header=BB21_33 Depth=3
.LBB21_42:                              # %cond.end157
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB21_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB21_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB21_45
.LBB21_44:                              # %if.then183
                                        #   in Loop: Header=BB21_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB21_45:                              # %if.end
                                        #   in Loop: Header=BB21_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB21_46:                              # %if.end220
                                        #   in Loop: Header=BB21_33 Depth=3
	jmp	.LBB21_47
.LBB21_47:                              # %for.inc221
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_33
.LBB21_48:                              # %for.end223
                                        #   in Loop: Header=BB21_19 Depth=2
	jmp	.LBB21_49
.LBB21_49:                              # %for.inc224
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_19
.LBB21_50:                              # %for.end226
                                        #   in Loop: Header=BB21_17 Depth=1
	jmp	.LBB21_51
.LBB21_51:                              # %for.inc227
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_17
.LBB21_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB21_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB21_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_56 Depth 2
                                        #       Child Loop BB21_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB21_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB21_54 Depth=1
	movl	$0, -24(%rbp)
.LBB21_56:                              # %for.cond235
                                        #   Parent Loop BB21_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB21_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB21_56 Depth=2
	movl	$0, -20(%rbp)
.LBB21_58:                              # %for.cond238
                                        #   Parent Loop BB21_54 Depth=1
                                        #     Parent Loop BB21_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB21_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB21_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB21_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB21_62
.LBB21_61:                              # %cond.false243
                                        #   in Loop: Header=BB21_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB21_62:                              # %cond.end244
                                        #   in Loop: Header=BB21_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB21_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_58
.LBB21_64:                              # %for.end276
                                        #   in Loop: Header=BB21_56 Depth=2
	jmp	.LBB21_65
.LBB21_65:                              # %for.inc277
                                        #   in Loop: Header=BB21_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_56
.LBB21_66:                              # %for.end279
                                        #   in Loop: Header=BB21_54 Depth=1
	jmp	.LBB21_67
.LBB21_67:                              # %for.inc280
                                        #   in Loop: Header=BB21_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_54
.LBB21_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB21_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB21_69 Depth=1
	movl	$0, -28(%rbp)
.LBB21_71:                              # %for.cond287
                                        #   Parent Loop BB21_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB21_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB21_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_71
.LBB21_74:                              # %for.end327
                                        #   in Loop: Header=BB21_69 Depth=1
	jmp	.LBB21_75
.LBB21_75:                              # %for.inc328
                                        #   in Loop: Header=BB21_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_69
.LBB21_76:                              # %for.end330
	jmp	.LBB21_142
.LBB21_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB21_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB21_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB21_78 Depth=1
	movl	$0, -24(%rbp)
.LBB21_80:                              # %for.cond335
                                        #   Parent Loop BB21_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB21_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB21_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB21_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_80
.LBB21_83:                              # %for.end345
                                        #   in Loop: Header=BB21_78 Depth=1
	jmp	.LBB21_84
.LBB21_84:                              # %for.inc346
                                        #   in Loop: Header=BB21_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_78
.LBB21_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB21_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_88 Depth 2
                                        #       Child Loop BB21_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB21_86 Depth=1
	movl	$0, -32(%rbp)
.LBB21_88:                              # %for.cond354
                                        #   Parent Loop BB21_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB21_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB21_90:                              # %for.cond372
                                        #   Parent Loop BB21_86 Depth=1
                                        #     Parent Loop BB21_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB21_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB21_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_90
.LBB21_93:                              # %for.end389
                                        #   in Loop: Header=BB21_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB21_94
	jp	.LBB21_94
	jmp	.LBB21_95
.LBB21_94:                              # %if.then396
                                        #   in Loop: Header=BB21_88 Depth=2
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB21_96
.LBB21_95:                              # %if.else406
                                        #   in Loop: Header=BB21_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB21_96:                              # %if.end407
                                        #   in Loop: Header=BB21_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB21_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB21_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB21_99
.LBB21_98:                              # %if.then413
                                        #   in Loop: Header=BB21_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB21_99:                              # %if.end414
                                        #   in Loop: Header=BB21_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB21_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB21_88
.LBB21_101:                             # %for.end447
                                        #   in Loop: Header=BB21_86 Depth=1
	jmp	.LBB21_102
.LBB21_102:                             # %for.inc448
                                        #   in Loop: Header=BB21_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_86
.LBB21_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB21_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB21_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_107 Depth 2
                                        #       Child Loop BB21_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB21_105 Depth=1
	movl	$0, -28(%rbp)
.LBB21_107:                             # %for.cond459
                                        #   Parent Loop BB21_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB21_107 Depth=2
	movl	$0, -20(%rbp)
.LBB21_109:                             # %for.cond465
                                        #   Parent Loop BB21_105 Depth=1
                                        #     Parent Loop BB21_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB21_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB21_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_109
.LBB21_112:                             # %for.end495
                                        #   in Loop: Header=BB21_107 Depth=2
	jmp	.LBB21_113
.LBB21_113:                             # %for.inc496
                                        #   in Loop: Header=BB21_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_107
.LBB21_114:                             # %for.end498
                                        #   in Loop: Header=BB21_105 Depth=1
	jmp	.LBB21_115
.LBB21_115:                             # %for.inc499
                                        #   in Loop: Header=BB21_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_105
.LBB21_116:                             # %for.end501
	jmp	.LBB21_126
.LBB21_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB21_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB21_118 Depth=1
	movl	$0, -28(%rbp)
.LBB21_120:                             # %for.cond508
                                        #   Parent Loop BB21_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB21_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB21_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_120
.LBB21_123:                             # %for.end549
                                        #   in Loop: Header=BB21_118 Depth=1
	jmp	.LBB21_124
.LBB21_124:                             # %for.inc550
                                        #   in Loop: Header=BB21_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_118
.LBB21_125:                             # %for.end552
	jmp	.LBB21_126
.LBB21_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB21_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_129 Depth 2
                                        #       Child Loop BB21_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB21_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB21_127 Depth=1
	movl	$0, -24(%rbp)
.LBB21_129:                             # %for.cond558
                                        #   Parent Loop BB21_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB21_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB21_129 Depth=2
	movl	$0, -20(%rbp)
.LBB21_131:                             # %for.cond562
                                        #   Parent Loop BB21_127 Depth=1
                                        #     Parent Loop BB21_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB21_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB21_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB21_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB21_135
.LBB21_134:                             # %cond.false569
                                        #   in Loop: Header=BB21_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB21_135:                             # %cond.end570
                                        #   in Loop: Header=BB21_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB21_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_131
.LBB21_137:                             # %for.end598
                                        #   in Loop: Header=BB21_129 Depth=2
	jmp	.LBB21_138
.LBB21_138:                             # %for.inc599
                                        #   in Loop: Header=BB21_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_129
.LBB21_139:                             # %for.end601
                                        #   in Loop: Header=BB21_127 Depth=1
	jmp	.LBB21_140
.LBB21_140:                             # %for.inc602
                                        #   in Loop: Header=BB21_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_127
.LBB21_141:                             # %for.end604
	jmp	.LBB21_142
.LBB21_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB21_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_145 Depth 2
                                        #       Child Loop BB21_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB21_143 Depth=1
	movl	$0, -28(%rbp)
.LBB21_145:                             # %for.cond611
                                        #   Parent Loop BB21_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB21_145 Depth=2
	movl	$0, -20(%rbp)
.LBB21_147:                             # %for.cond617
                                        #   Parent Loop BB21_143 Depth=1
                                        #     Parent Loop BB21_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB21_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB21_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB21_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB21_151
.LBB21_150:                             # %if.then638
                                        #   in Loop: Header=BB21_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB21_154
.LBB21_151:                             # %if.end639
                                        #   in Loop: Header=BB21_147 Depth=3
	jmp	.LBB21_152
.LBB21_152:                             # %for.inc640
                                        #   in Loop: Header=BB21_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_147
.LBB21_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB21_145 Depth=2
	jmp	.LBB21_154
.LBB21_154:                             # %for.end642
                                        #   in Loop: Header=BB21_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB21_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB21_143 Depth=1
	jmp	.LBB21_159
.LBB21_156:                             # %if.end646
                                        #   in Loop: Header=BB21_145 Depth=2
	jmp	.LBB21_157
.LBB21_157:                             # %for.inc647
                                        #   in Loop: Header=BB21_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_145
.LBB21_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB21_143 Depth=1
	jmp	.LBB21_159
.LBB21_159:                             # %for.end649
                                        #   in Loop: Header=BB21_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB21_161
# %bb.160:                              # %if.then652
	jmp	.LBB21_164
.LBB21_161:                             # %if.end653
                                        #   in Loop: Header=BB21_143 Depth=1
	jmp	.LBB21_162
.LBB21_162:                             # %for.inc654
                                        #   in Loop: Header=BB21_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_143
.LBB21_163:                             # %for.end656.loopexit
	jmp	.LBB21_164
.LBB21_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1490425186, -88(%rbp)  # imm = 0x58D61562
	jne	.LBB21_166
.LBB21_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_165
.Lfunc_end21:
	.size	test_wp_B_slice.18, .Lfunc_end21-test_wp_B_slice.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.19
.LCPI22_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.19
	.p2align	4, 0x90
	.type	test_wp_P_slice.19,@function
test_wp_P_slice.19:                     # @test_wp_P_slice.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1228469791, -64(%rbp)  # imm = 0x4938F61F
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB22_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB22_4
.LBB22_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB22_4
.LBB22_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB22_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_7 Depth 2
                                        #       Child Loop BB22_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	$0, -24(%rbp)
.LBB22_7:                               # %for.cond9
                                        #   Parent Loop BB22_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB22_7 Depth=2
	movl	$0, -12(%rbp)
.LBB22_9:                               # %for.cond14
                                        #   Parent Loop BB22_5 Depth=1
                                        #     Parent Loop BB22_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB22_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB22_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB22_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_9
.LBB22_12:                              # %for.end
                                        #   in Loop: Header=BB22_7 Depth=2
	jmp	.LBB22_13
.LBB22_13:                              # %for.inc41
                                        #   in Loop: Header=BB22_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_7
.LBB22_14:                              # %for.end43
                                        #   in Loop: Header=BB22_5 Depth=1
	jmp	.LBB22_15
.LBB22_15:                              # %for.inc44
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_5
.LBB22_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB22_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB22_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	$0, -24(%rbp)
.LBB22_19:                              # %for.cond50
                                        #   Parent Loop BB22_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB22_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB22_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB22_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_19
.LBB22_22:                              # %for.end60
                                        #   in Loop: Header=BB22_17 Depth=1
	jmp	.LBB22_23
.LBB22_23:                              # %for.inc61
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_17
.LBB22_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB22_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_27 Depth 2
                                        #       Child Loop BB22_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	$0, -12(%rbp)
.LBB22_27:                              # %for.cond69
                                        #   Parent Loop BB22_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB22_29:                              # %for.cond85
                                        #   Parent Loop BB22_25 Depth=1
                                        #     Parent Loop BB22_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB22_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB22_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_29
.LBB22_32:                              # %for.end99
                                        #   in Loop: Header=BB22_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB22_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB22_34
	jp	.LBB22_34
	jmp	.LBB22_35
.LBB22_34:                              # %if.then106
                                        #   in Loop: Header=BB22_27 Depth=2
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB22_36
.LBB22_35:                              # %if.else
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB22_36:                              # %if.end
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB22_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB22_39
.LBB22_38:                              # %if.then137
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB22_39:                              # %if.end143
                                        #   in Loop: Header=BB22_27 Depth=2
	jmp	.LBB22_47
.LBB22_40:                              # %if.else144
                                        #   in Loop: Header=BB22_27 Depth=2
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB22_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB22_46
.LBB22_42:                              # %cond.false168
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB22_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	$127, %eax
	jmp	.LBB22_45
.LBB22_44:                              # %cond.false177
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB22_45:                              # %cond.end183
                                        #   in Loop: Header=BB22_27 Depth=2
.LBB22_46:                              # %cond.end185
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB22_47:                              # %if.end197
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_27
.LBB22_49:                              # %for.end210
                                        #   in Loop: Header=BB22_25 Depth=1
	jmp	.LBB22_50
.LBB22_50:                              # %for.inc211
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_25
.LBB22_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB22_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_54 Depth 2
                                        #       Child Loop BB22_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB22_52 Depth=1
	movl	$0, -32(%rbp)
.LBB22_54:                              # %for.cond219
                                        #   Parent Loop BB22_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB22_54 Depth=2
	movl	$0, -36(%rbp)
.LBB22_56:                              # %for.cond225
                                        #   Parent Loop BB22_52 Depth=1
                                        #     Parent Loop BB22_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB22_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB22_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB22_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB22_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB22_60
.LBB22_59:                              # %if.then246
                                        #   in Loop: Header=BB22_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB22_63
.LBB22_60:                              # %if.end247
                                        #   in Loop: Header=BB22_56 Depth=3
	jmp	.LBB22_61
.LBB22_61:                              # %for.inc248
                                        #   in Loop: Header=BB22_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB22_56
.LBB22_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB22_54 Depth=2
	jmp	.LBB22_63
.LBB22_63:                              # %for.end250
                                        #   in Loop: Header=BB22_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB22_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB22_52 Depth=1
	jmp	.LBB22_68
.LBB22_65:                              # %if.end254
                                        #   in Loop: Header=BB22_54 Depth=2
	jmp	.LBB22_66
.LBB22_66:                              # %for.inc255
                                        #   in Loop: Header=BB22_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB22_54
.LBB22_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB22_52 Depth=1
	jmp	.LBB22_68
.LBB22_68:                              # %for.end257
                                        #   in Loop: Header=BB22_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB22_70
# %bb.69:                               # %if.then260
	jmp	.LBB22_73
.LBB22_70:                              # %if.end261
                                        #   in Loop: Header=BB22_52 Depth=1
	jmp	.LBB22_71
.LBB22_71:                              # %for.inc262
                                        #   in Loop: Header=BB22_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_52
.LBB22_72:                              # %for.end264.loopexit
	jmp	.LBB22_73
.LBB22_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1228469791, -64(%rbp)  # imm = 0x4938F61F
	jne	.LBB22_75
.LBB22_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_74
.Lfunc_end22:
	.size	test_wp_P_slice.19, .Lfunc_end22-test_wp_P_slice.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.20
.LCPI23_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.20
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.20,@function
estimate_weighting_factor_P_slice.20:   # @estimate_weighting_factor_P_slice.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$186555051, -60(%rbp)   # imm = 0xB1E9AAB
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB23_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB23_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB23_4
.LBB23_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB23_4
.LBB23_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB23_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_7 Depth 2
                                        #       Child Loop BB23_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	$0, -16(%rbp)
.LBB23_7:                               # %for.cond12
                                        #   Parent Loop BB23_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB23_7 Depth=2
	movl	$0, -4(%rbp)
.LBB23_9:                               # %for.cond17
                                        #   Parent Loop BB23_5 Depth=1
                                        #     Parent Loop BB23_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB23_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB23_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB23_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_9
.LBB23_12:                              # %for.end
                                        #   in Loop: Header=BB23_7 Depth=2
	jmp	.LBB23_13
.LBB23_13:                              # %for.inc48
                                        #   in Loop: Header=BB23_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_7
.LBB23_14:                              # %for.end50
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_15
.LBB23_15:                              # %for.inc51
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_5
.LBB23_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB23_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB23_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB23_17 Depth=1
	movl	$0, -16(%rbp)
.LBB23_19:                              # %for.cond57
                                        #   Parent Loop BB23_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB23_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB23_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB23_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_19
.LBB23_22:                              # %for.end67
                                        #   in Loop: Header=BB23_17 Depth=1
	jmp	.LBB23_23
.LBB23_23:                              # %for.inc68
                                        #   in Loop: Header=BB23_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_17
.LBB23_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB23_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_27 Depth 2
                                        #       Child Loop BB23_29 Depth 3
                                        #       Child Loop BB23_48 Depth 3
                                        #       Child Loop BB23_58 Depth 3
                                        #         Child Loop BB23_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB23_25 Depth=1
	movl	$0, -4(%rbp)
.LBB23_27:                              # %for.cond76
                                        #   Parent Loop BB23_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_29 Depth 3
                                        #       Child Loop BB23_48 Depth 3
                                        #       Child Loop BB23_58 Depth 3
                                        #         Child Loop BB23_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB23_29:                              # %for.cond92
                                        #   Parent Loop BB23_25 Depth=1
                                        #     Parent Loop BB23_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB23_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB23_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_29
.LBB23_32:                              # %for.end106
                                        #   in Loop: Header=BB23_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB23_40
	jp	.LBB23_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB23_34
	jp	.LBB23_34
	jmp	.LBB23_35
.LBB23_34:                              # %if.then114
                                        #   in Loop: Header=BB23_27 Depth=2
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB23_36
.LBB23_35:                              # %if.else
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB23_36:                              # %if.end
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB23_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB23_39
.LBB23_38:                              # %if.then147
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB23_39:                              # %if.end154
                                        #   in Loop: Header=BB23_27 Depth=2
	jmp	.LBB23_47
.LBB23_40:                              # %if.else155
                                        #   in Loop: Header=BB23_27 Depth=2
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB23_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB23_46
.LBB23_42:                              # %cond.false179
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB23_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	$127, %eax
	jmp	.LBB23_45
.LBB23_44:                              # %cond.false188
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB23_45:                              # %cond.end194
                                        #   in Loop: Header=BB23_27 Depth=2
.LBB23_46:                              # %cond.end196
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB23_47:                              # %if.end209
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB23_48:                              # %for.cond222
                                        #   Parent Loop BB23_25 Depth=1
                                        #     Parent Loop BB23_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB23_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB23_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB23_55
.LBB23_51:                              # %cond.false248
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB23_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_54
.LBB23_53:                              # %cond.false270
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB23_54:                              # %cond.end288
                                        #   in Loop: Header=BB23_48 Depth=3
.LBB23_55:                              # %cond.end290
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB23_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_48
.LBB23_57:                              # %for.end297
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	$0, -12(%rbp)
.LBB23_58:                              # %for.cond298
                                        #   Parent Loop BB23_25 Depth=1
                                        #     Parent Loop BB23_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB23_58 Depth=3
	movl	$0, -16(%rbp)
.LBB23_60:                              # %for.cond305
                                        #   Parent Loop BB23_25 Depth=1
                                        #     Parent Loop BB23_27 Depth=2
                                        #       Parent Loop BB23_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB23_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB23_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB23_67
.LBB23_63:                              # %cond.false336
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB23_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_66
.LBB23_65:                              # %cond.false364
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB23_66:                              # %cond.end387
                                        #   in Loop: Header=BB23_60 Depth=4
.LBB23_67:                              # %cond.end389
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB23_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_60
.LBB23_69:                              # %for.end400
                                        #   in Loop: Header=BB23_58 Depth=3
	jmp	.LBB23_70
.LBB23_70:                              # %for.inc401
                                        #   in Loop: Header=BB23_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_58
.LBB23_71:                              # %for.end403
                                        #   in Loop: Header=BB23_27 Depth=2
	jmp	.LBB23_72
.LBB23_72:                              # %for.inc404
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_27
.LBB23_73:                              # %for.end406
                                        #   in Loop: Header=BB23_25 Depth=1
	jmp	.LBB23_74
.LBB23_74:                              # %for.inc407
                                        #   in Loop: Header=BB23_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_25
.LBB23_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB23_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_78 Depth 2
                                        #       Child Loop BB23_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB23_76 Depth=1
	movl	$0, -20(%rbp)
.LBB23_78:                              # %for.cond415
                                        #   Parent Loop BB23_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB23_78 Depth=2
	movl	$0, -24(%rbp)
.LBB23_80:                              # %for.cond421
                                        #   Parent Loop BB23_76 Depth=1
                                        #     Parent Loop BB23_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB23_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB23_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB23_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB23_80
.LBB23_83:                              # %for.end451
                                        #   in Loop: Header=BB23_78 Depth=2
	jmp	.LBB23_84
.LBB23_84:                              # %for.inc452
                                        #   in Loop: Header=BB23_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_78
.LBB23_85:                              # %for.end454
                                        #   in Loop: Header=BB23_76 Depth=1
	jmp	.LBB23_86
.LBB23_86:                              # %for.inc455
                                        #   in Loop: Header=BB23_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_76
.LBB23_87:                              # %for.end457
	cmpl	$186555051, -60(%rbp)   # imm = 0xB1E9AAB
	jne	.LBB23_89
.LBB23_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_88
.Lfunc_end23:
	.size	estimate_weighting_factor_P_slice.20, .Lfunc_end23-estimate_weighting_factor_P_slice.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.21
.LCPI24_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.21
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.21,@function
estimate_weighting_factor_B_slice.21:   # @estimate_weighting_factor_B_slice.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1199412078, -88(%rbp)  # imm = 0x477D936E
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB24_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB24_4
.LBB24_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB24_4
.LBB24_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB24_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB24_7
.LBB24_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB24_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB24_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_10 Depth 2
                                        #       Child Loop BB24_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB24_8 Depth=1
	movl	$0, -8(%rbp)
.LBB24_10:                              # %for.cond14
                                        #   Parent Loop BB24_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB24_10 Depth=2
	movl	$0, -16(%rbp)
.LBB24_12:                              # %for.cond19
                                        #   Parent Loop BB24_8 Depth=1
                                        #     Parent Loop BB24_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB24_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB24_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB24_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_12
.LBB24_15:                              # %for.end
                                        #   in Loop: Header=BB24_10 Depth=2
	jmp	.LBB24_16
.LBB24_16:                              # %for.inc50
                                        #   in Loop: Header=BB24_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_10
.LBB24_17:                              # %for.end52
                                        #   in Loop: Header=BB24_8 Depth=1
	jmp	.LBB24_18
.LBB24_18:                              # %for.inc53
                                        #   in Loop: Header=BB24_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_8
.LBB24_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB24_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_22 Depth 2
                                        #       Child Loop BB24_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB24_20 Depth=1
	movl	$0, -8(%rbp)
.LBB24_22:                              # %for.cond59
                                        #   Parent Loop BB24_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB24_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB24_29
.LBB24_25:                              # %cond.false70
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB24_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$127, %eax
	jmp	.LBB24_28
.LBB24_27:                              # %cond.false80
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB24_28:                              # %cond.end88
                                        #   in Loop: Header=BB24_22 Depth=2
.LBB24_29:                              # %cond.end90
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB24_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB24_35
.LBB24_31:                              # %cond.false99
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB24_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$127, %eax
	jmp	.LBB24_34
.LBB24_33:                              # %cond.false107
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB24_34:                              # %cond.end113
                                        #   in Loop: Header=BB24_22 Depth=2
.LBB24_35:                              # %cond.end115
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB24_36:                              # %for.cond117
                                        #   Parent Loop BB24_20 Depth=1
                                        #     Parent Loop BB24_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB24_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB24_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB24_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB24_49
.LBB24_39:                              # %if.else154
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB24_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB24_45
.LBB24_41:                              # %cond.false160
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB24_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB24_44
.LBB24_43:                              # %cond.false166
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB24_44:                              # %cond.end170
                                        #   in Loop: Header=BB24_36 Depth=3
.LBB24_45:                              # %cond.end172
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB24_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB24_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB24_48
.LBB24_47:                              # %if.then198
                                        #   in Loop: Header=BB24_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB24_48:                              # %if.end208
                                        #   in Loop: Header=BB24_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB24_49:                              # %if.end238
                                        #   in Loop: Header=BB24_36 Depth=3
	jmp	.LBB24_50
.LBB24_50:                              # %for.inc239
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_36
.LBB24_51:                              # %for.end241
                                        #   in Loop: Header=BB24_22 Depth=2
	jmp	.LBB24_52
.LBB24_52:                              # %for.inc242
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_22
.LBB24_53:                              # %for.end244
                                        #   in Loop: Header=BB24_20 Depth=1
	jmp	.LBB24_54
.LBB24_54:                              # %for.inc245
                                        #   in Loop: Header=BB24_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_20
.LBB24_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB24_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB24_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_59 Depth 2
                                        #       Child Loop BB24_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB24_57 Depth=1
	movl	$0, -8(%rbp)
.LBB24_59:                              # %for.cond254
                                        #   Parent Loop BB24_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB24_59 Depth=2
	movl	$0, -20(%rbp)
.LBB24_61:                              # %for.cond257
                                        #   Parent Loop BB24_57 Depth=1
                                        #     Parent Loop BB24_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB24_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB24_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB24_65
.LBB24_64:                              # %cond.false262
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB24_65:                              # %cond.end263
                                        #   in Loop: Header=BB24_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_61
.LBB24_67:                              # %for.end295
                                        #   in Loop: Header=BB24_59 Depth=2
	jmp	.LBB24_68
.LBB24_68:                              # %for.inc296
                                        #   in Loop: Header=BB24_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_59
.LBB24_69:                              # %for.end298
                                        #   in Loop: Header=BB24_57 Depth=1
	jmp	.LBB24_70
.LBB24_70:                              # %for.inc299
                                        #   in Loop: Header=BB24_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_57
.LBB24_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB24_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB24_72 Depth=1
	movl	$0, -24(%rbp)
.LBB24_74:                              # %for.cond306
                                        #   Parent Loop BB24_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB24_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB24_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_74
.LBB24_77:                              # %for.end346
                                        #   in Loop: Header=BB24_72 Depth=1
	jmp	.LBB24_78
.LBB24_78:                              # %for.inc347
                                        #   in Loop: Header=BB24_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_72
.LBB24_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB24_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_82 Depth 2
                                        #       Child Loop BB24_84 Depth 3
                                        #       Child Loop BB24_88 Depth 3
                                        #         Child Loop BB24_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB24_80 Depth=1
	movl	$0, -8(%rbp)
.LBB24_82:                              # %for.cond353
                                        #   Parent Loop BB24_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_84 Depth 3
                                        #       Child Loop BB24_88 Depth 3
                                        #         Child Loop BB24_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB24_82 Depth=2
	movl	$0, -16(%rbp)
.LBB24_84:                              # %for.cond356
                                        #   Parent Loop BB24_80 Depth=1
                                        #     Parent Loop BB24_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB24_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB24_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_84
.LBB24_87:                              # %for.end380
                                        #   in Loop: Header=BB24_82 Depth=2
	movl	$0, -16(%rbp)
.LBB24_88:                              # %for.cond381
                                        #   Parent Loop BB24_80 Depth=1
                                        #     Parent Loop BB24_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB24_88 Depth=3
	movl	$0, -32(%rbp)
.LBB24_90:                              # %for.cond387
                                        #   Parent Loop BB24_80 Depth=1
                                        #     Parent Loop BB24_82 Depth=2
                                        #       Parent Loop BB24_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB24_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB24_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB24_90
.LBB24_93:                              # %for.end421
                                        #   in Loop: Header=BB24_88 Depth=3
	jmp	.LBB24_94
.LBB24_94:                              # %for.inc422
                                        #   in Loop: Header=BB24_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_88
.LBB24_95:                              # %for.end424
                                        #   in Loop: Header=BB24_82 Depth=2
	jmp	.LBB24_96
.LBB24_96:                              # %for.inc425
                                        #   in Loop: Header=BB24_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_82
.LBB24_97:                              # %for.end427
                                        #   in Loop: Header=BB24_80 Depth=1
	jmp	.LBB24_98
.LBB24_98:                              # %for.inc428
                                        #   in Loop: Header=BB24_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_80
.LBB24_99:                              # %for.end430
	jmp	.LBB24_189
.LBB24_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB24_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB24_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB24_101 Depth=1
	movl	$0, -8(%rbp)
.LBB24_103:                             # %for.cond436
                                        #   Parent Loop BB24_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB24_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB24_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB24_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_103
.LBB24_106:                             # %for.end447
                                        #   in Loop: Header=BB24_101 Depth=1
	jmp	.LBB24_107
.LBB24_107:                             # %for.inc448
                                        #   in Loop: Header=BB24_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_101
.LBB24_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB24_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_111 Depth 2
                                        #       Child Loop BB24_113 Depth 3
                                        #       Child Loop BB24_123 Depth 3
                                        #       Child Loop BB24_133 Depth 3
                                        #         Child Loop BB24_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB24_109 Depth=1
	movl	$0, -16(%rbp)
.LBB24_111:                             # %for.cond456
                                        #   Parent Loop BB24_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_113 Depth 3
                                        #       Child Loop BB24_123 Depth 3
                                        #       Child Loop BB24_133 Depth 3
                                        #         Child Loop BB24_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB24_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB24_113:                             # %for.cond476
                                        #   Parent Loop BB24_109 Depth=1
                                        #     Parent Loop BB24_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB24_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB24_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_113
.LBB24_116:                             # %for.end493
                                        #   in Loop: Header=BB24_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB24_117
	jp	.LBB24_117
	jmp	.LBB24_118
.LBB24_117:                             # %if.then500
                                        #   in Loop: Header=BB24_111 Depth=2
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB24_119
.LBB24_118:                             # %if.else511
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB24_119:                             # %if.end513
                                        #   in Loop: Header=BB24_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB24_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB24_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB24_122
.LBB24_121:                             # %if.then519
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB24_122:                             # %if.end521
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB24_123:                             # %for.cond554
                                        #   Parent Loop BB24_109 Depth=1
                                        #     Parent Loop BB24_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB24_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB24_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB24_130
.LBB24_126:                             # %cond.false571
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB24_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_129
.LBB24_128:                             # %cond.false583
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB24_129:                             # %cond.end591
                                        #   in Loop: Header=BB24_123 Depth=3
.LBB24_130:                             # %cond.end593
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB24_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_123
.LBB24_132:                             # %for.end600
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	$0, -4(%rbp)
.LBB24_133:                             # %for.cond601
                                        #   Parent Loop BB24_109 Depth=1
                                        #     Parent Loop BB24_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB24_133 Depth=3
	movl	$0, -8(%rbp)
.LBB24_135:                             # %for.cond608
                                        #   Parent Loop BB24_109 Depth=1
                                        #     Parent Loop BB24_111 Depth=2
                                        #       Parent Loop BB24_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB24_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB24_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB24_142
.LBB24_138:                             # %cond.false630
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB24_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_141
.LBB24_140:                             # %cond.false648
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB24_141:                             # %cond.end661
                                        #   in Loop: Header=BB24_135 Depth=4
.LBB24_142:                             # %cond.end663
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB24_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_135
.LBB24_144:                             # %for.end675
                                        #   in Loop: Header=BB24_133 Depth=3
	jmp	.LBB24_145
.LBB24_145:                             # %for.inc676
                                        #   in Loop: Header=BB24_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_133
.LBB24_146:                             # %for.end678
                                        #   in Loop: Header=BB24_111 Depth=2
	jmp	.LBB24_147
.LBB24_147:                             # %for.inc679
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_111
.LBB24_148:                             # %for.end681
                                        #   in Loop: Header=BB24_109 Depth=1
	jmp	.LBB24_149
.LBB24_149:                             # %for.inc682
                                        #   in Loop: Header=BB24_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_109
.LBB24_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB24_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB24_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_154 Depth 2
                                        #       Child Loop BB24_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB24_152 Depth=1
	movl	$0, -24(%rbp)
.LBB24_154:                             # %for.cond694
                                        #   Parent Loop BB24_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB24_154 Depth=2
	movl	$0, -20(%rbp)
.LBB24_156:                             # %for.cond700
                                        #   Parent Loop BB24_152 Depth=1
                                        #     Parent Loop BB24_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB24_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB24_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_156
.LBB24_159:                             # %for.end730
                                        #   in Loop: Header=BB24_154 Depth=2
	jmp	.LBB24_160
.LBB24_160:                             # %for.inc731
                                        #   in Loop: Header=BB24_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_154
.LBB24_161:                             # %for.end733
                                        #   in Loop: Header=BB24_152 Depth=1
	jmp	.LBB24_162
.LBB24_162:                             # %for.inc734
                                        #   in Loop: Header=BB24_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_152
.LBB24_163:                             # %for.end736
	jmp	.LBB24_173
.LBB24_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB24_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB24_165 Depth=1
	movl	$0, -24(%rbp)
.LBB24_167:                             # %for.cond743
                                        #   Parent Loop BB24_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB24_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB24_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_167
.LBB24_170:                             # %for.end784
                                        #   in Loop: Header=BB24_165 Depth=1
	jmp	.LBB24_171
.LBB24_171:                             # %for.inc785
                                        #   in Loop: Header=BB24_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_165
.LBB24_172:                             # %for.end787
	jmp	.LBB24_173
.LBB24_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB24_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_176 Depth 2
                                        #       Child Loop BB24_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB24_174 Depth=1
	movl	$0, -8(%rbp)
.LBB24_176:                             # %for.cond793
                                        #   Parent Loop BB24_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB24_176 Depth=2
	movl	$0, -20(%rbp)
.LBB24_178:                             # %for.cond797
                                        #   Parent Loop BB24_174 Depth=1
                                        #     Parent Loop BB24_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB24_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB24_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB24_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB24_182
.LBB24_181:                             # %cond.false804
                                        #   in Loop: Header=BB24_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB24_182:                             # %cond.end805
                                        #   in Loop: Header=BB24_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB24_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_178
.LBB24_184:                             # %for.end833
                                        #   in Loop: Header=BB24_176 Depth=2
	jmp	.LBB24_185
.LBB24_185:                             # %for.inc834
                                        #   in Loop: Header=BB24_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_176
.LBB24_186:                             # %for.end836
                                        #   in Loop: Header=BB24_174 Depth=1
	jmp	.LBB24_187
.LBB24_187:                             # %for.inc837
                                        #   in Loop: Header=BB24_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_174
.LBB24_188:                             # %for.end839
	jmp	.LBB24_189
.LBB24_189:                             # %if.end840
	cmpl	$1199412078, -88(%rbp)  # imm = 0x477D936E
	jne	.LBB24_191
.LBB24_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_190
.Lfunc_end24:
	.size	estimate_weighting_factor_B_slice.21, .Lfunc_end24-estimate_weighting_factor_B_slice.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.22
.LCPI25_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.22
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.22,@function
estimate_weighting_factor_P_slice.22:   # @estimate_weighting_factor_P_slice.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1376541369, -60(%rbp)  # imm = 0x520C5AB9
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB25_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB25_4
.LBB25_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB25_4
.LBB25_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB25_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_7 Depth 2
                                        #       Child Loop BB25_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB25_5 Depth=1
	movl	$0, -16(%rbp)
.LBB25_7:                               # %for.cond12
                                        #   Parent Loop BB25_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB25_7 Depth=2
	movl	$0, -4(%rbp)
.LBB25_9:                               # %for.cond17
                                        #   Parent Loop BB25_5 Depth=1
                                        #     Parent Loop BB25_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB25_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB25_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB25_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_9
.LBB25_12:                              # %for.end
                                        #   in Loop: Header=BB25_7 Depth=2
	jmp	.LBB25_13
.LBB25_13:                              # %for.inc48
                                        #   in Loop: Header=BB25_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_7
.LBB25_14:                              # %for.end50
                                        #   in Loop: Header=BB25_5 Depth=1
	jmp	.LBB25_15
.LBB25_15:                              # %for.inc51
                                        #   in Loop: Header=BB25_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_5
.LBB25_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB25_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB25_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	$0, -16(%rbp)
.LBB25_19:                              # %for.cond57
                                        #   Parent Loop BB25_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB25_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB25_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB25_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_19
.LBB25_22:                              # %for.end67
                                        #   in Loop: Header=BB25_17 Depth=1
	jmp	.LBB25_23
.LBB25_23:                              # %for.inc68
                                        #   in Loop: Header=BB25_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_17
.LBB25_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB25_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_27 Depth 2
                                        #       Child Loop BB25_29 Depth 3
                                        #       Child Loop BB25_48 Depth 3
                                        #       Child Loop BB25_58 Depth 3
                                        #         Child Loop BB25_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	$0, -4(%rbp)
.LBB25_27:                              # %for.cond76
                                        #   Parent Loop BB25_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_29 Depth 3
                                        #       Child Loop BB25_48 Depth 3
                                        #       Child Loop BB25_58 Depth 3
                                        #         Child Loop BB25_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB25_29:                              # %for.cond92
                                        #   Parent Loop BB25_25 Depth=1
                                        #     Parent Loop BB25_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB25_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB25_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_29
.LBB25_32:                              # %for.end106
                                        #   in Loop: Header=BB25_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB25_40
	jp	.LBB25_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB25_34
	jp	.LBB25_34
	jmp	.LBB25_35
.LBB25_34:                              # %if.then114
                                        #   in Loop: Header=BB25_27 Depth=2
	vmovsd	.LCPI25_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB25_36
.LBB25_35:                              # %if.else
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB25_36:                              # %if.end
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB25_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB25_39
.LBB25_38:                              # %if.then147
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB25_39:                              # %if.end154
                                        #   in Loop: Header=BB25_27 Depth=2
	jmp	.LBB25_47
.LBB25_40:                              # %if.else155
                                        #   in Loop: Header=BB25_27 Depth=2
	vmovsd	.LCPI25_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB25_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB25_46
.LBB25_42:                              # %cond.false179
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB25_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	$127, %eax
	jmp	.LBB25_45
.LBB25_44:                              # %cond.false188
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB25_45:                              # %cond.end194
                                        #   in Loop: Header=BB25_27 Depth=2
.LBB25_46:                              # %cond.end196
                                        #   in Loop: Header=BB25_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB25_47:                              # %if.end209
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB25_48:                              # %for.cond222
                                        #   Parent Loop BB25_25 Depth=1
                                        #     Parent Loop BB25_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB25_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB25_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB25_55
.LBB25_51:                              # %cond.false248
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB25_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_54
.LBB25_53:                              # %cond.false270
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB25_54:                              # %cond.end288
                                        #   in Loop: Header=BB25_48 Depth=3
.LBB25_55:                              # %cond.end290
                                        #   in Loop: Header=BB25_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB25_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_48
.LBB25_57:                              # %for.end297
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	$0, -12(%rbp)
.LBB25_58:                              # %for.cond298
                                        #   Parent Loop BB25_25 Depth=1
                                        #     Parent Loop BB25_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB25_58 Depth=3
	movl	$0, -16(%rbp)
.LBB25_60:                              # %for.cond305
                                        #   Parent Loop BB25_25 Depth=1
                                        #     Parent Loop BB25_27 Depth=2
                                        #       Parent Loop BB25_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB25_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB25_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB25_67
.LBB25_63:                              # %cond.false336
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB25_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_66
.LBB25_65:                              # %cond.false364
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB25_66:                              # %cond.end387
                                        #   in Loop: Header=BB25_60 Depth=4
.LBB25_67:                              # %cond.end389
                                        #   in Loop: Header=BB25_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB25_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_60
.LBB25_69:                              # %for.end400
                                        #   in Loop: Header=BB25_58 Depth=3
	jmp	.LBB25_70
.LBB25_70:                              # %for.inc401
                                        #   in Loop: Header=BB25_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_58
.LBB25_71:                              # %for.end403
                                        #   in Loop: Header=BB25_27 Depth=2
	jmp	.LBB25_72
.LBB25_72:                              # %for.inc404
                                        #   in Loop: Header=BB25_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_27
.LBB25_73:                              # %for.end406
                                        #   in Loop: Header=BB25_25 Depth=1
	jmp	.LBB25_74
.LBB25_74:                              # %for.inc407
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_25
.LBB25_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB25_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_78 Depth 2
                                        #       Child Loop BB25_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB25_76 Depth=1
	movl	$0, -20(%rbp)
.LBB25_78:                              # %for.cond415
                                        #   Parent Loop BB25_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB25_78 Depth=2
	movl	$0, -24(%rbp)
.LBB25_80:                              # %for.cond421
                                        #   Parent Loop BB25_76 Depth=1
                                        #     Parent Loop BB25_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB25_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB25_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB25_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_80
.LBB25_83:                              # %for.end451
                                        #   in Loop: Header=BB25_78 Depth=2
	jmp	.LBB25_84
.LBB25_84:                              # %for.inc452
                                        #   in Loop: Header=BB25_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_78
.LBB25_85:                              # %for.end454
                                        #   in Loop: Header=BB25_76 Depth=1
	jmp	.LBB25_86
.LBB25_86:                              # %for.inc455
                                        #   in Loop: Header=BB25_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_76
.LBB25_87:                              # %for.end457
	cmpl	$1376541369, -60(%rbp)  # imm = 0x520C5AB9
	jne	.LBB25_89
.LBB25_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_88
.Lfunc_end25:
	.size	estimate_weighting_factor_P_slice.22, .Lfunc_end25-estimate_weighting_factor_P_slice.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.23
.LCPI26_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.23
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.23,@function
estimate_weighting_factor_P_slice.23:   # @estimate_weighting_factor_P_slice.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$315594420, -64(%rbp)   # imm = 0x12CF96B4
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB26_4
.LBB26_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB26_4
.LBB26_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB26_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_7 Depth 2
                                        #       Child Loop BB26_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB26_5 Depth=1
	movl	$0, -16(%rbp)
.LBB26_7:                               # %for.cond12
                                        #   Parent Loop BB26_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB26_7 Depth=2
	movl	$0, -4(%rbp)
.LBB26_9:                               # %for.cond17
                                        #   Parent Loop BB26_5 Depth=1
                                        #     Parent Loop BB26_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB26_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB26_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB26_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_9
.LBB26_12:                              # %for.end
                                        #   in Loop: Header=BB26_7 Depth=2
	jmp	.LBB26_13
.LBB26_13:                              # %for.inc48
                                        #   in Loop: Header=BB26_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_7
.LBB26_14:                              # %for.end50
                                        #   in Loop: Header=BB26_5 Depth=1
	jmp	.LBB26_15
.LBB26_15:                              # %for.inc51
                                        #   in Loop: Header=BB26_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_5
.LBB26_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB26_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB26_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$0, -16(%rbp)
.LBB26_19:                              # %for.cond57
                                        #   Parent Loop BB26_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB26_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB26_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB26_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_19
.LBB26_22:                              # %for.end67
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_23
.LBB26_23:                              # %for.inc68
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_17
.LBB26_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB26_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_27 Depth 2
                                        #       Child Loop BB26_29 Depth 3
                                        #       Child Loop BB26_48 Depth 3
                                        #       Child Loop BB26_58 Depth 3
                                        #         Child Loop BB26_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB26_25 Depth=1
	movl	$0, -4(%rbp)
.LBB26_27:                              # %for.cond76
                                        #   Parent Loop BB26_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_29 Depth 3
                                        #       Child Loop BB26_48 Depth 3
                                        #       Child Loop BB26_58 Depth 3
                                        #         Child Loop BB26_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB26_29:                              # %for.cond92
                                        #   Parent Loop BB26_25 Depth=1
                                        #     Parent Loop BB26_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB26_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB26_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_29
.LBB26_32:                              # %for.end106
                                        #   in Loop: Header=BB26_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB26_40
	jp	.LBB26_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB26_34
	jp	.LBB26_34
	jmp	.LBB26_35
.LBB26_34:                              # %if.then114
                                        #   in Loop: Header=BB26_27 Depth=2
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB26_36
.LBB26_35:                              # %if.else
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB26_36:                              # %if.end
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB26_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB26_39
.LBB26_38:                              # %if.then147
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB26_39:                              # %if.end154
                                        #   in Loop: Header=BB26_27 Depth=2
	jmp	.LBB26_47
.LBB26_40:                              # %if.else155
                                        #   in Loop: Header=BB26_27 Depth=2
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB26_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB26_46
.LBB26_42:                              # %cond.false179
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB26_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	$127, %eax
	jmp	.LBB26_45
.LBB26_44:                              # %cond.false188
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB26_45:                              # %cond.end194
                                        #   in Loop: Header=BB26_27 Depth=2
.LBB26_46:                              # %cond.end196
                                        #   in Loop: Header=BB26_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB26_47:                              # %if.end209
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB26_48:                              # %for.cond222
                                        #   Parent Loop BB26_25 Depth=1
                                        #     Parent Loop BB26_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB26_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB26_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB26_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB26_55
.LBB26_51:                              # %cond.false248
                                        #   in Loop: Header=BB26_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB26_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_54
.LBB26_53:                              # %cond.false270
                                        #   in Loop: Header=BB26_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB26_54:                              # %cond.end288
                                        #   in Loop: Header=BB26_48 Depth=3
.LBB26_55:                              # %cond.end290
                                        #   in Loop: Header=BB26_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB26_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_48
.LBB26_57:                              # %for.end297
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	$0, -12(%rbp)
.LBB26_58:                              # %for.cond298
                                        #   Parent Loop BB26_25 Depth=1
                                        #     Parent Loop BB26_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB26_58 Depth=3
	movl	$0, -16(%rbp)
.LBB26_60:                              # %for.cond305
                                        #   Parent Loop BB26_25 Depth=1
                                        #     Parent Loop BB26_27 Depth=2
                                        #       Parent Loop BB26_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB26_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB26_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB26_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB26_67
.LBB26_63:                              # %cond.false336
                                        #   in Loop: Header=BB26_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB26_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_66
.LBB26_65:                              # %cond.false364
                                        #   in Loop: Header=BB26_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB26_66:                              # %cond.end387
                                        #   in Loop: Header=BB26_60 Depth=4
.LBB26_67:                              # %cond.end389
                                        #   in Loop: Header=BB26_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB26_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_60
.LBB26_69:                              # %for.end400
                                        #   in Loop: Header=BB26_58 Depth=3
	jmp	.LBB26_70
.LBB26_70:                              # %for.inc401
                                        #   in Loop: Header=BB26_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_58
.LBB26_71:                              # %for.end403
                                        #   in Loop: Header=BB26_27 Depth=2
	jmp	.LBB26_72
.LBB26_72:                              # %for.inc404
                                        #   in Loop: Header=BB26_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_27
.LBB26_73:                              # %for.end406
                                        #   in Loop: Header=BB26_25 Depth=1
	jmp	.LBB26_74
.LBB26_74:                              # %for.inc407
                                        #   in Loop: Header=BB26_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_25
.LBB26_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB26_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_78 Depth 2
                                        #       Child Loop BB26_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB26_76 Depth=1
	movl	$0, -20(%rbp)
.LBB26_78:                              # %for.cond415
                                        #   Parent Loop BB26_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB26_78 Depth=2
	movl	$0, -24(%rbp)
.LBB26_80:                              # %for.cond421
                                        #   Parent Loop BB26_76 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB26_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB26_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB26_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB26_80
.LBB26_83:                              # %for.end451
                                        #   in Loop: Header=BB26_78 Depth=2
	jmp	.LBB26_84
.LBB26_84:                              # %for.inc452
                                        #   in Loop: Header=BB26_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_78
.LBB26_85:                              # %for.end454
                                        #   in Loop: Header=BB26_76 Depth=1
	jmp	.LBB26_86
.LBB26_86:                              # %for.inc455
                                        #   in Loop: Header=BB26_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_76
.LBB26_87:                              # %for.end457
	cmpl	$315594420, -64(%rbp)   # imm = 0x12CF96B4
	jne	.LBB26_89
.LBB26_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_88
.Lfunc_end26:
	.size	estimate_weighting_factor_P_slice.23, .Lfunc_end26-estimate_weighting_factor_P_slice.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.24
.LCPI27_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.24
	.p2align	4, 0x90
	.type	test_wp_B_slice.24,@function
test_wp_B_slice.24:                     # @test_wp_B_slice.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$2080132424, -80(%rbp)  # imm = 0x7BFC4D48
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB27_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB27_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB27_4
.LBB27_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB27_4
.LBB27_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB27_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_7 Depth 2
                                        #       Child Loop BB27_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB27_5 Depth=1
	movl	$0, -24(%rbp)
.LBB27_7:                               # %for.cond9
                                        #   Parent Loop BB27_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB27_7 Depth=2
	movl	$0, -32(%rbp)
.LBB27_9:                               # %for.cond14
                                        #   Parent Loop BB27_5 Depth=1
                                        #     Parent Loop BB27_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB27_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB27_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB27_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB27_9
.LBB27_12:                              # %for.end
                                        #   in Loop: Header=BB27_7 Depth=2
	jmp	.LBB27_13
.LBB27_13:                              # %for.inc41
                                        #   in Loop: Header=BB27_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB27_7
.LBB27_14:                              # %for.end43
                                        #   in Loop: Header=BB27_5 Depth=1
	jmp	.LBB27_15
.LBB27_15:                              # %for.inc44
                                        #   in Loop: Header=BB27_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_5
.LBB27_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB27_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_19 Depth 2
                                        #       Child Loop BB27_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB27_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	$0, -24(%rbp)
.LBB27_19:                              # %for.cond50
                                        #   Parent Loop BB27_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB27_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB27_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB27_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB27_26
.LBB27_22:                              # %cond.false61
                                        #   in Loop: Header=BB27_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB27_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	$127, %eax
	jmp	.LBB27_25
.LBB27_24:                              # %cond.false71
                                        #   in Loop: Header=BB27_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB27_25:                              # %cond.end79
                                        #   in Loop: Header=BB27_19 Depth=2
.LBB27_26:                              # %cond.end81
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB27_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB27_32
.LBB27_28:                              # %cond.false90
                                        #   in Loop: Header=BB27_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB27_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	$127, %eax
	jmp	.LBB27_31
.LBB27_30:                              # %cond.false98
                                        #   in Loop: Header=BB27_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB27_31:                              # %cond.end104
                                        #   in Loop: Header=BB27_19 Depth=2
.LBB27_32:                              # %cond.end106
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB27_33:                              # %for.cond108
                                        #   Parent Loop BB27_17 Depth=1
                                        #     Parent Loop BB27_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB27_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB27_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB27_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB27_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB27_46
.LBB27_36:                              # %if.else
                                        #   in Loop: Header=BB27_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB27_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB27_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB27_42
.LBB27_38:                              # %cond.false145
                                        #   in Loop: Header=BB27_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB27_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB27_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB27_41
.LBB27_40:                              # %cond.false151
                                        #   in Loop: Header=BB27_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB27_41:                              # %cond.end155
                                        #   in Loop: Header=BB27_33 Depth=3
.LBB27_42:                              # %cond.end157
                                        #   in Loop: Header=BB27_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB27_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB27_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB27_45
.LBB27_44:                              # %if.then183
                                        #   in Loop: Header=BB27_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB27_45:                              # %if.end
                                        #   in Loop: Header=BB27_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB27_46:                              # %if.end220
                                        #   in Loop: Header=BB27_33 Depth=3
	jmp	.LBB27_47
.LBB27_47:                              # %for.inc221
                                        #   in Loop: Header=BB27_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_33
.LBB27_48:                              # %for.end223
                                        #   in Loop: Header=BB27_19 Depth=2
	jmp	.LBB27_49
.LBB27_49:                              # %for.inc224
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB27_19
.LBB27_50:                              # %for.end226
                                        #   in Loop: Header=BB27_17 Depth=1
	jmp	.LBB27_51
.LBB27_51:                              # %for.inc227
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_17
.LBB27_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB27_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB27_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_56 Depth 2
                                        #       Child Loop BB27_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB27_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB27_54 Depth=1
	movl	$0, -24(%rbp)
.LBB27_56:                              # %for.cond235
                                        #   Parent Loop BB27_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB27_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB27_56 Depth=2
	movl	$0, -20(%rbp)
.LBB27_58:                              # %for.cond238
                                        #   Parent Loop BB27_54 Depth=1
                                        #     Parent Loop BB27_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB27_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB27_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB27_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB27_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB27_62
.LBB27_61:                              # %cond.false243
                                        #   in Loop: Header=BB27_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB27_62:                              # %cond.end244
                                        #   in Loop: Header=BB27_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB27_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_58
.LBB27_64:                              # %for.end276
                                        #   in Loop: Header=BB27_56 Depth=2
	jmp	.LBB27_65
.LBB27_65:                              # %for.inc277
                                        #   in Loop: Header=BB27_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB27_56
.LBB27_66:                              # %for.end279
                                        #   in Loop: Header=BB27_54 Depth=1
	jmp	.LBB27_67
.LBB27_67:                              # %for.inc280
                                        #   in Loop: Header=BB27_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_54
.LBB27_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB27_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB27_69 Depth=1
	movl	$0, -28(%rbp)
.LBB27_71:                              # %for.cond287
                                        #   Parent Loop BB27_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB27_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB27_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_71
.LBB27_74:                              # %for.end327
                                        #   in Loop: Header=BB27_69 Depth=1
	jmp	.LBB27_75
.LBB27_75:                              # %for.inc328
                                        #   in Loop: Header=BB27_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_69
.LBB27_76:                              # %for.end330
	jmp	.LBB27_142
.LBB27_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB27_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB27_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB27_78 Depth=1
	movl	$0, -24(%rbp)
.LBB27_80:                              # %for.cond335
                                        #   Parent Loop BB27_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB27_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB27_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB27_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB27_80
.LBB27_83:                              # %for.end345
                                        #   in Loop: Header=BB27_78 Depth=1
	jmp	.LBB27_84
.LBB27_84:                              # %for.inc346
                                        #   in Loop: Header=BB27_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_78
.LBB27_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB27_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_88 Depth 2
                                        #       Child Loop BB27_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB27_86 Depth=1
	movl	$0, -32(%rbp)
.LBB27_88:                              # %for.cond354
                                        #   Parent Loop BB27_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB27_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB27_90:                              # %for.cond372
                                        #   Parent Loop BB27_86 Depth=1
                                        #     Parent Loop BB27_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB27_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB27_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_90
.LBB27_93:                              # %for.end389
                                        #   in Loop: Header=BB27_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB27_94
	jp	.LBB27_94
	jmp	.LBB27_95
.LBB27_94:                              # %if.then396
                                        #   in Loop: Header=BB27_88 Depth=2
	vmovsd	.LCPI27_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB27_96
.LBB27_95:                              # %if.else406
                                        #   in Loop: Header=BB27_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB27_96:                              # %if.end407
                                        #   in Loop: Header=BB27_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB27_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB27_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB27_99
.LBB27_98:                              # %if.then413
                                        #   in Loop: Header=BB27_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB27_99:                              # %if.end414
                                        #   in Loop: Header=BB27_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB27_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB27_88
.LBB27_101:                             # %for.end447
                                        #   in Loop: Header=BB27_86 Depth=1
	jmp	.LBB27_102
.LBB27_102:                             # %for.inc448
                                        #   in Loop: Header=BB27_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_86
.LBB27_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB27_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB27_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_107 Depth 2
                                        #       Child Loop BB27_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB27_105 Depth=1
	movl	$0, -28(%rbp)
.LBB27_107:                             # %for.cond459
                                        #   Parent Loop BB27_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB27_107 Depth=2
	movl	$0, -20(%rbp)
.LBB27_109:                             # %for.cond465
                                        #   Parent Loop BB27_105 Depth=1
                                        #     Parent Loop BB27_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB27_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB27_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB27_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_109
.LBB27_112:                             # %for.end495
                                        #   in Loop: Header=BB27_107 Depth=2
	jmp	.LBB27_113
.LBB27_113:                             # %for.inc496
                                        #   in Loop: Header=BB27_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_107
.LBB27_114:                             # %for.end498
                                        #   in Loop: Header=BB27_105 Depth=1
	jmp	.LBB27_115
.LBB27_115:                             # %for.inc499
                                        #   in Loop: Header=BB27_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_105
.LBB27_116:                             # %for.end501
	jmp	.LBB27_126
.LBB27_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB27_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB27_118 Depth=1
	movl	$0, -28(%rbp)
.LBB27_120:                             # %for.cond508
                                        #   Parent Loop BB27_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB27_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB27_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_120
.LBB27_123:                             # %for.end549
                                        #   in Loop: Header=BB27_118 Depth=1
	jmp	.LBB27_124
.LBB27_124:                             # %for.inc550
                                        #   in Loop: Header=BB27_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_118
.LBB27_125:                             # %for.end552
	jmp	.LBB27_126
.LBB27_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB27_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_129 Depth 2
                                        #       Child Loop BB27_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB27_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB27_127 Depth=1
	movl	$0, -24(%rbp)
.LBB27_129:                             # %for.cond558
                                        #   Parent Loop BB27_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB27_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB27_129 Depth=2
	movl	$0, -20(%rbp)
.LBB27_131:                             # %for.cond562
                                        #   Parent Loop BB27_127 Depth=1
                                        #     Parent Loop BB27_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB27_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB27_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB27_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB27_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB27_135
.LBB27_134:                             # %cond.false569
                                        #   in Loop: Header=BB27_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB27_135:                             # %cond.end570
                                        #   in Loop: Header=BB27_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB27_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_131
.LBB27_137:                             # %for.end598
                                        #   in Loop: Header=BB27_129 Depth=2
	jmp	.LBB27_138
.LBB27_138:                             # %for.inc599
                                        #   in Loop: Header=BB27_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB27_129
.LBB27_139:                             # %for.end601
                                        #   in Loop: Header=BB27_127 Depth=1
	jmp	.LBB27_140
.LBB27_140:                             # %for.inc602
                                        #   in Loop: Header=BB27_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_127
.LBB27_141:                             # %for.end604
	jmp	.LBB27_142
.LBB27_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB27_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_145 Depth 2
                                        #       Child Loop BB27_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB27_143 Depth=1
	movl	$0, -28(%rbp)
.LBB27_145:                             # %for.cond611
                                        #   Parent Loop BB27_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB27_145 Depth=2
	movl	$0, -20(%rbp)
.LBB27_147:                             # %for.cond617
                                        #   Parent Loop BB27_143 Depth=1
                                        #     Parent Loop BB27_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB27_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB27_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB27_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB27_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB27_151
.LBB27_150:                             # %if.then638
                                        #   in Loop: Header=BB27_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB27_154
.LBB27_151:                             # %if.end639
                                        #   in Loop: Header=BB27_147 Depth=3
	jmp	.LBB27_152
.LBB27_152:                             # %for.inc640
                                        #   in Loop: Header=BB27_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_147
.LBB27_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB27_145 Depth=2
	jmp	.LBB27_154
.LBB27_154:                             # %for.end642
                                        #   in Loop: Header=BB27_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB27_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB27_143 Depth=1
	jmp	.LBB27_159
.LBB27_156:                             # %if.end646
                                        #   in Loop: Header=BB27_145 Depth=2
	jmp	.LBB27_157
.LBB27_157:                             # %for.inc647
                                        #   in Loop: Header=BB27_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_145
.LBB27_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB27_143 Depth=1
	jmp	.LBB27_159
.LBB27_159:                             # %for.end649
                                        #   in Loop: Header=BB27_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB27_161
# %bb.160:                              # %if.then652
	jmp	.LBB27_164
.LBB27_161:                             # %if.end653
                                        #   in Loop: Header=BB27_143 Depth=1
	jmp	.LBB27_162
.LBB27_162:                             # %for.inc654
                                        #   in Loop: Header=BB27_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_143
.LBB27_163:                             # %for.end656.loopexit
	jmp	.LBB27_164
.LBB27_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$2080132424, -80(%rbp)  # imm = 0x7BFC4D48
	jne	.LBB27_166
.LBB27_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_165
.Lfunc_end27:
	.size	test_wp_B_slice.24, .Lfunc_end27-test_wp_B_slice.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.25
.LCPI28_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.25
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.25,@function
estimate_weighting_factor_P_slice.25:   # @estimate_weighting_factor_P_slice.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1957080261, -60(%rbp)  # imm = 0x74A6ACC5
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB28_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB28_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB28_4
.LBB28_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB28_4
.LBB28_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB28_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_7 Depth 2
                                        #       Child Loop BB28_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	$0, -16(%rbp)
.LBB28_7:                               # %for.cond12
                                        #   Parent Loop BB28_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB28_7 Depth=2
	movl	$0, -4(%rbp)
.LBB28_9:                               # %for.cond17
                                        #   Parent Loop BB28_5 Depth=1
                                        #     Parent Loop BB28_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB28_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB28_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB28_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_9
.LBB28_12:                              # %for.end
                                        #   in Loop: Header=BB28_7 Depth=2
	jmp	.LBB28_13
.LBB28_13:                              # %for.inc48
                                        #   in Loop: Header=BB28_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_7
.LBB28_14:                              # %for.end50
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_15
.LBB28_15:                              # %for.inc51
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_5
.LBB28_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB28_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB28_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB28_17 Depth=1
	movl	$0, -16(%rbp)
.LBB28_19:                              # %for.cond57
                                        #   Parent Loop BB28_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB28_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB28_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_19
.LBB28_22:                              # %for.end67
                                        #   in Loop: Header=BB28_17 Depth=1
	jmp	.LBB28_23
.LBB28_23:                              # %for.inc68
                                        #   in Loop: Header=BB28_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_17
.LBB28_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB28_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_27 Depth 2
                                        #       Child Loop BB28_29 Depth 3
                                        #       Child Loop BB28_48 Depth 3
                                        #       Child Loop BB28_58 Depth 3
                                        #         Child Loop BB28_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB28_25 Depth=1
	movl	$0, -4(%rbp)
.LBB28_27:                              # %for.cond76
                                        #   Parent Loop BB28_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_29 Depth 3
                                        #       Child Loop BB28_48 Depth 3
                                        #       Child Loop BB28_58 Depth 3
                                        #         Child Loop BB28_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB28_29:                              # %for.cond92
                                        #   Parent Loop BB28_25 Depth=1
                                        #     Parent Loop BB28_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB28_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB28_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_29
.LBB28_32:                              # %for.end106
                                        #   in Loop: Header=BB28_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB28_40
	jp	.LBB28_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB28_34
	jp	.LBB28_34
	jmp	.LBB28_35
.LBB28_34:                              # %if.then114
                                        #   in Loop: Header=BB28_27 Depth=2
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB28_36
.LBB28_35:                              # %if.else
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB28_36:                              # %if.end
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB28_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB28_39
.LBB28_38:                              # %if.then147
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB28_39:                              # %if.end154
                                        #   in Loop: Header=BB28_27 Depth=2
	jmp	.LBB28_47
.LBB28_40:                              # %if.else155
                                        #   in Loop: Header=BB28_27 Depth=2
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB28_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB28_46
.LBB28_42:                              # %cond.false179
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB28_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	$127, %eax
	jmp	.LBB28_45
.LBB28_44:                              # %cond.false188
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB28_45:                              # %cond.end194
                                        #   in Loop: Header=BB28_27 Depth=2
.LBB28_46:                              # %cond.end196
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB28_47:                              # %if.end209
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB28_48:                              # %for.cond222
                                        #   Parent Loop BB28_25 Depth=1
                                        #     Parent Loop BB28_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB28_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB28_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB28_55
.LBB28_51:                              # %cond.false248
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB28_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_54
.LBB28_53:                              # %cond.false270
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB28_54:                              # %cond.end288
                                        #   in Loop: Header=BB28_48 Depth=3
.LBB28_55:                              # %cond.end290
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB28_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_48
.LBB28_57:                              # %for.end297
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	$0, -12(%rbp)
.LBB28_58:                              # %for.cond298
                                        #   Parent Loop BB28_25 Depth=1
                                        #     Parent Loop BB28_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB28_58 Depth=3
	movl	$0, -16(%rbp)
.LBB28_60:                              # %for.cond305
                                        #   Parent Loop BB28_25 Depth=1
                                        #     Parent Loop BB28_27 Depth=2
                                        #       Parent Loop BB28_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB28_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB28_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB28_67
.LBB28_63:                              # %cond.false336
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB28_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_66
.LBB28_65:                              # %cond.false364
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB28_66:                              # %cond.end387
                                        #   in Loop: Header=BB28_60 Depth=4
.LBB28_67:                              # %cond.end389
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB28_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_60
.LBB28_69:                              # %for.end400
                                        #   in Loop: Header=BB28_58 Depth=3
	jmp	.LBB28_70
.LBB28_70:                              # %for.inc401
                                        #   in Loop: Header=BB28_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_58
.LBB28_71:                              # %for.end403
                                        #   in Loop: Header=BB28_27 Depth=2
	jmp	.LBB28_72
.LBB28_72:                              # %for.inc404
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_27
.LBB28_73:                              # %for.end406
                                        #   in Loop: Header=BB28_25 Depth=1
	jmp	.LBB28_74
.LBB28_74:                              # %for.inc407
                                        #   in Loop: Header=BB28_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_25
.LBB28_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB28_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_78 Depth 2
                                        #       Child Loop BB28_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB28_76 Depth=1
	movl	$0, -24(%rbp)
.LBB28_78:                              # %for.cond415
                                        #   Parent Loop BB28_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB28_78 Depth=2
	movl	$0, -20(%rbp)
.LBB28_80:                              # %for.cond421
                                        #   Parent Loop BB28_76 Depth=1
                                        #     Parent Loop BB28_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB28_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB28_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB28_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_80
.LBB28_83:                              # %for.end451
                                        #   in Loop: Header=BB28_78 Depth=2
	jmp	.LBB28_84
.LBB28_84:                              # %for.inc452
                                        #   in Loop: Header=BB28_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_78
.LBB28_85:                              # %for.end454
                                        #   in Loop: Header=BB28_76 Depth=1
	jmp	.LBB28_86
.LBB28_86:                              # %for.inc455
                                        #   in Loop: Header=BB28_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_76
.LBB28_87:                              # %for.end457
	cmpl	$1957080261, -60(%rbp)  # imm = 0x74A6ACC5
	jne	.LBB28_89
.LBB28_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_88
.Lfunc_end28:
	.size	estimate_weighting_factor_P_slice.25, .Lfunc_end28-estimate_weighting_factor_P_slice.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.26
.LCPI29_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.26
	.p2align	4, 0x90
	.type	test_wp_B_slice.26,@function
test_wp_B_slice.26:                     # @test_wp_B_slice.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$822467787, -84(%rbp)   # imm = 0x3105DCCB
	movl	%edi, -76(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB29_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB29_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB29_4
.LBB29_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB29_4
.LBB29_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB29_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_7 Depth 2
                                        #       Child Loop BB29_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB29_5 Depth=1
	movl	$0, -24(%rbp)
.LBB29_7:                               # %for.cond9
                                        #   Parent Loop BB29_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB29_7 Depth=2
	movl	$0, -32(%rbp)
.LBB29_9:                               # %for.cond14
                                        #   Parent Loop BB29_5 Depth=1
                                        #     Parent Loop BB29_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB29_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB29_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB29_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_9
.LBB29_12:                              # %for.end
                                        #   in Loop: Header=BB29_7 Depth=2
	jmp	.LBB29_13
.LBB29_13:                              # %for.inc41
                                        #   in Loop: Header=BB29_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_7
.LBB29_14:                              # %for.end43
                                        #   in Loop: Header=BB29_5 Depth=1
	jmp	.LBB29_15
.LBB29_15:                              # %for.inc44
                                        #   in Loop: Header=BB29_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_5
.LBB29_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB29_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_19 Depth 2
                                        #       Child Loop BB29_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB29_17 Depth=1
	movl	$0, -24(%rbp)
.LBB29_19:                              # %for.cond50
                                        #   Parent Loop BB29_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB29_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB29_26
.LBB29_22:                              # %cond.false61
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB29_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$127, %eax
	jmp	.LBB29_25
.LBB29_24:                              # %cond.false71
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB29_25:                              # %cond.end79
                                        #   in Loop: Header=BB29_19 Depth=2
.LBB29_26:                              # %cond.end81
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB29_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB29_32
.LBB29_28:                              # %cond.false90
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB29_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$127, %eax
	jmp	.LBB29_31
.LBB29_30:                              # %cond.false98
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB29_31:                              # %cond.end104
                                        #   in Loop: Header=BB29_19 Depth=2
.LBB29_32:                              # %cond.end106
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB29_33:                              # %for.cond108
                                        #   Parent Loop BB29_17 Depth=1
                                        #     Parent Loop BB29_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB29_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB29_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB29_46
.LBB29_36:                              # %if.else
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB29_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB29_42
.LBB29_38:                              # %cond.false145
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB29_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB29_41
.LBB29_40:                              # %cond.false151
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB29_41:                              # %cond.end155
                                        #   in Loop: Header=BB29_33 Depth=3
.LBB29_42:                              # %cond.end157
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB29_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB29_45
.LBB29_44:                              # %if.then183
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB29_45:                              # %if.end
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB29_46:                              # %if.end220
                                        #   in Loop: Header=BB29_33 Depth=3
	jmp	.LBB29_47
.LBB29_47:                              # %for.inc221
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_33
.LBB29_48:                              # %for.end223
                                        #   in Loop: Header=BB29_19 Depth=2
	jmp	.LBB29_49
.LBB29_49:                              # %for.inc224
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_19
.LBB29_50:                              # %for.end226
                                        #   in Loop: Header=BB29_17 Depth=1
	jmp	.LBB29_51
.LBB29_51:                              # %for.inc227
                                        #   in Loop: Header=BB29_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_17
.LBB29_52:                              # %for.end229
	cmpl	$1, -76(%rbp)
	jne	.LBB29_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB29_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_56 Depth 2
                                        #       Child Loop BB29_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB29_54 Depth=1
	movl	$0, -24(%rbp)
.LBB29_56:                              # %for.cond235
                                        #   Parent Loop BB29_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB29_56 Depth=2
	movl	$0, -20(%rbp)
.LBB29_58:                              # %for.cond238
                                        #   Parent Loop BB29_54 Depth=1
                                        #     Parent Loop BB29_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB29_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB29_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB29_62
.LBB29_61:                              # %cond.false243
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB29_62:                              # %cond.end244
                                        #   in Loop: Header=BB29_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_58
.LBB29_64:                              # %for.end276
                                        #   in Loop: Header=BB29_56 Depth=2
	jmp	.LBB29_65
.LBB29_65:                              # %for.inc277
                                        #   in Loop: Header=BB29_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_56
.LBB29_66:                              # %for.end279
                                        #   in Loop: Header=BB29_54 Depth=1
	jmp	.LBB29_67
.LBB29_67:                              # %for.inc280
                                        #   in Loop: Header=BB29_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_54
.LBB29_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB29_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	$0, -28(%rbp)
.LBB29_71:                              # %for.cond287
                                        #   Parent Loop BB29_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_71
.LBB29_74:                              # %for.end327
                                        #   in Loop: Header=BB29_69 Depth=1
	jmp	.LBB29_75
.LBB29_75:                              # %for.inc328
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_69
.LBB29_76:                              # %for.end330
	jmp	.LBB29_142
.LBB29_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB29_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB29_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB29_78 Depth=1
	movl	$0, -24(%rbp)
.LBB29_80:                              # %for.cond335
                                        #   Parent Loop BB29_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB29_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB29_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB29_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_80
.LBB29_83:                              # %for.end345
                                        #   in Loop: Header=BB29_78 Depth=1
	jmp	.LBB29_84
.LBB29_84:                              # %for.inc346
                                        #   in Loop: Header=BB29_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_78
.LBB29_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB29_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_88 Depth 2
                                        #       Child Loop BB29_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	$0, -32(%rbp)
.LBB29_88:                              # %for.cond354
                                        #   Parent Loop BB29_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB29_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB29_90:                              # %for.cond372
                                        #   Parent Loop BB29_86 Depth=1
                                        #     Parent Loop BB29_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB29_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB29_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_90
.LBB29_93:                              # %for.end389
                                        #   in Loop: Header=BB29_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB29_94
	jp	.LBB29_94
	jmp	.LBB29_95
.LBB29_94:                              # %if.then396
                                        #   in Loop: Header=BB29_88 Depth=2
	vmovsd	.LCPI29_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB29_96
.LBB29_95:                              # %if.else406
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB29_96:                              # %if.end407
                                        #   in Loop: Header=BB29_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB29_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB29_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB29_99
.LBB29_98:                              # %if.then413
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB29_99:                              # %if.end414
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_88
.LBB29_101:                             # %for.end447
                                        #   in Loop: Header=BB29_86 Depth=1
	jmp	.LBB29_102
.LBB29_102:                             # %for.inc448
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_86
.LBB29_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB29_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB29_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_107 Depth 2
                                        #       Child Loop BB29_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB29_105 Depth=1
	movl	$0, -28(%rbp)
.LBB29_107:                             # %for.cond459
                                        #   Parent Loop BB29_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB29_107 Depth=2
	movl	$0, -20(%rbp)
.LBB29_109:                             # %for.cond465
                                        #   Parent Loop BB29_105 Depth=1
                                        #     Parent Loop BB29_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB29_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB29_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_109
.LBB29_112:                             # %for.end495
                                        #   in Loop: Header=BB29_107 Depth=2
	jmp	.LBB29_113
.LBB29_113:                             # %for.inc496
                                        #   in Loop: Header=BB29_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_107
.LBB29_114:                             # %for.end498
                                        #   in Loop: Header=BB29_105 Depth=1
	jmp	.LBB29_115
.LBB29_115:                             # %for.inc499
                                        #   in Loop: Header=BB29_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_105
.LBB29_116:                             # %for.end501
	jmp	.LBB29_126
.LBB29_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB29_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB29_118 Depth=1
	movl	$0, -28(%rbp)
.LBB29_120:                             # %for.cond508
                                        #   Parent Loop BB29_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB29_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB29_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_120
.LBB29_123:                             # %for.end549
                                        #   in Loop: Header=BB29_118 Depth=1
	jmp	.LBB29_124
.LBB29_124:                             # %for.inc550
                                        #   in Loop: Header=BB29_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_118
.LBB29_125:                             # %for.end552
	jmp	.LBB29_126
.LBB29_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB29_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_129 Depth 2
                                        #       Child Loop BB29_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB29_127 Depth=1
	movl	$0, -24(%rbp)
.LBB29_129:                             # %for.cond558
                                        #   Parent Loop BB29_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB29_129 Depth=2
	movl	$0, -20(%rbp)
.LBB29_131:                             # %for.cond562
                                        #   Parent Loop BB29_127 Depth=1
                                        #     Parent Loop BB29_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB29_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB29_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB29_135
.LBB29_134:                             # %cond.false569
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB29_135:                             # %cond.end570
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_131
.LBB29_137:                             # %for.end598
                                        #   in Loop: Header=BB29_129 Depth=2
	jmp	.LBB29_138
.LBB29_138:                             # %for.inc599
                                        #   in Loop: Header=BB29_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_129
.LBB29_139:                             # %for.end601
                                        #   in Loop: Header=BB29_127 Depth=1
	jmp	.LBB29_140
.LBB29_140:                             # %for.inc602
                                        #   in Loop: Header=BB29_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_127
.LBB29_141:                             # %for.end604
	jmp	.LBB29_142
.LBB29_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB29_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_145 Depth 2
                                        #       Child Loop BB29_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB29_143 Depth=1
	movl	$0, -28(%rbp)
.LBB29_145:                             # %for.cond611
                                        #   Parent Loop BB29_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	$0, -20(%rbp)
.LBB29_147:                             # %for.cond617
                                        #   Parent Loop BB29_143 Depth=1
                                        #     Parent Loop BB29_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB29_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB29_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB29_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB29_151
.LBB29_150:                             # %if.then638
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB29_154
.LBB29_151:                             # %if.end639
                                        #   in Loop: Header=BB29_147 Depth=3
	jmp	.LBB29_152
.LBB29_152:                             # %for.inc640
                                        #   in Loop: Header=BB29_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_147
.LBB29_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB29_145 Depth=2
	jmp	.LBB29_154
.LBB29_154:                             # %for.end642
                                        #   in Loop: Header=BB29_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB29_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_159
.LBB29_156:                             # %if.end646
                                        #   in Loop: Header=BB29_145 Depth=2
	jmp	.LBB29_157
.LBB29_157:                             # %for.inc647
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_145
.LBB29_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_159
.LBB29_159:                             # %for.end649
                                        #   in Loop: Header=BB29_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB29_161
# %bb.160:                              # %if.then652
	jmp	.LBB29_164
.LBB29_161:                             # %if.end653
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_162
.LBB29_162:                             # %for.inc654
                                        #   in Loop: Header=BB29_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_143
.LBB29_163:                             # %for.end656.loopexit
	jmp	.LBB29_164
.LBB29_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$822467787, -84(%rbp)   # imm = 0x3105DCCB
	jne	.LBB29_166
.LBB29_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_165
.Lfunc_end29:
	.size	test_wp_B_slice.26, .Lfunc_end29-test_wp_B_slice.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.27
.LCPI30_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.27
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.27,@function
estimate_weighting_factor_B_slice.27:   # @estimate_weighting_factor_B_slice.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1084039633, -92(%rbp)  # imm = 0x409D21D1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB30_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB30_4
.LBB30_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB30_4
.LBB30_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB30_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB30_7
.LBB30_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB30_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB30_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_10 Depth 2
                                        #       Child Loop BB30_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB30_8 Depth=1
	movl	$0, -8(%rbp)
.LBB30_10:                              # %for.cond14
                                        #   Parent Loop BB30_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB30_10 Depth=2
	movl	$0, -16(%rbp)
.LBB30_12:                              # %for.cond19
                                        #   Parent Loop BB30_8 Depth=1
                                        #     Parent Loop BB30_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB30_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB30_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB30_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_12
.LBB30_15:                              # %for.end
                                        #   in Loop: Header=BB30_10 Depth=2
	jmp	.LBB30_16
.LBB30_16:                              # %for.inc50
                                        #   in Loop: Header=BB30_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_10
.LBB30_17:                              # %for.end52
                                        #   in Loop: Header=BB30_8 Depth=1
	jmp	.LBB30_18
.LBB30_18:                              # %for.inc53
                                        #   in Loop: Header=BB30_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_8
.LBB30_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB30_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_22 Depth 2
                                        #       Child Loop BB30_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB30_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB30_20 Depth=1
	movl	$0, -8(%rbp)
.LBB30_22:                              # %for.cond59
                                        #   Parent Loop BB30_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB30_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB30_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB30_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB30_29
.LBB30_25:                              # %cond.false70
                                        #   in Loop: Header=BB30_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB30_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	$127, %eax
	jmp	.LBB30_28
.LBB30_27:                              # %cond.false80
                                        #   in Loop: Header=BB30_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB30_28:                              # %cond.end88
                                        #   in Loop: Header=BB30_22 Depth=2
.LBB30_29:                              # %cond.end90
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB30_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB30_35
.LBB30_31:                              # %cond.false99
                                        #   in Loop: Header=BB30_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB30_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	$127, %eax
	jmp	.LBB30_34
.LBB30_33:                              # %cond.false107
                                        #   in Loop: Header=BB30_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB30_34:                              # %cond.end113
                                        #   in Loop: Header=BB30_22 Depth=2
.LBB30_35:                              # %cond.end115
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB30_36:                              # %for.cond117
                                        #   Parent Loop BB30_20 Depth=1
                                        #     Parent Loop BB30_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB30_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB30_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB30_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB30_49
.LBB30_39:                              # %if.else154
                                        #   in Loop: Header=BB30_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB30_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB30_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB30_45
.LBB30_41:                              # %cond.false160
                                        #   in Loop: Header=BB30_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB30_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB30_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB30_44
.LBB30_43:                              # %cond.false166
                                        #   in Loop: Header=BB30_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB30_44:                              # %cond.end170
                                        #   in Loop: Header=BB30_36 Depth=3
.LBB30_45:                              # %cond.end172
                                        #   in Loop: Header=BB30_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB30_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB30_48
.LBB30_47:                              # %if.then198
                                        #   in Loop: Header=BB30_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB30_48:                              # %if.end208
                                        #   in Loop: Header=BB30_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB30_49:                              # %if.end238
                                        #   in Loop: Header=BB30_36 Depth=3
	jmp	.LBB30_50
.LBB30_50:                              # %for.inc239
                                        #   in Loop: Header=BB30_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_36
.LBB30_51:                              # %for.end241
                                        #   in Loop: Header=BB30_22 Depth=2
	jmp	.LBB30_52
.LBB30_52:                              # %for.inc242
                                        #   in Loop: Header=BB30_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_22
.LBB30_53:                              # %for.end244
                                        #   in Loop: Header=BB30_20 Depth=1
	jmp	.LBB30_54
.LBB30_54:                              # %for.inc245
                                        #   in Loop: Header=BB30_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_20
.LBB30_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB30_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB30_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_59 Depth 2
                                        #       Child Loop BB30_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB30_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB30_57 Depth=1
	movl	$0, -8(%rbp)
.LBB30_59:                              # %for.cond254
                                        #   Parent Loop BB30_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB30_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB30_59 Depth=2
	movl	$0, -20(%rbp)
.LBB30_61:                              # %for.cond257
                                        #   Parent Loop BB30_57 Depth=1
                                        #     Parent Loop BB30_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB30_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB30_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB30_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB30_65
.LBB30_64:                              # %cond.false262
                                        #   in Loop: Header=BB30_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB30_65:                              # %cond.end263
                                        #   in Loop: Header=BB30_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB30_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_61
.LBB30_67:                              # %for.end295
                                        #   in Loop: Header=BB30_59 Depth=2
	jmp	.LBB30_68
.LBB30_68:                              # %for.inc296
                                        #   in Loop: Header=BB30_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_59
.LBB30_69:                              # %for.end298
                                        #   in Loop: Header=BB30_57 Depth=1
	jmp	.LBB30_70
.LBB30_70:                              # %for.inc299
                                        #   in Loop: Header=BB30_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_57
.LBB30_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB30_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB30_72 Depth=1
	movl	$0, -24(%rbp)
.LBB30_74:                              # %for.cond306
                                        #   Parent Loop BB30_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB30_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB30_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_74
.LBB30_77:                              # %for.end346
                                        #   in Loop: Header=BB30_72 Depth=1
	jmp	.LBB30_78
.LBB30_78:                              # %for.inc347
                                        #   in Loop: Header=BB30_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_72
.LBB30_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB30_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_82 Depth 2
                                        #       Child Loop BB30_84 Depth 3
                                        #       Child Loop BB30_88 Depth 3
                                        #         Child Loop BB30_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB30_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB30_80 Depth=1
	movl	$0, -8(%rbp)
.LBB30_82:                              # %for.cond353
                                        #   Parent Loop BB30_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_84 Depth 3
                                        #       Child Loop BB30_88 Depth 3
                                        #         Child Loop BB30_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB30_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB30_82 Depth=2
	movl	$0, -16(%rbp)
.LBB30_84:                              # %for.cond356
                                        #   Parent Loop BB30_80 Depth=1
                                        #     Parent Loop BB30_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB30_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB30_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_84
.LBB30_87:                              # %for.end380
                                        #   in Loop: Header=BB30_82 Depth=2
	movl	$0, -16(%rbp)
.LBB30_88:                              # %for.cond381
                                        #   Parent Loop BB30_80 Depth=1
                                        #     Parent Loop BB30_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB30_88 Depth=3
	movl	$0, -32(%rbp)
.LBB30_90:                              # %for.cond387
                                        #   Parent Loop BB30_80 Depth=1
                                        #     Parent Loop BB30_82 Depth=2
                                        #       Parent Loop BB30_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB30_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB30_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_90
.LBB30_93:                              # %for.end421
                                        #   in Loop: Header=BB30_88 Depth=3
	jmp	.LBB30_94
.LBB30_94:                              # %for.inc422
                                        #   in Loop: Header=BB30_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_88
.LBB30_95:                              # %for.end424
                                        #   in Loop: Header=BB30_82 Depth=2
	jmp	.LBB30_96
.LBB30_96:                              # %for.inc425
                                        #   in Loop: Header=BB30_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_82
.LBB30_97:                              # %for.end427
                                        #   in Loop: Header=BB30_80 Depth=1
	jmp	.LBB30_98
.LBB30_98:                              # %for.inc428
                                        #   in Loop: Header=BB30_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_80
.LBB30_99:                              # %for.end430
	jmp	.LBB30_189
.LBB30_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB30_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB30_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB30_101 Depth=1
	movl	$0, -8(%rbp)
.LBB30_103:                             # %for.cond436
                                        #   Parent Loop BB30_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB30_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB30_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB30_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_103
.LBB30_106:                             # %for.end447
                                        #   in Loop: Header=BB30_101 Depth=1
	jmp	.LBB30_107
.LBB30_107:                             # %for.inc448
                                        #   in Loop: Header=BB30_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_101
.LBB30_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB30_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_111 Depth 2
                                        #       Child Loop BB30_113 Depth 3
                                        #       Child Loop BB30_123 Depth 3
                                        #       Child Loop BB30_133 Depth 3
                                        #         Child Loop BB30_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB30_109 Depth=1
	movl	$0, -16(%rbp)
.LBB30_111:                             # %for.cond456
                                        #   Parent Loop BB30_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_113 Depth 3
                                        #       Child Loop BB30_123 Depth 3
                                        #       Child Loop BB30_133 Depth 3
                                        #         Child Loop BB30_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB30_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB30_113:                             # %for.cond476
                                        #   Parent Loop BB30_109 Depth=1
                                        #     Parent Loop BB30_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB30_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB30_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_113
.LBB30_116:                             # %for.end493
                                        #   in Loop: Header=BB30_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB30_117
	jp	.LBB30_117
	jmp	.LBB30_118
.LBB30_117:                             # %if.then500
                                        #   in Loop: Header=BB30_111 Depth=2
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_119
.LBB30_118:                             # %if.else511
                                        #   in Loop: Header=BB30_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB30_119:                             # %if.end513
                                        #   in Loop: Header=BB30_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB30_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB30_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB30_122
.LBB30_121:                             # %if.then519
                                        #   in Loop: Header=BB30_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB30_122:                             # %if.end521
                                        #   in Loop: Header=BB30_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB30_123:                             # %for.cond554
                                        #   Parent Loop BB30_109 Depth=1
                                        #     Parent Loop BB30_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB30_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB30_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB30_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB30_130
.LBB30_126:                             # %cond.false571
                                        #   in Loop: Header=BB30_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB30_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB30_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_129
.LBB30_128:                             # %cond.false583
                                        #   in Loop: Header=BB30_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB30_129:                             # %cond.end591
                                        #   in Loop: Header=BB30_123 Depth=3
.LBB30_130:                             # %cond.end593
                                        #   in Loop: Header=BB30_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB30_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_123
.LBB30_132:                             # %for.end600
                                        #   in Loop: Header=BB30_111 Depth=2
	movl	$0, -4(%rbp)
.LBB30_133:                             # %for.cond601
                                        #   Parent Loop BB30_109 Depth=1
                                        #     Parent Loop BB30_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB30_133 Depth=3
	movl	$0, -8(%rbp)
.LBB30_135:                             # %for.cond608
                                        #   Parent Loop BB30_109 Depth=1
                                        #     Parent Loop BB30_111 Depth=2
                                        #       Parent Loop BB30_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB30_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB30_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB30_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB30_142
.LBB30_138:                             # %cond.false630
                                        #   in Loop: Header=BB30_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB30_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB30_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_141
.LBB30_140:                             # %cond.false648
                                        #   in Loop: Header=BB30_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB30_141:                             # %cond.end661
                                        #   in Loop: Header=BB30_135 Depth=4
.LBB30_142:                             # %cond.end663
                                        #   in Loop: Header=BB30_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB30_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_135
.LBB30_144:                             # %for.end675
                                        #   in Loop: Header=BB30_133 Depth=3
	jmp	.LBB30_145
.LBB30_145:                             # %for.inc676
                                        #   in Loop: Header=BB30_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_133
.LBB30_146:                             # %for.end678
                                        #   in Loop: Header=BB30_111 Depth=2
	jmp	.LBB30_147
.LBB30_147:                             # %for.inc679
                                        #   in Loop: Header=BB30_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_111
.LBB30_148:                             # %for.end681
                                        #   in Loop: Header=BB30_109 Depth=1
	jmp	.LBB30_149
.LBB30_149:                             # %for.inc682
                                        #   in Loop: Header=BB30_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_109
.LBB30_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB30_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB30_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_154 Depth 2
                                        #       Child Loop BB30_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB30_152 Depth=1
	movl	$0, -24(%rbp)
.LBB30_154:                             # %for.cond694
                                        #   Parent Loop BB30_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB30_154 Depth=2
	movl	$0, -20(%rbp)
.LBB30_156:                             # %for.cond700
                                        #   Parent Loop BB30_152 Depth=1
                                        #     Parent Loop BB30_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB30_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB30_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_156
.LBB30_159:                             # %for.end730
                                        #   in Loop: Header=BB30_154 Depth=2
	jmp	.LBB30_160
.LBB30_160:                             # %for.inc731
                                        #   in Loop: Header=BB30_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_154
.LBB30_161:                             # %for.end733
                                        #   in Loop: Header=BB30_152 Depth=1
	jmp	.LBB30_162
.LBB30_162:                             # %for.inc734
                                        #   in Loop: Header=BB30_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_152
.LBB30_163:                             # %for.end736
	jmp	.LBB30_173
.LBB30_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB30_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB30_165 Depth=1
	movl	$0, -24(%rbp)
.LBB30_167:                             # %for.cond743
                                        #   Parent Loop BB30_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB30_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB30_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_167
.LBB30_170:                             # %for.end784
                                        #   in Loop: Header=BB30_165 Depth=1
	jmp	.LBB30_171
.LBB30_171:                             # %for.inc785
                                        #   in Loop: Header=BB30_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_165
.LBB30_172:                             # %for.end787
	jmp	.LBB30_173
.LBB30_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB30_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_176 Depth 2
                                        #       Child Loop BB30_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB30_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB30_174 Depth=1
	movl	$0, -8(%rbp)
.LBB30_176:                             # %for.cond793
                                        #   Parent Loop BB30_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB30_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB30_176 Depth=2
	movl	$0, -20(%rbp)
.LBB30_178:                             # %for.cond797
                                        #   Parent Loop BB30_174 Depth=1
                                        #     Parent Loop BB30_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB30_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB30_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB30_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB30_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB30_182
.LBB30_181:                             # %cond.false804
                                        #   in Loop: Header=BB30_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB30_182:                             # %cond.end805
                                        #   in Loop: Header=BB30_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB30_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_178
.LBB30_184:                             # %for.end833
                                        #   in Loop: Header=BB30_176 Depth=2
	jmp	.LBB30_185
.LBB30_185:                             # %for.inc834
                                        #   in Loop: Header=BB30_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_176
.LBB30_186:                             # %for.end836
                                        #   in Loop: Header=BB30_174 Depth=1
	jmp	.LBB30_187
.LBB30_187:                             # %for.inc837
                                        #   in Loop: Header=BB30_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_174
.LBB30_188:                             # %for.end839
	jmp	.LBB30_189
.LBB30_189:                             # %if.end840
	cmpl	$1084039633, -92(%rbp)  # imm = 0x409D21D1
	jne	.LBB30_191
.LBB30_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_190
.Lfunc_end30:
	.size	estimate_weighting_factor_B_slice.27, .Lfunc_end30-estimate_weighting_factor_B_slice.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.28
.LCPI31_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.28
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.28,@function
estimate_weighting_factor_P_slice.28:   # @estimate_weighting_factor_P_slice.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$120036363, -60(%rbp)   # imm = 0x7279C0B
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB31_4
.LBB31_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB31_4
.LBB31_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB31_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_7 Depth 2
                                        #       Child Loop BB31_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB31_5 Depth=1
	movl	$0, -16(%rbp)
.LBB31_7:                               # %for.cond12
                                        #   Parent Loop BB31_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB31_7 Depth=2
	movl	$0, -4(%rbp)
.LBB31_9:                               # %for.cond17
                                        #   Parent Loop BB31_5 Depth=1
                                        #     Parent Loop BB31_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB31_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB31_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB31_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_9
.LBB31_12:                              # %for.end
                                        #   in Loop: Header=BB31_7 Depth=2
	jmp	.LBB31_13
.LBB31_13:                              # %for.inc48
                                        #   in Loop: Header=BB31_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_7
.LBB31_14:                              # %for.end50
                                        #   in Loop: Header=BB31_5 Depth=1
	jmp	.LBB31_15
.LBB31_15:                              # %for.inc51
                                        #   in Loop: Header=BB31_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_5
.LBB31_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB31_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB31_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	$0, -16(%rbp)
.LBB31_19:                              # %for.cond57
                                        #   Parent Loop BB31_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB31_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB31_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_19
.LBB31_22:                              # %for.end67
                                        #   in Loop: Header=BB31_17 Depth=1
	jmp	.LBB31_23
.LBB31_23:                              # %for.inc68
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_17
.LBB31_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB31_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_27 Depth 2
                                        #       Child Loop BB31_29 Depth 3
                                        #       Child Loop BB31_48 Depth 3
                                        #       Child Loop BB31_58 Depth 3
                                        #         Child Loop BB31_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	$0, -4(%rbp)
.LBB31_27:                              # %for.cond76
                                        #   Parent Loop BB31_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_29 Depth 3
                                        #       Child Loop BB31_48 Depth 3
                                        #       Child Loop BB31_58 Depth 3
                                        #         Child Loop BB31_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB31_29:                              # %for.cond92
                                        #   Parent Loop BB31_25 Depth=1
                                        #     Parent Loop BB31_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB31_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB31_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_29
.LBB31_32:                              # %for.end106
                                        #   in Loop: Header=BB31_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB31_40
	jp	.LBB31_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB31_34
	jp	.LBB31_34
	jmp	.LBB31_35
.LBB31_34:                              # %if.then114
                                        #   in Loop: Header=BB31_27 Depth=2
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB31_36
.LBB31_35:                              # %if.else
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB31_36:                              # %if.end
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB31_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB31_39
.LBB31_38:                              # %if.then147
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB31_39:                              # %if.end154
                                        #   in Loop: Header=BB31_27 Depth=2
	jmp	.LBB31_47
.LBB31_40:                              # %if.else155
                                        #   in Loop: Header=BB31_27 Depth=2
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB31_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB31_46
.LBB31_42:                              # %cond.false179
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB31_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	$127, %eax
	jmp	.LBB31_45
.LBB31_44:                              # %cond.false188
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB31_45:                              # %cond.end194
                                        #   in Loop: Header=BB31_27 Depth=2
.LBB31_46:                              # %cond.end196
                                        #   in Loop: Header=BB31_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB31_47:                              # %if.end209
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB31_48:                              # %for.cond222
                                        #   Parent Loop BB31_25 Depth=1
                                        #     Parent Loop BB31_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB31_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB31_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB31_55
.LBB31_51:                              # %cond.false248
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB31_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_54
.LBB31_53:                              # %cond.false270
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB31_54:                              # %cond.end288
                                        #   in Loop: Header=BB31_48 Depth=3
.LBB31_55:                              # %cond.end290
                                        #   in Loop: Header=BB31_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB31_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_48
.LBB31_57:                              # %for.end297
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	$0, -12(%rbp)
.LBB31_58:                              # %for.cond298
                                        #   Parent Loop BB31_25 Depth=1
                                        #     Parent Loop BB31_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB31_58 Depth=3
	movl	$0, -16(%rbp)
.LBB31_60:                              # %for.cond305
                                        #   Parent Loop BB31_25 Depth=1
                                        #     Parent Loop BB31_27 Depth=2
                                        #       Parent Loop BB31_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB31_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB31_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB31_67
.LBB31_63:                              # %cond.false336
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB31_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_66
.LBB31_65:                              # %cond.false364
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB31_66:                              # %cond.end387
                                        #   in Loop: Header=BB31_60 Depth=4
.LBB31_67:                              # %cond.end389
                                        #   in Loop: Header=BB31_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB31_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_60
.LBB31_69:                              # %for.end400
                                        #   in Loop: Header=BB31_58 Depth=3
	jmp	.LBB31_70
.LBB31_70:                              # %for.inc401
                                        #   in Loop: Header=BB31_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_58
.LBB31_71:                              # %for.end403
                                        #   in Loop: Header=BB31_27 Depth=2
	jmp	.LBB31_72
.LBB31_72:                              # %for.inc404
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_27
.LBB31_73:                              # %for.end406
                                        #   in Loop: Header=BB31_25 Depth=1
	jmp	.LBB31_74
.LBB31_74:                              # %for.inc407
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_25
.LBB31_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB31_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_78 Depth 2
                                        #       Child Loop BB31_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB31_76 Depth=1
	movl	$0, -24(%rbp)
.LBB31_78:                              # %for.cond415
                                        #   Parent Loop BB31_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB31_78 Depth=2
	movl	$0, -20(%rbp)
.LBB31_80:                              # %for.cond421
                                        #   Parent Loop BB31_76 Depth=1
                                        #     Parent Loop BB31_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB31_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB31_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB31_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_80
.LBB31_83:                              # %for.end451
                                        #   in Loop: Header=BB31_78 Depth=2
	jmp	.LBB31_84
.LBB31_84:                              # %for.inc452
                                        #   in Loop: Header=BB31_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_78
.LBB31_85:                              # %for.end454
                                        #   in Loop: Header=BB31_76 Depth=1
	jmp	.LBB31_86
.LBB31_86:                              # %for.inc455
                                        #   in Loop: Header=BB31_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_76
.LBB31_87:                              # %for.end457
	cmpl	$120036363, -60(%rbp)   # imm = 0x7279C0B
	jne	.LBB31_89
.LBB31_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_88
.Lfunc_end31:
	.size	estimate_weighting_factor_P_slice.28, .Lfunc_end31-estimate_weighting_factor_P_slice.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.29
.LCPI32_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.29
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.29,@function
estimate_weighting_factor_B_slice.29:   # @estimate_weighting_factor_B_slice.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1792072729, -88(%rbp)  # imm = 0x6AD0DC19
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB32_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB32_4
.LBB32_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB32_4
.LBB32_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB32_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB32_7
.LBB32_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB32_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB32_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_10 Depth 2
                                        #       Child Loop BB32_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB32_8 Depth=1
	movl	$0, -8(%rbp)
.LBB32_10:                              # %for.cond14
                                        #   Parent Loop BB32_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB32_10 Depth=2
	movl	$0, -16(%rbp)
.LBB32_12:                              # %for.cond19
                                        #   Parent Loop BB32_8 Depth=1
                                        #     Parent Loop BB32_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB32_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB32_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB32_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_12
.LBB32_15:                              # %for.end
                                        #   in Loop: Header=BB32_10 Depth=2
	jmp	.LBB32_16
.LBB32_16:                              # %for.inc50
                                        #   in Loop: Header=BB32_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_10
.LBB32_17:                              # %for.end52
                                        #   in Loop: Header=BB32_8 Depth=1
	jmp	.LBB32_18
.LBB32_18:                              # %for.inc53
                                        #   in Loop: Header=BB32_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_8
.LBB32_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB32_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_22 Depth 2
                                        #       Child Loop BB32_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB32_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB32_20 Depth=1
	movl	$0, -8(%rbp)
.LBB32_22:                              # %for.cond59
                                        #   Parent Loop BB32_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB32_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB32_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB32_29
.LBB32_25:                              # %cond.false70
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB32_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	$127, %eax
	jmp	.LBB32_28
.LBB32_27:                              # %cond.false80
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB32_28:                              # %cond.end88
                                        #   in Loop: Header=BB32_22 Depth=2
.LBB32_29:                              # %cond.end90
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB32_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB32_35
.LBB32_31:                              # %cond.false99
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB32_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	$127, %eax
	jmp	.LBB32_34
.LBB32_33:                              # %cond.false107
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB32_34:                              # %cond.end113
                                        #   in Loop: Header=BB32_22 Depth=2
.LBB32_35:                              # %cond.end115
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB32_36:                              # %for.cond117
                                        #   Parent Loop BB32_20 Depth=1
                                        #     Parent Loop BB32_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB32_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB32_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB32_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB32_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB32_49
.LBB32_39:                              # %if.else154
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB32_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB32_45
.LBB32_41:                              # %cond.false160
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB32_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB32_44
.LBB32_43:                              # %cond.false166
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB32_44:                              # %cond.end170
                                        #   in Loop: Header=BB32_36 Depth=3
.LBB32_45:                              # %cond.end172
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB32_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB32_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB32_48
.LBB32_47:                              # %if.then198
                                        #   in Loop: Header=BB32_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB32_48:                              # %if.end208
                                        #   in Loop: Header=BB32_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB32_49:                              # %if.end238
                                        #   in Loop: Header=BB32_36 Depth=3
	jmp	.LBB32_50
.LBB32_50:                              # %for.inc239
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_36
.LBB32_51:                              # %for.end241
                                        #   in Loop: Header=BB32_22 Depth=2
	jmp	.LBB32_52
.LBB32_52:                              # %for.inc242
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_22
.LBB32_53:                              # %for.end244
                                        #   in Loop: Header=BB32_20 Depth=1
	jmp	.LBB32_54
.LBB32_54:                              # %for.inc245
                                        #   in Loop: Header=BB32_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_20
.LBB32_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB32_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB32_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_59 Depth 2
                                        #       Child Loop BB32_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB32_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB32_57 Depth=1
	movl	$0, -8(%rbp)
.LBB32_59:                              # %for.cond254
                                        #   Parent Loop BB32_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB32_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB32_59 Depth=2
	movl	$0, -20(%rbp)
.LBB32_61:                              # %for.cond257
                                        #   Parent Loop BB32_57 Depth=1
                                        #     Parent Loop BB32_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB32_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB32_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB32_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB32_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB32_65
.LBB32_64:                              # %cond.false262
                                        #   in Loop: Header=BB32_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB32_65:                              # %cond.end263
                                        #   in Loop: Header=BB32_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB32_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_61
.LBB32_67:                              # %for.end295
                                        #   in Loop: Header=BB32_59 Depth=2
	jmp	.LBB32_68
.LBB32_68:                              # %for.inc296
                                        #   in Loop: Header=BB32_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_59
.LBB32_69:                              # %for.end298
                                        #   in Loop: Header=BB32_57 Depth=1
	jmp	.LBB32_70
.LBB32_70:                              # %for.inc299
                                        #   in Loop: Header=BB32_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_57
.LBB32_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB32_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB32_72 Depth=1
	movl	$0, -24(%rbp)
.LBB32_74:                              # %for.cond306
                                        #   Parent Loop BB32_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB32_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB32_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_74
.LBB32_77:                              # %for.end346
                                        #   in Loop: Header=BB32_72 Depth=1
	jmp	.LBB32_78
.LBB32_78:                              # %for.inc347
                                        #   in Loop: Header=BB32_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_72
.LBB32_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB32_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_82 Depth 2
                                        #       Child Loop BB32_84 Depth 3
                                        #       Child Loop BB32_88 Depth 3
                                        #         Child Loop BB32_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB32_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB32_80 Depth=1
	movl	$0, -8(%rbp)
.LBB32_82:                              # %for.cond353
                                        #   Parent Loop BB32_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_84 Depth 3
                                        #       Child Loop BB32_88 Depth 3
                                        #         Child Loop BB32_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB32_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	$0, -16(%rbp)
.LBB32_84:                              # %for.cond356
                                        #   Parent Loop BB32_80 Depth=1
                                        #     Parent Loop BB32_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB32_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB32_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_84
.LBB32_87:                              # %for.end380
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	$0, -16(%rbp)
.LBB32_88:                              # %for.cond381
                                        #   Parent Loop BB32_80 Depth=1
                                        #     Parent Loop BB32_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB32_88 Depth=3
	movl	$0, -32(%rbp)
.LBB32_90:                              # %for.cond387
                                        #   Parent Loop BB32_80 Depth=1
                                        #     Parent Loop BB32_82 Depth=2
                                        #       Parent Loop BB32_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB32_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB32_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB32_90
.LBB32_93:                              # %for.end421
                                        #   in Loop: Header=BB32_88 Depth=3
	jmp	.LBB32_94
.LBB32_94:                              # %for.inc422
                                        #   in Loop: Header=BB32_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_88
.LBB32_95:                              # %for.end424
                                        #   in Loop: Header=BB32_82 Depth=2
	jmp	.LBB32_96
.LBB32_96:                              # %for.inc425
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_82
.LBB32_97:                              # %for.end427
                                        #   in Loop: Header=BB32_80 Depth=1
	jmp	.LBB32_98
.LBB32_98:                              # %for.inc428
                                        #   in Loop: Header=BB32_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_80
.LBB32_99:                              # %for.end430
	jmp	.LBB32_189
.LBB32_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB32_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB32_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB32_101 Depth=1
	movl	$0, -8(%rbp)
.LBB32_103:                             # %for.cond436
                                        #   Parent Loop BB32_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB32_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB32_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB32_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_103
.LBB32_106:                             # %for.end447
                                        #   in Loop: Header=BB32_101 Depth=1
	jmp	.LBB32_107
.LBB32_107:                             # %for.inc448
                                        #   in Loop: Header=BB32_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_101
.LBB32_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB32_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_111 Depth 2
                                        #       Child Loop BB32_113 Depth 3
                                        #       Child Loop BB32_123 Depth 3
                                        #       Child Loop BB32_133 Depth 3
                                        #         Child Loop BB32_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB32_109 Depth=1
	movl	$0, -16(%rbp)
.LBB32_111:                             # %for.cond456
                                        #   Parent Loop BB32_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_113 Depth 3
                                        #       Child Loop BB32_123 Depth 3
                                        #       Child Loop BB32_133 Depth 3
                                        #         Child Loop BB32_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB32_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB32_113:                             # %for.cond476
                                        #   Parent Loop BB32_109 Depth=1
                                        #     Parent Loop BB32_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB32_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB32_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_113
.LBB32_116:                             # %for.end493
                                        #   in Loop: Header=BB32_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB32_117
	jp	.LBB32_117
	jmp	.LBB32_118
.LBB32_117:                             # %if.then500
                                        #   in Loop: Header=BB32_111 Depth=2
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB32_119
.LBB32_118:                             # %if.else511
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB32_119:                             # %if.end513
                                        #   in Loop: Header=BB32_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB32_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB32_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB32_122
.LBB32_121:                             # %if.then519
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB32_122:                             # %if.end521
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB32_123:                             # %for.cond554
                                        #   Parent Loop BB32_109 Depth=1
                                        #     Parent Loop BB32_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB32_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB32_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_130
.LBB32_126:                             # %cond.false571
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB32_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_129
.LBB32_128:                             # %cond.false583
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB32_129:                             # %cond.end591
                                        #   in Loop: Header=BB32_123 Depth=3
.LBB32_130:                             # %cond.end593
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB32_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_123
.LBB32_132:                             # %for.end600
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	$0, -4(%rbp)
.LBB32_133:                             # %for.cond601
                                        #   Parent Loop BB32_109 Depth=1
                                        #     Parent Loop BB32_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB32_133 Depth=3
	movl	$0, -8(%rbp)
.LBB32_135:                             # %for.cond608
                                        #   Parent Loop BB32_109 Depth=1
                                        #     Parent Loop BB32_111 Depth=2
                                        #       Parent Loop BB32_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB32_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB32_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB32_142
.LBB32_138:                             # %cond.false630
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB32_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_141
.LBB32_140:                             # %cond.false648
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB32_141:                             # %cond.end661
                                        #   in Loop: Header=BB32_135 Depth=4
.LBB32_142:                             # %cond.end663
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB32_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_135
.LBB32_144:                             # %for.end675
                                        #   in Loop: Header=BB32_133 Depth=3
	jmp	.LBB32_145
.LBB32_145:                             # %for.inc676
                                        #   in Loop: Header=BB32_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_133
.LBB32_146:                             # %for.end678
                                        #   in Loop: Header=BB32_111 Depth=2
	jmp	.LBB32_147
.LBB32_147:                             # %for.inc679
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_111
.LBB32_148:                             # %for.end681
                                        #   in Loop: Header=BB32_109 Depth=1
	jmp	.LBB32_149
.LBB32_149:                             # %for.inc682
                                        #   in Loop: Header=BB32_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_109
.LBB32_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB32_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB32_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_154 Depth 2
                                        #       Child Loop BB32_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB32_152 Depth=1
	movl	$0, -24(%rbp)
.LBB32_154:                             # %for.cond694
                                        #   Parent Loop BB32_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB32_154 Depth=2
	movl	$0, -20(%rbp)
.LBB32_156:                             # %for.cond700
                                        #   Parent Loop BB32_152 Depth=1
                                        #     Parent Loop BB32_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB32_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB32_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB32_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_156
.LBB32_159:                             # %for.end730
                                        #   in Loop: Header=BB32_154 Depth=2
	jmp	.LBB32_160
.LBB32_160:                             # %for.inc731
                                        #   in Loop: Header=BB32_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_154
.LBB32_161:                             # %for.end733
                                        #   in Loop: Header=BB32_152 Depth=1
	jmp	.LBB32_162
.LBB32_162:                             # %for.inc734
                                        #   in Loop: Header=BB32_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_152
.LBB32_163:                             # %for.end736
	jmp	.LBB32_173
.LBB32_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB32_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB32_165 Depth=1
	movl	$0, -24(%rbp)
.LBB32_167:                             # %for.cond743
                                        #   Parent Loop BB32_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB32_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB32_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_167
.LBB32_170:                             # %for.end784
                                        #   in Loop: Header=BB32_165 Depth=1
	jmp	.LBB32_171
.LBB32_171:                             # %for.inc785
                                        #   in Loop: Header=BB32_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_165
.LBB32_172:                             # %for.end787
	jmp	.LBB32_173
.LBB32_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB32_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_176 Depth 2
                                        #       Child Loop BB32_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB32_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB32_174 Depth=1
	movl	$0, -8(%rbp)
.LBB32_176:                             # %for.cond793
                                        #   Parent Loop BB32_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB32_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB32_176 Depth=2
	movl	$0, -20(%rbp)
.LBB32_178:                             # %for.cond797
                                        #   Parent Loop BB32_174 Depth=1
                                        #     Parent Loop BB32_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB32_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB32_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB32_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB32_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB32_182
.LBB32_181:                             # %cond.false804
                                        #   in Loop: Header=BB32_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB32_182:                             # %cond.end805
                                        #   in Loop: Header=BB32_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB32_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_178
.LBB32_184:                             # %for.end833
                                        #   in Loop: Header=BB32_176 Depth=2
	jmp	.LBB32_185
.LBB32_185:                             # %for.inc834
                                        #   in Loop: Header=BB32_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_176
.LBB32_186:                             # %for.end836
                                        #   in Loop: Header=BB32_174 Depth=1
	jmp	.LBB32_187
.LBB32_187:                             # %for.inc837
                                        #   in Loop: Header=BB32_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_174
.LBB32_188:                             # %for.end839
	jmp	.LBB32_189
.LBB32_189:                             # %if.end840
	cmpl	$1792072729, -88(%rbp)  # imm = 0x6AD0DC19
	jne	.LBB32_191
.LBB32_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_190
.Lfunc_end32:
	.size	estimate_weighting_factor_B_slice.29, .Lfunc_end32-estimate_weighting_factor_B_slice.29
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.30
.LCPI33_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.30
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.30,@function
estimate_weighting_factor_P_slice.30:   # @estimate_weighting_factor_P_slice.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$220083927, -64(%rbp)   # imm = 0xD1E36D7
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB33_4
.LBB33_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB33_4
.LBB33_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB33_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_7 Depth 2
                                        #       Child Loop BB33_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB33_5 Depth=1
	movl	$0, -16(%rbp)
.LBB33_7:                               # %for.cond12
                                        #   Parent Loop BB33_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB33_7 Depth=2
	movl	$0, -4(%rbp)
.LBB33_9:                               # %for.cond17
                                        #   Parent Loop BB33_5 Depth=1
                                        #     Parent Loop BB33_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB33_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB33_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB33_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_9
.LBB33_12:                              # %for.end
                                        #   in Loop: Header=BB33_7 Depth=2
	jmp	.LBB33_13
.LBB33_13:                              # %for.inc48
                                        #   in Loop: Header=BB33_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_7
.LBB33_14:                              # %for.end50
                                        #   in Loop: Header=BB33_5 Depth=1
	jmp	.LBB33_15
.LBB33_15:                              # %for.inc51
                                        #   in Loop: Header=BB33_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_5
.LBB33_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB33_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB33_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	$0, -16(%rbp)
.LBB33_19:                              # %for.cond57
                                        #   Parent Loop BB33_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB33_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB33_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_19
.LBB33_22:                              # %for.end67
                                        #   in Loop: Header=BB33_17 Depth=1
	jmp	.LBB33_23
.LBB33_23:                              # %for.inc68
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_17
.LBB33_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB33_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_27 Depth 2
                                        #       Child Loop BB33_29 Depth 3
                                        #       Child Loop BB33_48 Depth 3
                                        #       Child Loop BB33_58 Depth 3
                                        #         Child Loop BB33_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	$0, -4(%rbp)
.LBB33_27:                              # %for.cond76
                                        #   Parent Loop BB33_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_29 Depth 3
                                        #       Child Loop BB33_48 Depth 3
                                        #       Child Loop BB33_58 Depth 3
                                        #         Child Loop BB33_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB33_29:                              # %for.cond92
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB33_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB33_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_29
.LBB33_32:                              # %for.end106
                                        #   in Loop: Header=BB33_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB33_40
	jp	.LBB33_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB33_34
	jp	.LBB33_34
	jmp	.LBB33_35
.LBB33_34:                              # %if.then114
                                        #   in Loop: Header=BB33_27 Depth=2
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB33_36
.LBB33_35:                              # %if.else
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB33_36:                              # %if.end
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB33_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB33_39
.LBB33_38:                              # %if.then147
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB33_39:                              # %if.end154
                                        #   in Loop: Header=BB33_27 Depth=2
	jmp	.LBB33_47
.LBB33_40:                              # %if.else155
                                        #   in Loop: Header=BB33_27 Depth=2
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB33_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB33_46
.LBB33_42:                              # %cond.false179
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB33_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$127, %eax
	jmp	.LBB33_45
.LBB33_44:                              # %cond.false188
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB33_45:                              # %cond.end194
                                        #   in Loop: Header=BB33_27 Depth=2
.LBB33_46:                              # %cond.end196
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB33_47:                              # %if.end209
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB33_48:                              # %for.cond222
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB33_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB33_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB33_55
.LBB33_51:                              # %cond.false248
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB33_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_54
.LBB33_53:                              # %cond.false270
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB33_54:                              # %cond.end288
                                        #   in Loop: Header=BB33_48 Depth=3
.LBB33_55:                              # %cond.end290
                                        #   in Loop: Header=BB33_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB33_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_48
.LBB33_57:                              # %for.end297
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$0, -12(%rbp)
.LBB33_58:                              # %for.cond298
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB33_58 Depth=3
	movl	$0, -16(%rbp)
.LBB33_60:                              # %for.cond305
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        #       Parent Loop BB33_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB33_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB33_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB33_67
.LBB33_63:                              # %cond.false336
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB33_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB33_66
.LBB33_65:                              # %cond.false364
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB33_66:                              # %cond.end387
                                        #   in Loop: Header=BB33_60 Depth=4
.LBB33_67:                              # %cond.end389
                                        #   in Loop: Header=BB33_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB33_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_60
.LBB33_69:                              # %for.end400
                                        #   in Loop: Header=BB33_58 Depth=3
	jmp	.LBB33_70
.LBB33_70:                              # %for.inc401
                                        #   in Loop: Header=BB33_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_58
.LBB33_71:                              # %for.end403
                                        #   in Loop: Header=BB33_27 Depth=2
	jmp	.LBB33_72
.LBB33_72:                              # %for.inc404
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_27
.LBB33_73:                              # %for.end406
                                        #   in Loop: Header=BB33_25 Depth=1
	jmp	.LBB33_74
.LBB33_74:                              # %for.inc407
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_25
.LBB33_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB33_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_78 Depth 2
                                        #       Child Loop BB33_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB33_76 Depth=1
	movl	$0, -20(%rbp)
.LBB33_78:                              # %for.cond415
                                        #   Parent Loop BB33_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB33_78 Depth=2
	movl	$0, -24(%rbp)
.LBB33_80:                              # %for.cond421
                                        #   Parent Loop BB33_76 Depth=1
                                        #     Parent Loop BB33_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB33_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB33_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB33_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB33_80
.LBB33_83:                              # %for.end451
                                        #   in Loop: Header=BB33_78 Depth=2
	jmp	.LBB33_84
.LBB33_84:                              # %for.inc452
                                        #   in Loop: Header=BB33_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_78
.LBB33_85:                              # %for.end454
                                        #   in Loop: Header=BB33_76 Depth=1
	jmp	.LBB33_86
.LBB33_86:                              # %for.inc455
                                        #   in Loop: Header=BB33_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_76
.LBB33_87:                              # %for.end457
	cmpl	$220083927, -64(%rbp)   # imm = 0xD1E36D7
	jne	.LBB33_89
.LBB33_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_88
.Lfunc_end33:
	.size	estimate_weighting_factor_P_slice.30, .Lfunc_end33-estimate_weighting_factor_P_slice.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.31
.LCPI34_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.31
	.p2align	4, 0x90
	.type	test_wp_B_slice.31,@function
test_wp_B_slice.31:                     # @test_wp_B_slice.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$63027664, -76(%rbp)    # imm = 0x3C1B9D0
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB34_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB34_4
.LBB34_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB34_4
.LBB34_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB34_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_7 Depth 2
                                        #       Child Loop BB34_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB34_5 Depth=1
	movl	$0, -24(%rbp)
.LBB34_7:                               # %for.cond9
                                        #   Parent Loop BB34_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB34_7 Depth=2
	movl	$0, -32(%rbp)
.LBB34_9:                               # %for.cond14
                                        #   Parent Loop BB34_5 Depth=1
                                        #     Parent Loop BB34_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB34_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB34_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB34_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB34_9
.LBB34_12:                              # %for.end
                                        #   in Loop: Header=BB34_7 Depth=2
	jmp	.LBB34_13
.LBB34_13:                              # %for.inc41
                                        #   in Loop: Header=BB34_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_7
.LBB34_14:                              # %for.end43
                                        #   in Loop: Header=BB34_5 Depth=1
	jmp	.LBB34_15
.LBB34_15:                              # %for.inc44
                                        #   in Loop: Header=BB34_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_5
.LBB34_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB34_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_19 Depth 2
                                        #       Child Loop BB34_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	$0, -24(%rbp)
.LBB34_19:                              # %for.cond50
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB34_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB34_26
.LBB34_22:                              # %cond.false61
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB34_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$127, %eax
	jmp	.LBB34_25
.LBB34_24:                              # %cond.false71
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB34_25:                              # %cond.end79
                                        #   in Loop: Header=BB34_19 Depth=2
.LBB34_26:                              # %cond.end81
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB34_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB34_32
.LBB34_28:                              # %cond.false90
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB34_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$127, %eax
	jmp	.LBB34_31
.LBB34_30:                              # %cond.false98
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB34_31:                              # %cond.end104
                                        #   in Loop: Header=BB34_19 Depth=2
.LBB34_32:                              # %cond.end106
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB34_33:                              # %for.cond108
                                        #   Parent Loop BB34_17 Depth=1
                                        #     Parent Loop BB34_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB34_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB34_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB34_46
.LBB34_36:                              # %if.else
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB34_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB34_42
.LBB34_38:                              # %cond.false145
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB34_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB34_41
.LBB34_40:                              # %cond.false151
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB34_41:                              # %cond.end155
                                        #   in Loop: Header=BB34_33 Depth=3
.LBB34_42:                              # %cond.end157
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB34_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB34_45
.LBB34_44:                              # %if.then183
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB34_45:                              # %if.end
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB34_46:                              # %if.end220
                                        #   in Loop: Header=BB34_33 Depth=3
	jmp	.LBB34_47
.LBB34_47:                              # %for.inc221
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_33
.LBB34_48:                              # %for.end223
                                        #   in Loop: Header=BB34_19 Depth=2
	jmp	.LBB34_49
.LBB34_49:                              # %for.inc224
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_19
.LBB34_50:                              # %for.end226
                                        #   in Loop: Header=BB34_17 Depth=1
	jmp	.LBB34_51
.LBB34_51:                              # %for.inc227
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_17
.LBB34_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB34_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB34_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_56 Depth 2
                                        #       Child Loop BB34_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB34_54 Depth=1
	movl	$0, -24(%rbp)
.LBB34_56:                              # %for.cond235
                                        #   Parent Loop BB34_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB34_56 Depth=2
	movl	$0, -20(%rbp)
.LBB34_58:                              # %for.cond238
                                        #   Parent Loop BB34_54 Depth=1
                                        #     Parent Loop BB34_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB34_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB34_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB34_62
.LBB34_61:                              # %cond.false243
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB34_62:                              # %cond.end244
                                        #   in Loop: Header=BB34_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_58
.LBB34_64:                              # %for.end276
                                        #   in Loop: Header=BB34_56 Depth=2
	jmp	.LBB34_65
.LBB34_65:                              # %for.inc277
                                        #   in Loop: Header=BB34_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_56
.LBB34_66:                              # %for.end279
                                        #   in Loop: Header=BB34_54 Depth=1
	jmp	.LBB34_67
.LBB34_67:                              # %for.inc280
                                        #   in Loop: Header=BB34_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_54
.LBB34_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB34_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB34_69 Depth=1
	movl	$0, -28(%rbp)
.LBB34_71:                              # %for.cond287
                                        #   Parent Loop BB34_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB34_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB34_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_71
.LBB34_74:                              # %for.end327
                                        #   in Loop: Header=BB34_69 Depth=1
	jmp	.LBB34_75
.LBB34_75:                              # %for.inc328
                                        #   in Loop: Header=BB34_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_69
.LBB34_76:                              # %for.end330
	jmp	.LBB34_142
.LBB34_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB34_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB34_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB34_78 Depth=1
	movl	$0, -24(%rbp)
.LBB34_80:                              # %for.cond335
                                        #   Parent Loop BB34_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB34_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB34_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB34_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_80
.LBB34_83:                              # %for.end345
                                        #   in Loop: Header=BB34_78 Depth=1
	jmp	.LBB34_84
.LBB34_84:                              # %for.inc346
                                        #   in Loop: Header=BB34_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_78
.LBB34_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB34_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_88 Depth 2
                                        #       Child Loop BB34_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	$0, -32(%rbp)
.LBB34_88:                              # %for.cond354
                                        #   Parent Loop BB34_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB34_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB34_90:                              # %for.cond372
                                        #   Parent Loop BB34_86 Depth=1
                                        #     Parent Loop BB34_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB34_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB34_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_90
.LBB34_93:                              # %for.end389
                                        #   in Loop: Header=BB34_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB34_94
	jp	.LBB34_94
	jmp	.LBB34_95
.LBB34_94:                              # %if.then396
                                        #   in Loop: Header=BB34_88 Depth=2
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB34_96
.LBB34_95:                              # %if.else406
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB34_96:                              # %if.end407
                                        #   in Loop: Header=BB34_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB34_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB34_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB34_99
.LBB34_98:                              # %if.then413
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB34_99:                              # %if.end414
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB34_88
.LBB34_101:                             # %for.end447
                                        #   in Loop: Header=BB34_86 Depth=1
	jmp	.LBB34_102
.LBB34_102:                             # %for.inc448
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_86
.LBB34_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB34_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB34_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_107 Depth 2
                                        #       Child Loop BB34_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB34_105 Depth=1
	movl	$0, -28(%rbp)
.LBB34_107:                             # %for.cond459
                                        #   Parent Loop BB34_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB34_107 Depth=2
	movl	$0, -20(%rbp)
.LBB34_109:                             # %for.cond465
                                        #   Parent Loop BB34_105 Depth=1
                                        #     Parent Loop BB34_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB34_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB34_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_109
.LBB34_112:                             # %for.end495
                                        #   in Loop: Header=BB34_107 Depth=2
	jmp	.LBB34_113
.LBB34_113:                             # %for.inc496
                                        #   in Loop: Header=BB34_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_107
.LBB34_114:                             # %for.end498
                                        #   in Loop: Header=BB34_105 Depth=1
	jmp	.LBB34_115
.LBB34_115:                             # %for.inc499
                                        #   in Loop: Header=BB34_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_105
.LBB34_116:                             # %for.end501
	jmp	.LBB34_126
.LBB34_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB34_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB34_118 Depth=1
	movl	$0, -28(%rbp)
.LBB34_120:                             # %for.cond508
                                        #   Parent Loop BB34_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB34_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB34_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_120
.LBB34_123:                             # %for.end549
                                        #   in Loop: Header=BB34_118 Depth=1
	jmp	.LBB34_124
.LBB34_124:                             # %for.inc550
                                        #   in Loop: Header=BB34_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_118
.LBB34_125:                             # %for.end552
	jmp	.LBB34_126
.LBB34_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB34_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_129 Depth 2
                                        #       Child Loop BB34_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB34_127 Depth=1
	movl	$0, -24(%rbp)
.LBB34_129:                             # %for.cond558
                                        #   Parent Loop BB34_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB34_129 Depth=2
	movl	$0, -20(%rbp)
.LBB34_131:                             # %for.cond562
                                        #   Parent Loop BB34_127 Depth=1
                                        #     Parent Loop BB34_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB34_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB34_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB34_135
.LBB34_134:                             # %cond.false569
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB34_135:                             # %cond.end570
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_131
.LBB34_137:                             # %for.end598
                                        #   in Loop: Header=BB34_129 Depth=2
	jmp	.LBB34_138
.LBB34_138:                             # %for.inc599
                                        #   in Loop: Header=BB34_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_129
.LBB34_139:                             # %for.end601
                                        #   in Loop: Header=BB34_127 Depth=1
	jmp	.LBB34_140
.LBB34_140:                             # %for.inc602
                                        #   in Loop: Header=BB34_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_127
.LBB34_141:                             # %for.end604
	jmp	.LBB34_142
.LBB34_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB34_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_145 Depth 2
                                        #       Child Loop BB34_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB34_143 Depth=1
	movl	$0, -28(%rbp)
.LBB34_145:                             # %for.cond611
                                        #   Parent Loop BB34_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	$0, -20(%rbp)
.LBB34_147:                             # %for.cond617
                                        #   Parent Loop BB34_143 Depth=1
                                        #     Parent Loop BB34_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB34_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB34_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB34_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB34_151
.LBB34_150:                             # %if.then638
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB34_154
.LBB34_151:                             # %if.end639
                                        #   in Loop: Header=BB34_147 Depth=3
	jmp	.LBB34_152
.LBB34_152:                             # %for.inc640
                                        #   in Loop: Header=BB34_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_147
.LBB34_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB34_145 Depth=2
	jmp	.LBB34_154
.LBB34_154:                             # %for.end642
                                        #   in Loop: Header=BB34_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB34_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_159
.LBB34_156:                             # %if.end646
                                        #   in Loop: Header=BB34_145 Depth=2
	jmp	.LBB34_157
.LBB34_157:                             # %for.inc647
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_145
.LBB34_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_159
.LBB34_159:                             # %for.end649
                                        #   in Loop: Header=BB34_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB34_161
# %bb.160:                              # %if.then652
	jmp	.LBB34_164
.LBB34_161:                             # %if.end653
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_162
.LBB34_162:                             # %for.inc654
                                        #   in Loop: Header=BB34_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_143
.LBB34_163:                             # %for.end656.loopexit
	jmp	.LBB34_164
.LBB34_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$63027664, -76(%rbp)    # imm = 0x3C1B9D0
	jne	.LBB34_166
.LBB34_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_165
.Lfunc_end34:
	.size	test_wp_B_slice.31, .Lfunc_end34-test_wp_B_slice.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.32
.LCPI35_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.32
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.32,@function
estimate_weighting_factor_B_slice.32:   # @estimate_weighting_factor_B_slice.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$382432982, -84(%rbp)   # imm = 0x16CB76D6
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB35_4
.LBB35_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB35_4
.LBB35_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB35_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB35_7
.LBB35_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB35_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB35_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_10 Depth 2
                                        #       Child Loop BB35_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	$0, -8(%rbp)
.LBB35_10:                              # %for.cond14
                                        #   Parent Loop BB35_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB35_10 Depth=2
	movl	$0, -16(%rbp)
.LBB35_12:                              # %for.cond19
                                        #   Parent Loop BB35_8 Depth=1
                                        #     Parent Loop BB35_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB35_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB35_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB35_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_12
.LBB35_15:                              # %for.end
                                        #   in Loop: Header=BB35_10 Depth=2
	jmp	.LBB35_16
.LBB35_16:                              # %for.inc50
                                        #   in Loop: Header=BB35_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_10
.LBB35_17:                              # %for.end52
                                        #   in Loop: Header=BB35_8 Depth=1
	jmp	.LBB35_18
.LBB35_18:                              # %for.inc53
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_8
.LBB35_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB35_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_22 Depth 2
                                        #       Child Loop BB35_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB35_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB35_20 Depth=1
	movl	$0, -8(%rbp)
.LBB35_22:                              # %for.cond59
                                        #   Parent Loop BB35_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB35_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB35_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB35_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB35_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB35_29
.LBB35_25:                              # %cond.false70
                                        #   in Loop: Header=BB35_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB35_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB35_22 Depth=2
	movl	$127, %eax
	jmp	.LBB35_28
.LBB35_27:                              # %cond.false80
                                        #   in Loop: Header=BB35_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB35_28:                              # %cond.end88
                                        #   in Loop: Header=BB35_22 Depth=2
.LBB35_29:                              # %cond.end90
                                        #   in Loop: Header=BB35_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB35_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB35_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB35_35
.LBB35_31:                              # %cond.false99
                                        #   in Loop: Header=BB35_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB35_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB35_22 Depth=2
	movl	$127, %eax
	jmp	.LBB35_34
.LBB35_33:                              # %cond.false107
                                        #   in Loop: Header=BB35_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB35_34:                              # %cond.end113
                                        #   in Loop: Header=BB35_22 Depth=2
.LBB35_35:                              # %cond.end115
                                        #   in Loop: Header=BB35_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB35_36:                              # %for.cond117
                                        #   Parent Loop BB35_20 Depth=1
                                        #     Parent Loop BB35_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB35_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB35_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB35_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB35_49
.LBB35_39:                              # %if.else154
                                        #   in Loop: Header=BB35_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB35_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB35_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB35_45
.LBB35_41:                              # %cond.false160
                                        #   in Loop: Header=BB35_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB35_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB35_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB35_44
.LBB35_43:                              # %cond.false166
                                        #   in Loop: Header=BB35_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB35_44:                              # %cond.end170
                                        #   in Loop: Header=BB35_36 Depth=3
.LBB35_45:                              # %cond.end172
                                        #   in Loop: Header=BB35_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB35_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB35_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB35_48
.LBB35_47:                              # %if.then198
                                        #   in Loop: Header=BB35_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB35_48:                              # %if.end208
                                        #   in Loop: Header=BB35_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB35_49:                              # %if.end238
                                        #   in Loop: Header=BB35_36 Depth=3
	jmp	.LBB35_50
.LBB35_50:                              # %for.inc239
                                        #   in Loop: Header=BB35_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_36
.LBB35_51:                              # %for.end241
                                        #   in Loop: Header=BB35_22 Depth=2
	jmp	.LBB35_52
.LBB35_52:                              # %for.inc242
                                        #   in Loop: Header=BB35_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_22
.LBB35_53:                              # %for.end244
                                        #   in Loop: Header=BB35_20 Depth=1
	jmp	.LBB35_54
.LBB35_54:                              # %for.inc245
                                        #   in Loop: Header=BB35_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_20
.LBB35_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB35_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB35_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_59 Depth 2
                                        #       Child Loop BB35_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB35_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB35_57 Depth=1
	movl	$0, -8(%rbp)
.LBB35_59:                              # %for.cond254
                                        #   Parent Loop BB35_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB35_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB35_59 Depth=2
	movl	$0, -20(%rbp)
.LBB35_61:                              # %for.cond257
                                        #   Parent Loop BB35_57 Depth=1
                                        #     Parent Loop BB35_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB35_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB35_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB35_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB35_65
.LBB35_64:                              # %cond.false262
                                        #   in Loop: Header=BB35_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB35_65:                              # %cond.end263
                                        #   in Loop: Header=BB35_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB35_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_61
.LBB35_67:                              # %for.end295
                                        #   in Loop: Header=BB35_59 Depth=2
	jmp	.LBB35_68
.LBB35_68:                              # %for.inc296
                                        #   in Loop: Header=BB35_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_59
.LBB35_69:                              # %for.end298
                                        #   in Loop: Header=BB35_57 Depth=1
	jmp	.LBB35_70
.LBB35_70:                              # %for.inc299
                                        #   in Loop: Header=BB35_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_57
.LBB35_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB35_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB35_72 Depth=1
	movl	$0, -24(%rbp)
.LBB35_74:                              # %for.cond306
                                        #   Parent Loop BB35_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB35_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB35_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_74
.LBB35_77:                              # %for.end346
                                        #   in Loop: Header=BB35_72 Depth=1
	jmp	.LBB35_78
.LBB35_78:                              # %for.inc347
                                        #   in Loop: Header=BB35_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_72
.LBB35_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB35_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_82 Depth 2
                                        #       Child Loop BB35_84 Depth 3
                                        #       Child Loop BB35_88 Depth 3
                                        #         Child Loop BB35_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB35_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB35_80 Depth=1
	movl	$0, -8(%rbp)
.LBB35_82:                              # %for.cond353
                                        #   Parent Loop BB35_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_84 Depth 3
                                        #       Child Loop BB35_88 Depth 3
                                        #         Child Loop BB35_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB35_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB35_82 Depth=2
	movl	$0, -16(%rbp)
.LBB35_84:                              # %for.cond356
                                        #   Parent Loop BB35_80 Depth=1
                                        #     Parent Loop BB35_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB35_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB35_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_84
.LBB35_87:                              # %for.end380
                                        #   in Loop: Header=BB35_82 Depth=2
	movl	$0, -16(%rbp)
.LBB35_88:                              # %for.cond381
                                        #   Parent Loop BB35_80 Depth=1
                                        #     Parent Loop BB35_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB35_88 Depth=3
	movl	$0, -32(%rbp)
.LBB35_90:                              # %for.cond387
                                        #   Parent Loop BB35_80 Depth=1
                                        #     Parent Loop BB35_82 Depth=2
                                        #       Parent Loop BB35_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB35_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB35_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB35_90
.LBB35_93:                              # %for.end421
                                        #   in Loop: Header=BB35_88 Depth=3
	jmp	.LBB35_94
.LBB35_94:                              # %for.inc422
                                        #   in Loop: Header=BB35_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_88
.LBB35_95:                              # %for.end424
                                        #   in Loop: Header=BB35_82 Depth=2
	jmp	.LBB35_96
.LBB35_96:                              # %for.inc425
                                        #   in Loop: Header=BB35_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_82
.LBB35_97:                              # %for.end427
                                        #   in Loop: Header=BB35_80 Depth=1
	jmp	.LBB35_98
.LBB35_98:                              # %for.inc428
                                        #   in Loop: Header=BB35_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_80
.LBB35_99:                              # %for.end430
	jmp	.LBB35_189
.LBB35_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB35_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB35_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB35_101 Depth=1
	movl	$0, -8(%rbp)
.LBB35_103:                             # %for.cond436
                                        #   Parent Loop BB35_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB35_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB35_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB35_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_103
.LBB35_106:                             # %for.end447
                                        #   in Loop: Header=BB35_101 Depth=1
	jmp	.LBB35_107
.LBB35_107:                             # %for.inc448
                                        #   in Loop: Header=BB35_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_101
.LBB35_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB35_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_111 Depth 2
                                        #       Child Loop BB35_113 Depth 3
                                        #       Child Loop BB35_123 Depth 3
                                        #       Child Loop BB35_133 Depth 3
                                        #         Child Loop BB35_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB35_109 Depth=1
	movl	$0, -16(%rbp)
.LBB35_111:                             # %for.cond456
                                        #   Parent Loop BB35_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_113 Depth 3
                                        #       Child Loop BB35_123 Depth 3
                                        #       Child Loop BB35_133 Depth 3
                                        #         Child Loop BB35_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB35_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB35_113:                             # %for.cond476
                                        #   Parent Loop BB35_109 Depth=1
                                        #     Parent Loop BB35_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB35_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB35_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_113
.LBB35_116:                             # %for.end493
                                        #   in Loop: Header=BB35_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB35_117
	jp	.LBB35_117
	jmp	.LBB35_118
.LBB35_117:                             # %if.then500
                                        #   in Loop: Header=BB35_111 Depth=2
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_119
.LBB35_118:                             # %if.else511
                                        #   in Loop: Header=BB35_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB35_119:                             # %if.end513
                                        #   in Loop: Header=BB35_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB35_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB35_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB35_122
.LBB35_121:                             # %if.then519
                                        #   in Loop: Header=BB35_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB35_122:                             # %if.end521
                                        #   in Loop: Header=BB35_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB35_123:                             # %for.cond554
                                        #   Parent Loop BB35_109 Depth=1
                                        #     Parent Loop BB35_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB35_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB35_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB35_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB35_130
.LBB35_126:                             # %cond.false571
                                        #   in Loop: Header=BB35_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB35_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB35_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB35_129
.LBB35_128:                             # %cond.false583
                                        #   in Loop: Header=BB35_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB35_129:                             # %cond.end591
                                        #   in Loop: Header=BB35_123 Depth=3
.LBB35_130:                             # %cond.end593
                                        #   in Loop: Header=BB35_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB35_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_123
.LBB35_132:                             # %for.end600
                                        #   in Loop: Header=BB35_111 Depth=2
	movl	$0, -4(%rbp)
.LBB35_133:                             # %for.cond601
                                        #   Parent Loop BB35_109 Depth=1
                                        #     Parent Loop BB35_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB35_133 Depth=3
	movl	$0, -8(%rbp)
.LBB35_135:                             # %for.cond608
                                        #   Parent Loop BB35_109 Depth=1
                                        #     Parent Loop BB35_111 Depth=2
                                        #       Parent Loop BB35_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB35_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB35_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB35_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB35_142
.LBB35_138:                             # %cond.false630
                                        #   in Loop: Header=BB35_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB35_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB35_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB35_141
.LBB35_140:                             # %cond.false648
                                        #   in Loop: Header=BB35_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB35_141:                             # %cond.end661
                                        #   in Loop: Header=BB35_135 Depth=4
.LBB35_142:                             # %cond.end663
                                        #   in Loop: Header=BB35_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB35_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_135
.LBB35_144:                             # %for.end675
                                        #   in Loop: Header=BB35_133 Depth=3
	jmp	.LBB35_145
.LBB35_145:                             # %for.inc676
                                        #   in Loop: Header=BB35_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_133
.LBB35_146:                             # %for.end678
                                        #   in Loop: Header=BB35_111 Depth=2
	jmp	.LBB35_147
.LBB35_147:                             # %for.inc679
                                        #   in Loop: Header=BB35_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_111
.LBB35_148:                             # %for.end681
                                        #   in Loop: Header=BB35_109 Depth=1
	jmp	.LBB35_149
.LBB35_149:                             # %for.inc682
                                        #   in Loop: Header=BB35_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_109
.LBB35_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB35_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB35_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_154 Depth 2
                                        #       Child Loop BB35_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB35_152 Depth=1
	movl	$0, -24(%rbp)
.LBB35_154:                             # %for.cond694
                                        #   Parent Loop BB35_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB35_154 Depth=2
	movl	$0, -20(%rbp)
.LBB35_156:                             # %for.cond700
                                        #   Parent Loop BB35_152 Depth=1
                                        #     Parent Loop BB35_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB35_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB35_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_156
.LBB35_159:                             # %for.end730
                                        #   in Loop: Header=BB35_154 Depth=2
	jmp	.LBB35_160
.LBB35_160:                             # %for.inc731
                                        #   in Loop: Header=BB35_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_154
.LBB35_161:                             # %for.end733
                                        #   in Loop: Header=BB35_152 Depth=1
	jmp	.LBB35_162
.LBB35_162:                             # %for.inc734
                                        #   in Loop: Header=BB35_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_152
.LBB35_163:                             # %for.end736
	jmp	.LBB35_173
.LBB35_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB35_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB35_165 Depth=1
	movl	$0, -24(%rbp)
.LBB35_167:                             # %for.cond743
                                        #   Parent Loop BB35_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB35_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB35_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_167
.LBB35_170:                             # %for.end784
                                        #   in Loop: Header=BB35_165 Depth=1
	jmp	.LBB35_171
.LBB35_171:                             # %for.inc785
                                        #   in Loop: Header=BB35_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_165
.LBB35_172:                             # %for.end787
	jmp	.LBB35_173
.LBB35_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB35_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_176 Depth 2
                                        #       Child Loop BB35_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB35_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB35_174 Depth=1
	movl	$0, -8(%rbp)
.LBB35_176:                             # %for.cond793
                                        #   Parent Loop BB35_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB35_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB35_176 Depth=2
	movl	$0, -20(%rbp)
.LBB35_178:                             # %for.cond797
                                        #   Parent Loop BB35_174 Depth=1
                                        #     Parent Loop BB35_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB35_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB35_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB35_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB35_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB35_182
.LBB35_181:                             # %cond.false804
                                        #   in Loop: Header=BB35_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB35_182:                             # %cond.end805
                                        #   in Loop: Header=BB35_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB35_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_178
.LBB35_184:                             # %for.end833
                                        #   in Loop: Header=BB35_176 Depth=2
	jmp	.LBB35_185
.LBB35_185:                             # %for.inc834
                                        #   in Loop: Header=BB35_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_176
.LBB35_186:                             # %for.end836
                                        #   in Loop: Header=BB35_174 Depth=1
	jmp	.LBB35_187
.LBB35_187:                             # %for.inc837
                                        #   in Loop: Header=BB35_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_174
.LBB35_188:                             # %for.end839
	jmp	.LBB35_189
.LBB35_189:                             # %if.end840
	cmpl	$382432982, -84(%rbp)   # imm = 0x16CB76D6
	jne	.LBB35_191
.LBB35_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_190
.Lfunc_end35:
	.size	estimate_weighting_factor_B_slice.32, .Lfunc_end35-estimate_weighting_factor_B_slice.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.33
.LCPI36_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.33
	.p2align	4, 0x90
	.type	test_wp_B_slice.33,@function
test_wp_B_slice.33:                     # @test_wp_B_slice.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1396695851, -80(%rbp)  # imm = 0x533FE32B
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB36_4
.LBB36_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB36_4
.LBB36_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB36_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_7 Depth 2
                                        #       Child Loop BB36_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB36_5 Depth=1
	movl	$0, -24(%rbp)
.LBB36_7:                               # %for.cond9
                                        #   Parent Loop BB36_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB36_7 Depth=2
	movl	$0, -32(%rbp)
.LBB36_9:                               # %for.cond14
                                        #   Parent Loop BB36_5 Depth=1
                                        #     Parent Loop BB36_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB36_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB36_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB36_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_9
.LBB36_12:                              # %for.end
                                        #   in Loop: Header=BB36_7 Depth=2
	jmp	.LBB36_13
.LBB36_13:                              # %for.inc41
                                        #   in Loop: Header=BB36_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_7
.LBB36_14:                              # %for.end43
                                        #   in Loop: Header=BB36_5 Depth=1
	jmp	.LBB36_15
.LBB36_15:                              # %for.inc44
                                        #   in Loop: Header=BB36_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_5
.LBB36_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB36_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_19 Depth 2
                                        #       Child Loop BB36_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB36_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	$0, -24(%rbp)
.LBB36_19:                              # %for.cond50
                                        #   Parent Loop BB36_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB36_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB36_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB36_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB36_26
.LBB36_22:                              # %cond.false61
                                        #   in Loop: Header=BB36_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB36_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	$127, %eax
	jmp	.LBB36_25
.LBB36_24:                              # %cond.false71
                                        #   in Loop: Header=BB36_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB36_25:                              # %cond.end79
                                        #   in Loop: Header=BB36_19 Depth=2
.LBB36_26:                              # %cond.end81
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB36_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB36_32
.LBB36_28:                              # %cond.false90
                                        #   in Loop: Header=BB36_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB36_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	$127, %eax
	jmp	.LBB36_31
.LBB36_30:                              # %cond.false98
                                        #   in Loop: Header=BB36_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB36_31:                              # %cond.end104
                                        #   in Loop: Header=BB36_19 Depth=2
.LBB36_32:                              # %cond.end106
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB36_33:                              # %for.cond108
                                        #   Parent Loop BB36_17 Depth=1
                                        #     Parent Loop BB36_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB36_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB36_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB36_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB36_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB36_46
.LBB36_36:                              # %if.else
                                        #   in Loop: Header=BB36_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB36_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB36_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB36_42
.LBB36_38:                              # %cond.false145
                                        #   in Loop: Header=BB36_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB36_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB36_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB36_41
.LBB36_40:                              # %cond.false151
                                        #   in Loop: Header=BB36_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB36_41:                              # %cond.end155
                                        #   in Loop: Header=BB36_33 Depth=3
.LBB36_42:                              # %cond.end157
                                        #   in Loop: Header=BB36_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB36_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB36_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB36_45
.LBB36_44:                              # %if.then183
                                        #   in Loop: Header=BB36_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB36_45:                              # %if.end
                                        #   in Loop: Header=BB36_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB36_46:                              # %if.end220
                                        #   in Loop: Header=BB36_33 Depth=3
	jmp	.LBB36_47
.LBB36_47:                              # %for.inc221
                                        #   in Loop: Header=BB36_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_33
.LBB36_48:                              # %for.end223
                                        #   in Loop: Header=BB36_19 Depth=2
	jmp	.LBB36_49
.LBB36_49:                              # %for.inc224
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_19
.LBB36_50:                              # %for.end226
                                        #   in Loop: Header=BB36_17 Depth=1
	jmp	.LBB36_51
.LBB36_51:                              # %for.inc227
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_17
.LBB36_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB36_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB36_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_56 Depth 2
                                        #       Child Loop BB36_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB36_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB36_54 Depth=1
	movl	$0, -24(%rbp)
.LBB36_56:                              # %for.cond235
                                        #   Parent Loop BB36_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB36_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB36_56 Depth=2
	movl	$0, -20(%rbp)
.LBB36_58:                              # %for.cond238
                                        #   Parent Loop BB36_54 Depth=1
                                        #     Parent Loop BB36_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB36_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB36_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB36_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB36_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB36_62
.LBB36_61:                              # %cond.false243
                                        #   in Loop: Header=BB36_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB36_62:                              # %cond.end244
                                        #   in Loop: Header=BB36_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB36_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_58
.LBB36_64:                              # %for.end276
                                        #   in Loop: Header=BB36_56 Depth=2
	jmp	.LBB36_65
.LBB36_65:                              # %for.inc277
                                        #   in Loop: Header=BB36_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_56
.LBB36_66:                              # %for.end279
                                        #   in Loop: Header=BB36_54 Depth=1
	jmp	.LBB36_67
.LBB36_67:                              # %for.inc280
                                        #   in Loop: Header=BB36_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_54
.LBB36_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB36_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB36_69 Depth=1
	movl	$0, -28(%rbp)
.LBB36_71:                              # %for.cond287
                                        #   Parent Loop BB36_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB36_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB36_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_71
.LBB36_74:                              # %for.end327
                                        #   in Loop: Header=BB36_69 Depth=1
	jmp	.LBB36_75
.LBB36_75:                              # %for.inc328
                                        #   in Loop: Header=BB36_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_69
.LBB36_76:                              # %for.end330
	jmp	.LBB36_142
.LBB36_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB36_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB36_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB36_78 Depth=1
	movl	$0, -24(%rbp)
.LBB36_80:                              # %for.cond335
                                        #   Parent Loop BB36_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB36_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB36_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB36_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_80
.LBB36_83:                              # %for.end345
                                        #   in Loop: Header=BB36_78 Depth=1
	jmp	.LBB36_84
.LBB36_84:                              # %for.inc346
                                        #   in Loop: Header=BB36_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_78
.LBB36_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB36_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_88 Depth 2
                                        #       Child Loop BB36_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB36_86 Depth=1
	movl	$0, -32(%rbp)
.LBB36_88:                              # %for.cond354
                                        #   Parent Loop BB36_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB36_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB36_90:                              # %for.cond372
                                        #   Parent Loop BB36_86 Depth=1
                                        #     Parent Loop BB36_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB36_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB36_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_90
.LBB36_93:                              # %for.end389
                                        #   in Loop: Header=BB36_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB36_94
	jp	.LBB36_94
	jmp	.LBB36_95
.LBB36_94:                              # %if.then396
                                        #   in Loop: Header=BB36_88 Depth=2
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB36_96
.LBB36_95:                              # %if.else406
                                        #   in Loop: Header=BB36_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB36_96:                              # %if.end407
                                        #   in Loop: Header=BB36_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB36_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB36_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB36_99
.LBB36_98:                              # %if.then413
                                        #   in Loop: Header=BB36_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB36_99:                              # %if.end414
                                        #   in Loop: Header=BB36_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB36_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_88
.LBB36_101:                             # %for.end447
                                        #   in Loop: Header=BB36_86 Depth=1
	jmp	.LBB36_102
.LBB36_102:                             # %for.inc448
                                        #   in Loop: Header=BB36_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_86
.LBB36_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB36_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB36_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_107 Depth 2
                                        #       Child Loop BB36_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB36_105 Depth=1
	movl	$0, -28(%rbp)
.LBB36_107:                             # %for.cond459
                                        #   Parent Loop BB36_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB36_107 Depth=2
	movl	$0, -20(%rbp)
.LBB36_109:                             # %for.cond465
                                        #   Parent Loop BB36_105 Depth=1
                                        #     Parent Loop BB36_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB36_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB36_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB36_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_109
.LBB36_112:                             # %for.end495
                                        #   in Loop: Header=BB36_107 Depth=2
	jmp	.LBB36_113
.LBB36_113:                             # %for.inc496
                                        #   in Loop: Header=BB36_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_107
.LBB36_114:                             # %for.end498
                                        #   in Loop: Header=BB36_105 Depth=1
	jmp	.LBB36_115
.LBB36_115:                             # %for.inc499
                                        #   in Loop: Header=BB36_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_105
.LBB36_116:                             # %for.end501
	jmp	.LBB36_126
.LBB36_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB36_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB36_118 Depth=1
	movl	$0, -28(%rbp)
.LBB36_120:                             # %for.cond508
                                        #   Parent Loop BB36_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB36_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB36_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_120
.LBB36_123:                             # %for.end549
                                        #   in Loop: Header=BB36_118 Depth=1
	jmp	.LBB36_124
.LBB36_124:                             # %for.inc550
                                        #   in Loop: Header=BB36_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_118
.LBB36_125:                             # %for.end552
	jmp	.LBB36_126
.LBB36_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB36_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_129 Depth 2
                                        #       Child Loop BB36_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB36_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB36_127 Depth=1
	movl	$0, -24(%rbp)
.LBB36_129:                             # %for.cond558
                                        #   Parent Loop BB36_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB36_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB36_129 Depth=2
	movl	$0, -20(%rbp)
.LBB36_131:                             # %for.cond562
                                        #   Parent Loop BB36_127 Depth=1
                                        #     Parent Loop BB36_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB36_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB36_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB36_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB36_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB36_135
.LBB36_134:                             # %cond.false569
                                        #   in Loop: Header=BB36_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB36_135:                             # %cond.end570
                                        #   in Loop: Header=BB36_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB36_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_131
.LBB36_137:                             # %for.end598
                                        #   in Loop: Header=BB36_129 Depth=2
	jmp	.LBB36_138
.LBB36_138:                             # %for.inc599
                                        #   in Loop: Header=BB36_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_129
.LBB36_139:                             # %for.end601
                                        #   in Loop: Header=BB36_127 Depth=1
	jmp	.LBB36_140
.LBB36_140:                             # %for.inc602
                                        #   in Loop: Header=BB36_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_127
.LBB36_141:                             # %for.end604
	jmp	.LBB36_142
.LBB36_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB36_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_145 Depth 2
                                        #       Child Loop BB36_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB36_143 Depth=1
	movl	$0, -28(%rbp)
.LBB36_145:                             # %for.cond611
                                        #   Parent Loop BB36_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB36_145 Depth=2
	movl	$0, -20(%rbp)
.LBB36_147:                             # %for.cond617
                                        #   Parent Loop BB36_143 Depth=1
                                        #     Parent Loop BB36_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB36_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB36_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB36_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB36_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB36_151
.LBB36_150:                             # %if.then638
                                        #   in Loop: Header=BB36_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB36_154
.LBB36_151:                             # %if.end639
                                        #   in Loop: Header=BB36_147 Depth=3
	jmp	.LBB36_152
.LBB36_152:                             # %for.inc640
                                        #   in Loop: Header=BB36_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_147
.LBB36_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB36_145 Depth=2
	jmp	.LBB36_154
.LBB36_154:                             # %for.end642
                                        #   in Loop: Header=BB36_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB36_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB36_143 Depth=1
	jmp	.LBB36_159
.LBB36_156:                             # %if.end646
                                        #   in Loop: Header=BB36_145 Depth=2
	jmp	.LBB36_157
.LBB36_157:                             # %for.inc647
                                        #   in Loop: Header=BB36_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_145
.LBB36_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB36_143 Depth=1
	jmp	.LBB36_159
.LBB36_159:                             # %for.end649
                                        #   in Loop: Header=BB36_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB36_161
# %bb.160:                              # %if.then652
	jmp	.LBB36_164
.LBB36_161:                             # %if.end653
                                        #   in Loop: Header=BB36_143 Depth=1
	jmp	.LBB36_162
.LBB36_162:                             # %for.inc654
                                        #   in Loop: Header=BB36_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_143
.LBB36_163:                             # %for.end656.loopexit
	jmp	.LBB36_164
.LBB36_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1396695851, -80(%rbp)  # imm = 0x533FE32B
	jne	.LBB36_166
.LBB36_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_165
.Lfunc_end36:
	.size	test_wp_B_slice.33, .Lfunc_end36-test_wp_B_slice.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.34
.LCPI37_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.34
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.34,@function
estimate_weighting_factor_P_slice.34:   # @estimate_weighting_factor_P_slice.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1078395368, -64(%rbp)  # imm = 0x404701E8
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB37_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB37_4
.LBB37_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB37_4
.LBB37_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB37_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_7 Depth 2
                                        #       Child Loop BB37_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB37_5 Depth=1
	movl	$0, -16(%rbp)
.LBB37_7:                               # %for.cond12
                                        #   Parent Loop BB37_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB37_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	$0, -4(%rbp)
.LBB37_9:                               # %for.cond17
                                        #   Parent Loop BB37_5 Depth=1
                                        #     Parent Loop BB37_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB37_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB37_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB37_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_9
.LBB37_12:                              # %for.end
                                        #   in Loop: Header=BB37_7 Depth=2
	jmp	.LBB37_13
.LBB37_13:                              # %for.inc48
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_7
.LBB37_14:                              # %for.end50
                                        #   in Loop: Header=BB37_5 Depth=1
	jmp	.LBB37_15
.LBB37_15:                              # %for.inc51
                                        #   in Loop: Header=BB37_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_5
.LBB37_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB37_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB37_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB37_17 Depth=1
	movl	$0, -16(%rbp)
.LBB37_19:                              # %for.cond57
                                        #   Parent Loop BB37_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB37_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB37_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_19
.LBB37_22:                              # %for.end67
                                        #   in Loop: Header=BB37_17 Depth=1
	jmp	.LBB37_23
.LBB37_23:                              # %for.inc68
                                        #   in Loop: Header=BB37_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_17
.LBB37_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB37_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_27 Depth 2
                                        #       Child Loop BB37_29 Depth 3
                                        #       Child Loop BB37_48 Depth 3
                                        #       Child Loop BB37_58 Depth 3
                                        #         Child Loop BB37_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB37_25 Depth=1
	movl	$0, -4(%rbp)
.LBB37_27:                              # %for.cond76
                                        #   Parent Loop BB37_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_29 Depth 3
                                        #       Child Loop BB37_48 Depth 3
                                        #       Child Loop BB37_58 Depth 3
                                        #         Child Loop BB37_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB37_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB37_29:                              # %for.cond92
                                        #   Parent Loop BB37_25 Depth=1
                                        #     Parent Loop BB37_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB37_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB37_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_29
.LBB37_32:                              # %for.end106
                                        #   in Loop: Header=BB37_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB37_40
	jp	.LBB37_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB37_34
	jp	.LBB37_34
	jmp	.LBB37_35
.LBB37_34:                              # %if.then114
                                        #   in Loop: Header=BB37_27 Depth=2
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB37_36
.LBB37_35:                              # %if.else
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB37_36:                              # %if.end
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB37_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB37_39
.LBB37_38:                              # %if.then147
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB37_39:                              # %if.end154
                                        #   in Loop: Header=BB37_27 Depth=2
	jmp	.LBB37_47
.LBB37_40:                              # %if.else155
                                        #   in Loop: Header=BB37_27 Depth=2
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB37_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB37_46
.LBB37_42:                              # %cond.false179
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB37_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	$127, %eax
	jmp	.LBB37_45
.LBB37_44:                              # %cond.false188
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB37_45:                              # %cond.end194
                                        #   in Loop: Header=BB37_27 Depth=2
.LBB37_46:                              # %cond.end196
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB37_47:                              # %if.end209
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB37_48:                              # %for.cond222
                                        #   Parent Loop BB37_25 Depth=1
                                        #     Parent Loop BB37_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB37_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB37_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB37_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB37_55
.LBB37_51:                              # %cond.false248
                                        #   in Loop: Header=BB37_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB37_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB37_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB37_54
.LBB37_53:                              # %cond.false270
                                        #   in Loop: Header=BB37_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB37_54:                              # %cond.end288
                                        #   in Loop: Header=BB37_48 Depth=3
.LBB37_55:                              # %cond.end290
                                        #   in Loop: Header=BB37_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB37_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_48
.LBB37_57:                              # %for.end297
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	$0, -12(%rbp)
.LBB37_58:                              # %for.cond298
                                        #   Parent Loop BB37_25 Depth=1
                                        #     Parent Loop BB37_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB37_58 Depth=3
	movl	$0, -16(%rbp)
.LBB37_60:                              # %for.cond305
                                        #   Parent Loop BB37_25 Depth=1
                                        #     Parent Loop BB37_27 Depth=2
                                        #       Parent Loop BB37_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB37_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB37_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB37_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB37_67
.LBB37_63:                              # %cond.false336
                                        #   in Loop: Header=BB37_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB37_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB37_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB37_66
.LBB37_65:                              # %cond.false364
                                        #   in Loop: Header=BB37_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB37_66:                              # %cond.end387
                                        #   in Loop: Header=BB37_60 Depth=4
.LBB37_67:                              # %cond.end389
                                        #   in Loop: Header=BB37_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB37_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_60
.LBB37_69:                              # %for.end400
                                        #   in Loop: Header=BB37_58 Depth=3
	jmp	.LBB37_70
.LBB37_70:                              # %for.inc401
                                        #   in Loop: Header=BB37_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_58
.LBB37_71:                              # %for.end403
                                        #   in Loop: Header=BB37_27 Depth=2
	jmp	.LBB37_72
.LBB37_72:                              # %for.inc404
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_27
.LBB37_73:                              # %for.end406
                                        #   in Loop: Header=BB37_25 Depth=1
	jmp	.LBB37_74
.LBB37_74:                              # %for.inc407
                                        #   in Loop: Header=BB37_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_25
.LBB37_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB37_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_78 Depth 2
                                        #       Child Loop BB37_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB37_76 Depth=1
	movl	$0, -24(%rbp)
.LBB37_78:                              # %for.cond415
                                        #   Parent Loop BB37_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB37_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB37_78 Depth=2
	movl	$0, -20(%rbp)
.LBB37_80:                              # %for.cond421
                                        #   Parent Loop BB37_76 Depth=1
                                        #     Parent Loop BB37_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB37_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB37_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB37_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_80
.LBB37_83:                              # %for.end451
                                        #   in Loop: Header=BB37_78 Depth=2
	jmp	.LBB37_84
.LBB37_84:                              # %for.inc452
                                        #   in Loop: Header=BB37_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB37_78
.LBB37_85:                              # %for.end454
                                        #   in Loop: Header=BB37_76 Depth=1
	jmp	.LBB37_86
.LBB37_86:                              # %for.inc455
                                        #   in Loop: Header=BB37_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_76
.LBB37_87:                              # %for.end457
	cmpl	$1078395368, -64(%rbp)  # imm = 0x404701E8
	jne	.LBB37_89
.LBB37_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_88
.Lfunc_end37:
	.size	estimate_weighting_factor_P_slice.34, .Lfunc_end37-estimate_weighting_factor_P_slice.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.35
.LCPI38_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.35
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.35,@function
estimate_weighting_factor_P_slice.35:   # @estimate_weighting_factor_P_slice.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$171646797, -60(%rbp)   # imm = 0xA3B1F4D
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB38_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB38_4
.LBB38_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB38_4
.LBB38_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB38_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_7 Depth 2
                                        #       Child Loop BB38_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB38_5 Depth=1
	movl	$0, -16(%rbp)
.LBB38_7:                               # %for.cond12
                                        #   Parent Loop BB38_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB38_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB38_7 Depth=2
	movl	$0, -4(%rbp)
.LBB38_9:                               # %for.cond17
                                        #   Parent Loop BB38_5 Depth=1
                                        #     Parent Loop BB38_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB38_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB38_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB38_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_9
.LBB38_12:                              # %for.end
                                        #   in Loop: Header=BB38_7 Depth=2
	jmp	.LBB38_13
.LBB38_13:                              # %for.inc48
                                        #   in Loop: Header=BB38_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_7
.LBB38_14:                              # %for.end50
                                        #   in Loop: Header=BB38_5 Depth=1
	jmp	.LBB38_15
.LBB38_15:                              # %for.inc51
                                        #   in Loop: Header=BB38_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_5
.LBB38_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB38_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB38_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB38_17 Depth=1
	movl	$0, -16(%rbp)
.LBB38_19:                              # %for.cond57
                                        #   Parent Loop BB38_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB38_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB38_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB38_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_19
.LBB38_22:                              # %for.end67
                                        #   in Loop: Header=BB38_17 Depth=1
	jmp	.LBB38_23
.LBB38_23:                              # %for.inc68
                                        #   in Loop: Header=BB38_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_17
.LBB38_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB38_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_27 Depth 2
                                        #       Child Loop BB38_29 Depth 3
                                        #       Child Loop BB38_48 Depth 3
                                        #       Child Loop BB38_58 Depth 3
                                        #         Child Loop BB38_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB38_25 Depth=1
	movl	$0, -4(%rbp)
.LBB38_27:                              # %for.cond76
                                        #   Parent Loop BB38_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_29 Depth 3
                                        #       Child Loop BB38_48 Depth 3
                                        #       Child Loop BB38_58 Depth 3
                                        #         Child Loop BB38_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB38_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB38_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB38_29:                              # %for.cond92
                                        #   Parent Loop BB38_25 Depth=1
                                        #     Parent Loop BB38_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB38_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB38_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_29
.LBB38_32:                              # %for.end106
                                        #   in Loop: Header=BB38_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB38_40
	jp	.LBB38_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB38_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB38_34
	jp	.LBB38_34
	jmp	.LBB38_35
.LBB38_34:                              # %if.then114
                                        #   in Loop: Header=BB38_27 Depth=2
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB38_36
.LBB38_35:                              # %if.else
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB38_36:                              # %if.end
                                        #   in Loop: Header=BB38_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB38_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB38_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB38_39
.LBB38_38:                              # %if.then147
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB38_39:                              # %if.end154
                                        #   in Loop: Header=BB38_27 Depth=2
	jmp	.LBB38_47
.LBB38_40:                              # %if.else155
                                        #   in Loop: Header=BB38_27 Depth=2
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB38_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB38_46
.LBB38_42:                              # %cond.false179
                                        #   in Loop: Header=BB38_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB38_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	$127, %eax
	jmp	.LBB38_45
.LBB38_44:                              # %cond.false188
                                        #   in Loop: Header=BB38_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB38_45:                              # %cond.end194
                                        #   in Loop: Header=BB38_27 Depth=2
.LBB38_46:                              # %cond.end196
                                        #   in Loop: Header=BB38_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB38_47:                              # %if.end209
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB38_48:                              # %for.cond222
                                        #   Parent Loop BB38_25 Depth=1
                                        #     Parent Loop BB38_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB38_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB38_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB38_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB38_55
.LBB38_51:                              # %cond.false248
                                        #   in Loop: Header=BB38_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB38_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB38_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_54
.LBB38_53:                              # %cond.false270
                                        #   in Loop: Header=BB38_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB38_54:                              # %cond.end288
                                        #   in Loop: Header=BB38_48 Depth=3
.LBB38_55:                              # %cond.end290
                                        #   in Loop: Header=BB38_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB38_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_48
.LBB38_57:                              # %for.end297
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	$0, -12(%rbp)
.LBB38_58:                              # %for.cond298
                                        #   Parent Loop BB38_25 Depth=1
                                        #     Parent Loop BB38_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB38_58 Depth=3
	movl	$0, -16(%rbp)
.LBB38_60:                              # %for.cond305
                                        #   Parent Loop BB38_25 Depth=1
                                        #     Parent Loop BB38_27 Depth=2
                                        #       Parent Loop BB38_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB38_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB38_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB38_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB38_67
.LBB38_63:                              # %cond.false336
                                        #   in Loop: Header=BB38_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB38_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB38_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_66
.LBB38_65:                              # %cond.false364
                                        #   in Loop: Header=BB38_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB38_66:                              # %cond.end387
                                        #   in Loop: Header=BB38_60 Depth=4
.LBB38_67:                              # %cond.end389
                                        #   in Loop: Header=BB38_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB38_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_60
.LBB38_69:                              # %for.end400
                                        #   in Loop: Header=BB38_58 Depth=3
	jmp	.LBB38_70
.LBB38_70:                              # %for.inc401
                                        #   in Loop: Header=BB38_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_58
.LBB38_71:                              # %for.end403
                                        #   in Loop: Header=BB38_27 Depth=2
	jmp	.LBB38_72
.LBB38_72:                              # %for.inc404
                                        #   in Loop: Header=BB38_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_27
.LBB38_73:                              # %for.end406
                                        #   in Loop: Header=BB38_25 Depth=1
	jmp	.LBB38_74
.LBB38_74:                              # %for.inc407
                                        #   in Loop: Header=BB38_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_25
.LBB38_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB38_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_78 Depth 2
                                        #       Child Loop BB38_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB38_76 Depth=1
	movl	$0, -20(%rbp)
.LBB38_78:                              # %for.cond415
                                        #   Parent Loop BB38_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB38_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB38_78 Depth=2
	movl	$0, -24(%rbp)
.LBB38_80:                              # %for.cond421
                                        #   Parent Loop BB38_76 Depth=1
                                        #     Parent Loop BB38_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB38_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB38_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB38_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_80
.LBB38_83:                              # %for.end451
                                        #   in Loop: Header=BB38_78 Depth=2
	jmp	.LBB38_84
.LBB38_84:                              # %for.inc452
                                        #   in Loop: Header=BB38_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_78
.LBB38_85:                              # %for.end454
                                        #   in Loop: Header=BB38_76 Depth=1
	jmp	.LBB38_86
.LBB38_86:                              # %for.inc455
                                        #   in Loop: Header=BB38_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_76
.LBB38_87:                              # %for.end457
	cmpl	$171646797, -60(%rbp)   # imm = 0xA3B1F4D
	jne	.LBB38_89
.LBB38_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_88
.Lfunc_end38:
	.size	estimate_weighting_factor_P_slice.35, .Lfunc_end38-estimate_weighting_factor_P_slice.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.36
.LCPI39_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.36
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.36,@function
estimate_weighting_factor_P_slice.36:   # @estimate_weighting_factor_P_slice.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$26472133, -60(%rbp)    # imm = 0x193EEC5
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB39_4
.LBB39_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB39_4
.LBB39_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB39_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_7 Depth 2
                                        #       Child Loop BB39_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB39_5 Depth=1
	movl	$0, -16(%rbp)
.LBB39_7:                               # %for.cond12
                                        #   Parent Loop BB39_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB39_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB39_7 Depth=2
	movl	$0, -4(%rbp)
.LBB39_9:                               # %for.cond17
                                        #   Parent Loop BB39_5 Depth=1
                                        #     Parent Loop BB39_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB39_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB39_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB39_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_9
.LBB39_12:                              # %for.end
                                        #   in Loop: Header=BB39_7 Depth=2
	jmp	.LBB39_13
.LBB39_13:                              # %for.inc48
                                        #   in Loop: Header=BB39_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_7
.LBB39_14:                              # %for.end50
                                        #   in Loop: Header=BB39_5 Depth=1
	jmp	.LBB39_15
.LBB39_15:                              # %for.inc51
                                        #   in Loop: Header=BB39_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_5
.LBB39_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB39_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB39_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	$0, -16(%rbp)
.LBB39_19:                              # %for.cond57
                                        #   Parent Loop BB39_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB39_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB39_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_19
.LBB39_22:                              # %for.end67
                                        #   in Loop: Header=BB39_17 Depth=1
	jmp	.LBB39_23
.LBB39_23:                              # %for.inc68
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_17
.LBB39_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB39_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_27 Depth 2
                                        #       Child Loop BB39_29 Depth 3
                                        #       Child Loop BB39_48 Depth 3
                                        #       Child Loop BB39_58 Depth 3
                                        #         Child Loop BB39_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	$0, -4(%rbp)
.LBB39_27:                              # %for.cond76
                                        #   Parent Loop BB39_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_29 Depth 3
                                        #       Child Loop BB39_48 Depth 3
                                        #       Child Loop BB39_58 Depth 3
                                        #         Child Loop BB39_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB39_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB39_29:                              # %for.cond92
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB39_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB39_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_29
.LBB39_32:                              # %for.end106
                                        #   in Loop: Header=BB39_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB39_40
	jp	.LBB39_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB39_34
	jp	.LBB39_34
	jmp	.LBB39_35
.LBB39_34:                              # %if.then114
                                        #   in Loop: Header=BB39_27 Depth=2
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB39_36
.LBB39_35:                              # %if.else
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB39_36:                              # %if.end
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB39_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB39_39
.LBB39_38:                              # %if.then147
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB39_39:                              # %if.end154
                                        #   in Loop: Header=BB39_27 Depth=2
	jmp	.LBB39_47
.LBB39_40:                              # %if.else155
                                        #   in Loop: Header=BB39_27 Depth=2
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB39_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB39_46
.LBB39_42:                              # %cond.false179
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB39_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	$127, %eax
	jmp	.LBB39_45
.LBB39_44:                              # %cond.false188
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB39_45:                              # %cond.end194
                                        #   in Loop: Header=BB39_27 Depth=2
.LBB39_46:                              # %cond.end196
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB39_47:                              # %if.end209
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB39_48:                              # %for.cond222
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB39_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB39_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB39_55
.LBB39_51:                              # %cond.false248
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB39_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB39_54
.LBB39_53:                              # %cond.false270
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB39_54:                              # %cond.end288
                                        #   in Loop: Header=BB39_48 Depth=3
.LBB39_55:                              # %cond.end290
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB39_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_48
.LBB39_57:                              # %for.end297
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	$0, -12(%rbp)
.LBB39_58:                              # %for.cond298
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB39_58 Depth=3
	movl	$0, -16(%rbp)
.LBB39_60:                              # %for.cond305
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_27 Depth=2
                                        #       Parent Loop BB39_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB39_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB39_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB39_67
.LBB39_63:                              # %cond.false336
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB39_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB39_66
.LBB39_65:                              # %cond.false364
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB39_66:                              # %cond.end387
                                        #   in Loop: Header=BB39_60 Depth=4
.LBB39_67:                              # %cond.end389
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB39_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_60
.LBB39_69:                              # %for.end400
                                        #   in Loop: Header=BB39_58 Depth=3
	jmp	.LBB39_70
.LBB39_70:                              # %for.inc401
                                        #   in Loop: Header=BB39_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_58
.LBB39_71:                              # %for.end403
                                        #   in Loop: Header=BB39_27 Depth=2
	jmp	.LBB39_72
.LBB39_72:                              # %for.inc404
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_27
.LBB39_73:                              # %for.end406
                                        #   in Loop: Header=BB39_25 Depth=1
	jmp	.LBB39_74
.LBB39_74:                              # %for.inc407
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_25
.LBB39_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB39_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_78 Depth 2
                                        #       Child Loop BB39_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB39_76 Depth=1
	movl	$0, -24(%rbp)
.LBB39_78:                              # %for.cond415
                                        #   Parent Loop BB39_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB39_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB39_78 Depth=2
	movl	$0, -20(%rbp)
.LBB39_80:                              # %for.cond421
                                        #   Parent Loop BB39_76 Depth=1
                                        #     Parent Loop BB39_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB39_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB39_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB39_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_80
.LBB39_83:                              # %for.end451
                                        #   in Loop: Header=BB39_78 Depth=2
	jmp	.LBB39_84
.LBB39_84:                              # %for.inc452
                                        #   in Loop: Header=BB39_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB39_78
.LBB39_85:                              # %for.end454
                                        #   in Loop: Header=BB39_76 Depth=1
	jmp	.LBB39_86
.LBB39_86:                              # %for.inc455
                                        #   in Loop: Header=BB39_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_76
.LBB39_87:                              # %for.end457
	cmpl	$26472133, -60(%rbp)    # imm = 0x193EEC5
	jne	.LBB39_89
.LBB39_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_88
.Lfunc_end39:
	.size	estimate_weighting_factor_P_slice.36, .Lfunc_end39-estimate_weighting_factor_P_slice.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.37
.LCPI40_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.37
	.p2align	4, 0x90
	.type	test_wp_P_slice.37,@function
test_wp_P_slice.37:                     # @test_wp_P_slice.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1313108261, -64(%rbp)  # imm = 0x4E447125
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB40_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB40_4
.LBB40_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB40_4
.LBB40_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB40_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_7 Depth 2
                                        #       Child Loop BB40_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB40_5 Depth=1
	movl	$0, -24(%rbp)
.LBB40_7:                               # %for.cond9
                                        #   Parent Loop BB40_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB40_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB40_7 Depth=2
	movl	$0, -12(%rbp)
.LBB40_9:                               # %for.cond14
                                        #   Parent Loop BB40_5 Depth=1
                                        #     Parent Loop BB40_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB40_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB40_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB40_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_9
.LBB40_12:                              # %for.end
                                        #   in Loop: Header=BB40_7 Depth=2
	jmp	.LBB40_13
.LBB40_13:                              # %for.inc41
                                        #   in Loop: Header=BB40_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB40_7
.LBB40_14:                              # %for.end43
                                        #   in Loop: Header=BB40_5 Depth=1
	jmp	.LBB40_15
.LBB40_15:                              # %for.inc44
                                        #   in Loop: Header=BB40_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_5
.LBB40_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB40_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB40_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB40_17 Depth=1
	movl	$0, -24(%rbp)
.LBB40_19:                              # %for.cond50
                                        #   Parent Loop BB40_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB40_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB40_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB40_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB40_19
.LBB40_22:                              # %for.end60
                                        #   in Loop: Header=BB40_17 Depth=1
	jmp	.LBB40_23
.LBB40_23:                              # %for.inc61
                                        #   in Loop: Header=BB40_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_17
.LBB40_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB40_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_27 Depth 2
                                        #       Child Loop BB40_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB40_25 Depth=1
	movl	$0, -12(%rbp)
.LBB40_27:                              # %for.cond69
                                        #   Parent Loop BB40_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB40_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB40_29:                              # %for.cond85
                                        #   Parent Loop BB40_25 Depth=1
                                        #     Parent Loop BB40_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB40_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB40_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_29
.LBB40_32:                              # %for.end99
                                        #   in Loop: Header=BB40_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB40_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB40_34
	jp	.LBB40_34
	jmp	.LBB40_35
.LBB40_34:                              # %if.then106
                                        #   in Loop: Header=BB40_27 Depth=2
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB40_36
.LBB40_35:                              # %if.else
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB40_36:                              # %if.end
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB40_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB40_39
.LBB40_38:                              # %if.then137
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB40_39:                              # %if.end143
                                        #   in Loop: Header=BB40_27 Depth=2
	jmp	.LBB40_47
.LBB40_40:                              # %if.else144
                                        #   in Loop: Header=BB40_27 Depth=2
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB40_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB40_46
.LBB40_42:                              # %cond.false168
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB40_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	$127, %eax
	jmp	.LBB40_45
.LBB40_44:                              # %cond.false177
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB40_45:                              # %cond.end183
                                        #   in Loop: Header=BB40_27 Depth=2
.LBB40_46:                              # %cond.end185
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB40_47:                              # %if.end197
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_27
.LBB40_49:                              # %for.end210
                                        #   in Loop: Header=BB40_25 Depth=1
	jmp	.LBB40_50
.LBB40_50:                              # %for.inc211
                                        #   in Loop: Header=BB40_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_25
.LBB40_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB40_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_54 Depth 2
                                        #       Child Loop BB40_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	$0, -36(%rbp)
.LBB40_54:                              # %for.cond219
                                        #   Parent Loop BB40_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB40_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	$0, -32(%rbp)
.LBB40_56:                              # %for.cond225
                                        #   Parent Loop BB40_52 Depth=1
                                        #     Parent Loop BB40_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB40_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB40_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB40_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB40_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB40_60
.LBB40_59:                              # %if.then246
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB40_63
.LBB40_60:                              # %if.end247
                                        #   in Loop: Header=BB40_56 Depth=3
	jmp	.LBB40_61
.LBB40_61:                              # %for.inc248
                                        #   in Loop: Header=BB40_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB40_56
.LBB40_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB40_54 Depth=2
	jmp	.LBB40_63
.LBB40_63:                              # %for.end250
                                        #   in Loop: Header=BB40_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB40_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_68
.LBB40_65:                              # %if.end254
                                        #   in Loop: Header=BB40_54 Depth=2
	jmp	.LBB40_66
.LBB40_66:                              # %for.inc255
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB40_54
.LBB40_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_68
.LBB40_68:                              # %for.end257
                                        #   in Loop: Header=BB40_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB40_70
# %bb.69:                               # %if.then260
	jmp	.LBB40_73
.LBB40_70:                              # %if.end261
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_71
.LBB40_71:                              # %for.inc262
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_52
.LBB40_72:                              # %for.end264.loopexit
	jmp	.LBB40_73
.LBB40_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1313108261, -64(%rbp)  # imm = 0x4E447125
	jne	.LBB40_75
.LBB40_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_74
.Lfunc_end40:
	.size	test_wp_P_slice.37, .Lfunc_end40-test_wp_P_slice.37
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.38
.LCPI41_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.38
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.38,@function
estimate_weighting_factor_B_slice.38:   # @estimate_weighting_factor_B_slice.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$865765770, -88(%rbp)   # imm = 0x339A898A
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB41_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB41_4
.LBB41_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB41_4
.LBB41_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB41_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB41_7
.LBB41_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB41_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB41_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_10 Depth 2
                                        #       Child Loop BB41_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB41_8 Depth=1
	movl	$0, -8(%rbp)
.LBB41_10:                              # %for.cond14
                                        #   Parent Loop BB41_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB41_10 Depth=2
	movl	$0, -16(%rbp)
.LBB41_12:                              # %for.cond19
                                        #   Parent Loop BB41_8 Depth=1
                                        #     Parent Loop BB41_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB41_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB41_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB41_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_12
.LBB41_15:                              # %for.end
                                        #   in Loop: Header=BB41_10 Depth=2
	jmp	.LBB41_16
.LBB41_16:                              # %for.inc50
                                        #   in Loop: Header=BB41_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_10
.LBB41_17:                              # %for.end52
                                        #   in Loop: Header=BB41_8 Depth=1
	jmp	.LBB41_18
.LBB41_18:                              # %for.inc53
                                        #   in Loop: Header=BB41_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_8
.LBB41_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB41_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_22 Depth 2
                                        #       Child Loop BB41_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB41_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB41_20 Depth=1
	movl	$0, -8(%rbp)
.LBB41_22:                              # %for.cond59
                                        #   Parent Loop BB41_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB41_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB41_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB41_29
.LBB41_25:                              # %cond.false70
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB41_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	$127, %eax
	jmp	.LBB41_28
.LBB41_27:                              # %cond.false80
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB41_28:                              # %cond.end88
                                        #   in Loop: Header=BB41_22 Depth=2
.LBB41_29:                              # %cond.end90
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB41_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB41_35
.LBB41_31:                              # %cond.false99
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB41_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	$127, %eax
	jmp	.LBB41_34
.LBB41_33:                              # %cond.false107
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB41_34:                              # %cond.end113
                                        #   in Loop: Header=BB41_22 Depth=2
.LBB41_35:                              # %cond.end115
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB41_36:                              # %for.cond117
                                        #   Parent Loop BB41_20 Depth=1
                                        #     Parent Loop BB41_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB41_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB41_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB41_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB41_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB41_49
.LBB41_39:                              # %if.else154
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB41_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB41_45
.LBB41_41:                              # %cond.false160
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB41_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB41_44
.LBB41_43:                              # %cond.false166
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB41_44:                              # %cond.end170
                                        #   in Loop: Header=BB41_36 Depth=3
.LBB41_45:                              # %cond.end172
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB41_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB41_48
.LBB41_47:                              # %if.then198
                                        #   in Loop: Header=BB41_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_48:                              # %if.end208
                                        #   in Loop: Header=BB41_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB41_49:                              # %if.end238
                                        #   in Loop: Header=BB41_36 Depth=3
	jmp	.LBB41_50
.LBB41_50:                              # %for.inc239
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_36
.LBB41_51:                              # %for.end241
                                        #   in Loop: Header=BB41_22 Depth=2
	jmp	.LBB41_52
.LBB41_52:                              # %for.inc242
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_22
.LBB41_53:                              # %for.end244
                                        #   in Loop: Header=BB41_20 Depth=1
	jmp	.LBB41_54
.LBB41_54:                              # %for.inc245
                                        #   in Loop: Header=BB41_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_20
.LBB41_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB41_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB41_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_59 Depth 2
                                        #       Child Loop BB41_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB41_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB41_57 Depth=1
	movl	$0, -8(%rbp)
.LBB41_59:                              # %for.cond254
                                        #   Parent Loop BB41_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB41_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB41_59 Depth=2
	movl	$0, -20(%rbp)
.LBB41_61:                              # %for.cond257
                                        #   Parent Loop BB41_57 Depth=1
                                        #     Parent Loop BB41_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB41_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB41_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB41_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB41_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB41_65
.LBB41_64:                              # %cond.false262
                                        #   in Loop: Header=BB41_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB41_65:                              # %cond.end263
                                        #   in Loop: Header=BB41_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB41_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_61
.LBB41_67:                              # %for.end295
                                        #   in Loop: Header=BB41_59 Depth=2
	jmp	.LBB41_68
.LBB41_68:                              # %for.inc296
                                        #   in Loop: Header=BB41_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_59
.LBB41_69:                              # %for.end298
                                        #   in Loop: Header=BB41_57 Depth=1
	jmp	.LBB41_70
.LBB41_70:                              # %for.inc299
                                        #   in Loop: Header=BB41_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_57
.LBB41_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB41_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	$0, -24(%rbp)
.LBB41_74:                              # %for.cond306
                                        #   Parent Loop BB41_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB41_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB41_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_74
.LBB41_77:                              # %for.end346
                                        #   in Loop: Header=BB41_72 Depth=1
	jmp	.LBB41_78
.LBB41_78:                              # %for.inc347
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_72
.LBB41_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB41_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_82 Depth 2
                                        #       Child Loop BB41_84 Depth 3
                                        #       Child Loop BB41_88 Depth 3
                                        #         Child Loop BB41_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB41_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB41_80 Depth=1
	movl	$0, -8(%rbp)
.LBB41_82:                              # %for.cond353
                                        #   Parent Loop BB41_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_84 Depth 3
                                        #       Child Loop BB41_88 Depth 3
                                        #         Child Loop BB41_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB41_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB41_82 Depth=2
	movl	$0, -16(%rbp)
.LBB41_84:                              # %for.cond356
                                        #   Parent Loop BB41_80 Depth=1
                                        #     Parent Loop BB41_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB41_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB41_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_84
.LBB41_87:                              # %for.end380
                                        #   in Loop: Header=BB41_82 Depth=2
	movl	$0, -16(%rbp)
.LBB41_88:                              # %for.cond381
                                        #   Parent Loop BB41_80 Depth=1
                                        #     Parent Loop BB41_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB41_88 Depth=3
	movl	$0, -32(%rbp)
.LBB41_90:                              # %for.cond387
                                        #   Parent Loop BB41_80 Depth=1
                                        #     Parent Loop BB41_82 Depth=2
                                        #       Parent Loop BB41_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB41_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB41_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB41_90
.LBB41_93:                              # %for.end421
                                        #   in Loop: Header=BB41_88 Depth=3
	jmp	.LBB41_94
.LBB41_94:                              # %for.inc422
                                        #   in Loop: Header=BB41_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_88
.LBB41_95:                              # %for.end424
                                        #   in Loop: Header=BB41_82 Depth=2
	jmp	.LBB41_96
.LBB41_96:                              # %for.inc425
                                        #   in Loop: Header=BB41_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_82
.LBB41_97:                              # %for.end427
                                        #   in Loop: Header=BB41_80 Depth=1
	jmp	.LBB41_98
.LBB41_98:                              # %for.inc428
                                        #   in Loop: Header=BB41_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_80
.LBB41_99:                              # %for.end430
	jmp	.LBB41_189
.LBB41_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB41_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB41_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB41_101 Depth=1
	movl	$0, -8(%rbp)
.LBB41_103:                             # %for.cond436
                                        #   Parent Loop BB41_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB41_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB41_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB41_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_103
.LBB41_106:                             # %for.end447
                                        #   in Loop: Header=BB41_101 Depth=1
	jmp	.LBB41_107
.LBB41_107:                             # %for.inc448
                                        #   in Loop: Header=BB41_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_101
.LBB41_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB41_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_111 Depth 2
                                        #       Child Loop BB41_113 Depth 3
                                        #       Child Loop BB41_123 Depth 3
                                        #       Child Loop BB41_133 Depth 3
                                        #         Child Loop BB41_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB41_109 Depth=1
	movl	$0, -16(%rbp)
.LBB41_111:                             # %for.cond456
                                        #   Parent Loop BB41_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_113 Depth 3
                                        #       Child Loop BB41_123 Depth 3
                                        #       Child Loop BB41_133 Depth 3
                                        #         Child Loop BB41_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB41_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB41_113:                             # %for.cond476
                                        #   Parent Loop BB41_109 Depth=1
                                        #     Parent Loop BB41_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB41_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB41_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_113
.LBB41_116:                             # %for.end493
                                        #   in Loop: Header=BB41_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB41_117
	jp	.LBB41_117
	jmp	.LBB41_118
.LBB41_117:                             # %if.then500
                                        #   in Loop: Header=BB41_111 Depth=2
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_119
.LBB41_118:                             # %if.else511
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB41_119:                             # %if.end513
                                        #   in Loop: Header=BB41_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB41_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB41_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB41_122
.LBB41_121:                             # %if.then519
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB41_122:                             # %if.end521
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB41_123:                             # %for.cond554
                                        #   Parent Loop BB41_109 Depth=1
                                        #     Parent Loop BB41_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB41_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_130
.LBB41_126:                             # %cond.false571
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB41_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_129
.LBB41_128:                             # %cond.false583
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB41_129:                             # %cond.end591
                                        #   in Loop: Header=BB41_123 Depth=3
.LBB41_130:                             # %cond.end593
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB41_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_123
.LBB41_132:                             # %for.end600
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	$0, -4(%rbp)
.LBB41_133:                             # %for.cond601
                                        #   Parent Loop BB41_109 Depth=1
                                        #     Parent Loop BB41_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	$0, -8(%rbp)
.LBB41_135:                             # %for.cond608
                                        #   Parent Loop BB41_109 Depth=1
                                        #     Parent Loop BB41_111 Depth=2
                                        #       Parent Loop BB41_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB41_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB41_142
.LBB41_138:                             # %cond.false630
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB41_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_141
.LBB41_140:                             # %cond.false648
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB41_141:                             # %cond.end661
                                        #   in Loop: Header=BB41_135 Depth=4
.LBB41_142:                             # %cond.end663
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB41_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_135
.LBB41_144:                             # %for.end675
                                        #   in Loop: Header=BB41_133 Depth=3
	jmp	.LBB41_145
.LBB41_145:                             # %for.inc676
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_133
.LBB41_146:                             # %for.end678
                                        #   in Loop: Header=BB41_111 Depth=2
	jmp	.LBB41_147
.LBB41_147:                             # %for.inc679
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_111
.LBB41_148:                             # %for.end681
                                        #   in Loop: Header=BB41_109 Depth=1
	jmp	.LBB41_149
.LBB41_149:                             # %for.inc682
                                        #   in Loop: Header=BB41_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_109
.LBB41_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB41_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB41_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_154 Depth 2
                                        #       Child Loop BB41_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB41_152 Depth=1
	movl	$0, -24(%rbp)
.LBB41_154:                             # %for.cond694
                                        #   Parent Loop BB41_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB41_154 Depth=2
	movl	$0, -20(%rbp)
.LBB41_156:                             # %for.cond700
                                        #   Parent Loop BB41_152 Depth=1
                                        #     Parent Loop BB41_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB41_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB41_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB41_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_156
.LBB41_159:                             # %for.end730
                                        #   in Loop: Header=BB41_154 Depth=2
	jmp	.LBB41_160
.LBB41_160:                             # %for.inc731
                                        #   in Loop: Header=BB41_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_154
.LBB41_161:                             # %for.end733
                                        #   in Loop: Header=BB41_152 Depth=1
	jmp	.LBB41_162
.LBB41_162:                             # %for.inc734
                                        #   in Loop: Header=BB41_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_152
.LBB41_163:                             # %for.end736
	jmp	.LBB41_173
.LBB41_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB41_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB41_165 Depth=1
	movl	$0, -24(%rbp)
.LBB41_167:                             # %for.cond743
                                        #   Parent Loop BB41_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB41_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB41_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_167
.LBB41_170:                             # %for.end784
                                        #   in Loop: Header=BB41_165 Depth=1
	jmp	.LBB41_171
.LBB41_171:                             # %for.inc785
                                        #   in Loop: Header=BB41_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_165
.LBB41_172:                             # %for.end787
	jmp	.LBB41_173
.LBB41_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB41_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_176 Depth 2
                                        #       Child Loop BB41_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB41_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB41_174 Depth=1
	movl	$0, -8(%rbp)
.LBB41_176:                             # %for.cond793
                                        #   Parent Loop BB41_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB41_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB41_176 Depth=2
	movl	$0, -20(%rbp)
.LBB41_178:                             # %for.cond797
                                        #   Parent Loop BB41_174 Depth=1
                                        #     Parent Loop BB41_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB41_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB41_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB41_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB41_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB41_182
.LBB41_181:                             # %cond.false804
                                        #   in Loop: Header=BB41_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB41_182:                             # %cond.end805
                                        #   in Loop: Header=BB41_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB41_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_178
.LBB41_184:                             # %for.end833
                                        #   in Loop: Header=BB41_176 Depth=2
	jmp	.LBB41_185
.LBB41_185:                             # %for.inc834
                                        #   in Loop: Header=BB41_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_176
.LBB41_186:                             # %for.end836
                                        #   in Loop: Header=BB41_174 Depth=1
	jmp	.LBB41_187
.LBB41_187:                             # %for.inc837
                                        #   in Loop: Header=BB41_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_174
.LBB41_188:                             # %for.end839
	jmp	.LBB41_189
.LBB41_189:                             # %if.end840
	cmpl	$865765770, -88(%rbp)   # imm = 0x339A898A
	jne	.LBB41_191
.LBB41_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_190
.Lfunc_end41:
	.size	estimate_weighting_factor_B_slice.38, .Lfunc_end41-estimate_weighting_factor_B_slice.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.39
.LCPI42_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.39
	.p2align	4, 0x90
	.type	test_wp_P_slice.39,@function
test_wp_P_slice.39:                     # @test_wp_P_slice.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$670813584, -60(%rbp)   # imm = 0x27FBCD90
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB42_4
.LBB42_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB42_4
.LBB42_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB42_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_7 Depth 2
                                        #       Child Loop BB42_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB42_5 Depth=1
	movl	$0, -24(%rbp)
.LBB42_7:                               # %for.cond9
                                        #   Parent Loop BB42_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB42_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB42_7 Depth=2
	movl	$0, -12(%rbp)
.LBB42_9:                               # %for.cond14
                                        #   Parent Loop BB42_5 Depth=1
                                        #     Parent Loop BB42_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB42_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB42_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB42_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_9
.LBB42_12:                              # %for.end
                                        #   in Loop: Header=BB42_7 Depth=2
	jmp	.LBB42_13
.LBB42_13:                              # %for.inc41
                                        #   in Loop: Header=BB42_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_7
.LBB42_14:                              # %for.end43
                                        #   in Loop: Header=BB42_5 Depth=1
	jmp	.LBB42_15
.LBB42_15:                              # %for.inc44
                                        #   in Loop: Header=BB42_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_5
.LBB42_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB42_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB42_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	$0, -24(%rbp)
.LBB42_19:                              # %for.cond50
                                        #   Parent Loop BB42_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB42_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB42_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB42_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_19
.LBB42_22:                              # %for.end60
                                        #   in Loop: Header=BB42_17 Depth=1
	jmp	.LBB42_23
.LBB42_23:                              # %for.inc61
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_17
.LBB42_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB42_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_27 Depth 2
                                        #       Child Loop BB42_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	$0, -12(%rbp)
.LBB42_27:                              # %for.cond69
                                        #   Parent Loop BB42_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB42_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB42_29:                              # %for.cond85
                                        #   Parent Loop BB42_25 Depth=1
                                        #     Parent Loop BB42_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB42_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB42_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_29
.LBB42_32:                              # %for.end99
                                        #   in Loop: Header=BB42_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB42_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB42_34
	jp	.LBB42_34
	jmp	.LBB42_35
.LBB42_34:                              # %if.then106
                                        #   in Loop: Header=BB42_27 Depth=2
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB42_36
.LBB42_35:                              # %if.else
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB42_36:                              # %if.end
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB42_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB42_39
.LBB42_38:                              # %if.then137
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB42_39:                              # %if.end143
                                        #   in Loop: Header=BB42_27 Depth=2
	jmp	.LBB42_47
.LBB42_40:                              # %if.else144
                                        #   in Loop: Header=BB42_27 Depth=2
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB42_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB42_46
.LBB42_42:                              # %cond.false168
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB42_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	$127, %eax
	jmp	.LBB42_45
.LBB42_44:                              # %cond.false177
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB42_45:                              # %cond.end183
                                        #   in Loop: Header=BB42_27 Depth=2
.LBB42_46:                              # %cond.end185
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB42_47:                              # %if.end197
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_27
.LBB42_49:                              # %for.end210
                                        #   in Loop: Header=BB42_25 Depth=1
	jmp	.LBB42_50
.LBB42_50:                              # %for.inc211
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_25
.LBB42_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB42_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_54 Depth 2
                                        #       Child Loop BB42_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	$0, -32(%rbp)
.LBB42_54:                              # %for.cond219
                                        #   Parent Loop BB42_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB42_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	$0, -36(%rbp)
.LBB42_56:                              # %for.cond225
                                        #   Parent Loop BB42_52 Depth=1
                                        #     Parent Loop BB42_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB42_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB42_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB42_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB42_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB42_60
.LBB42_59:                              # %if.then246
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB42_63
.LBB42_60:                              # %if.end247
                                        #   in Loop: Header=BB42_56 Depth=3
	jmp	.LBB42_61
.LBB42_61:                              # %for.inc248
                                        #   in Loop: Header=BB42_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_56
.LBB42_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB42_54 Depth=2
	jmp	.LBB42_63
.LBB42_63:                              # %for.end250
                                        #   in Loop: Header=BB42_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB42_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB42_52 Depth=1
	jmp	.LBB42_68
.LBB42_65:                              # %if.end254
                                        #   in Loop: Header=BB42_54 Depth=2
	jmp	.LBB42_66
.LBB42_66:                              # %for.inc255
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB42_54
.LBB42_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB42_52 Depth=1
	jmp	.LBB42_68
.LBB42_68:                              # %for.end257
                                        #   in Loop: Header=BB42_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB42_70
# %bb.69:                               # %if.then260
	jmp	.LBB42_73
.LBB42_70:                              # %if.end261
                                        #   in Loop: Header=BB42_52 Depth=1
	jmp	.LBB42_71
.LBB42_71:                              # %for.inc262
                                        #   in Loop: Header=BB42_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_52
.LBB42_72:                              # %for.end264.loopexit
	jmp	.LBB42_73
.LBB42_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$670813584, -60(%rbp)   # imm = 0x27FBCD90
	jne	.LBB42_75
.LBB42_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_74
.Lfunc_end42:
	.size	test_wp_P_slice.39, .Lfunc_end42-test_wp_P_slice.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.40
.LCPI43_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.40
	.p2align	4, 0x90
	.type	test_wp_B_slice.40,@function
test_wp_B_slice.40:                     # @test_wp_B_slice.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1524963522, -76(%rbp)  # imm = 0x5AE518C2
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB43_4
.LBB43_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_4
.LBB43_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB43_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_7 Depth 2
                                        #       Child Loop BB43_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	$0, -24(%rbp)
.LBB43_7:                               # %for.cond9
                                        #   Parent Loop BB43_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB43_7 Depth=2
	movl	$0, -32(%rbp)
.LBB43_9:                               # %for.cond14
                                        #   Parent Loop BB43_5 Depth=1
                                        #     Parent Loop BB43_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB43_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB43_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB43_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB43_9
.LBB43_12:                              # %for.end
                                        #   in Loop: Header=BB43_7 Depth=2
	jmp	.LBB43_13
.LBB43_13:                              # %for.inc41
                                        #   in Loop: Header=BB43_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_7
.LBB43_14:                              # %for.end43
                                        #   in Loop: Header=BB43_5 Depth=1
	jmp	.LBB43_15
.LBB43_15:                              # %for.inc44
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_5
.LBB43_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB43_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_19 Depth 2
                                        #       Child Loop BB43_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB43_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB43_17 Depth=1
	movl	$0, -24(%rbp)
.LBB43_19:                              # %for.cond50
                                        #   Parent Loop BB43_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB43_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB43_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB43_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB43_26
.LBB43_22:                              # %cond.false61
                                        #   in Loop: Header=BB43_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB43_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	$127, %eax
	jmp	.LBB43_25
.LBB43_24:                              # %cond.false71
                                        #   in Loop: Header=BB43_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB43_25:                              # %cond.end79
                                        #   in Loop: Header=BB43_19 Depth=2
.LBB43_26:                              # %cond.end81
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB43_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB43_32
.LBB43_28:                              # %cond.false90
                                        #   in Loop: Header=BB43_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB43_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	$127, %eax
	jmp	.LBB43_31
.LBB43_30:                              # %cond.false98
                                        #   in Loop: Header=BB43_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB43_31:                              # %cond.end104
                                        #   in Loop: Header=BB43_19 Depth=2
.LBB43_32:                              # %cond.end106
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB43_33:                              # %for.cond108
                                        #   Parent Loop BB43_17 Depth=1
                                        #     Parent Loop BB43_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB43_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB43_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB43_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB43_46
.LBB43_36:                              # %if.else
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB43_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB43_42
.LBB43_38:                              # %cond.false145
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB43_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB43_41
.LBB43_40:                              # %cond.false151
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB43_41:                              # %cond.end155
                                        #   in Loop: Header=BB43_33 Depth=3
.LBB43_42:                              # %cond.end157
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB43_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB43_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB43_45
.LBB43_44:                              # %if.then183
                                        #   in Loop: Header=BB43_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB43_45:                              # %if.end
                                        #   in Loop: Header=BB43_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB43_46:                              # %if.end220
                                        #   in Loop: Header=BB43_33 Depth=3
	jmp	.LBB43_47
.LBB43_47:                              # %for.inc221
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_33
.LBB43_48:                              # %for.end223
                                        #   in Loop: Header=BB43_19 Depth=2
	jmp	.LBB43_49
.LBB43_49:                              # %for.inc224
                                        #   in Loop: Header=BB43_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_19
.LBB43_50:                              # %for.end226
                                        #   in Loop: Header=BB43_17 Depth=1
	jmp	.LBB43_51
.LBB43_51:                              # %for.inc227
                                        #   in Loop: Header=BB43_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_17
.LBB43_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB43_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB43_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_56 Depth 2
                                        #       Child Loop BB43_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB43_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB43_54 Depth=1
	movl	$0, -24(%rbp)
.LBB43_56:                              # %for.cond235
                                        #   Parent Loop BB43_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB43_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB43_56 Depth=2
	movl	$0, -20(%rbp)
.LBB43_58:                              # %for.cond238
                                        #   Parent Loop BB43_54 Depth=1
                                        #     Parent Loop BB43_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB43_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB43_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB43_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB43_62
.LBB43_61:                              # %cond.false243
                                        #   in Loop: Header=BB43_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB43_62:                              # %cond.end244
                                        #   in Loop: Header=BB43_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB43_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_58
.LBB43_64:                              # %for.end276
                                        #   in Loop: Header=BB43_56 Depth=2
	jmp	.LBB43_65
.LBB43_65:                              # %for.inc277
                                        #   in Loop: Header=BB43_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_56
.LBB43_66:                              # %for.end279
                                        #   in Loop: Header=BB43_54 Depth=1
	jmp	.LBB43_67
.LBB43_67:                              # %for.inc280
                                        #   in Loop: Header=BB43_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_54
.LBB43_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB43_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB43_69 Depth=1
	movl	$0, -28(%rbp)
.LBB43_71:                              # %for.cond287
                                        #   Parent Loop BB43_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB43_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB43_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_71
.LBB43_74:                              # %for.end327
                                        #   in Loop: Header=BB43_69 Depth=1
	jmp	.LBB43_75
.LBB43_75:                              # %for.inc328
                                        #   in Loop: Header=BB43_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_69
.LBB43_76:                              # %for.end330
	jmp	.LBB43_142
.LBB43_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB43_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB43_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB43_78 Depth=1
	movl	$0, -24(%rbp)
.LBB43_80:                              # %for.cond335
                                        #   Parent Loop BB43_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB43_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB43_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB43_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_80
.LBB43_83:                              # %for.end345
                                        #   in Loop: Header=BB43_78 Depth=1
	jmp	.LBB43_84
.LBB43_84:                              # %for.inc346
                                        #   in Loop: Header=BB43_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_78
.LBB43_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB43_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_88 Depth 2
                                        #       Child Loop BB43_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB43_86 Depth=1
	movl	$0, -32(%rbp)
.LBB43_88:                              # %for.cond354
                                        #   Parent Loop BB43_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB43_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB43_90:                              # %for.cond372
                                        #   Parent Loop BB43_86 Depth=1
                                        #     Parent Loop BB43_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB43_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB43_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_90
.LBB43_93:                              # %for.end389
                                        #   in Loop: Header=BB43_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB43_94
	jp	.LBB43_94
	jmp	.LBB43_95
.LBB43_94:                              # %if.then396
                                        #   in Loop: Header=BB43_88 Depth=2
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB43_96
.LBB43_95:                              # %if.else406
                                        #   in Loop: Header=BB43_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB43_96:                              # %if.end407
                                        #   in Loop: Header=BB43_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB43_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB43_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB43_99
.LBB43_98:                              # %if.then413
                                        #   in Loop: Header=BB43_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB43_99:                              # %if.end414
                                        #   in Loop: Header=BB43_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB43_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB43_88
.LBB43_101:                             # %for.end447
                                        #   in Loop: Header=BB43_86 Depth=1
	jmp	.LBB43_102
.LBB43_102:                             # %for.inc448
                                        #   in Loop: Header=BB43_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_86
.LBB43_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB43_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB43_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_107 Depth 2
                                        #       Child Loop BB43_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB43_105 Depth=1
	movl	$0, -28(%rbp)
.LBB43_107:                             # %for.cond459
                                        #   Parent Loop BB43_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB43_107 Depth=2
	movl	$0, -20(%rbp)
.LBB43_109:                             # %for.cond465
                                        #   Parent Loop BB43_105 Depth=1
                                        #     Parent Loop BB43_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB43_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB43_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_109
.LBB43_112:                             # %for.end495
                                        #   in Loop: Header=BB43_107 Depth=2
	jmp	.LBB43_113
.LBB43_113:                             # %for.inc496
                                        #   in Loop: Header=BB43_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_107
.LBB43_114:                             # %for.end498
                                        #   in Loop: Header=BB43_105 Depth=1
	jmp	.LBB43_115
.LBB43_115:                             # %for.inc499
                                        #   in Loop: Header=BB43_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_105
.LBB43_116:                             # %for.end501
	jmp	.LBB43_126
.LBB43_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB43_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB43_118 Depth=1
	movl	$0, -28(%rbp)
.LBB43_120:                             # %for.cond508
                                        #   Parent Loop BB43_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB43_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB43_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_120
.LBB43_123:                             # %for.end549
                                        #   in Loop: Header=BB43_118 Depth=1
	jmp	.LBB43_124
.LBB43_124:                             # %for.inc550
                                        #   in Loop: Header=BB43_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_118
.LBB43_125:                             # %for.end552
	jmp	.LBB43_126
.LBB43_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB43_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_129 Depth 2
                                        #       Child Loop BB43_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB43_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB43_127 Depth=1
	movl	$0, -24(%rbp)
.LBB43_129:                             # %for.cond558
                                        #   Parent Loop BB43_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB43_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB43_129 Depth=2
	movl	$0, -20(%rbp)
.LBB43_131:                             # %for.cond562
                                        #   Parent Loop BB43_127 Depth=1
                                        #     Parent Loop BB43_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB43_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB43_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB43_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB43_135
.LBB43_134:                             # %cond.false569
                                        #   in Loop: Header=BB43_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB43_135:                             # %cond.end570
                                        #   in Loop: Header=BB43_131 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB43_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_131
.LBB43_137:                             # %for.end598
                                        #   in Loop: Header=BB43_129 Depth=2
	jmp	.LBB43_138
.LBB43_138:                             # %for.inc599
                                        #   in Loop: Header=BB43_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_129
.LBB43_139:                             # %for.end601
                                        #   in Loop: Header=BB43_127 Depth=1
	jmp	.LBB43_140
.LBB43_140:                             # %for.inc602
                                        #   in Loop: Header=BB43_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_127
.LBB43_141:                             # %for.end604
	jmp	.LBB43_142
.LBB43_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB43_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_145 Depth 2
                                        #       Child Loop BB43_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB43_143 Depth=1
	movl	$0, -28(%rbp)
.LBB43_145:                             # %for.cond611
                                        #   Parent Loop BB43_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB43_145 Depth=2
	movl	$0, -20(%rbp)
.LBB43_147:                             # %for.cond617
                                        #   Parent Loop BB43_143 Depth=1
                                        #     Parent Loop BB43_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB43_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB43_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB43_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB43_151
.LBB43_150:                             # %if.then638
                                        #   in Loop: Header=BB43_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB43_154
.LBB43_151:                             # %if.end639
                                        #   in Loop: Header=BB43_147 Depth=3
	jmp	.LBB43_152
.LBB43_152:                             # %for.inc640
                                        #   in Loop: Header=BB43_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_147
.LBB43_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB43_145 Depth=2
	jmp	.LBB43_154
.LBB43_154:                             # %for.end642
                                        #   in Loop: Header=BB43_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB43_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB43_143 Depth=1
	jmp	.LBB43_159
.LBB43_156:                             # %if.end646
                                        #   in Loop: Header=BB43_145 Depth=2
	jmp	.LBB43_157
.LBB43_157:                             # %for.inc647
                                        #   in Loop: Header=BB43_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_145
.LBB43_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB43_143 Depth=1
	jmp	.LBB43_159
.LBB43_159:                             # %for.end649
                                        #   in Loop: Header=BB43_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB43_161
# %bb.160:                              # %if.then652
	jmp	.LBB43_164
.LBB43_161:                             # %if.end653
                                        #   in Loop: Header=BB43_143 Depth=1
	jmp	.LBB43_162
.LBB43_162:                             # %for.inc654
                                        #   in Loop: Header=BB43_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_143
.LBB43_163:                             # %for.end656.loopexit
	jmp	.LBB43_164
.LBB43_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1524963522, -76(%rbp)  # imm = 0x5AE518C2
	jne	.LBB43_166
.LBB43_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_165
.Lfunc_end43:
	.size	test_wp_B_slice.40, .Lfunc_end43-test_wp_B_slice.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.41
.LCPI44_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.41
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.41,@function
estimate_weighting_factor_B_slice.41:   # @estimate_weighting_factor_B_slice.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1369086703, -84(%rbp)  # imm = 0x519A9AEF
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB44_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB44_4
.LBB44_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB44_4
.LBB44_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB44_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB44_7
.LBB44_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB44_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB44_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_10 Depth 2
                                        #       Child Loop BB44_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB44_8 Depth=1
	movl	$0, -8(%rbp)
.LBB44_10:                              # %for.cond14
                                        #   Parent Loop BB44_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB44_10 Depth=2
	movl	$0, -16(%rbp)
.LBB44_12:                              # %for.cond19
                                        #   Parent Loop BB44_8 Depth=1
                                        #     Parent Loop BB44_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB44_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB44_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB44_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_12
.LBB44_15:                              # %for.end
                                        #   in Loop: Header=BB44_10 Depth=2
	jmp	.LBB44_16
.LBB44_16:                              # %for.inc50
                                        #   in Loop: Header=BB44_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_10
.LBB44_17:                              # %for.end52
                                        #   in Loop: Header=BB44_8 Depth=1
	jmp	.LBB44_18
.LBB44_18:                              # %for.inc53
                                        #   in Loop: Header=BB44_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_8
.LBB44_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB44_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_22 Depth 2
                                        #       Child Loop BB44_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB44_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB44_20 Depth=1
	movl	$0, -8(%rbp)
.LBB44_22:                              # %for.cond59
                                        #   Parent Loop BB44_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB44_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB44_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB44_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB44_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB44_29
.LBB44_25:                              # %cond.false70
                                        #   in Loop: Header=BB44_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB44_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB44_22 Depth=2
	movl	$127, %eax
	jmp	.LBB44_28
.LBB44_27:                              # %cond.false80
                                        #   in Loop: Header=BB44_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB44_28:                              # %cond.end88
                                        #   in Loop: Header=BB44_22 Depth=2
.LBB44_29:                              # %cond.end90
                                        #   in Loop: Header=BB44_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB44_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB44_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB44_35
.LBB44_31:                              # %cond.false99
                                        #   in Loop: Header=BB44_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB44_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB44_22 Depth=2
	movl	$127, %eax
	jmp	.LBB44_34
.LBB44_33:                              # %cond.false107
                                        #   in Loop: Header=BB44_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB44_34:                              # %cond.end113
                                        #   in Loop: Header=BB44_22 Depth=2
.LBB44_35:                              # %cond.end115
                                        #   in Loop: Header=BB44_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB44_36:                              # %for.cond117
                                        #   Parent Loop BB44_20 Depth=1
                                        #     Parent Loop BB44_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB44_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB44_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB44_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB44_49
.LBB44_39:                              # %if.else154
                                        #   in Loop: Header=BB44_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB44_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB44_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB44_45
.LBB44_41:                              # %cond.false160
                                        #   in Loop: Header=BB44_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB44_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB44_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB44_44
.LBB44_43:                              # %cond.false166
                                        #   in Loop: Header=BB44_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB44_44:                              # %cond.end170
                                        #   in Loop: Header=BB44_36 Depth=3
.LBB44_45:                              # %cond.end172
                                        #   in Loop: Header=BB44_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB44_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB44_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB44_48
.LBB44_47:                              # %if.then198
                                        #   in Loop: Header=BB44_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB44_48:                              # %if.end208
                                        #   in Loop: Header=BB44_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB44_49:                              # %if.end238
                                        #   in Loop: Header=BB44_36 Depth=3
	jmp	.LBB44_50
.LBB44_50:                              # %for.inc239
                                        #   in Loop: Header=BB44_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_36
.LBB44_51:                              # %for.end241
                                        #   in Loop: Header=BB44_22 Depth=2
	jmp	.LBB44_52
.LBB44_52:                              # %for.inc242
                                        #   in Loop: Header=BB44_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_22
.LBB44_53:                              # %for.end244
                                        #   in Loop: Header=BB44_20 Depth=1
	jmp	.LBB44_54
.LBB44_54:                              # %for.inc245
                                        #   in Loop: Header=BB44_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_20
.LBB44_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB44_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB44_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_59 Depth 2
                                        #       Child Loop BB44_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB44_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB44_57 Depth=1
	movl	$0, -8(%rbp)
.LBB44_59:                              # %for.cond254
                                        #   Parent Loop BB44_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB44_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB44_59 Depth=2
	movl	$0, -20(%rbp)
.LBB44_61:                              # %for.cond257
                                        #   Parent Loop BB44_57 Depth=1
                                        #     Parent Loop BB44_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB44_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB44_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB44_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB44_65
.LBB44_64:                              # %cond.false262
                                        #   in Loop: Header=BB44_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB44_65:                              # %cond.end263
                                        #   in Loop: Header=BB44_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB44_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_61
.LBB44_67:                              # %for.end295
                                        #   in Loop: Header=BB44_59 Depth=2
	jmp	.LBB44_68
.LBB44_68:                              # %for.inc296
                                        #   in Loop: Header=BB44_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_59
.LBB44_69:                              # %for.end298
                                        #   in Loop: Header=BB44_57 Depth=1
	jmp	.LBB44_70
.LBB44_70:                              # %for.inc299
                                        #   in Loop: Header=BB44_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_57
.LBB44_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB44_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB44_72 Depth=1
	movl	$0, -24(%rbp)
.LBB44_74:                              # %for.cond306
                                        #   Parent Loop BB44_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB44_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB44_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_74
.LBB44_77:                              # %for.end346
                                        #   in Loop: Header=BB44_72 Depth=1
	jmp	.LBB44_78
.LBB44_78:                              # %for.inc347
                                        #   in Loop: Header=BB44_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_72
.LBB44_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB44_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_82 Depth 2
                                        #       Child Loop BB44_84 Depth 3
                                        #       Child Loop BB44_88 Depth 3
                                        #         Child Loop BB44_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB44_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB44_80 Depth=1
	movl	$0, -8(%rbp)
.LBB44_82:                              # %for.cond353
                                        #   Parent Loop BB44_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_84 Depth 3
                                        #       Child Loop BB44_88 Depth 3
                                        #         Child Loop BB44_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB44_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	$0, -16(%rbp)
.LBB44_84:                              # %for.cond356
                                        #   Parent Loop BB44_80 Depth=1
                                        #     Parent Loop BB44_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB44_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB44_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_84
.LBB44_87:                              # %for.end380
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	$0, -16(%rbp)
.LBB44_88:                              # %for.cond381
                                        #   Parent Loop BB44_80 Depth=1
                                        #     Parent Loop BB44_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB44_88 Depth=3
	movl	$0, -32(%rbp)
.LBB44_90:                              # %for.cond387
                                        #   Parent Loop BB44_80 Depth=1
                                        #     Parent Loop BB44_82 Depth=2
                                        #       Parent Loop BB44_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB44_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB44_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_90
.LBB44_93:                              # %for.end421
                                        #   in Loop: Header=BB44_88 Depth=3
	jmp	.LBB44_94
.LBB44_94:                              # %for.inc422
                                        #   in Loop: Header=BB44_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_88
.LBB44_95:                              # %for.end424
                                        #   in Loop: Header=BB44_82 Depth=2
	jmp	.LBB44_96
.LBB44_96:                              # %for.inc425
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_82
.LBB44_97:                              # %for.end427
                                        #   in Loop: Header=BB44_80 Depth=1
	jmp	.LBB44_98
.LBB44_98:                              # %for.inc428
                                        #   in Loop: Header=BB44_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_80
.LBB44_99:                              # %for.end430
	jmp	.LBB44_189
.LBB44_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB44_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB44_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB44_101 Depth=1
	movl	$0, -8(%rbp)
.LBB44_103:                             # %for.cond436
                                        #   Parent Loop BB44_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB44_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB44_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB44_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_103
.LBB44_106:                             # %for.end447
                                        #   in Loop: Header=BB44_101 Depth=1
	jmp	.LBB44_107
.LBB44_107:                             # %for.inc448
                                        #   in Loop: Header=BB44_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_101
.LBB44_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB44_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_111 Depth 2
                                        #       Child Loop BB44_113 Depth 3
                                        #       Child Loop BB44_123 Depth 3
                                        #       Child Loop BB44_133 Depth 3
                                        #         Child Loop BB44_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB44_109 Depth=1
	movl	$0, -16(%rbp)
.LBB44_111:                             # %for.cond456
                                        #   Parent Loop BB44_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_113 Depth 3
                                        #       Child Loop BB44_123 Depth 3
                                        #       Child Loop BB44_133 Depth 3
                                        #         Child Loop BB44_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB44_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB44_113:                             # %for.cond476
                                        #   Parent Loop BB44_109 Depth=1
                                        #     Parent Loop BB44_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB44_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB44_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_113
.LBB44_116:                             # %for.end493
                                        #   in Loop: Header=BB44_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB44_117
	jp	.LBB44_117
	jmp	.LBB44_118
.LBB44_117:                             # %if.then500
                                        #   in Loop: Header=BB44_111 Depth=2
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_119
.LBB44_118:                             # %if.else511
                                        #   in Loop: Header=BB44_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB44_119:                             # %if.end513
                                        #   in Loop: Header=BB44_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB44_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB44_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB44_122
.LBB44_121:                             # %if.then519
                                        #   in Loop: Header=BB44_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB44_122:                             # %if.end521
                                        #   in Loop: Header=BB44_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB44_123:                             # %for.cond554
                                        #   Parent Loop BB44_109 Depth=1
                                        #     Parent Loop BB44_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB44_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB44_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB44_130
.LBB44_126:                             # %cond.false571
                                        #   in Loop: Header=BB44_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB44_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB44_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_129
.LBB44_128:                             # %cond.false583
                                        #   in Loop: Header=BB44_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB44_129:                             # %cond.end591
                                        #   in Loop: Header=BB44_123 Depth=3
.LBB44_130:                             # %cond.end593
                                        #   in Loop: Header=BB44_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB44_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_123
.LBB44_132:                             # %for.end600
                                        #   in Loop: Header=BB44_111 Depth=2
	movl	$0, -4(%rbp)
.LBB44_133:                             # %for.cond601
                                        #   Parent Loop BB44_109 Depth=1
                                        #     Parent Loop BB44_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB44_133 Depth=3
	movl	$0, -8(%rbp)
.LBB44_135:                             # %for.cond608
                                        #   Parent Loop BB44_109 Depth=1
                                        #     Parent Loop BB44_111 Depth=2
                                        #       Parent Loop BB44_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB44_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB44_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB44_142
.LBB44_138:                             # %cond.false630
                                        #   in Loop: Header=BB44_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB44_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB44_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_141
.LBB44_140:                             # %cond.false648
                                        #   in Loop: Header=BB44_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB44_141:                             # %cond.end661
                                        #   in Loop: Header=BB44_135 Depth=4
.LBB44_142:                             # %cond.end663
                                        #   in Loop: Header=BB44_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB44_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_135
.LBB44_144:                             # %for.end675
                                        #   in Loop: Header=BB44_133 Depth=3
	jmp	.LBB44_145
.LBB44_145:                             # %for.inc676
                                        #   in Loop: Header=BB44_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_133
.LBB44_146:                             # %for.end678
                                        #   in Loop: Header=BB44_111 Depth=2
	jmp	.LBB44_147
.LBB44_147:                             # %for.inc679
                                        #   in Loop: Header=BB44_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_111
.LBB44_148:                             # %for.end681
                                        #   in Loop: Header=BB44_109 Depth=1
	jmp	.LBB44_149
.LBB44_149:                             # %for.inc682
                                        #   in Loop: Header=BB44_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_109
.LBB44_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB44_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB44_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_154 Depth 2
                                        #       Child Loop BB44_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB44_152 Depth=1
	movl	$0, -24(%rbp)
.LBB44_154:                             # %for.cond694
                                        #   Parent Loop BB44_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB44_154 Depth=2
	movl	$0, -20(%rbp)
.LBB44_156:                             # %for.cond700
                                        #   Parent Loop BB44_152 Depth=1
                                        #     Parent Loop BB44_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB44_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB44_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_156
.LBB44_159:                             # %for.end730
                                        #   in Loop: Header=BB44_154 Depth=2
	jmp	.LBB44_160
.LBB44_160:                             # %for.inc731
                                        #   in Loop: Header=BB44_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_154
.LBB44_161:                             # %for.end733
                                        #   in Loop: Header=BB44_152 Depth=1
	jmp	.LBB44_162
.LBB44_162:                             # %for.inc734
                                        #   in Loop: Header=BB44_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_152
.LBB44_163:                             # %for.end736
	jmp	.LBB44_173
.LBB44_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB44_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB44_165 Depth=1
	movl	$0, -24(%rbp)
.LBB44_167:                             # %for.cond743
                                        #   Parent Loop BB44_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB44_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB44_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_167
.LBB44_170:                             # %for.end784
                                        #   in Loop: Header=BB44_165 Depth=1
	jmp	.LBB44_171
.LBB44_171:                             # %for.inc785
                                        #   in Loop: Header=BB44_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_165
.LBB44_172:                             # %for.end787
	jmp	.LBB44_173
.LBB44_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB44_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_176 Depth 2
                                        #       Child Loop BB44_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB44_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB44_174 Depth=1
	movl	$0, -8(%rbp)
.LBB44_176:                             # %for.cond793
                                        #   Parent Loop BB44_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB44_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB44_176 Depth=2
	movl	$0, -20(%rbp)
.LBB44_178:                             # %for.cond797
                                        #   Parent Loop BB44_174 Depth=1
                                        #     Parent Loop BB44_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB44_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB44_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB44_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB44_182
.LBB44_181:                             # %cond.false804
                                        #   in Loop: Header=BB44_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB44_182:                             # %cond.end805
                                        #   in Loop: Header=BB44_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB44_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_178
.LBB44_184:                             # %for.end833
                                        #   in Loop: Header=BB44_176 Depth=2
	jmp	.LBB44_185
.LBB44_185:                             # %for.inc834
                                        #   in Loop: Header=BB44_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_176
.LBB44_186:                             # %for.end836
                                        #   in Loop: Header=BB44_174 Depth=1
	jmp	.LBB44_187
.LBB44_187:                             # %for.inc837
                                        #   in Loop: Header=BB44_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_174
.LBB44_188:                             # %for.end839
	jmp	.LBB44_189
.LBB44_189:                             # %if.end840
	cmpl	$1369086703, -84(%rbp)  # imm = 0x519A9AEF
	jne	.LBB44_191
.LBB44_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_190
.Lfunc_end44:
	.size	estimate_weighting_factor_B_slice.41, .Lfunc_end44-estimate_weighting_factor_B_slice.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.42
.LCPI45_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.42
	.p2align	4, 0x90
	.type	test_wp_P_slice.42,@function
test_wp_P_slice.42:                     # @test_wp_P_slice.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1270414232, -60(%rbp)  # imm = 0x4BB8FB98
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB45_4
.LBB45_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB45_4
.LBB45_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB45_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_7 Depth 2
                                        #       Child Loop BB45_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB45_5 Depth=1
	movl	$0, -24(%rbp)
.LBB45_7:                               # %for.cond9
                                        #   Parent Loop BB45_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB45_7 Depth=2
	movl	$0, -12(%rbp)
.LBB45_9:                               # %for.cond14
                                        #   Parent Loop BB45_5 Depth=1
                                        #     Parent Loop BB45_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB45_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB45_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB45_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_9
.LBB45_12:                              # %for.end
                                        #   in Loop: Header=BB45_7 Depth=2
	jmp	.LBB45_13
.LBB45_13:                              # %for.inc41
                                        #   in Loop: Header=BB45_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_7
.LBB45_14:                              # %for.end43
                                        #   in Loop: Header=BB45_5 Depth=1
	jmp	.LBB45_15
.LBB45_15:                              # %for.inc44
                                        #   in Loop: Header=BB45_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_5
.LBB45_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB45_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB45_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	$0, -24(%rbp)
.LBB45_19:                              # %for.cond50
                                        #   Parent Loop BB45_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB45_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB45_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_19
.LBB45_22:                              # %for.end60
                                        #   in Loop: Header=BB45_17 Depth=1
	jmp	.LBB45_23
.LBB45_23:                              # %for.inc61
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_17
.LBB45_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB45_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_27 Depth 2
                                        #       Child Loop BB45_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	$0, -12(%rbp)
.LBB45_27:                              # %for.cond69
                                        #   Parent Loop BB45_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB45_29:                              # %for.cond85
                                        #   Parent Loop BB45_25 Depth=1
                                        #     Parent Loop BB45_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB45_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB45_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_29
.LBB45_32:                              # %for.end99
                                        #   in Loop: Header=BB45_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB45_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB45_34
	jp	.LBB45_34
	jmp	.LBB45_35
.LBB45_34:                              # %if.then106
                                        #   in Loop: Header=BB45_27 Depth=2
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB45_36
.LBB45_35:                              # %if.else
                                        #   in Loop: Header=BB45_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB45_36:                              # %if.end
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB45_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB45_39
.LBB45_38:                              # %if.then137
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB45_39:                              # %if.end143
                                        #   in Loop: Header=BB45_27 Depth=2
	jmp	.LBB45_47
.LBB45_40:                              # %if.else144
                                        #   in Loop: Header=BB45_27 Depth=2
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB45_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB45_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB45_46
.LBB45_42:                              # %cond.false168
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB45_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB45_27 Depth=2
	movl	$127, %eax
	jmp	.LBB45_45
.LBB45_44:                              # %cond.false177
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB45_45:                              # %cond.end183
                                        #   in Loop: Header=BB45_27 Depth=2
.LBB45_46:                              # %cond.end185
                                        #   in Loop: Header=BB45_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB45_47:                              # %if.end197
                                        #   in Loop: Header=BB45_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB45_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_27
.LBB45_49:                              # %for.end210
                                        #   in Loop: Header=BB45_25 Depth=1
	jmp	.LBB45_50
.LBB45_50:                              # %for.inc211
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_25
.LBB45_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB45_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_54 Depth 2
                                        #       Child Loop BB45_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	$0, -36(%rbp)
.LBB45_54:                              # %for.cond219
                                        #   Parent Loop BB45_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB45_54 Depth=2
	movl	$0, -32(%rbp)
.LBB45_56:                              # %for.cond225
                                        #   Parent Loop BB45_52 Depth=1
                                        #     Parent Loop BB45_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB45_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB45_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB45_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB45_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB45_60
.LBB45_59:                              # %if.then246
                                        #   in Loop: Header=BB45_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB45_63
.LBB45_60:                              # %if.end247
                                        #   in Loop: Header=BB45_56 Depth=3
	jmp	.LBB45_61
.LBB45_61:                              # %for.inc248
                                        #   in Loop: Header=BB45_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB45_56
.LBB45_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB45_54 Depth=2
	jmp	.LBB45_63
.LBB45_63:                              # %for.end250
                                        #   in Loop: Header=BB45_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB45_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB45_52 Depth=1
	jmp	.LBB45_68
.LBB45_65:                              # %if.end254
                                        #   in Loop: Header=BB45_54 Depth=2
	jmp	.LBB45_66
.LBB45_66:                              # %for.inc255
                                        #   in Loop: Header=BB45_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_54
.LBB45_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB45_52 Depth=1
	jmp	.LBB45_68
.LBB45_68:                              # %for.end257
                                        #   in Loop: Header=BB45_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB45_70
# %bb.69:                               # %if.then260
	jmp	.LBB45_73
.LBB45_70:                              # %if.end261
                                        #   in Loop: Header=BB45_52 Depth=1
	jmp	.LBB45_71
.LBB45_71:                              # %for.inc262
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_52
.LBB45_72:                              # %for.end264.loopexit
	jmp	.LBB45_73
.LBB45_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1270414232, -60(%rbp)  # imm = 0x4BB8FB98
	jne	.LBB45_75
.LBB45_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_74
.Lfunc_end45:
	.size	test_wp_P_slice.42, .Lfunc_end45-test_wp_P_slice.42
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.43
.LCPI46_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.43
	.p2align	4, 0x90
	.type	test_wp_P_slice.43,@function
test_wp_P_slice.43:                     # @test_wp_P_slice.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$2141255338, -60(%rbp)  # imm = 0x7FA0F6AA
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB46_4
.LBB46_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB46_4
.LBB46_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB46_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_7 Depth 2
                                        #       Child Loop BB46_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB46_5 Depth=1
	movl	$0, -24(%rbp)
.LBB46_7:                               # %for.cond9
                                        #   Parent Loop BB46_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB46_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB46_7 Depth=2
	movl	$0, -12(%rbp)
.LBB46_9:                               # %for.cond14
                                        #   Parent Loop BB46_5 Depth=1
                                        #     Parent Loop BB46_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB46_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB46_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB46_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_9
.LBB46_12:                              # %for.end
                                        #   in Loop: Header=BB46_7 Depth=2
	jmp	.LBB46_13
.LBB46_13:                              # %for.inc41
                                        #   in Loop: Header=BB46_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_7
.LBB46_14:                              # %for.end43
                                        #   in Loop: Header=BB46_5 Depth=1
	jmp	.LBB46_15
.LBB46_15:                              # %for.inc44
                                        #   in Loop: Header=BB46_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_5
.LBB46_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB46_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB46_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB46_17 Depth=1
	movl	$0, -24(%rbp)
.LBB46_19:                              # %for.cond50
                                        #   Parent Loop BB46_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB46_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB46_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB46_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_19
.LBB46_22:                              # %for.end60
                                        #   in Loop: Header=BB46_17 Depth=1
	jmp	.LBB46_23
.LBB46_23:                              # %for.inc61
                                        #   in Loop: Header=BB46_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_17
.LBB46_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB46_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_27 Depth 2
                                        #       Child Loop BB46_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB46_25 Depth=1
	movl	$0, -12(%rbp)
.LBB46_27:                              # %for.cond69
                                        #   Parent Loop BB46_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB46_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB46_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB46_29:                              # %for.cond85
                                        #   Parent Loop BB46_25 Depth=1
                                        #     Parent Loop BB46_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB46_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB46_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_29
.LBB46_32:                              # %for.end99
                                        #   in Loop: Header=BB46_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB46_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB46_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB46_34
	jp	.LBB46_34
	jmp	.LBB46_35
.LBB46_34:                              # %if.then106
                                        #   in Loop: Header=BB46_27 Depth=2
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB46_36
.LBB46_35:                              # %if.else
                                        #   in Loop: Header=BB46_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB46_36:                              # %if.end
                                        #   in Loop: Header=BB46_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB46_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB46_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB46_39
.LBB46_38:                              # %if.then137
                                        #   in Loop: Header=BB46_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB46_39:                              # %if.end143
                                        #   in Loop: Header=BB46_27 Depth=2
	jmp	.LBB46_47
.LBB46_40:                              # %if.else144
                                        #   in Loop: Header=BB46_27 Depth=2
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB46_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB46_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB46_46
.LBB46_42:                              # %cond.false168
                                        #   in Loop: Header=BB46_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB46_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB46_27 Depth=2
	movl	$127, %eax
	jmp	.LBB46_45
.LBB46_44:                              # %cond.false177
                                        #   in Loop: Header=BB46_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB46_45:                              # %cond.end183
                                        #   in Loop: Header=BB46_27 Depth=2
.LBB46_46:                              # %cond.end185
                                        #   in Loop: Header=BB46_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB46_47:                              # %if.end197
                                        #   in Loop: Header=BB46_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB46_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_27
.LBB46_49:                              # %for.end210
                                        #   in Loop: Header=BB46_25 Depth=1
	jmp	.LBB46_50
.LBB46_50:                              # %for.inc211
                                        #   in Loop: Header=BB46_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_25
.LBB46_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB46_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_54 Depth 2
                                        #       Child Loop BB46_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB46_52 Depth=1
	movl	$0, -32(%rbp)
.LBB46_54:                              # %for.cond219
                                        #   Parent Loop BB46_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB46_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB46_54 Depth=2
	movl	$0, -36(%rbp)
.LBB46_56:                              # %for.cond225
                                        #   Parent Loop BB46_52 Depth=1
                                        #     Parent Loop BB46_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB46_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB46_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB46_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB46_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB46_60
.LBB46_59:                              # %if.then246
                                        #   in Loop: Header=BB46_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB46_63
.LBB46_60:                              # %if.end247
                                        #   in Loop: Header=BB46_56 Depth=3
	jmp	.LBB46_61
.LBB46_61:                              # %for.inc248
                                        #   in Loop: Header=BB46_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB46_56
.LBB46_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB46_54 Depth=2
	jmp	.LBB46_63
.LBB46_63:                              # %for.end250
                                        #   in Loop: Header=BB46_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB46_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB46_52 Depth=1
	jmp	.LBB46_68
.LBB46_65:                              # %if.end254
                                        #   in Loop: Header=BB46_54 Depth=2
	jmp	.LBB46_66
.LBB46_66:                              # %for.inc255
                                        #   in Loop: Header=BB46_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_54
.LBB46_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB46_52 Depth=1
	jmp	.LBB46_68
.LBB46_68:                              # %for.end257
                                        #   in Loop: Header=BB46_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB46_70
# %bb.69:                               # %if.then260
	jmp	.LBB46_73
.LBB46_70:                              # %if.end261
                                        #   in Loop: Header=BB46_52 Depth=1
	jmp	.LBB46_71
.LBB46_71:                              # %for.inc262
                                        #   in Loop: Header=BB46_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_52
.LBB46_72:                              # %for.end264.loopexit
	jmp	.LBB46_73
.LBB46_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$2141255338, -60(%rbp)  # imm = 0x7FA0F6AA
	jne	.LBB46_75
.LBB46_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_74
.Lfunc_end46:
	.size	test_wp_P_slice.43, .Lfunc_end46-test_wp_P_slice.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.44
.LCPI47_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.44
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.44,@function
estimate_weighting_factor_B_slice.44:   # @estimate_weighting_factor_B_slice.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1078207784, -88(%rbp)  # imm = 0x40442528
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB47_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB47_4
.LBB47_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB47_4
.LBB47_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB47_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB47_7
.LBB47_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB47_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB47_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_10 Depth 2
                                        #       Child Loop BB47_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	$0, -8(%rbp)
.LBB47_10:                              # %for.cond14
                                        #   Parent Loop BB47_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB47_10 Depth=2
	movl	$0, -16(%rbp)
.LBB47_12:                              # %for.cond19
                                        #   Parent Loop BB47_8 Depth=1
                                        #     Parent Loop BB47_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB47_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB47_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB47_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_12
.LBB47_15:                              # %for.end
                                        #   in Loop: Header=BB47_10 Depth=2
	jmp	.LBB47_16
.LBB47_16:                              # %for.inc50
                                        #   in Loop: Header=BB47_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_10
.LBB47_17:                              # %for.end52
                                        #   in Loop: Header=BB47_8 Depth=1
	jmp	.LBB47_18
.LBB47_18:                              # %for.inc53
                                        #   in Loop: Header=BB47_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_8
.LBB47_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB47_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_22 Depth 2
                                        #       Child Loop BB47_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB47_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB47_20 Depth=1
	movl	$0, -8(%rbp)
.LBB47_22:                              # %for.cond59
                                        #   Parent Loop BB47_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB47_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB47_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB47_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB47_29
.LBB47_25:                              # %cond.false70
                                        #   in Loop: Header=BB47_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB47_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	$127, %eax
	jmp	.LBB47_28
.LBB47_27:                              # %cond.false80
                                        #   in Loop: Header=BB47_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB47_28:                              # %cond.end88
                                        #   in Loop: Header=BB47_22 Depth=2
.LBB47_29:                              # %cond.end90
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB47_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB47_35
.LBB47_31:                              # %cond.false99
                                        #   in Loop: Header=BB47_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB47_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	$127, %eax
	jmp	.LBB47_34
.LBB47_33:                              # %cond.false107
                                        #   in Loop: Header=BB47_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB47_34:                              # %cond.end113
                                        #   in Loop: Header=BB47_22 Depth=2
.LBB47_35:                              # %cond.end115
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB47_36:                              # %for.cond117
                                        #   Parent Loop BB47_20 Depth=1
                                        #     Parent Loop BB47_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB47_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB47_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB47_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB47_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB47_49
.LBB47_39:                              # %if.else154
                                        #   in Loop: Header=BB47_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB47_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB47_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB47_45
.LBB47_41:                              # %cond.false160
                                        #   in Loop: Header=BB47_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB47_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB47_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB47_44
.LBB47_43:                              # %cond.false166
                                        #   in Loop: Header=BB47_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB47_44:                              # %cond.end170
                                        #   in Loop: Header=BB47_36 Depth=3
.LBB47_45:                              # %cond.end172
                                        #   in Loop: Header=BB47_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB47_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB47_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB47_48
.LBB47_47:                              # %if.then198
                                        #   in Loop: Header=BB47_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB47_48:                              # %if.end208
                                        #   in Loop: Header=BB47_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB47_49:                              # %if.end238
                                        #   in Loop: Header=BB47_36 Depth=3
	jmp	.LBB47_50
.LBB47_50:                              # %for.inc239
                                        #   in Loop: Header=BB47_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_36
.LBB47_51:                              # %for.end241
                                        #   in Loop: Header=BB47_22 Depth=2
	jmp	.LBB47_52
.LBB47_52:                              # %for.inc242
                                        #   in Loop: Header=BB47_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_22
.LBB47_53:                              # %for.end244
                                        #   in Loop: Header=BB47_20 Depth=1
	jmp	.LBB47_54
.LBB47_54:                              # %for.inc245
                                        #   in Loop: Header=BB47_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_20
.LBB47_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB47_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB47_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_59 Depth 2
                                        #       Child Loop BB47_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB47_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB47_57 Depth=1
	movl	$0, -8(%rbp)
.LBB47_59:                              # %for.cond254
                                        #   Parent Loop BB47_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB47_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB47_59 Depth=2
	movl	$0, -20(%rbp)
.LBB47_61:                              # %for.cond257
                                        #   Parent Loop BB47_57 Depth=1
                                        #     Parent Loop BB47_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB47_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB47_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB47_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB47_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB47_65
.LBB47_64:                              # %cond.false262
                                        #   in Loop: Header=BB47_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB47_65:                              # %cond.end263
                                        #   in Loop: Header=BB47_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB47_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_61
.LBB47_67:                              # %for.end295
                                        #   in Loop: Header=BB47_59 Depth=2
	jmp	.LBB47_68
.LBB47_68:                              # %for.inc296
                                        #   in Loop: Header=BB47_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_59
.LBB47_69:                              # %for.end298
                                        #   in Loop: Header=BB47_57 Depth=1
	jmp	.LBB47_70
.LBB47_70:                              # %for.inc299
                                        #   in Loop: Header=BB47_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_57
.LBB47_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB47_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB47_72 Depth=1
	movl	$0, -24(%rbp)
.LBB47_74:                              # %for.cond306
                                        #   Parent Loop BB47_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB47_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB47_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_74
.LBB47_77:                              # %for.end346
                                        #   in Loop: Header=BB47_72 Depth=1
	jmp	.LBB47_78
.LBB47_78:                              # %for.inc347
                                        #   in Loop: Header=BB47_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_72
.LBB47_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB47_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_82 Depth 2
                                        #       Child Loop BB47_84 Depth 3
                                        #       Child Loop BB47_88 Depth 3
                                        #         Child Loop BB47_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB47_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB47_80 Depth=1
	movl	$0, -8(%rbp)
.LBB47_82:                              # %for.cond353
                                        #   Parent Loop BB47_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_84 Depth 3
                                        #       Child Loop BB47_88 Depth 3
                                        #         Child Loop BB47_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB47_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	$0, -16(%rbp)
.LBB47_84:                              # %for.cond356
                                        #   Parent Loop BB47_80 Depth=1
                                        #     Parent Loop BB47_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB47_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_84
.LBB47_87:                              # %for.end380
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	$0, -16(%rbp)
.LBB47_88:                              # %for.cond381
                                        #   Parent Loop BB47_80 Depth=1
                                        #     Parent Loop BB47_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB47_88 Depth=3
	movl	$0, -32(%rbp)
.LBB47_90:                              # %for.cond387
                                        #   Parent Loop BB47_80 Depth=1
                                        #     Parent Loop BB47_82 Depth=2
                                        #       Parent Loop BB47_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB47_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB47_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB47_90
.LBB47_93:                              # %for.end421
                                        #   in Loop: Header=BB47_88 Depth=3
	jmp	.LBB47_94
.LBB47_94:                              # %for.inc422
                                        #   in Loop: Header=BB47_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_88
.LBB47_95:                              # %for.end424
                                        #   in Loop: Header=BB47_82 Depth=2
	jmp	.LBB47_96
.LBB47_96:                              # %for.inc425
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_82
.LBB47_97:                              # %for.end427
                                        #   in Loop: Header=BB47_80 Depth=1
	jmp	.LBB47_98
.LBB47_98:                              # %for.inc428
                                        #   in Loop: Header=BB47_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_80
.LBB47_99:                              # %for.end430
	jmp	.LBB47_189
.LBB47_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB47_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB47_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB47_101 Depth=1
	movl	$0, -8(%rbp)
.LBB47_103:                             # %for.cond436
                                        #   Parent Loop BB47_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB47_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB47_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB47_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_103
.LBB47_106:                             # %for.end447
                                        #   in Loop: Header=BB47_101 Depth=1
	jmp	.LBB47_107
.LBB47_107:                             # %for.inc448
                                        #   in Loop: Header=BB47_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_101
.LBB47_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB47_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_111 Depth 2
                                        #       Child Loop BB47_113 Depth 3
                                        #       Child Loop BB47_123 Depth 3
                                        #       Child Loop BB47_133 Depth 3
                                        #         Child Loop BB47_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB47_109 Depth=1
	movl	$0, -16(%rbp)
.LBB47_111:                             # %for.cond456
                                        #   Parent Loop BB47_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_113 Depth 3
                                        #       Child Loop BB47_123 Depth 3
                                        #       Child Loop BB47_133 Depth 3
                                        #         Child Loop BB47_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB47_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB47_113:                             # %for.cond476
                                        #   Parent Loop BB47_109 Depth=1
                                        #     Parent Loop BB47_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB47_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB47_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_113
.LBB47_116:                             # %for.end493
                                        #   in Loop: Header=BB47_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB47_117
	jp	.LBB47_117
	jmp	.LBB47_118
.LBB47_117:                             # %if.then500
                                        #   in Loop: Header=BB47_111 Depth=2
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_119
.LBB47_118:                             # %if.else511
                                        #   in Loop: Header=BB47_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB47_119:                             # %if.end513
                                        #   in Loop: Header=BB47_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB47_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB47_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB47_122
.LBB47_121:                             # %if.then519
                                        #   in Loop: Header=BB47_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB47_122:                             # %if.end521
                                        #   in Loop: Header=BB47_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB47_123:                             # %for.cond554
                                        #   Parent Loop BB47_109 Depth=1
                                        #     Parent Loop BB47_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB47_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB47_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB47_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB47_130
.LBB47_126:                             # %cond.false571
                                        #   in Loop: Header=BB47_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB47_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB47_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_129
.LBB47_128:                             # %cond.false583
                                        #   in Loop: Header=BB47_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB47_129:                             # %cond.end591
                                        #   in Loop: Header=BB47_123 Depth=3
.LBB47_130:                             # %cond.end593
                                        #   in Loop: Header=BB47_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB47_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_123
.LBB47_132:                             # %for.end600
                                        #   in Loop: Header=BB47_111 Depth=2
	movl	$0, -4(%rbp)
.LBB47_133:                             # %for.cond601
                                        #   Parent Loop BB47_109 Depth=1
                                        #     Parent Loop BB47_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB47_133 Depth=3
	movl	$0, -8(%rbp)
.LBB47_135:                             # %for.cond608
                                        #   Parent Loop BB47_109 Depth=1
                                        #     Parent Loop BB47_111 Depth=2
                                        #       Parent Loop BB47_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB47_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB47_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB47_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB47_142
.LBB47_138:                             # %cond.false630
                                        #   in Loop: Header=BB47_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB47_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB47_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_141
.LBB47_140:                             # %cond.false648
                                        #   in Loop: Header=BB47_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB47_141:                             # %cond.end661
                                        #   in Loop: Header=BB47_135 Depth=4
.LBB47_142:                             # %cond.end663
                                        #   in Loop: Header=BB47_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB47_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_135
.LBB47_144:                             # %for.end675
                                        #   in Loop: Header=BB47_133 Depth=3
	jmp	.LBB47_145
.LBB47_145:                             # %for.inc676
                                        #   in Loop: Header=BB47_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_133
.LBB47_146:                             # %for.end678
                                        #   in Loop: Header=BB47_111 Depth=2
	jmp	.LBB47_147
.LBB47_147:                             # %for.inc679
                                        #   in Loop: Header=BB47_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_111
.LBB47_148:                             # %for.end681
                                        #   in Loop: Header=BB47_109 Depth=1
	jmp	.LBB47_149
.LBB47_149:                             # %for.inc682
                                        #   in Loop: Header=BB47_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_109
.LBB47_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB47_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB47_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_154 Depth 2
                                        #       Child Loop BB47_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB47_152 Depth=1
	movl	$0, -24(%rbp)
.LBB47_154:                             # %for.cond694
                                        #   Parent Loop BB47_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB47_154 Depth=2
	movl	$0, -20(%rbp)
.LBB47_156:                             # %for.cond700
                                        #   Parent Loop BB47_152 Depth=1
                                        #     Parent Loop BB47_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB47_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB47_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB47_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_156
.LBB47_159:                             # %for.end730
                                        #   in Loop: Header=BB47_154 Depth=2
	jmp	.LBB47_160
.LBB47_160:                             # %for.inc731
                                        #   in Loop: Header=BB47_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_154
.LBB47_161:                             # %for.end733
                                        #   in Loop: Header=BB47_152 Depth=1
	jmp	.LBB47_162
.LBB47_162:                             # %for.inc734
                                        #   in Loop: Header=BB47_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_152
.LBB47_163:                             # %for.end736
	jmp	.LBB47_173
.LBB47_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB47_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB47_165 Depth=1
	movl	$0, -24(%rbp)
.LBB47_167:                             # %for.cond743
                                        #   Parent Loop BB47_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB47_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB47_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_167
.LBB47_170:                             # %for.end784
                                        #   in Loop: Header=BB47_165 Depth=1
	jmp	.LBB47_171
.LBB47_171:                             # %for.inc785
                                        #   in Loop: Header=BB47_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_165
.LBB47_172:                             # %for.end787
	jmp	.LBB47_173
.LBB47_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB47_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_176 Depth 2
                                        #       Child Loop BB47_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB47_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB47_174 Depth=1
	movl	$0, -8(%rbp)
.LBB47_176:                             # %for.cond793
                                        #   Parent Loop BB47_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB47_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB47_176 Depth=2
	movl	$0, -20(%rbp)
.LBB47_178:                             # %for.cond797
                                        #   Parent Loop BB47_174 Depth=1
                                        #     Parent Loop BB47_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB47_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB47_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB47_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB47_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB47_182
.LBB47_181:                             # %cond.false804
                                        #   in Loop: Header=BB47_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB47_182:                             # %cond.end805
                                        #   in Loop: Header=BB47_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB47_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_178
.LBB47_184:                             # %for.end833
                                        #   in Loop: Header=BB47_176 Depth=2
	jmp	.LBB47_185
.LBB47_185:                             # %for.inc834
                                        #   in Loop: Header=BB47_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_176
.LBB47_186:                             # %for.end836
                                        #   in Loop: Header=BB47_174 Depth=1
	jmp	.LBB47_187
.LBB47_187:                             # %for.inc837
                                        #   in Loop: Header=BB47_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_174
.LBB47_188:                             # %for.end839
	jmp	.LBB47_189
.LBB47_189:                             # %if.end840
	cmpl	$1078207784, -88(%rbp)  # imm = 0x40442528
	jne	.LBB47_191
.LBB47_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_190
.Lfunc_end47:
	.size	estimate_weighting_factor_B_slice.44, .Lfunc_end47-estimate_weighting_factor_B_slice.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.45
.LCPI48_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.45
	.p2align	4, 0x90
	.type	test_wp_P_slice.45,@function
test_wp_P_slice.45:                     # @test_wp_P_slice.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1161992527, -64(%rbp)  # imm = 0x4542994F
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB48_4
.LBB48_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB48_4
.LBB48_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB48_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_7 Depth 2
                                        #       Child Loop BB48_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB48_5 Depth=1
	movl	$0, -24(%rbp)
.LBB48_7:                               # %for.cond9
                                        #   Parent Loop BB48_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB48_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB48_7 Depth=2
	movl	$0, -12(%rbp)
.LBB48_9:                               # %for.cond14
                                        #   Parent Loop BB48_5 Depth=1
                                        #     Parent Loop BB48_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB48_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB48_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB48_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_9
.LBB48_12:                              # %for.end
                                        #   in Loop: Header=BB48_7 Depth=2
	jmp	.LBB48_13
.LBB48_13:                              # %for.inc41
                                        #   in Loop: Header=BB48_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_7
.LBB48_14:                              # %for.end43
                                        #   in Loop: Header=BB48_5 Depth=1
	jmp	.LBB48_15
.LBB48_15:                              # %for.inc44
                                        #   in Loop: Header=BB48_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_5
.LBB48_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB48_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB48_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	$0, -24(%rbp)
.LBB48_19:                              # %for.cond50
                                        #   Parent Loop BB48_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB48_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB48_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB48_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_19
.LBB48_22:                              # %for.end60
                                        #   in Loop: Header=BB48_17 Depth=1
	jmp	.LBB48_23
.LBB48_23:                              # %for.inc61
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_17
.LBB48_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB48_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_27 Depth 2
                                        #       Child Loop BB48_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	$0, -12(%rbp)
.LBB48_27:                              # %for.cond69
                                        #   Parent Loop BB48_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB48_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB48_29:                              # %for.cond85
                                        #   Parent Loop BB48_25 Depth=1
                                        #     Parent Loop BB48_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB48_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB48_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_29
.LBB48_32:                              # %for.end99
                                        #   in Loop: Header=BB48_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB48_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB48_34
	jp	.LBB48_34
	jmp	.LBB48_35
.LBB48_34:                              # %if.then106
                                        #   in Loop: Header=BB48_27 Depth=2
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB48_36
.LBB48_35:                              # %if.else
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB48_36:                              # %if.end
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB48_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB48_39
.LBB48_38:                              # %if.then137
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB48_39:                              # %if.end143
                                        #   in Loop: Header=BB48_27 Depth=2
	jmp	.LBB48_47
.LBB48_40:                              # %if.else144
                                        #   in Loop: Header=BB48_27 Depth=2
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB48_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB48_46
.LBB48_42:                              # %cond.false168
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB48_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	$127, %eax
	jmp	.LBB48_45
.LBB48_44:                              # %cond.false177
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB48_45:                              # %cond.end183
                                        #   in Loop: Header=BB48_27 Depth=2
.LBB48_46:                              # %cond.end185
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB48_47:                              # %if.end197
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_27
.LBB48_49:                              # %for.end210
                                        #   in Loop: Header=BB48_25 Depth=1
	jmp	.LBB48_50
.LBB48_50:                              # %for.inc211
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_25
.LBB48_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB48_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_54 Depth 2
                                        #       Child Loop BB48_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	$0, -36(%rbp)
.LBB48_54:                              # %for.cond219
                                        #   Parent Loop BB48_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB48_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	$0, -32(%rbp)
.LBB48_56:                              # %for.cond225
                                        #   Parent Loop BB48_52 Depth=1
                                        #     Parent Loop BB48_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB48_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB48_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB48_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB48_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB48_60
.LBB48_59:                              # %if.then246
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB48_63
.LBB48_60:                              # %if.end247
                                        #   in Loop: Header=BB48_56 Depth=3
	jmp	.LBB48_61
.LBB48_61:                              # %for.inc248
                                        #   in Loop: Header=BB48_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB48_56
.LBB48_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB48_54 Depth=2
	jmp	.LBB48_63
.LBB48_63:                              # %for.end250
                                        #   in Loop: Header=BB48_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB48_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_68
.LBB48_65:                              # %if.end254
                                        #   in Loop: Header=BB48_54 Depth=2
	jmp	.LBB48_66
.LBB48_66:                              # %for.inc255
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_54
.LBB48_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_68
.LBB48_68:                              # %for.end257
                                        #   in Loop: Header=BB48_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB48_70
# %bb.69:                               # %if.then260
	jmp	.LBB48_73
.LBB48_70:                              # %if.end261
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_71
.LBB48_71:                              # %for.inc262
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_52
.LBB48_72:                              # %for.end264.loopexit
	jmp	.LBB48_73
.LBB48_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1161992527, -64(%rbp)  # imm = 0x4542994F
	jne	.LBB48_75
.LBB48_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_74
.Lfunc_end48:
	.size	test_wp_P_slice.45, .Lfunc_end48-test_wp_P_slice.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.46
.LCPI49_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.46
	.p2align	4, 0x90
	.type	test_wp_B_slice.46,@function
test_wp_B_slice.46:                     # @test_wp_B_slice.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1682804188, -88(%rbp)  # imm = 0x644D8DDC
	movl	%edi, -76(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB49_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB49_4
.LBB49_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB49_4
.LBB49_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB49_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_7 Depth 2
                                        #       Child Loop BB49_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB49_5 Depth=1
	movl	$0, -24(%rbp)
.LBB49_7:                               # %for.cond9
                                        #   Parent Loop BB49_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB49_7 Depth=2
	movl	$0, -32(%rbp)
.LBB49_9:                               # %for.cond14
                                        #   Parent Loop BB49_5 Depth=1
                                        #     Parent Loop BB49_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB49_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB49_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB49_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB49_9
.LBB49_12:                              # %for.end
                                        #   in Loop: Header=BB49_7 Depth=2
	jmp	.LBB49_13
.LBB49_13:                              # %for.inc41
                                        #   in Loop: Header=BB49_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_7
.LBB49_14:                              # %for.end43
                                        #   in Loop: Header=BB49_5 Depth=1
	jmp	.LBB49_15
.LBB49_15:                              # %for.inc44
                                        #   in Loop: Header=BB49_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_5
.LBB49_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB49_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_19 Depth 2
                                        #       Child Loop BB49_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB49_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	$0, -24(%rbp)
.LBB49_19:                              # %for.cond50
                                        #   Parent Loop BB49_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB49_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB49_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB49_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB49_26
.LBB49_22:                              # %cond.false61
                                        #   in Loop: Header=BB49_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB49_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$127, %eax
	jmp	.LBB49_25
.LBB49_24:                              # %cond.false71
                                        #   in Loop: Header=BB49_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB49_25:                              # %cond.end79
                                        #   in Loop: Header=BB49_19 Depth=2
.LBB49_26:                              # %cond.end81
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB49_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB49_32
.LBB49_28:                              # %cond.false90
                                        #   in Loop: Header=BB49_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB49_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	$127, %eax
	jmp	.LBB49_31
.LBB49_30:                              # %cond.false98
                                        #   in Loop: Header=BB49_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB49_31:                              # %cond.end104
                                        #   in Loop: Header=BB49_19 Depth=2
.LBB49_32:                              # %cond.end106
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB49_33:                              # %for.cond108
                                        #   Parent Loop BB49_17 Depth=1
                                        #     Parent Loop BB49_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB49_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB49_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB49_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB49_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB49_46
.LBB49_36:                              # %if.else
                                        #   in Loop: Header=BB49_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB49_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB49_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB49_42
.LBB49_38:                              # %cond.false145
                                        #   in Loop: Header=BB49_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB49_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB49_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB49_41
.LBB49_40:                              # %cond.false151
                                        #   in Loop: Header=BB49_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB49_41:                              # %cond.end155
                                        #   in Loop: Header=BB49_33 Depth=3
.LBB49_42:                              # %cond.end157
                                        #   in Loop: Header=BB49_33 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB49_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB49_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB49_45
.LBB49_44:                              # %if.then183
                                        #   in Loop: Header=BB49_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB49_45:                              # %if.end
                                        #   in Loop: Header=BB49_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB49_46:                              # %if.end220
                                        #   in Loop: Header=BB49_33 Depth=3
	jmp	.LBB49_47
.LBB49_47:                              # %for.inc221
                                        #   in Loop: Header=BB49_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_33
.LBB49_48:                              # %for.end223
                                        #   in Loop: Header=BB49_19 Depth=2
	jmp	.LBB49_49
.LBB49_49:                              # %for.inc224
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_19
.LBB49_50:                              # %for.end226
                                        #   in Loop: Header=BB49_17 Depth=1
	jmp	.LBB49_51
.LBB49_51:                              # %for.inc227
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_17
.LBB49_52:                              # %for.end229
	cmpl	$1, -76(%rbp)
	jne	.LBB49_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB49_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_56 Depth 2
                                        #       Child Loop BB49_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB49_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB49_54 Depth=1
	movl	$0, -24(%rbp)
.LBB49_56:                              # %for.cond235
                                        #   Parent Loop BB49_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB49_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB49_56 Depth=2
	movl	$0, -20(%rbp)
.LBB49_58:                              # %for.cond238
                                        #   Parent Loop BB49_54 Depth=1
                                        #     Parent Loop BB49_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB49_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB49_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB49_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB49_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB49_62
.LBB49_61:                              # %cond.false243
                                        #   in Loop: Header=BB49_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB49_62:                              # %cond.end244
                                        #   in Loop: Header=BB49_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -80(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB49_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_58
.LBB49_64:                              # %for.end276
                                        #   in Loop: Header=BB49_56 Depth=2
	jmp	.LBB49_65
.LBB49_65:                              # %for.inc277
                                        #   in Loop: Header=BB49_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_56
.LBB49_66:                              # %for.end279
                                        #   in Loop: Header=BB49_54 Depth=1
	jmp	.LBB49_67
.LBB49_67:                              # %for.inc280
                                        #   in Loop: Header=BB49_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_54
.LBB49_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB49_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB49_69 Depth=1
	movl	$0, -28(%rbp)
.LBB49_71:                              # %for.cond287
                                        #   Parent Loop BB49_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB49_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB49_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_71
.LBB49_74:                              # %for.end327
                                        #   in Loop: Header=BB49_69 Depth=1
	jmp	.LBB49_75
.LBB49_75:                              # %for.inc328
                                        #   in Loop: Header=BB49_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_69
.LBB49_76:                              # %for.end330
	jmp	.LBB49_142
.LBB49_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB49_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB49_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB49_78 Depth=1
	movl	$0, -24(%rbp)
.LBB49_80:                              # %for.cond335
                                        #   Parent Loop BB49_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB49_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB49_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB49_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_80
.LBB49_83:                              # %for.end345
                                        #   in Loop: Header=BB49_78 Depth=1
	jmp	.LBB49_84
.LBB49_84:                              # %for.inc346
                                        #   in Loop: Header=BB49_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_78
.LBB49_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB49_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_88 Depth 2
                                        #       Child Loop BB49_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB49_86 Depth=1
	movl	$0, -32(%rbp)
.LBB49_88:                              # %for.cond354
                                        #   Parent Loop BB49_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB49_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB49_90:                              # %for.cond372
                                        #   Parent Loop BB49_86 Depth=1
                                        #     Parent Loop BB49_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB49_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB49_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_90
.LBB49_93:                              # %for.end389
                                        #   in Loop: Header=BB49_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB49_94
	jp	.LBB49_94
	jmp	.LBB49_95
.LBB49_94:                              # %if.then396
                                        #   in Loop: Header=BB49_88 Depth=2
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB49_96
.LBB49_95:                              # %if.else406
                                        #   in Loop: Header=BB49_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB49_96:                              # %if.end407
                                        #   in Loop: Header=BB49_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB49_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB49_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB49_99
.LBB49_98:                              # %if.then413
                                        #   in Loop: Header=BB49_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB49_99:                              # %if.end414
                                        #   in Loop: Header=BB49_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB49_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB49_88
.LBB49_101:                             # %for.end447
                                        #   in Loop: Header=BB49_86 Depth=1
	jmp	.LBB49_102
.LBB49_102:                             # %for.inc448
                                        #   in Loop: Header=BB49_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_86
.LBB49_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB49_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB49_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_107 Depth 2
                                        #       Child Loop BB49_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB49_105 Depth=1
	movl	$0, -28(%rbp)
.LBB49_107:                             # %for.cond459
                                        #   Parent Loop BB49_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB49_107 Depth=2
	movl	$0, -20(%rbp)
.LBB49_109:                             # %for.cond465
                                        #   Parent Loop BB49_105 Depth=1
                                        #     Parent Loop BB49_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB49_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB49_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB49_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_109
.LBB49_112:                             # %for.end495
                                        #   in Loop: Header=BB49_107 Depth=2
	jmp	.LBB49_113
.LBB49_113:                             # %for.inc496
                                        #   in Loop: Header=BB49_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_107
.LBB49_114:                             # %for.end498
                                        #   in Loop: Header=BB49_105 Depth=1
	jmp	.LBB49_115
.LBB49_115:                             # %for.inc499
                                        #   in Loop: Header=BB49_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_105
.LBB49_116:                             # %for.end501
	jmp	.LBB49_126
.LBB49_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB49_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB49_118 Depth=1
	movl	$0, -28(%rbp)
.LBB49_120:                             # %for.cond508
                                        #   Parent Loop BB49_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB49_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB49_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_120
.LBB49_123:                             # %for.end549
                                        #   in Loop: Header=BB49_118 Depth=1
	jmp	.LBB49_124
.LBB49_124:                             # %for.inc550
                                        #   in Loop: Header=BB49_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_118
.LBB49_125:                             # %for.end552
	jmp	.LBB49_126
.LBB49_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB49_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_129 Depth 2
                                        #       Child Loop BB49_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB49_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB49_127 Depth=1
	movl	$0, -24(%rbp)
.LBB49_129:                             # %for.cond558
                                        #   Parent Loop BB49_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB49_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB49_129 Depth=2
	movl	$0, -20(%rbp)
.LBB49_131:                             # %for.cond562
                                        #   Parent Loop BB49_127 Depth=1
                                        #     Parent Loop BB49_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB49_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB49_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB49_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB49_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB49_135
.LBB49_134:                             # %cond.false569
                                        #   in Loop: Header=BB49_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB49_135:                             # %cond.end570
                                        #   in Loop: Header=BB49_131 Depth=3
	movl	%eax, -80(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB49_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_131
.LBB49_137:                             # %for.end598
                                        #   in Loop: Header=BB49_129 Depth=2
	jmp	.LBB49_138
.LBB49_138:                             # %for.inc599
                                        #   in Loop: Header=BB49_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_129
.LBB49_139:                             # %for.end601
                                        #   in Loop: Header=BB49_127 Depth=1
	jmp	.LBB49_140
.LBB49_140:                             # %for.inc602
                                        #   in Loop: Header=BB49_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_127
.LBB49_141:                             # %for.end604
	jmp	.LBB49_142
.LBB49_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB49_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_145 Depth 2
                                        #       Child Loop BB49_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB49_143 Depth=1
	movl	$0, -28(%rbp)
.LBB49_145:                             # %for.cond611
                                        #   Parent Loop BB49_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB49_145 Depth=2
	movl	$0, -20(%rbp)
.LBB49_147:                             # %for.cond617
                                        #   Parent Loop BB49_143 Depth=1
                                        #     Parent Loop BB49_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB49_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB49_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB49_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB49_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB49_151
.LBB49_150:                             # %if.then638
                                        #   in Loop: Header=BB49_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB49_154
.LBB49_151:                             # %if.end639
                                        #   in Loop: Header=BB49_147 Depth=3
	jmp	.LBB49_152
.LBB49_152:                             # %for.inc640
                                        #   in Loop: Header=BB49_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_147
.LBB49_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB49_145 Depth=2
	jmp	.LBB49_154
.LBB49_154:                             # %for.end642
                                        #   in Loop: Header=BB49_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB49_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB49_143 Depth=1
	jmp	.LBB49_159
.LBB49_156:                             # %if.end646
                                        #   in Loop: Header=BB49_145 Depth=2
	jmp	.LBB49_157
.LBB49_157:                             # %for.inc647
                                        #   in Loop: Header=BB49_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_145
.LBB49_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB49_143 Depth=1
	jmp	.LBB49_159
.LBB49_159:                             # %for.end649
                                        #   in Loop: Header=BB49_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB49_161
# %bb.160:                              # %if.then652
	jmp	.LBB49_164
.LBB49_161:                             # %if.end653
                                        #   in Loop: Header=BB49_143 Depth=1
	jmp	.LBB49_162
.LBB49_162:                             # %for.inc654
                                        #   in Loop: Header=BB49_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_143
.LBB49_163:                             # %for.end656.loopexit
	jmp	.LBB49_164
.LBB49_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1682804188, -88(%rbp)  # imm = 0x644D8DDC
	jne	.LBB49_166
.LBB49_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_165
.Lfunc_end49:
	.size	test_wp_B_slice.46, .Lfunc_end49-test_wp_B_slice.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.47
.LCPI50_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.47
	.p2align	4, 0x90
	.type	test_wp_B_slice.47,@function
test_wp_B_slice.47:                     # @test_wp_B_slice.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1336808423, -80(%rbp)  # imm = 0x4FAE13E7
	movl	%edi, -76(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB50_4
.LBB50_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB50_4
.LBB50_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB50_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_7 Depth 2
                                        #       Child Loop BB50_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB50_5 Depth=1
	movl	$0, -24(%rbp)
.LBB50_7:                               # %for.cond9
                                        #   Parent Loop BB50_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB50_7 Depth=2
	movl	$0, -32(%rbp)
.LBB50_9:                               # %for.cond14
                                        #   Parent Loop BB50_5 Depth=1
                                        #     Parent Loop BB50_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB50_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB50_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB50_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_9
.LBB50_12:                              # %for.end
                                        #   in Loop: Header=BB50_7 Depth=2
	jmp	.LBB50_13
.LBB50_13:                              # %for.inc41
                                        #   in Loop: Header=BB50_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_7
.LBB50_14:                              # %for.end43
                                        #   in Loop: Header=BB50_5 Depth=1
	jmp	.LBB50_15
.LBB50_15:                              # %for.inc44
                                        #   in Loop: Header=BB50_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_5
.LBB50_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB50_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_19 Depth 2
                                        #       Child Loop BB50_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB50_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB50_17 Depth=1
	movl	$0, -24(%rbp)
.LBB50_19:                              # %for.cond50
                                        #   Parent Loop BB50_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB50_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB50_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB50_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB50_26
.LBB50_22:                              # %cond.false61
                                        #   in Loop: Header=BB50_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB50_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$127, %eax
	jmp	.LBB50_25
.LBB50_24:                              # %cond.false71
                                        #   in Loop: Header=BB50_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB50_25:                              # %cond.end79
                                        #   in Loop: Header=BB50_19 Depth=2
.LBB50_26:                              # %cond.end81
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB50_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB50_32
.LBB50_28:                              # %cond.false90
                                        #   in Loop: Header=BB50_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB50_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$127, %eax
	jmp	.LBB50_31
.LBB50_30:                              # %cond.false98
                                        #   in Loop: Header=BB50_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB50_31:                              # %cond.end104
                                        #   in Loop: Header=BB50_19 Depth=2
.LBB50_32:                              # %cond.end106
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB50_33:                              # %for.cond108
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB50_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB50_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB50_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB50_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB50_46
.LBB50_36:                              # %if.else
                                        #   in Loop: Header=BB50_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB50_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB50_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB50_42
.LBB50_38:                              # %cond.false145
                                        #   in Loop: Header=BB50_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB50_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB50_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB50_41
.LBB50_40:                              # %cond.false151
                                        #   in Loop: Header=BB50_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB50_41:                              # %cond.end155
                                        #   in Loop: Header=BB50_33 Depth=3
.LBB50_42:                              # %cond.end157
                                        #   in Loop: Header=BB50_33 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB50_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB50_45
.LBB50_44:                              # %if.then183
                                        #   in Loop: Header=BB50_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB50_45:                              # %if.end
                                        #   in Loop: Header=BB50_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB50_46:                              # %if.end220
                                        #   in Loop: Header=BB50_33 Depth=3
	jmp	.LBB50_47
.LBB50_47:                              # %for.inc221
                                        #   in Loop: Header=BB50_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_33
.LBB50_48:                              # %for.end223
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_49
.LBB50_49:                              # %for.inc224
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_19
.LBB50_50:                              # %for.end226
                                        #   in Loop: Header=BB50_17 Depth=1
	jmp	.LBB50_51
.LBB50_51:                              # %for.inc227
                                        #   in Loop: Header=BB50_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_17
.LBB50_52:                              # %for.end229
	cmpl	$1, -76(%rbp)
	jne	.LBB50_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB50_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_56 Depth 2
                                        #       Child Loop BB50_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB50_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB50_54 Depth=1
	movl	$0, -24(%rbp)
.LBB50_56:                              # %for.cond235
                                        #   Parent Loop BB50_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB50_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB50_56 Depth=2
	movl	$0, -20(%rbp)
.LBB50_58:                              # %for.cond238
                                        #   Parent Loop BB50_54 Depth=1
                                        #     Parent Loop BB50_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB50_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB50_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB50_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB50_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB50_62
.LBB50_61:                              # %cond.false243
                                        #   in Loop: Header=BB50_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB50_62:                              # %cond.end244
                                        #   in Loop: Header=BB50_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB50_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_58
.LBB50_64:                              # %for.end276
                                        #   in Loop: Header=BB50_56 Depth=2
	jmp	.LBB50_65
.LBB50_65:                              # %for.inc277
                                        #   in Loop: Header=BB50_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_56
.LBB50_66:                              # %for.end279
                                        #   in Loop: Header=BB50_54 Depth=1
	jmp	.LBB50_67
.LBB50_67:                              # %for.inc280
                                        #   in Loop: Header=BB50_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_54
.LBB50_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB50_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB50_69 Depth=1
	movl	$0, -28(%rbp)
.LBB50_71:                              # %for.cond287
                                        #   Parent Loop BB50_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB50_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB50_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_71
.LBB50_74:                              # %for.end327
                                        #   in Loop: Header=BB50_69 Depth=1
	jmp	.LBB50_75
.LBB50_75:                              # %for.inc328
                                        #   in Loop: Header=BB50_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_69
.LBB50_76:                              # %for.end330
	jmp	.LBB50_142
.LBB50_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB50_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB50_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB50_78 Depth=1
	movl	$0, -24(%rbp)
.LBB50_80:                              # %for.cond335
                                        #   Parent Loop BB50_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB50_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB50_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB50_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_80
.LBB50_83:                              # %for.end345
                                        #   in Loop: Header=BB50_78 Depth=1
	jmp	.LBB50_84
.LBB50_84:                              # %for.inc346
                                        #   in Loop: Header=BB50_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_78
.LBB50_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB50_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_88 Depth 2
                                        #       Child Loop BB50_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB50_86 Depth=1
	movl	$0, -32(%rbp)
.LBB50_88:                              # %for.cond354
                                        #   Parent Loop BB50_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB50_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB50_90:                              # %for.cond372
                                        #   Parent Loop BB50_86 Depth=1
                                        #     Parent Loop BB50_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB50_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB50_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_90
.LBB50_93:                              # %for.end389
                                        #   in Loop: Header=BB50_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB50_94
	jp	.LBB50_94
	jmp	.LBB50_95
.LBB50_94:                              # %if.then396
                                        #   in Loop: Header=BB50_88 Depth=2
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB50_96
.LBB50_95:                              # %if.else406
                                        #   in Loop: Header=BB50_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB50_96:                              # %if.end407
                                        #   in Loop: Header=BB50_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB50_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB50_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB50_99
.LBB50_98:                              # %if.then413
                                        #   in Loop: Header=BB50_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB50_99:                              # %if.end414
                                        #   in Loop: Header=BB50_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB50_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_88
.LBB50_101:                             # %for.end447
                                        #   in Loop: Header=BB50_86 Depth=1
	jmp	.LBB50_102
.LBB50_102:                             # %for.inc448
                                        #   in Loop: Header=BB50_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_86
.LBB50_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB50_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB50_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_107 Depth 2
                                        #       Child Loop BB50_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB50_105 Depth=1
	movl	$0, -28(%rbp)
.LBB50_107:                             # %for.cond459
                                        #   Parent Loop BB50_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB50_107 Depth=2
	movl	$0, -20(%rbp)
.LBB50_109:                             # %for.cond465
                                        #   Parent Loop BB50_105 Depth=1
                                        #     Parent Loop BB50_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB50_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB50_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB50_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_109
.LBB50_112:                             # %for.end495
                                        #   in Loop: Header=BB50_107 Depth=2
	jmp	.LBB50_113
.LBB50_113:                             # %for.inc496
                                        #   in Loop: Header=BB50_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_107
.LBB50_114:                             # %for.end498
                                        #   in Loop: Header=BB50_105 Depth=1
	jmp	.LBB50_115
.LBB50_115:                             # %for.inc499
                                        #   in Loop: Header=BB50_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_105
.LBB50_116:                             # %for.end501
	jmp	.LBB50_126
.LBB50_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB50_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB50_118 Depth=1
	movl	$0, -28(%rbp)
.LBB50_120:                             # %for.cond508
                                        #   Parent Loop BB50_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB50_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB50_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_120
.LBB50_123:                             # %for.end549
                                        #   in Loop: Header=BB50_118 Depth=1
	jmp	.LBB50_124
.LBB50_124:                             # %for.inc550
                                        #   in Loop: Header=BB50_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_118
.LBB50_125:                             # %for.end552
	jmp	.LBB50_126
.LBB50_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB50_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_129 Depth 2
                                        #       Child Loop BB50_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB50_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB50_127 Depth=1
	movl	$0, -24(%rbp)
.LBB50_129:                             # %for.cond558
                                        #   Parent Loop BB50_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB50_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB50_129 Depth=2
	movl	$0, -20(%rbp)
.LBB50_131:                             # %for.cond562
                                        #   Parent Loop BB50_127 Depth=1
                                        #     Parent Loop BB50_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB50_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB50_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB50_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB50_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB50_135
.LBB50_134:                             # %cond.false569
                                        #   in Loop: Header=BB50_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB50_135:                             # %cond.end570
                                        #   in Loop: Header=BB50_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB50_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_131
.LBB50_137:                             # %for.end598
                                        #   in Loop: Header=BB50_129 Depth=2
	jmp	.LBB50_138
.LBB50_138:                             # %for.inc599
                                        #   in Loop: Header=BB50_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_129
.LBB50_139:                             # %for.end601
                                        #   in Loop: Header=BB50_127 Depth=1
	jmp	.LBB50_140
.LBB50_140:                             # %for.inc602
                                        #   in Loop: Header=BB50_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_127
.LBB50_141:                             # %for.end604
	jmp	.LBB50_142
.LBB50_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB50_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_145 Depth 2
                                        #       Child Loop BB50_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB50_143 Depth=1
	movl	$0, -28(%rbp)
.LBB50_145:                             # %for.cond611
                                        #   Parent Loop BB50_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB50_145 Depth=2
	movl	$0, -20(%rbp)
.LBB50_147:                             # %for.cond617
                                        #   Parent Loop BB50_143 Depth=1
                                        #     Parent Loop BB50_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB50_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB50_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB50_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB50_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB50_151
.LBB50_150:                             # %if.then638
                                        #   in Loop: Header=BB50_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB50_154
.LBB50_151:                             # %if.end639
                                        #   in Loop: Header=BB50_147 Depth=3
	jmp	.LBB50_152
.LBB50_152:                             # %for.inc640
                                        #   in Loop: Header=BB50_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_147
.LBB50_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB50_145 Depth=2
	jmp	.LBB50_154
.LBB50_154:                             # %for.end642
                                        #   in Loop: Header=BB50_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB50_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB50_143 Depth=1
	jmp	.LBB50_159
.LBB50_156:                             # %if.end646
                                        #   in Loop: Header=BB50_145 Depth=2
	jmp	.LBB50_157
.LBB50_157:                             # %for.inc647
                                        #   in Loop: Header=BB50_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_145
.LBB50_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB50_143 Depth=1
	jmp	.LBB50_159
.LBB50_159:                             # %for.end649
                                        #   in Loop: Header=BB50_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB50_161
# %bb.160:                              # %if.then652
	jmp	.LBB50_164
.LBB50_161:                             # %if.end653
                                        #   in Loop: Header=BB50_143 Depth=1
	jmp	.LBB50_162
.LBB50_162:                             # %for.inc654
                                        #   in Loop: Header=BB50_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_143
.LBB50_163:                             # %for.end656.loopexit
	jmp	.LBB50_164
.LBB50_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1336808423, -80(%rbp)  # imm = 0x4FAE13E7
	jne	.LBB50_166
.LBB50_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_165
.Lfunc_end50:
	.size	test_wp_B_slice.47, .Lfunc_end50-test_wp_B_slice.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.48
.LCPI51_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.48
	.p2align	4, 0x90
	.type	test_wp_B_slice.48,@function
test_wp_B_slice.48:                     # @test_wp_B_slice.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1224087477, -84(%rbp)  # imm = 0x48F617B5
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB51_4
.LBB51_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB51_4
.LBB51_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB51_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_7 Depth 2
                                        #       Child Loop BB51_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB51_5 Depth=1
	movl	$0, -24(%rbp)
.LBB51_7:                               # %for.cond9
                                        #   Parent Loop BB51_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB51_7 Depth=2
	movl	$0, -32(%rbp)
.LBB51_9:                               # %for.cond14
                                        #   Parent Loop BB51_5 Depth=1
                                        #     Parent Loop BB51_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB51_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB51_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB51_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB51_9
.LBB51_12:                              # %for.end
                                        #   in Loop: Header=BB51_7 Depth=2
	jmp	.LBB51_13
.LBB51_13:                              # %for.inc41
                                        #   in Loop: Header=BB51_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_7
.LBB51_14:                              # %for.end43
                                        #   in Loop: Header=BB51_5 Depth=1
	jmp	.LBB51_15
.LBB51_15:                              # %for.inc44
                                        #   in Loop: Header=BB51_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_5
.LBB51_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB51_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_19 Depth 2
                                        #       Child Loop BB51_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB51_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB51_17 Depth=1
	movl	$0, -24(%rbp)
.LBB51_19:                              # %for.cond50
                                        #   Parent Loop BB51_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB51_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB51_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB51_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB51_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB51_26
.LBB51_22:                              # %cond.false61
                                        #   in Loop: Header=BB51_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB51_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB51_19 Depth=2
	movl	$127, %eax
	jmp	.LBB51_25
.LBB51_24:                              # %cond.false71
                                        #   in Loop: Header=BB51_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB51_25:                              # %cond.end79
                                        #   in Loop: Header=BB51_19 Depth=2
.LBB51_26:                              # %cond.end81
                                        #   in Loop: Header=BB51_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB51_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB51_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB51_32
.LBB51_28:                              # %cond.false90
                                        #   in Loop: Header=BB51_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB51_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB51_19 Depth=2
	movl	$127, %eax
	jmp	.LBB51_31
.LBB51_30:                              # %cond.false98
                                        #   in Loop: Header=BB51_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB51_31:                              # %cond.end104
                                        #   in Loop: Header=BB51_19 Depth=2
.LBB51_32:                              # %cond.end106
                                        #   in Loop: Header=BB51_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB51_33:                              # %for.cond108
                                        #   Parent Loop BB51_17 Depth=1
                                        #     Parent Loop BB51_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB51_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB51_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB51_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB51_46
.LBB51_36:                              # %if.else
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB51_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB51_42
.LBB51_38:                              # %cond.false145
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB51_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB51_41
.LBB51_40:                              # %cond.false151
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB51_41:                              # %cond.end155
                                        #   in Loop: Header=BB51_33 Depth=3
.LBB51_42:                              # %cond.end157
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB51_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB51_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB51_45
.LBB51_44:                              # %if.then183
                                        #   in Loop: Header=BB51_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB51_45:                              # %if.end
                                        #   in Loop: Header=BB51_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB51_46:                              # %if.end220
                                        #   in Loop: Header=BB51_33 Depth=3
	jmp	.LBB51_47
.LBB51_47:                              # %for.inc221
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_33
.LBB51_48:                              # %for.end223
                                        #   in Loop: Header=BB51_19 Depth=2
	jmp	.LBB51_49
.LBB51_49:                              # %for.inc224
                                        #   in Loop: Header=BB51_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_19
.LBB51_50:                              # %for.end226
                                        #   in Loop: Header=BB51_17 Depth=1
	jmp	.LBB51_51
.LBB51_51:                              # %for.inc227
                                        #   in Loop: Header=BB51_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_17
.LBB51_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB51_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB51_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_56 Depth 2
                                        #       Child Loop BB51_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB51_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB51_54 Depth=1
	movl	$0, -24(%rbp)
.LBB51_56:                              # %for.cond235
                                        #   Parent Loop BB51_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB51_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB51_56 Depth=2
	movl	$0, -20(%rbp)
.LBB51_58:                              # %for.cond238
                                        #   Parent Loop BB51_54 Depth=1
                                        #     Parent Loop BB51_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB51_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB51_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB51_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB51_62
.LBB51_61:                              # %cond.false243
                                        #   in Loop: Header=BB51_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB51_62:                              # %cond.end244
                                        #   in Loop: Header=BB51_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB51_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_58
.LBB51_64:                              # %for.end276
                                        #   in Loop: Header=BB51_56 Depth=2
	jmp	.LBB51_65
.LBB51_65:                              # %for.inc277
                                        #   in Loop: Header=BB51_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_56
.LBB51_66:                              # %for.end279
                                        #   in Loop: Header=BB51_54 Depth=1
	jmp	.LBB51_67
.LBB51_67:                              # %for.inc280
                                        #   in Loop: Header=BB51_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_54
.LBB51_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB51_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB51_69 Depth=1
	movl	$0, -28(%rbp)
.LBB51_71:                              # %for.cond287
                                        #   Parent Loop BB51_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB51_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB51_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB51_71
.LBB51_74:                              # %for.end327
                                        #   in Loop: Header=BB51_69 Depth=1
	jmp	.LBB51_75
.LBB51_75:                              # %for.inc328
                                        #   in Loop: Header=BB51_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_69
.LBB51_76:                              # %for.end330
	jmp	.LBB51_142
.LBB51_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB51_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB51_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB51_78 Depth=1
	movl	$0, -24(%rbp)
.LBB51_80:                              # %for.cond335
                                        #   Parent Loop BB51_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB51_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB51_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB51_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_80
.LBB51_83:                              # %for.end345
                                        #   in Loop: Header=BB51_78 Depth=1
	jmp	.LBB51_84
.LBB51_84:                              # %for.inc346
                                        #   in Loop: Header=BB51_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_78
.LBB51_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB51_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_88 Depth 2
                                        #       Child Loop BB51_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB51_86 Depth=1
	movl	$0, -32(%rbp)
.LBB51_88:                              # %for.cond354
                                        #   Parent Loop BB51_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB51_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB51_90:                              # %for.cond372
                                        #   Parent Loop BB51_86 Depth=1
                                        #     Parent Loop BB51_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB51_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB51_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_90
.LBB51_93:                              # %for.end389
                                        #   in Loop: Header=BB51_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB51_94
	jp	.LBB51_94
	jmp	.LBB51_95
.LBB51_94:                              # %if.then396
                                        #   in Loop: Header=BB51_88 Depth=2
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB51_96
.LBB51_95:                              # %if.else406
                                        #   in Loop: Header=BB51_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB51_96:                              # %if.end407
                                        #   in Loop: Header=BB51_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB51_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB51_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB51_99
.LBB51_98:                              # %if.then413
                                        #   in Loop: Header=BB51_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB51_99:                              # %if.end414
                                        #   in Loop: Header=BB51_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB51_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB51_88
.LBB51_101:                             # %for.end447
                                        #   in Loop: Header=BB51_86 Depth=1
	jmp	.LBB51_102
.LBB51_102:                             # %for.inc448
                                        #   in Loop: Header=BB51_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_86
.LBB51_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB51_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB51_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_107 Depth 2
                                        #       Child Loop BB51_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB51_105 Depth=1
	movl	$0, -28(%rbp)
.LBB51_107:                             # %for.cond459
                                        #   Parent Loop BB51_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB51_107 Depth=2
	movl	$0, -20(%rbp)
.LBB51_109:                             # %for.cond465
                                        #   Parent Loop BB51_105 Depth=1
                                        #     Parent Loop BB51_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB51_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB51_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_109
.LBB51_112:                             # %for.end495
                                        #   in Loop: Header=BB51_107 Depth=2
	jmp	.LBB51_113
.LBB51_113:                             # %for.inc496
                                        #   in Loop: Header=BB51_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB51_107
.LBB51_114:                             # %for.end498
                                        #   in Loop: Header=BB51_105 Depth=1
	jmp	.LBB51_115
.LBB51_115:                             # %for.inc499
                                        #   in Loop: Header=BB51_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_105
.LBB51_116:                             # %for.end501
	jmp	.LBB51_126
.LBB51_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB51_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB51_118 Depth=1
	movl	$0, -28(%rbp)
.LBB51_120:                             # %for.cond508
                                        #   Parent Loop BB51_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB51_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB51_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB51_120
.LBB51_123:                             # %for.end549
                                        #   in Loop: Header=BB51_118 Depth=1
	jmp	.LBB51_124
.LBB51_124:                             # %for.inc550
                                        #   in Loop: Header=BB51_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_118
.LBB51_125:                             # %for.end552
	jmp	.LBB51_126
.LBB51_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB51_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_129 Depth 2
                                        #       Child Loop BB51_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB51_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB51_127 Depth=1
	movl	$0, -24(%rbp)
.LBB51_129:                             # %for.cond558
                                        #   Parent Loop BB51_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB51_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB51_129 Depth=2
	movl	$0, -20(%rbp)
.LBB51_131:                             # %for.cond562
                                        #   Parent Loop BB51_127 Depth=1
                                        #     Parent Loop BB51_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB51_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB51_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB51_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB51_135
.LBB51_134:                             # %cond.false569
                                        #   in Loop: Header=BB51_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB51_135:                             # %cond.end570
                                        #   in Loop: Header=BB51_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB51_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_131
.LBB51_137:                             # %for.end598
                                        #   in Loop: Header=BB51_129 Depth=2
	jmp	.LBB51_138
.LBB51_138:                             # %for.inc599
                                        #   in Loop: Header=BB51_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_129
.LBB51_139:                             # %for.end601
                                        #   in Loop: Header=BB51_127 Depth=1
	jmp	.LBB51_140
.LBB51_140:                             # %for.inc602
                                        #   in Loop: Header=BB51_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_127
.LBB51_141:                             # %for.end604
	jmp	.LBB51_142
.LBB51_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB51_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_145 Depth 2
                                        #       Child Loop BB51_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB51_143 Depth=1
	movl	$0, -28(%rbp)
.LBB51_145:                             # %for.cond611
                                        #   Parent Loop BB51_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB51_145 Depth=2
	movl	$0, -20(%rbp)
.LBB51_147:                             # %for.cond617
                                        #   Parent Loop BB51_143 Depth=1
                                        #     Parent Loop BB51_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB51_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB51_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB51_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB51_151
.LBB51_150:                             # %if.then638
                                        #   in Loop: Header=BB51_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB51_154
.LBB51_151:                             # %if.end639
                                        #   in Loop: Header=BB51_147 Depth=3
	jmp	.LBB51_152
.LBB51_152:                             # %for.inc640
                                        #   in Loop: Header=BB51_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_147
.LBB51_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB51_145 Depth=2
	jmp	.LBB51_154
.LBB51_154:                             # %for.end642
                                        #   in Loop: Header=BB51_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB51_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB51_143 Depth=1
	jmp	.LBB51_159
.LBB51_156:                             # %if.end646
                                        #   in Loop: Header=BB51_145 Depth=2
	jmp	.LBB51_157
.LBB51_157:                             # %for.inc647
                                        #   in Loop: Header=BB51_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB51_145
.LBB51_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB51_143 Depth=1
	jmp	.LBB51_159
.LBB51_159:                             # %for.end649
                                        #   in Loop: Header=BB51_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB51_161
# %bb.160:                              # %if.then652
	jmp	.LBB51_164
.LBB51_161:                             # %if.end653
                                        #   in Loop: Header=BB51_143 Depth=1
	jmp	.LBB51_162
.LBB51_162:                             # %for.inc654
                                        #   in Loop: Header=BB51_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_143
.LBB51_163:                             # %for.end656.loopexit
	jmp	.LBB51_164
.LBB51_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1224087477, -84(%rbp)  # imm = 0x48F617B5
	jne	.LBB51_166
.LBB51_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_165
.Lfunc_end51:
	.size	test_wp_B_slice.48, .Lfunc_end51-test_wp_B_slice.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.49
.LCPI52_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.49
	.p2align	4, 0x90
	.type	test_wp_P_slice.49,@function
test_wp_P_slice.49:                     # @test_wp_P_slice.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1435177032, -64(%rbp)  # imm = 0x558B1048
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB52_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB52_4
.LBB52_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB52_4
.LBB52_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB52_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_7 Depth 2
                                        #       Child Loop BB52_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB52_5 Depth=1
	movl	$0, -24(%rbp)
.LBB52_7:                               # %for.cond9
                                        #   Parent Loop BB52_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB52_7 Depth=2
	movl	$0, -12(%rbp)
.LBB52_9:                               # %for.cond14
                                        #   Parent Loop BB52_5 Depth=1
                                        #     Parent Loop BB52_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB52_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB52_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB52_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_9
.LBB52_12:                              # %for.end
                                        #   in Loop: Header=BB52_7 Depth=2
	jmp	.LBB52_13
.LBB52_13:                              # %for.inc41
                                        #   in Loop: Header=BB52_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_7
.LBB52_14:                              # %for.end43
                                        #   in Loop: Header=BB52_5 Depth=1
	jmp	.LBB52_15
.LBB52_15:                              # %for.inc44
                                        #   in Loop: Header=BB52_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_5
.LBB52_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB52_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB52_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	$0, -24(%rbp)
.LBB52_19:                              # %for.cond50
                                        #   Parent Loop BB52_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB52_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB52_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_19
.LBB52_22:                              # %for.end60
                                        #   in Loop: Header=BB52_17 Depth=1
	jmp	.LBB52_23
.LBB52_23:                              # %for.inc61
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_17
.LBB52_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB52_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_27 Depth 2
                                        #       Child Loop BB52_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB52_25 Depth=1
	movl	$0, -12(%rbp)
.LBB52_27:                              # %for.cond69
                                        #   Parent Loop BB52_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB52_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB52_29:                              # %for.cond85
                                        #   Parent Loop BB52_25 Depth=1
                                        #     Parent Loop BB52_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB52_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB52_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_29
.LBB52_32:                              # %for.end99
                                        #   in Loop: Header=BB52_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB52_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB52_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB52_34
	jp	.LBB52_34
	jmp	.LBB52_35
.LBB52_34:                              # %if.then106
                                        #   in Loop: Header=BB52_27 Depth=2
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB52_36
.LBB52_35:                              # %if.else
                                        #   in Loop: Header=BB52_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB52_36:                              # %if.end
                                        #   in Loop: Header=BB52_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB52_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB52_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB52_39
.LBB52_38:                              # %if.then137
                                        #   in Loop: Header=BB52_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB52_39:                              # %if.end143
                                        #   in Loop: Header=BB52_27 Depth=2
	jmp	.LBB52_47
.LBB52_40:                              # %if.else144
                                        #   in Loop: Header=BB52_27 Depth=2
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB52_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB52_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB52_46
.LBB52_42:                              # %cond.false168
                                        #   in Loop: Header=BB52_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB52_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB52_27 Depth=2
	movl	$127, %eax
	jmp	.LBB52_45
.LBB52_44:                              # %cond.false177
                                        #   in Loop: Header=BB52_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB52_45:                              # %cond.end183
                                        #   in Loop: Header=BB52_27 Depth=2
.LBB52_46:                              # %cond.end185
                                        #   in Loop: Header=BB52_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB52_47:                              # %if.end197
                                        #   in Loop: Header=BB52_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB52_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_27
.LBB52_49:                              # %for.end210
                                        #   in Loop: Header=BB52_25 Depth=1
	jmp	.LBB52_50
.LBB52_50:                              # %for.inc211
                                        #   in Loop: Header=BB52_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_25
.LBB52_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB52_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_54 Depth 2
                                        #       Child Loop BB52_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB52_52 Depth=1
	movl	$0, -36(%rbp)
.LBB52_54:                              # %for.cond219
                                        #   Parent Loop BB52_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB52_54 Depth=2
	movl	$0, -32(%rbp)
.LBB52_56:                              # %for.cond225
                                        #   Parent Loop BB52_52 Depth=1
                                        #     Parent Loop BB52_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB52_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB52_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB52_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB52_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB52_60
.LBB52_59:                              # %if.then246
                                        #   in Loop: Header=BB52_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB52_63
.LBB52_60:                              # %if.end247
                                        #   in Loop: Header=BB52_56 Depth=3
	jmp	.LBB52_61
.LBB52_61:                              # %for.inc248
                                        #   in Loop: Header=BB52_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB52_56
.LBB52_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB52_54 Depth=2
	jmp	.LBB52_63
.LBB52_63:                              # %for.end250
                                        #   in Loop: Header=BB52_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB52_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB52_52 Depth=1
	jmp	.LBB52_68
.LBB52_65:                              # %if.end254
                                        #   in Loop: Header=BB52_54 Depth=2
	jmp	.LBB52_66
.LBB52_66:                              # %for.inc255
                                        #   in Loop: Header=BB52_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_54
.LBB52_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB52_52 Depth=1
	jmp	.LBB52_68
.LBB52_68:                              # %for.end257
                                        #   in Loop: Header=BB52_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB52_70
# %bb.69:                               # %if.then260
	jmp	.LBB52_73
.LBB52_70:                              # %if.end261
                                        #   in Loop: Header=BB52_52 Depth=1
	jmp	.LBB52_71
.LBB52_71:                              # %for.inc262
                                        #   in Loop: Header=BB52_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_52
.LBB52_72:                              # %for.end264.loopexit
	jmp	.LBB52_73
.LBB52_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1435177032, -64(%rbp)  # imm = 0x558B1048
	jne	.LBB52_75
.LBB52_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_74
.Lfunc_end52:
	.size	test_wp_P_slice.49, .Lfunc_end52-test_wp_P_slice.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.50
.LCPI53_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.50
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.50,@function
estimate_weighting_factor_B_slice.50:   # @estimate_weighting_factor_B_slice.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$971983991, -92(%rbp)   # imm = 0x39EF4C77
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB53_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB53_4
.LBB53_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB53_4
.LBB53_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB53_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB53_7
.LBB53_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB53_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB53_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_10 Depth 2
                                        #       Child Loop BB53_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	$0, -8(%rbp)
.LBB53_10:                              # %for.cond14
                                        #   Parent Loop BB53_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB53_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB53_10 Depth=2
	movl	$0, -16(%rbp)
.LBB53_12:                              # %for.cond19
                                        #   Parent Loop BB53_8 Depth=1
                                        #     Parent Loop BB53_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB53_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB53_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB53_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_12
.LBB53_15:                              # %for.end
                                        #   in Loop: Header=BB53_10 Depth=2
	jmp	.LBB53_16
.LBB53_16:                              # %for.inc50
                                        #   in Loop: Header=BB53_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_10
.LBB53_17:                              # %for.end52
                                        #   in Loop: Header=BB53_8 Depth=1
	jmp	.LBB53_18
.LBB53_18:                              # %for.inc53
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_8
.LBB53_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB53_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_22 Depth 2
                                        #       Child Loop BB53_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB53_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	$0, -8(%rbp)
.LBB53_22:                              # %for.cond59
                                        #   Parent Loop BB53_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB53_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB53_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB53_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB53_29
.LBB53_25:                              # %cond.false70
                                        #   in Loop: Header=BB53_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB53_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	$127, %eax
	jmp	.LBB53_28
.LBB53_27:                              # %cond.false80
                                        #   in Loop: Header=BB53_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB53_28:                              # %cond.end88
                                        #   in Loop: Header=BB53_22 Depth=2
.LBB53_29:                              # %cond.end90
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB53_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB53_35
.LBB53_31:                              # %cond.false99
                                        #   in Loop: Header=BB53_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB53_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	$127, %eax
	jmp	.LBB53_34
.LBB53_33:                              # %cond.false107
                                        #   in Loop: Header=BB53_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB53_34:                              # %cond.end113
                                        #   in Loop: Header=BB53_22 Depth=2
.LBB53_35:                              # %cond.end115
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB53_36:                              # %for.cond117
                                        #   Parent Loop BB53_20 Depth=1
                                        #     Parent Loop BB53_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB53_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB53_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB53_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB53_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB53_49
.LBB53_39:                              # %if.else154
                                        #   in Loop: Header=BB53_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB53_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB53_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB53_45
.LBB53_41:                              # %cond.false160
                                        #   in Loop: Header=BB53_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB53_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB53_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB53_44
.LBB53_43:                              # %cond.false166
                                        #   in Loop: Header=BB53_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB53_44:                              # %cond.end170
                                        #   in Loop: Header=BB53_36 Depth=3
.LBB53_45:                              # %cond.end172
                                        #   in Loop: Header=BB53_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB53_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB53_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB53_48
.LBB53_47:                              # %if.then198
                                        #   in Loop: Header=BB53_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB53_48:                              # %if.end208
                                        #   in Loop: Header=BB53_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB53_49:                              # %if.end238
                                        #   in Loop: Header=BB53_36 Depth=3
	jmp	.LBB53_50
.LBB53_50:                              # %for.inc239
                                        #   in Loop: Header=BB53_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_36
.LBB53_51:                              # %for.end241
                                        #   in Loop: Header=BB53_22 Depth=2
	jmp	.LBB53_52
.LBB53_52:                              # %for.inc242
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_22
.LBB53_53:                              # %for.end244
                                        #   in Loop: Header=BB53_20 Depth=1
	jmp	.LBB53_54
.LBB53_54:                              # %for.inc245
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_20
.LBB53_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB53_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB53_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_59 Depth 2
                                        #       Child Loop BB53_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB53_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB53_57 Depth=1
	movl	$0, -8(%rbp)
.LBB53_59:                              # %for.cond254
                                        #   Parent Loop BB53_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB53_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB53_59 Depth=2
	movl	$0, -20(%rbp)
.LBB53_61:                              # %for.cond257
                                        #   Parent Loop BB53_57 Depth=1
                                        #     Parent Loop BB53_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB53_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB53_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB53_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB53_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB53_65
.LBB53_64:                              # %cond.false262
                                        #   in Loop: Header=BB53_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB53_65:                              # %cond.end263
                                        #   in Loop: Header=BB53_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB53_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_61
.LBB53_67:                              # %for.end295
                                        #   in Loop: Header=BB53_59 Depth=2
	jmp	.LBB53_68
.LBB53_68:                              # %for.inc296
                                        #   in Loop: Header=BB53_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_59
.LBB53_69:                              # %for.end298
                                        #   in Loop: Header=BB53_57 Depth=1
	jmp	.LBB53_70
.LBB53_70:                              # %for.inc299
                                        #   in Loop: Header=BB53_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_57
.LBB53_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB53_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB53_72 Depth=1
	movl	$0, -24(%rbp)
.LBB53_74:                              # %for.cond306
                                        #   Parent Loop BB53_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB53_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB53_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB53_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_74
.LBB53_77:                              # %for.end346
                                        #   in Loop: Header=BB53_72 Depth=1
	jmp	.LBB53_78
.LBB53_78:                              # %for.inc347
                                        #   in Loop: Header=BB53_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_72
.LBB53_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB53_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_82 Depth 2
                                        #       Child Loop BB53_84 Depth 3
                                        #       Child Loop BB53_88 Depth 3
                                        #         Child Loop BB53_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB53_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB53_80 Depth=1
	movl	$0, -8(%rbp)
.LBB53_82:                              # %for.cond353
                                        #   Parent Loop BB53_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_84 Depth 3
                                        #       Child Loop BB53_88 Depth 3
                                        #         Child Loop BB53_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB53_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	$0, -16(%rbp)
.LBB53_84:                              # %for.cond356
                                        #   Parent Loop BB53_80 Depth=1
                                        #     Parent Loop BB53_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB53_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB53_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_84
.LBB53_87:                              # %for.end380
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	$0, -16(%rbp)
.LBB53_88:                              # %for.cond381
                                        #   Parent Loop BB53_80 Depth=1
                                        #     Parent Loop BB53_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB53_88 Depth=3
	movl	$0, -32(%rbp)
.LBB53_90:                              # %for.cond387
                                        #   Parent Loop BB53_80 Depth=1
                                        #     Parent Loop BB53_82 Depth=2
                                        #       Parent Loop BB53_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB53_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB53_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB53_90
.LBB53_93:                              # %for.end421
                                        #   in Loop: Header=BB53_88 Depth=3
	jmp	.LBB53_94
.LBB53_94:                              # %for.inc422
                                        #   in Loop: Header=BB53_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_88
.LBB53_95:                              # %for.end424
                                        #   in Loop: Header=BB53_82 Depth=2
	jmp	.LBB53_96
.LBB53_96:                              # %for.inc425
                                        #   in Loop: Header=BB53_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_82
.LBB53_97:                              # %for.end427
                                        #   in Loop: Header=BB53_80 Depth=1
	jmp	.LBB53_98
.LBB53_98:                              # %for.inc428
                                        #   in Loop: Header=BB53_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_80
.LBB53_99:                              # %for.end430
	jmp	.LBB53_189
.LBB53_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB53_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB53_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB53_101 Depth=1
	movl	$0, -8(%rbp)
.LBB53_103:                             # %for.cond436
                                        #   Parent Loop BB53_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB53_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB53_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB53_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_103
.LBB53_106:                             # %for.end447
                                        #   in Loop: Header=BB53_101 Depth=1
	jmp	.LBB53_107
.LBB53_107:                             # %for.inc448
                                        #   in Loop: Header=BB53_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_101
.LBB53_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB53_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_111 Depth 2
                                        #       Child Loop BB53_113 Depth 3
                                        #       Child Loop BB53_123 Depth 3
                                        #       Child Loop BB53_133 Depth 3
                                        #         Child Loop BB53_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB53_109 Depth=1
	movl	$0, -16(%rbp)
.LBB53_111:                             # %for.cond456
                                        #   Parent Loop BB53_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_113 Depth 3
                                        #       Child Loop BB53_123 Depth 3
                                        #       Child Loop BB53_133 Depth 3
                                        #         Child Loop BB53_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB53_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB53_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB53_113:                             # %for.cond476
                                        #   Parent Loop BB53_109 Depth=1
                                        #     Parent Loop BB53_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB53_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB53_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_113
.LBB53_116:                             # %for.end493
                                        #   in Loop: Header=BB53_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB53_117
	jp	.LBB53_117
	jmp	.LBB53_118
.LBB53_117:                             # %if.then500
                                        #   in Loop: Header=BB53_111 Depth=2
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_119
.LBB53_118:                             # %if.else511
                                        #   in Loop: Header=BB53_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB53_119:                             # %if.end513
                                        #   in Loop: Header=BB53_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB53_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB53_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB53_122
.LBB53_121:                             # %if.then519
                                        #   in Loop: Header=BB53_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB53_122:                             # %if.end521
                                        #   in Loop: Header=BB53_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB53_123:                             # %for.cond554
                                        #   Parent Loop BB53_109 Depth=1
                                        #     Parent Loop BB53_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB53_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB53_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB53_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB53_130
.LBB53_126:                             # %cond.false571
                                        #   in Loop: Header=BB53_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB53_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB53_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_129
.LBB53_128:                             # %cond.false583
                                        #   in Loop: Header=BB53_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB53_129:                             # %cond.end591
                                        #   in Loop: Header=BB53_123 Depth=3
.LBB53_130:                             # %cond.end593
                                        #   in Loop: Header=BB53_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB53_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_123
.LBB53_132:                             # %for.end600
                                        #   in Loop: Header=BB53_111 Depth=2
	movl	$0, -4(%rbp)
.LBB53_133:                             # %for.cond601
                                        #   Parent Loop BB53_109 Depth=1
                                        #     Parent Loop BB53_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB53_133 Depth=3
	movl	$0, -8(%rbp)
.LBB53_135:                             # %for.cond608
                                        #   Parent Loop BB53_109 Depth=1
                                        #     Parent Loop BB53_111 Depth=2
                                        #       Parent Loop BB53_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB53_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB53_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB53_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB53_142
.LBB53_138:                             # %cond.false630
                                        #   in Loop: Header=BB53_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB53_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB53_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB53_141
.LBB53_140:                             # %cond.false648
                                        #   in Loop: Header=BB53_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB53_141:                             # %cond.end661
                                        #   in Loop: Header=BB53_135 Depth=4
.LBB53_142:                             # %cond.end663
                                        #   in Loop: Header=BB53_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB53_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_135
.LBB53_144:                             # %for.end675
                                        #   in Loop: Header=BB53_133 Depth=3
	jmp	.LBB53_145
.LBB53_145:                             # %for.inc676
                                        #   in Loop: Header=BB53_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_133
.LBB53_146:                             # %for.end678
                                        #   in Loop: Header=BB53_111 Depth=2
	jmp	.LBB53_147
.LBB53_147:                             # %for.inc679
                                        #   in Loop: Header=BB53_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_111
.LBB53_148:                             # %for.end681
                                        #   in Loop: Header=BB53_109 Depth=1
	jmp	.LBB53_149
.LBB53_149:                             # %for.inc682
                                        #   in Loop: Header=BB53_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_109
.LBB53_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB53_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB53_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_154 Depth 2
                                        #       Child Loop BB53_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB53_152 Depth=1
	movl	$0, -24(%rbp)
.LBB53_154:                             # %for.cond694
                                        #   Parent Loop BB53_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB53_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB53_154 Depth=2
	movl	$0, -20(%rbp)
.LBB53_156:                             # %for.cond700
                                        #   Parent Loop BB53_152 Depth=1
                                        #     Parent Loop BB53_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB53_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB53_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB53_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_156
.LBB53_159:                             # %for.end730
                                        #   in Loop: Header=BB53_154 Depth=2
	jmp	.LBB53_160
.LBB53_160:                             # %for.inc731
                                        #   in Loop: Header=BB53_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_154
.LBB53_161:                             # %for.end733
                                        #   in Loop: Header=BB53_152 Depth=1
	jmp	.LBB53_162
.LBB53_162:                             # %for.inc734
                                        #   in Loop: Header=BB53_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_152
.LBB53_163:                             # %for.end736
	jmp	.LBB53_173
.LBB53_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB53_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB53_165 Depth=1
	movl	$0, -24(%rbp)
.LBB53_167:                             # %for.cond743
                                        #   Parent Loop BB53_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB53_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB53_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB53_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_167
.LBB53_170:                             # %for.end784
                                        #   in Loop: Header=BB53_165 Depth=1
	jmp	.LBB53_171
.LBB53_171:                             # %for.inc785
                                        #   in Loop: Header=BB53_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_165
.LBB53_172:                             # %for.end787
	jmp	.LBB53_173
.LBB53_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB53_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_176 Depth 2
                                        #       Child Loop BB53_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB53_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB53_174 Depth=1
	movl	$0, -8(%rbp)
.LBB53_176:                             # %for.cond793
                                        #   Parent Loop BB53_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB53_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB53_176 Depth=2
	movl	$0, -20(%rbp)
.LBB53_178:                             # %for.cond797
                                        #   Parent Loop BB53_174 Depth=1
                                        #     Parent Loop BB53_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB53_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB53_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB53_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB53_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB53_182
.LBB53_181:                             # %cond.false804
                                        #   in Loop: Header=BB53_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB53_182:                             # %cond.end805
                                        #   in Loop: Header=BB53_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB53_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_178
.LBB53_184:                             # %for.end833
                                        #   in Loop: Header=BB53_176 Depth=2
	jmp	.LBB53_185
.LBB53_185:                             # %for.inc834
                                        #   in Loop: Header=BB53_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_176
.LBB53_186:                             # %for.end836
                                        #   in Loop: Header=BB53_174 Depth=1
	jmp	.LBB53_187
.LBB53_187:                             # %for.inc837
                                        #   in Loop: Header=BB53_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_174
.LBB53_188:                             # %for.end839
	jmp	.LBB53_189
.LBB53_189:                             # %if.end840
	cmpl	$971983991, -92(%rbp)   # imm = 0x39EF4C77
	jne	.LBB53_191
.LBB53_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_190
.Lfunc_end53:
	.size	estimate_weighting_factor_B_slice.50, .Lfunc_end53-estimate_weighting_factor_B_slice.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.51
.LCPI54_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.51
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.51,@function
estimate_weighting_factor_P_slice.51:   # @estimate_weighting_factor_P_slice.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$457729818, -60(%rbp)   # imm = 0x1B48671A
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB54_4
.LBB54_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB54_4
.LBB54_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB54_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_7 Depth 2
                                        #       Child Loop BB54_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB54_5 Depth=1
	movl	$0, -16(%rbp)
.LBB54_7:                               # %for.cond12
                                        #   Parent Loop BB54_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB54_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB54_7 Depth=2
	movl	$0, -4(%rbp)
.LBB54_9:                               # %for.cond17
                                        #   Parent Loop BB54_5 Depth=1
                                        #     Parent Loop BB54_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB54_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB54_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB54_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_9
.LBB54_12:                              # %for.end
                                        #   in Loop: Header=BB54_7 Depth=2
	jmp	.LBB54_13
.LBB54_13:                              # %for.inc48
                                        #   in Loop: Header=BB54_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_7
.LBB54_14:                              # %for.end50
                                        #   in Loop: Header=BB54_5 Depth=1
	jmp	.LBB54_15
.LBB54_15:                              # %for.inc51
                                        #   in Loop: Header=BB54_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_5
.LBB54_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB54_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB54_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB54_17 Depth=1
	movl	$0, -16(%rbp)
.LBB54_19:                              # %for.cond57
                                        #   Parent Loop BB54_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB54_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB54_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB54_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_19
.LBB54_22:                              # %for.end67
                                        #   in Loop: Header=BB54_17 Depth=1
	jmp	.LBB54_23
.LBB54_23:                              # %for.inc68
                                        #   in Loop: Header=BB54_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_17
.LBB54_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB54_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_27 Depth 2
                                        #       Child Loop BB54_29 Depth 3
                                        #       Child Loop BB54_48 Depth 3
                                        #       Child Loop BB54_58 Depth 3
                                        #         Child Loop BB54_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB54_25 Depth=1
	movl	$0, -4(%rbp)
.LBB54_27:                              # %for.cond76
                                        #   Parent Loop BB54_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_29 Depth 3
                                        #       Child Loop BB54_48 Depth 3
                                        #       Child Loop BB54_58 Depth 3
                                        #         Child Loop BB54_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB54_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB54_29:                              # %for.cond92
                                        #   Parent Loop BB54_25 Depth=1
                                        #     Parent Loop BB54_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB54_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB54_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_29
.LBB54_32:                              # %for.end106
                                        #   in Loop: Header=BB54_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB54_40
	jp	.LBB54_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB54_34
	jp	.LBB54_34
	jmp	.LBB54_35
.LBB54_34:                              # %if.then114
                                        #   in Loop: Header=BB54_27 Depth=2
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB54_36
.LBB54_35:                              # %if.else
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB54_36:                              # %if.end
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB54_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB54_39
.LBB54_38:                              # %if.then147
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB54_39:                              # %if.end154
                                        #   in Loop: Header=BB54_27 Depth=2
	jmp	.LBB54_47
.LBB54_40:                              # %if.else155
                                        #   in Loop: Header=BB54_27 Depth=2
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB54_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB54_46
.LBB54_42:                              # %cond.false179
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB54_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	$127, %eax
	jmp	.LBB54_45
.LBB54_44:                              # %cond.false188
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB54_45:                              # %cond.end194
                                        #   in Loop: Header=BB54_27 Depth=2
.LBB54_46:                              # %cond.end196
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB54_47:                              # %if.end209
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB54_48:                              # %for.cond222
                                        #   Parent Loop BB54_25 Depth=1
                                        #     Parent Loop BB54_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB54_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB54_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB54_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB54_55
.LBB54_51:                              # %cond.false248
                                        #   in Loop: Header=BB54_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB54_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB54_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_54
.LBB54_53:                              # %cond.false270
                                        #   in Loop: Header=BB54_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB54_54:                              # %cond.end288
                                        #   in Loop: Header=BB54_48 Depth=3
.LBB54_55:                              # %cond.end290
                                        #   in Loop: Header=BB54_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB54_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_48
.LBB54_57:                              # %for.end297
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	$0, -12(%rbp)
.LBB54_58:                              # %for.cond298
                                        #   Parent Loop BB54_25 Depth=1
                                        #     Parent Loop BB54_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB54_58 Depth=3
	movl	$0, -16(%rbp)
.LBB54_60:                              # %for.cond305
                                        #   Parent Loop BB54_25 Depth=1
                                        #     Parent Loop BB54_27 Depth=2
                                        #       Parent Loop BB54_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB54_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB54_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB54_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB54_67
.LBB54_63:                              # %cond.false336
                                        #   in Loop: Header=BB54_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB54_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB54_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB54_66
.LBB54_65:                              # %cond.false364
                                        #   in Loop: Header=BB54_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB54_66:                              # %cond.end387
                                        #   in Loop: Header=BB54_60 Depth=4
.LBB54_67:                              # %cond.end389
                                        #   in Loop: Header=BB54_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB54_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_60
.LBB54_69:                              # %for.end400
                                        #   in Loop: Header=BB54_58 Depth=3
	jmp	.LBB54_70
.LBB54_70:                              # %for.inc401
                                        #   in Loop: Header=BB54_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_58
.LBB54_71:                              # %for.end403
                                        #   in Loop: Header=BB54_27 Depth=2
	jmp	.LBB54_72
.LBB54_72:                              # %for.inc404
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_27
.LBB54_73:                              # %for.end406
                                        #   in Loop: Header=BB54_25 Depth=1
	jmp	.LBB54_74
.LBB54_74:                              # %for.inc407
                                        #   in Loop: Header=BB54_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_25
.LBB54_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB54_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_78 Depth 2
                                        #       Child Loop BB54_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB54_76 Depth=1
	movl	$0, -24(%rbp)
.LBB54_78:                              # %for.cond415
                                        #   Parent Loop BB54_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB54_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB54_78 Depth=2
	movl	$0, -20(%rbp)
.LBB54_80:                              # %for.cond421
                                        #   Parent Loop BB54_76 Depth=1
                                        #     Parent Loop BB54_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB54_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB54_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB54_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_80
.LBB54_83:                              # %for.end451
                                        #   in Loop: Header=BB54_78 Depth=2
	jmp	.LBB54_84
.LBB54_84:                              # %for.inc452
                                        #   in Loop: Header=BB54_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_78
.LBB54_85:                              # %for.end454
                                        #   in Loop: Header=BB54_76 Depth=1
	jmp	.LBB54_86
.LBB54_86:                              # %for.inc455
                                        #   in Loop: Header=BB54_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_76
.LBB54_87:                              # %for.end457
	cmpl	$457729818, -60(%rbp)   # imm = 0x1B48671A
	jne	.LBB54_89
.LBB54_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_88
.Lfunc_end54:
	.size	estimate_weighting_factor_P_slice.51, .Lfunc_end54-estimate_weighting_factor_P_slice.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.52
.LCPI55_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.52
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.52,@function
estimate_weighting_factor_P_slice.52:   # @estimate_weighting_factor_P_slice.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1744058361, -64(%rbp)  # imm = 0x67F437F9
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB55_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB55_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB55_4
.LBB55_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB55_4
.LBB55_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB55_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_7 Depth 2
                                        #       Child Loop BB55_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB55_5 Depth=1
	movl	$0, -16(%rbp)
.LBB55_7:                               # %for.cond12
                                        #   Parent Loop BB55_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB55_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB55_7 Depth=2
	movl	$0, -4(%rbp)
.LBB55_9:                               # %for.cond17
                                        #   Parent Loop BB55_5 Depth=1
                                        #     Parent Loop BB55_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB55_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB55_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB55_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_9
.LBB55_12:                              # %for.end
                                        #   in Loop: Header=BB55_7 Depth=2
	jmp	.LBB55_13
.LBB55_13:                              # %for.inc48
                                        #   in Loop: Header=BB55_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_7
.LBB55_14:                              # %for.end50
                                        #   in Loop: Header=BB55_5 Depth=1
	jmp	.LBB55_15
.LBB55_15:                              # %for.inc51
                                        #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_5
.LBB55_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB55_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB55_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB55_17 Depth=1
	movl	$0, -16(%rbp)
.LBB55_19:                              # %for.cond57
                                        #   Parent Loop BB55_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB55_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB55_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB55_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_19
.LBB55_22:                              # %for.end67
                                        #   in Loop: Header=BB55_17 Depth=1
	jmp	.LBB55_23
.LBB55_23:                              # %for.inc68
                                        #   in Loop: Header=BB55_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_17
.LBB55_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB55_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_27 Depth 2
                                        #       Child Loop BB55_29 Depth 3
                                        #       Child Loop BB55_48 Depth 3
                                        #       Child Loop BB55_58 Depth 3
                                        #         Child Loop BB55_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB55_25 Depth=1
	movl	$0, -4(%rbp)
.LBB55_27:                              # %for.cond76
                                        #   Parent Loop BB55_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_29 Depth 3
                                        #       Child Loop BB55_48 Depth 3
                                        #       Child Loop BB55_58 Depth 3
                                        #         Child Loop BB55_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB55_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB55_29:                              # %for.cond92
                                        #   Parent Loop BB55_25 Depth=1
                                        #     Parent Loop BB55_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB55_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB55_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_29
.LBB55_32:                              # %for.end106
                                        #   in Loop: Header=BB55_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB55_40
	jp	.LBB55_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB55_34
	jp	.LBB55_34
	jmp	.LBB55_35
.LBB55_34:                              # %if.then114
                                        #   in Loop: Header=BB55_27 Depth=2
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB55_36
.LBB55_35:                              # %if.else
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB55_36:                              # %if.end
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB55_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB55_39
.LBB55_38:                              # %if.then147
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB55_39:                              # %if.end154
                                        #   in Loop: Header=BB55_27 Depth=2
	jmp	.LBB55_47
.LBB55_40:                              # %if.else155
                                        #   in Loop: Header=BB55_27 Depth=2
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB55_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB55_46
.LBB55_42:                              # %cond.false179
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB55_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	$127, %eax
	jmp	.LBB55_45
.LBB55_44:                              # %cond.false188
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB55_45:                              # %cond.end194
                                        #   in Loop: Header=BB55_27 Depth=2
.LBB55_46:                              # %cond.end196
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB55_47:                              # %if.end209
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB55_48:                              # %for.cond222
                                        #   Parent Loop BB55_25 Depth=1
                                        #     Parent Loop BB55_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB55_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB55_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB55_55
.LBB55_51:                              # %cond.false248
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB55_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_54
.LBB55_53:                              # %cond.false270
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB55_54:                              # %cond.end288
                                        #   in Loop: Header=BB55_48 Depth=3
.LBB55_55:                              # %cond.end290
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB55_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_48
.LBB55_57:                              # %for.end297
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	$0, -12(%rbp)
.LBB55_58:                              # %for.cond298
                                        #   Parent Loop BB55_25 Depth=1
                                        #     Parent Loop BB55_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB55_58 Depth=3
	movl	$0, -16(%rbp)
.LBB55_60:                              # %for.cond305
                                        #   Parent Loop BB55_25 Depth=1
                                        #     Parent Loop BB55_27 Depth=2
                                        #       Parent Loop BB55_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB55_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB55_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB55_67
.LBB55_63:                              # %cond.false336
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB55_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_66
.LBB55_65:                              # %cond.false364
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB55_66:                              # %cond.end387
                                        #   in Loop: Header=BB55_60 Depth=4
.LBB55_67:                              # %cond.end389
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB55_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_60
.LBB55_69:                              # %for.end400
                                        #   in Loop: Header=BB55_58 Depth=3
	jmp	.LBB55_70
.LBB55_70:                              # %for.inc401
                                        #   in Loop: Header=BB55_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_58
.LBB55_71:                              # %for.end403
                                        #   in Loop: Header=BB55_27 Depth=2
	jmp	.LBB55_72
.LBB55_72:                              # %for.inc404
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_27
.LBB55_73:                              # %for.end406
                                        #   in Loop: Header=BB55_25 Depth=1
	jmp	.LBB55_74
.LBB55_74:                              # %for.inc407
                                        #   in Loop: Header=BB55_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_25
.LBB55_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB55_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_78 Depth 2
                                        #       Child Loop BB55_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB55_76 Depth=1
	movl	$0, -20(%rbp)
.LBB55_78:                              # %for.cond415
                                        #   Parent Loop BB55_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB55_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB55_78 Depth=2
	movl	$0, -24(%rbp)
.LBB55_80:                              # %for.cond421
                                        #   Parent Loop BB55_76 Depth=1
                                        #     Parent Loop BB55_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB55_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB55_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB55_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_80
.LBB55_83:                              # %for.end451
                                        #   in Loop: Header=BB55_78 Depth=2
	jmp	.LBB55_84
.LBB55_84:                              # %for.inc452
                                        #   in Loop: Header=BB55_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_78
.LBB55_85:                              # %for.end454
                                        #   in Loop: Header=BB55_76 Depth=1
	jmp	.LBB55_86
.LBB55_86:                              # %for.inc455
                                        #   in Loop: Header=BB55_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_76
.LBB55_87:                              # %for.end457
	cmpl	$1744058361, -64(%rbp)  # imm = 0x67F437F9
	jne	.LBB55_89
.LBB55_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_88
.Lfunc_end55:
	.size	estimate_weighting_factor_P_slice.52, .Lfunc_end55-estimate_weighting_factor_P_slice.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.53
.LCPI56_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.53
	.p2align	4, 0x90
	.type	test_wp_P_slice.53,@function
test_wp_P_slice.53:                     # @test_wp_P_slice.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$251569013, -64(%rbp)   # imm = 0xEFEA375
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB56_4
.LBB56_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB56_4
.LBB56_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB56_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_7 Depth 2
                                        #       Child Loop BB56_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB56_5 Depth=1
	movl	$0, -24(%rbp)
.LBB56_7:                               # %for.cond9
                                        #   Parent Loop BB56_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB56_7 Depth=2
	movl	$0, -12(%rbp)
.LBB56_9:                               # %for.cond14
                                        #   Parent Loop BB56_5 Depth=1
                                        #     Parent Loop BB56_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB56_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB56_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB56_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_9
.LBB56_12:                              # %for.end
                                        #   in Loop: Header=BB56_7 Depth=2
	jmp	.LBB56_13
.LBB56_13:                              # %for.inc41
                                        #   in Loop: Header=BB56_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_7
.LBB56_14:                              # %for.end43
                                        #   in Loop: Header=BB56_5 Depth=1
	jmp	.LBB56_15
.LBB56_15:                              # %for.inc44
                                        #   in Loop: Header=BB56_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_5
.LBB56_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB56_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB56_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB56_17 Depth=1
	movl	$0, -24(%rbp)
.LBB56_19:                              # %for.cond50
                                        #   Parent Loop BB56_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB56_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB56_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_19
.LBB56_22:                              # %for.end60
                                        #   in Loop: Header=BB56_17 Depth=1
	jmp	.LBB56_23
.LBB56_23:                              # %for.inc61
                                        #   in Loop: Header=BB56_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_17
.LBB56_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB56_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_27 Depth 2
                                        #       Child Loop BB56_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	$0, -12(%rbp)
.LBB56_27:                              # %for.cond69
                                        #   Parent Loop BB56_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB56_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB56_29:                              # %for.cond85
                                        #   Parent Loop BB56_25 Depth=1
                                        #     Parent Loop BB56_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB56_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB56_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_29
.LBB56_32:                              # %for.end99
                                        #   in Loop: Header=BB56_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB56_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB56_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB56_34
	jp	.LBB56_34
	jmp	.LBB56_35
.LBB56_34:                              # %if.then106
                                        #   in Loop: Header=BB56_27 Depth=2
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB56_36
.LBB56_35:                              # %if.else
                                        #   in Loop: Header=BB56_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB56_36:                              # %if.end
                                        #   in Loop: Header=BB56_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB56_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB56_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB56_39
.LBB56_38:                              # %if.then137
                                        #   in Loop: Header=BB56_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB56_39:                              # %if.end143
                                        #   in Loop: Header=BB56_27 Depth=2
	jmp	.LBB56_47
.LBB56_40:                              # %if.else144
                                        #   in Loop: Header=BB56_27 Depth=2
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB56_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB56_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB56_46
.LBB56_42:                              # %cond.false168
                                        #   in Loop: Header=BB56_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB56_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB56_27 Depth=2
	movl	$127, %eax
	jmp	.LBB56_45
.LBB56_44:                              # %cond.false177
                                        #   in Loop: Header=BB56_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB56_45:                              # %cond.end183
                                        #   in Loop: Header=BB56_27 Depth=2
.LBB56_46:                              # %cond.end185
                                        #   in Loop: Header=BB56_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB56_47:                              # %if.end197
                                        #   in Loop: Header=BB56_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB56_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_27
.LBB56_49:                              # %for.end210
                                        #   in Loop: Header=BB56_25 Depth=1
	jmp	.LBB56_50
.LBB56_50:                              # %for.inc211
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_25
.LBB56_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB56_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_54 Depth 2
                                        #       Child Loop BB56_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB56_52 Depth=1
	movl	$0, -32(%rbp)
.LBB56_54:                              # %for.cond219
                                        #   Parent Loop BB56_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB56_54 Depth=2
	movl	$0, -36(%rbp)
.LBB56_56:                              # %for.cond225
                                        #   Parent Loop BB56_52 Depth=1
                                        #     Parent Loop BB56_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB56_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB56_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB56_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB56_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB56_60
.LBB56_59:                              # %if.then246
                                        #   in Loop: Header=BB56_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB56_63
.LBB56_60:                              # %if.end247
                                        #   in Loop: Header=BB56_56 Depth=3
	jmp	.LBB56_61
.LBB56_61:                              # %for.inc248
                                        #   in Loop: Header=BB56_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_56
.LBB56_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB56_54 Depth=2
	jmp	.LBB56_63
.LBB56_63:                              # %for.end250
                                        #   in Loop: Header=BB56_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB56_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB56_52 Depth=1
	jmp	.LBB56_68
.LBB56_65:                              # %if.end254
                                        #   in Loop: Header=BB56_54 Depth=2
	jmp	.LBB56_66
.LBB56_66:                              # %for.inc255
                                        #   in Loop: Header=BB56_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_54
.LBB56_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB56_52 Depth=1
	jmp	.LBB56_68
.LBB56_68:                              # %for.end257
                                        #   in Loop: Header=BB56_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB56_70
# %bb.69:                               # %if.then260
	jmp	.LBB56_73
.LBB56_70:                              # %if.end261
                                        #   in Loop: Header=BB56_52 Depth=1
	jmp	.LBB56_71
.LBB56_71:                              # %for.inc262
                                        #   in Loop: Header=BB56_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_52
.LBB56_72:                              # %for.end264.loopexit
	jmp	.LBB56_73
.LBB56_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$251569013, -64(%rbp)   # imm = 0xEFEA375
	jne	.LBB56_75
.LBB56_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_74
.Lfunc_end56:
	.size	test_wp_P_slice.53, .Lfunc_end56-test_wp_P_slice.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.54
.LCPI57_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.54
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.54,@function
estimate_weighting_factor_P_slice.54:   # @estimate_weighting_factor_P_slice.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1077133284, -60(%rbp)  # imm = 0x4033BFE4
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB57_4
.LBB57_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB57_4
.LBB57_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB57_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_7 Depth 2
                                        #       Child Loop BB57_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB57_5 Depth=1
	movl	$0, -16(%rbp)
.LBB57_7:                               # %for.cond12
                                        #   Parent Loop BB57_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB57_7 Depth=2
	movl	$0, -4(%rbp)
.LBB57_9:                               # %for.cond17
                                        #   Parent Loop BB57_5 Depth=1
                                        #     Parent Loop BB57_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB57_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB57_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB57_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_9
.LBB57_12:                              # %for.end
                                        #   in Loop: Header=BB57_7 Depth=2
	jmp	.LBB57_13
.LBB57_13:                              # %for.inc48
                                        #   in Loop: Header=BB57_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_7
.LBB57_14:                              # %for.end50
                                        #   in Loop: Header=BB57_5 Depth=1
	jmp	.LBB57_15
.LBB57_15:                              # %for.inc51
                                        #   in Loop: Header=BB57_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_5
.LBB57_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB57_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB57_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB57_17 Depth=1
	movl	$0, -16(%rbp)
.LBB57_19:                              # %for.cond57
                                        #   Parent Loop BB57_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB57_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB57_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_19
.LBB57_22:                              # %for.end67
                                        #   in Loop: Header=BB57_17 Depth=1
	jmp	.LBB57_23
.LBB57_23:                              # %for.inc68
                                        #   in Loop: Header=BB57_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_17
.LBB57_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB57_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_27 Depth 2
                                        #       Child Loop BB57_29 Depth 3
                                        #       Child Loop BB57_48 Depth 3
                                        #       Child Loop BB57_58 Depth 3
                                        #         Child Loop BB57_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB57_25 Depth=1
	movl	$0, -4(%rbp)
.LBB57_27:                              # %for.cond76
                                        #   Parent Loop BB57_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_29 Depth 3
                                        #       Child Loop BB57_48 Depth 3
                                        #       Child Loop BB57_58 Depth 3
                                        #         Child Loop BB57_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB57_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB57_29:                              # %for.cond92
                                        #   Parent Loop BB57_25 Depth=1
                                        #     Parent Loop BB57_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB57_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB57_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_29
.LBB57_32:                              # %for.end106
                                        #   in Loop: Header=BB57_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB57_40
	jp	.LBB57_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB57_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB57_34
	jp	.LBB57_34
	jmp	.LBB57_35
.LBB57_34:                              # %if.then114
                                        #   in Loop: Header=BB57_27 Depth=2
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB57_36
.LBB57_35:                              # %if.else
                                        #   in Loop: Header=BB57_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB57_36:                              # %if.end
                                        #   in Loop: Header=BB57_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB57_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB57_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB57_39
.LBB57_38:                              # %if.then147
                                        #   in Loop: Header=BB57_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB57_39:                              # %if.end154
                                        #   in Loop: Header=BB57_27 Depth=2
	jmp	.LBB57_47
.LBB57_40:                              # %if.else155
                                        #   in Loop: Header=BB57_27 Depth=2
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB57_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB57_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB57_46
.LBB57_42:                              # %cond.false179
                                        #   in Loop: Header=BB57_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB57_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB57_27 Depth=2
	movl	$127, %eax
	jmp	.LBB57_45
.LBB57_44:                              # %cond.false188
                                        #   in Loop: Header=BB57_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB57_45:                              # %cond.end194
                                        #   in Loop: Header=BB57_27 Depth=2
.LBB57_46:                              # %cond.end196
                                        #   in Loop: Header=BB57_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB57_47:                              # %if.end209
                                        #   in Loop: Header=BB57_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB57_48:                              # %for.cond222
                                        #   Parent Loop BB57_25 Depth=1
                                        #     Parent Loop BB57_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB57_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB57_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB57_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB57_55
.LBB57_51:                              # %cond.false248
                                        #   in Loop: Header=BB57_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB57_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB57_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_54
.LBB57_53:                              # %cond.false270
                                        #   in Loop: Header=BB57_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB57_54:                              # %cond.end288
                                        #   in Loop: Header=BB57_48 Depth=3
.LBB57_55:                              # %cond.end290
                                        #   in Loop: Header=BB57_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB57_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_48
.LBB57_57:                              # %for.end297
                                        #   in Loop: Header=BB57_27 Depth=2
	movl	$0, -12(%rbp)
.LBB57_58:                              # %for.cond298
                                        #   Parent Loop BB57_25 Depth=1
                                        #     Parent Loop BB57_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB57_58 Depth=3
	movl	$0, -16(%rbp)
.LBB57_60:                              # %for.cond305
                                        #   Parent Loop BB57_25 Depth=1
                                        #     Parent Loop BB57_27 Depth=2
                                        #       Parent Loop BB57_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB57_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB57_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB57_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB57_67
.LBB57_63:                              # %cond.false336
                                        #   in Loop: Header=BB57_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB57_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB57_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_66
.LBB57_65:                              # %cond.false364
                                        #   in Loop: Header=BB57_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB57_66:                              # %cond.end387
                                        #   in Loop: Header=BB57_60 Depth=4
.LBB57_67:                              # %cond.end389
                                        #   in Loop: Header=BB57_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB57_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_60
.LBB57_69:                              # %for.end400
                                        #   in Loop: Header=BB57_58 Depth=3
	jmp	.LBB57_70
.LBB57_70:                              # %for.inc401
                                        #   in Loop: Header=BB57_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_58
.LBB57_71:                              # %for.end403
                                        #   in Loop: Header=BB57_27 Depth=2
	jmp	.LBB57_72
.LBB57_72:                              # %for.inc404
                                        #   in Loop: Header=BB57_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_27
.LBB57_73:                              # %for.end406
                                        #   in Loop: Header=BB57_25 Depth=1
	jmp	.LBB57_74
.LBB57_74:                              # %for.inc407
                                        #   in Loop: Header=BB57_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_25
.LBB57_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB57_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_78 Depth 2
                                        #       Child Loop BB57_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB57_76 Depth=1
	movl	$0, -20(%rbp)
.LBB57_78:                              # %for.cond415
                                        #   Parent Loop BB57_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB57_78 Depth=2
	movl	$0, -24(%rbp)
.LBB57_80:                              # %for.cond421
                                        #   Parent Loop BB57_76 Depth=1
                                        #     Parent Loop BB57_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB57_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB57_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB57_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_80
.LBB57_83:                              # %for.end451
                                        #   in Loop: Header=BB57_78 Depth=2
	jmp	.LBB57_84
.LBB57_84:                              # %for.inc452
                                        #   in Loop: Header=BB57_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_78
.LBB57_85:                              # %for.end454
                                        #   in Loop: Header=BB57_76 Depth=1
	jmp	.LBB57_86
.LBB57_86:                              # %for.inc455
                                        #   in Loop: Header=BB57_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_76
.LBB57_87:                              # %for.end457
	cmpl	$1077133284, -60(%rbp)  # imm = 0x4033BFE4
	jne	.LBB57_89
.LBB57_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_88
.Lfunc_end57:
	.size	estimate_weighting_factor_P_slice.54, .Lfunc_end57-estimate_weighting_factor_P_slice.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.55
.LCPI58_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.55
	.p2align	4, 0x90
	.type	test_wp_B_slice.55,@function
test_wp_B_slice.55:                     # @test_wp_B_slice.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$657657901, -84(%rbp)   # imm = 0x2733102D
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB58_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB58_4
.LBB58_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB58_4
.LBB58_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB58_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_7 Depth 2
                                        #       Child Loop BB58_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB58_5 Depth=1
	movl	$0, -24(%rbp)
.LBB58_7:                               # %for.cond9
                                        #   Parent Loop BB58_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB58_7 Depth=2
	movl	$0, -32(%rbp)
.LBB58_9:                               # %for.cond14
                                        #   Parent Loop BB58_5 Depth=1
                                        #     Parent Loop BB58_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB58_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB58_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB58_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB58_9
.LBB58_12:                              # %for.end
                                        #   in Loop: Header=BB58_7 Depth=2
	jmp	.LBB58_13
.LBB58_13:                              # %for.inc41
                                        #   in Loop: Header=BB58_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_7
.LBB58_14:                              # %for.end43
                                        #   in Loop: Header=BB58_5 Depth=1
	jmp	.LBB58_15
.LBB58_15:                              # %for.inc44
                                        #   in Loop: Header=BB58_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_5
.LBB58_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB58_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_19 Depth 2
                                        #       Child Loop BB58_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB58_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	$0, -24(%rbp)
.LBB58_19:                              # %for.cond50
                                        #   Parent Loop BB58_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB58_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB58_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB58_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB58_26
.LBB58_22:                              # %cond.false61
                                        #   in Loop: Header=BB58_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB58_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$127, %eax
	jmp	.LBB58_25
.LBB58_24:                              # %cond.false71
                                        #   in Loop: Header=BB58_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB58_25:                              # %cond.end79
                                        #   in Loop: Header=BB58_19 Depth=2
.LBB58_26:                              # %cond.end81
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB58_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB58_32
.LBB58_28:                              # %cond.false90
                                        #   in Loop: Header=BB58_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB58_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$127, %eax
	jmp	.LBB58_31
.LBB58_30:                              # %cond.false98
                                        #   in Loop: Header=BB58_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB58_31:                              # %cond.end104
                                        #   in Loop: Header=BB58_19 Depth=2
.LBB58_32:                              # %cond.end106
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB58_33:                              # %for.cond108
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB58_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB58_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB58_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB58_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB58_46
.LBB58_36:                              # %if.else
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB58_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB58_42
.LBB58_38:                              # %cond.false145
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB58_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB58_41
.LBB58_40:                              # %cond.false151
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB58_41:                              # %cond.end155
                                        #   in Loop: Header=BB58_33 Depth=3
.LBB58_42:                              # %cond.end157
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB58_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB58_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB58_45
.LBB58_44:                              # %if.then183
                                        #   in Loop: Header=BB58_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB58_45:                              # %if.end
                                        #   in Loop: Header=BB58_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB58_46:                              # %if.end220
                                        #   in Loop: Header=BB58_33 Depth=3
	jmp	.LBB58_47
.LBB58_47:                              # %for.inc221
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_33
.LBB58_48:                              # %for.end223
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_49
.LBB58_49:                              # %for.inc224
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_19
.LBB58_50:                              # %for.end226
                                        #   in Loop: Header=BB58_17 Depth=1
	jmp	.LBB58_51
.LBB58_51:                              # %for.inc227
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_17
.LBB58_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB58_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB58_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_56 Depth 2
                                        #       Child Loop BB58_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB58_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB58_54 Depth=1
	movl	$0, -24(%rbp)
.LBB58_56:                              # %for.cond235
                                        #   Parent Loop BB58_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB58_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB58_56 Depth=2
	movl	$0, -20(%rbp)
.LBB58_58:                              # %for.cond238
                                        #   Parent Loop BB58_54 Depth=1
                                        #     Parent Loop BB58_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB58_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB58_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB58_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB58_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB58_62
.LBB58_61:                              # %cond.false243
                                        #   in Loop: Header=BB58_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB58_62:                              # %cond.end244
                                        #   in Loop: Header=BB58_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB58_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_58
.LBB58_64:                              # %for.end276
                                        #   in Loop: Header=BB58_56 Depth=2
	jmp	.LBB58_65
.LBB58_65:                              # %for.inc277
                                        #   in Loop: Header=BB58_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_56
.LBB58_66:                              # %for.end279
                                        #   in Loop: Header=BB58_54 Depth=1
	jmp	.LBB58_67
.LBB58_67:                              # %for.inc280
                                        #   in Loop: Header=BB58_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_54
.LBB58_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB58_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	$0, -28(%rbp)
.LBB58_71:                              # %for.cond287
                                        #   Parent Loop BB58_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB58_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB58_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_71
.LBB58_74:                              # %for.end327
                                        #   in Loop: Header=BB58_69 Depth=1
	jmp	.LBB58_75
.LBB58_75:                              # %for.inc328
                                        #   in Loop: Header=BB58_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_69
.LBB58_76:                              # %for.end330
	jmp	.LBB58_142
.LBB58_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB58_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB58_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB58_78 Depth=1
	movl	$0, -24(%rbp)
.LBB58_80:                              # %for.cond335
                                        #   Parent Loop BB58_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB58_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB58_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB58_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_80
.LBB58_83:                              # %for.end345
                                        #   in Loop: Header=BB58_78 Depth=1
	jmp	.LBB58_84
.LBB58_84:                              # %for.inc346
                                        #   in Loop: Header=BB58_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_78
.LBB58_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB58_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_88 Depth 2
                                        #       Child Loop BB58_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	$0, -32(%rbp)
.LBB58_88:                              # %for.cond354
                                        #   Parent Loop BB58_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB58_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB58_90:                              # %for.cond372
                                        #   Parent Loop BB58_86 Depth=1
                                        #     Parent Loop BB58_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB58_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB58_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_90
.LBB58_93:                              # %for.end389
                                        #   in Loop: Header=BB58_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB58_94
	jp	.LBB58_94
	jmp	.LBB58_95
.LBB58_94:                              # %if.then396
                                        #   in Loop: Header=BB58_88 Depth=2
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB58_96
.LBB58_95:                              # %if.else406
                                        #   in Loop: Header=BB58_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB58_96:                              # %if.end407
                                        #   in Loop: Header=BB58_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB58_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB58_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB58_99
.LBB58_98:                              # %if.then413
                                        #   in Loop: Header=BB58_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB58_99:                              # %if.end414
                                        #   in Loop: Header=BB58_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB58_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB58_88
.LBB58_101:                             # %for.end447
                                        #   in Loop: Header=BB58_86 Depth=1
	jmp	.LBB58_102
.LBB58_102:                             # %for.inc448
                                        #   in Loop: Header=BB58_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_86
.LBB58_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB58_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB58_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_107 Depth 2
                                        #       Child Loop BB58_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB58_105 Depth=1
	movl	$0, -28(%rbp)
.LBB58_107:                             # %for.cond459
                                        #   Parent Loop BB58_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB58_107 Depth=2
	movl	$0, -20(%rbp)
.LBB58_109:                             # %for.cond465
                                        #   Parent Loop BB58_105 Depth=1
                                        #     Parent Loop BB58_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB58_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB58_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB58_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_109
.LBB58_112:                             # %for.end495
                                        #   in Loop: Header=BB58_107 Depth=2
	jmp	.LBB58_113
.LBB58_113:                             # %for.inc496
                                        #   in Loop: Header=BB58_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_107
.LBB58_114:                             # %for.end498
                                        #   in Loop: Header=BB58_105 Depth=1
	jmp	.LBB58_115
.LBB58_115:                             # %for.inc499
                                        #   in Loop: Header=BB58_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_105
.LBB58_116:                             # %for.end501
	jmp	.LBB58_126
.LBB58_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB58_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB58_118 Depth=1
	movl	$0, -28(%rbp)
.LBB58_120:                             # %for.cond508
                                        #   Parent Loop BB58_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB58_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB58_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_120
.LBB58_123:                             # %for.end549
                                        #   in Loop: Header=BB58_118 Depth=1
	jmp	.LBB58_124
.LBB58_124:                             # %for.inc550
                                        #   in Loop: Header=BB58_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_118
.LBB58_125:                             # %for.end552
	jmp	.LBB58_126
.LBB58_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB58_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_129 Depth 2
                                        #       Child Loop BB58_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB58_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB58_127 Depth=1
	movl	$0, -24(%rbp)
.LBB58_129:                             # %for.cond558
                                        #   Parent Loop BB58_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB58_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB58_129 Depth=2
	movl	$0, -20(%rbp)
.LBB58_131:                             # %for.cond562
                                        #   Parent Loop BB58_127 Depth=1
                                        #     Parent Loop BB58_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB58_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB58_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB58_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB58_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB58_135
.LBB58_134:                             # %cond.false569
                                        #   in Loop: Header=BB58_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB58_135:                             # %cond.end570
                                        #   in Loop: Header=BB58_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB58_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_131
.LBB58_137:                             # %for.end598
                                        #   in Loop: Header=BB58_129 Depth=2
	jmp	.LBB58_138
.LBB58_138:                             # %for.inc599
                                        #   in Loop: Header=BB58_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_129
.LBB58_139:                             # %for.end601
                                        #   in Loop: Header=BB58_127 Depth=1
	jmp	.LBB58_140
.LBB58_140:                             # %for.inc602
                                        #   in Loop: Header=BB58_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_127
.LBB58_141:                             # %for.end604
	jmp	.LBB58_142
.LBB58_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB58_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_145 Depth 2
                                        #       Child Loop BB58_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB58_143 Depth=1
	movl	$0, -28(%rbp)
.LBB58_145:                             # %for.cond611
                                        #   Parent Loop BB58_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB58_145 Depth=2
	movl	$0, -20(%rbp)
.LBB58_147:                             # %for.cond617
                                        #   Parent Loop BB58_143 Depth=1
                                        #     Parent Loop BB58_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB58_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB58_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB58_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB58_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB58_151
.LBB58_150:                             # %if.then638
                                        #   in Loop: Header=BB58_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB58_154
.LBB58_151:                             # %if.end639
                                        #   in Loop: Header=BB58_147 Depth=3
	jmp	.LBB58_152
.LBB58_152:                             # %for.inc640
                                        #   in Loop: Header=BB58_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_147
.LBB58_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB58_145 Depth=2
	jmp	.LBB58_154
.LBB58_154:                             # %for.end642
                                        #   in Loop: Header=BB58_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB58_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB58_143 Depth=1
	jmp	.LBB58_159
.LBB58_156:                             # %if.end646
                                        #   in Loop: Header=BB58_145 Depth=2
	jmp	.LBB58_157
.LBB58_157:                             # %for.inc647
                                        #   in Loop: Header=BB58_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_145
.LBB58_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB58_143 Depth=1
	jmp	.LBB58_159
.LBB58_159:                             # %for.end649
                                        #   in Loop: Header=BB58_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB58_161
# %bb.160:                              # %if.then652
	jmp	.LBB58_164
.LBB58_161:                             # %if.end653
                                        #   in Loop: Header=BB58_143 Depth=1
	jmp	.LBB58_162
.LBB58_162:                             # %for.inc654
                                        #   in Loop: Header=BB58_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_143
.LBB58_163:                             # %for.end656.loopexit
	jmp	.LBB58_164
.LBB58_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$657657901, -84(%rbp)   # imm = 0x2733102D
	jne	.LBB58_166
.LBB58_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_165
.Lfunc_end58:
	.size	test_wp_B_slice.55, .Lfunc_end58-test_wp_B_slice.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.56
.LCPI59_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.56
	.p2align	4, 0x90
	.type	test_wp_P_slice.56,@function
test_wp_P_slice.56:                     # @test_wp_P_slice.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$79851371, -64(%rbp)    # imm = 0x4C26F6B
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB59_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB59_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB59_4
.LBB59_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB59_4
.LBB59_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB59_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_7 Depth 2
                                        #       Child Loop BB59_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB59_5 Depth=1
	movl	$0, -24(%rbp)
.LBB59_7:                               # %for.cond9
                                        #   Parent Loop BB59_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB59_7 Depth=2
	movl	$0, -12(%rbp)
.LBB59_9:                               # %for.cond14
                                        #   Parent Loop BB59_5 Depth=1
                                        #     Parent Loop BB59_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB59_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB59_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB59_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_9
.LBB59_12:                              # %for.end
                                        #   in Loop: Header=BB59_7 Depth=2
	jmp	.LBB59_13
.LBB59_13:                              # %for.inc41
                                        #   in Loop: Header=BB59_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_7
.LBB59_14:                              # %for.end43
                                        #   in Loop: Header=BB59_5 Depth=1
	jmp	.LBB59_15
.LBB59_15:                              # %for.inc44
                                        #   in Loop: Header=BB59_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_5
.LBB59_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB59_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB59_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB59_17 Depth=1
	movl	$0, -24(%rbp)
.LBB59_19:                              # %for.cond50
                                        #   Parent Loop BB59_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB59_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB59_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB59_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_19
.LBB59_22:                              # %for.end60
                                        #   in Loop: Header=BB59_17 Depth=1
	jmp	.LBB59_23
.LBB59_23:                              # %for.inc61
                                        #   in Loop: Header=BB59_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_17
.LBB59_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB59_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_27 Depth 2
                                        #       Child Loop BB59_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB59_25 Depth=1
	movl	$0, -12(%rbp)
.LBB59_27:                              # %for.cond69
                                        #   Parent Loop BB59_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB59_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB59_29:                              # %for.cond85
                                        #   Parent Loop BB59_25 Depth=1
                                        #     Parent Loop BB59_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB59_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB59_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_29
.LBB59_32:                              # %for.end99
                                        #   in Loop: Header=BB59_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB59_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB59_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB59_34
	jp	.LBB59_34
	jmp	.LBB59_35
.LBB59_34:                              # %if.then106
                                        #   in Loop: Header=BB59_27 Depth=2
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB59_36
.LBB59_35:                              # %if.else
                                        #   in Loop: Header=BB59_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB59_36:                              # %if.end
                                        #   in Loop: Header=BB59_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB59_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB59_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB59_39
.LBB59_38:                              # %if.then137
                                        #   in Loop: Header=BB59_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB59_39:                              # %if.end143
                                        #   in Loop: Header=BB59_27 Depth=2
	jmp	.LBB59_47
.LBB59_40:                              # %if.else144
                                        #   in Loop: Header=BB59_27 Depth=2
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB59_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB59_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB59_46
.LBB59_42:                              # %cond.false168
                                        #   in Loop: Header=BB59_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB59_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB59_27 Depth=2
	movl	$127, %eax
	jmp	.LBB59_45
.LBB59_44:                              # %cond.false177
                                        #   in Loop: Header=BB59_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB59_45:                              # %cond.end183
                                        #   in Loop: Header=BB59_27 Depth=2
.LBB59_46:                              # %cond.end185
                                        #   in Loop: Header=BB59_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB59_47:                              # %if.end197
                                        #   in Loop: Header=BB59_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB59_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_27
.LBB59_49:                              # %for.end210
                                        #   in Loop: Header=BB59_25 Depth=1
	jmp	.LBB59_50
.LBB59_50:                              # %for.inc211
                                        #   in Loop: Header=BB59_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_25
.LBB59_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB59_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_54 Depth 2
                                        #       Child Loop BB59_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB59_52 Depth=1
	movl	$0, -32(%rbp)
.LBB59_54:                              # %for.cond219
                                        #   Parent Loop BB59_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB59_54 Depth=2
	movl	$0, -36(%rbp)
.LBB59_56:                              # %for.cond225
                                        #   Parent Loop BB59_52 Depth=1
                                        #     Parent Loop BB59_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB59_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB59_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB59_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB59_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB59_60
.LBB59_59:                              # %if.then246
                                        #   in Loop: Header=BB59_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB59_63
.LBB59_60:                              # %if.end247
                                        #   in Loop: Header=BB59_56 Depth=3
	jmp	.LBB59_61
.LBB59_61:                              # %for.inc248
                                        #   in Loop: Header=BB59_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB59_56
.LBB59_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB59_54 Depth=2
	jmp	.LBB59_63
.LBB59_63:                              # %for.end250
                                        #   in Loop: Header=BB59_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB59_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB59_52 Depth=1
	jmp	.LBB59_68
.LBB59_65:                              # %if.end254
                                        #   in Loop: Header=BB59_54 Depth=2
	jmp	.LBB59_66
.LBB59_66:                              # %for.inc255
                                        #   in Loop: Header=BB59_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB59_54
.LBB59_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB59_52 Depth=1
	jmp	.LBB59_68
.LBB59_68:                              # %for.end257
                                        #   in Loop: Header=BB59_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB59_70
# %bb.69:                               # %if.then260
	jmp	.LBB59_73
.LBB59_70:                              # %if.end261
                                        #   in Loop: Header=BB59_52 Depth=1
	jmp	.LBB59_71
.LBB59_71:                              # %for.inc262
                                        #   in Loop: Header=BB59_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_52
.LBB59_72:                              # %for.end264.loopexit
	jmp	.LBB59_73
.LBB59_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$79851371, -64(%rbp)    # imm = 0x4C26F6B
	jne	.LBB59_75
.LBB59_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_74
.Lfunc_end59:
	.size	test_wp_P_slice.56, .Lfunc_end59-test_wp_P_slice.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.57
.LCPI60_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.57
	.p2align	4, 0x90
	.type	test_wp_B_slice.57,@function
test_wp_B_slice.57:                     # @test_wp_B_slice.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$423609522, -88(%rbp)   # imm = 0x193FC4B2
	movl	%edi, -76(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB60_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB60_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB60_4
.LBB60_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB60_4
.LBB60_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB60_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_7 Depth 2
                                        #       Child Loop BB60_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB60_5 Depth=1
	movl	$0, -24(%rbp)
.LBB60_7:                               # %for.cond9
                                        #   Parent Loop BB60_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB60_7 Depth=2
	movl	$0, -32(%rbp)
.LBB60_9:                               # %for.cond14
                                        #   Parent Loop BB60_5 Depth=1
                                        #     Parent Loop BB60_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB60_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB60_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB60_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB60_9
.LBB60_12:                              # %for.end
                                        #   in Loop: Header=BB60_7 Depth=2
	jmp	.LBB60_13
.LBB60_13:                              # %for.inc41
                                        #   in Loop: Header=BB60_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_7
.LBB60_14:                              # %for.end43
                                        #   in Loop: Header=BB60_5 Depth=1
	jmp	.LBB60_15
.LBB60_15:                              # %for.inc44
                                        #   in Loop: Header=BB60_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_5
.LBB60_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB60_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_19 Depth 2
                                        #       Child Loop BB60_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB60_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB60_17 Depth=1
	movl	$0, -24(%rbp)
.LBB60_19:                              # %for.cond50
                                        #   Parent Loop BB60_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB60_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB60_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB60_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB60_26
.LBB60_22:                              # %cond.false61
                                        #   in Loop: Header=BB60_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB60_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	$127, %eax
	jmp	.LBB60_25
.LBB60_24:                              # %cond.false71
                                        #   in Loop: Header=BB60_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB60_25:                              # %cond.end79
                                        #   in Loop: Header=BB60_19 Depth=2
.LBB60_26:                              # %cond.end81
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB60_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB60_32
.LBB60_28:                              # %cond.false90
                                        #   in Loop: Header=BB60_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB60_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	$127, %eax
	jmp	.LBB60_31
.LBB60_30:                              # %cond.false98
                                        #   in Loop: Header=BB60_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB60_31:                              # %cond.end104
                                        #   in Loop: Header=BB60_19 Depth=2
.LBB60_32:                              # %cond.end106
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB60_33:                              # %for.cond108
                                        #   Parent Loop BB60_17 Depth=1
                                        #     Parent Loop BB60_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB60_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB60_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB60_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB60_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB60_46
.LBB60_36:                              # %if.else
                                        #   in Loop: Header=BB60_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB60_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB60_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB60_42
.LBB60_38:                              # %cond.false145
                                        #   in Loop: Header=BB60_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB60_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB60_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB60_41
.LBB60_40:                              # %cond.false151
                                        #   in Loop: Header=BB60_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB60_41:                              # %cond.end155
                                        #   in Loop: Header=BB60_33 Depth=3
.LBB60_42:                              # %cond.end157
                                        #   in Loop: Header=BB60_33 Depth=3
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB60_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB60_45
.LBB60_44:                              # %if.then183
                                        #   in Loop: Header=BB60_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB60_45:                              # %if.end
                                        #   in Loop: Header=BB60_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB60_46:                              # %if.end220
                                        #   in Loop: Header=BB60_33 Depth=3
	jmp	.LBB60_47
.LBB60_47:                              # %for.inc221
                                        #   in Loop: Header=BB60_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_33
.LBB60_48:                              # %for.end223
                                        #   in Loop: Header=BB60_19 Depth=2
	jmp	.LBB60_49
.LBB60_49:                              # %for.inc224
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_19
.LBB60_50:                              # %for.end226
                                        #   in Loop: Header=BB60_17 Depth=1
	jmp	.LBB60_51
.LBB60_51:                              # %for.inc227
                                        #   in Loop: Header=BB60_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_17
.LBB60_52:                              # %for.end229
	cmpl	$1, -76(%rbp)
	jne	.LBB60_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB60_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_56 Depth 2
                                        #       Child Loop BB60_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB60_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB60_54 Depth=1
	movl	$0, -24(%rbp)
.LBB60_56:                              # %for.cond235
                                        #   Parent Loop BB60_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB60_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB60_56 Depth=2
	movl	$0, -20(%rbp)
.LBB60_58:                              # %for.cond238
                                        #   Parent Loop BB60_54 Depth=1
                                        #     Parent Loop BB60_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB60_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB60_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB60_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB60_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB60_62
.LBB60_61:                              # %cond.false243
                                        #   in Loop: Header=BB60_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB60_62:                              # %cond.end244
                                        #   in Loop: Header=BB60_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB60_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_58
.LBB60_64:                              # %for.end276
                                        #   in Loop: Header=BB60_56 Depth=2
	jmp	.LBB60_65
.LBB60_65:                              # %for.inc277
                                        #   in Loop: Header=BB60_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_56
.LBB60_66:                              # %for.end279
                                        #   in Loop: Header=BB60_54 Depth=1
	jmp	.LBB60_67
.LBB60_67:                              # %for.inc280
                                        #   in Loop: Header=BB60_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_54
.LBB60_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB60_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB60_69 Depth=1
	movl	$0, -28(%rbp)
.LBB60_71:                              # %for.cond287
                                        #   Parent Loop BB60_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB60_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB60_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_71
.LBB60_74:                              # %for.end327
                                        #   in Loop: Header=BB60_69 Depth=1
	jmp	.LBB60_75
.LBB60_75:                              # %for.inc328
                                        #   in Loop: Header=BB60_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_69
.LBB60_76:                              # %for.end330
	jmp	.LBB60_142
.LBB60_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB60_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB60_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB60_78 Depth=1
	movl	$0, -24(%rbp)
.LBB60_80:                              # %for.cond335
                                        #   Parent Loop BB60_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB60_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB60_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB60_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_80
.LBB60_83:                              # %for.end345
                                        #   in Loop: Header=BB60_78 Depth=1
	jmp	.LBB60_84
.LBB60_84:                              # %for.inc346
                                        #   in Loop: Header=BB60_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_78
.LBB60_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB60_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_88 Depth 2
                                        #       Child Loop BB60_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB60_86 Depth=1
	movl	$0, -32(%rbp)
.LBB60_88:                              # %for.cond354
                                        #   Parent Loop BB60_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB60_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB60_90:                              # %for.cond372
                                        #   Parent Loop BB60_86 Depth=1
                                        #     Parent Loop BB60_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB60_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB60_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_90
.LBB60_93:                              # %for.end389
                                        #   in Loop: Header=BB60_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB60_94
	jp	.LBB60_94
	jmp	.LBB60_95
.LBB60_94:                              # %if.then396
                                        #   in Loop: Header=BB60_88 Depth=2
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB60_96
.LBB60_95:                              # %if.else406
                                        #   in Loop: Header=BB60_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB60_96:                              # %if.end407
                                        #   in Loop: Header=BB60_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB60_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB60_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB60_99
.LBB60_98:                              # %if.then413
                                        #   in Loop: Header=BB60_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB60_99:                              # %if.end414
                                        #   in Loop: Header=BB60_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB60_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB60_88
.LBB60_101:                             # %for.end447
                                        #   in Loop: Header=BB60_86 Depth=1
	jmp	.LBB60_102
.LBB60_102:                             # %for.inc448
                                        #   in Loop: Header=BB60_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_86
.LBB60_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB60_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB60_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_107 Depth 2
                                        #       Child Loop BB60_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB60_105 Depth=1
	movl	$0, -28(%rbp)
.LBB60_107:                             # %for.cond459
                                        #   Parent Loop BB60_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB60_107 Depth=2
	movl	$0, -20(%rbp)
.LBB60_109:                             # %for.cond465
                                        #   Parent Loop BB60_105 Depth=1
                                        #     Parent Loop BB60_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB60_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB60_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB60_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_109
.LBB60_112:                             # %for.end495
                                        #   in Loop: Header=BB60_107 Depth=2
	jmp	.LBB60_113
.LBB60_113:                             # %for.inc496
                                        #   in Loop: Header=BB60_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_107
.LBB60_114:                             # %for.end498
                                        #   in Loop: Header=BB60_105 Depth=1
	jmp	.LBB60_115
.LBB60_115:                             # %for.inc499
                                        #   in Loop: Header=BB60_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_105
.LBB60_116:                             # %for.end501
	jmp	.LBB60_126
.LBB60_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB60_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB60_118 Depth=1
	movl	$0, -28(%rbp)
.LBB60_120:                             # %for.cond508
                                        #   Parent Loop BB60_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB60_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB60_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_120
.LBB60_123:                             # %for.end549
                                        #   in Loop: Header=BB60_118 Depth=1
	jmp	.LBB60_124
.LBB60_124:                             # %for.inc550
                                        #   in Loop: Header=BB60_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_118
.LBB60_125:                             # %for.end552
	jmp	.LBB60_126
.LBB60_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB60_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_129 Depth 2
                                        #       Child Loop BB60_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB60_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB60_127 Depth=1
	movl	$0, -24(%rbp)
.LBB60_129:                             # %for.cond558
                                        #   Parent Loop BB60_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB60_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB60_129 Depth=2
	movl	$0, -20(%rbp)
.LBB60_131:                             # %for.cond562
                                        #   Parent Loop BB60_127 Depth=1
                                        #     Parent Loop BB60_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB60_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB60_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB60_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB60_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB60_135
.LBB60_134:                             # %cond.false569
                                        #   in Loop: Header=BB60_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB60_135:                             # %cond.end570
                                        #   in Loop: Header=BB60_131 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB60_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_131
.LBB60_137:                             # %for.end598
                                        #   in Loop: Header=BB60_129 Depth=2
	jmp	.LBB60_138
.LBB60_138:                             # %for.inc599
                                        #   in Loop: Header=BB60_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_129
.LBB60_139:                             # %for.end601
                                        #   in Loop: Header=BB60_127 Depth=1
	jmp	.LBB60_140
.LBB60_140:                             # %for.inc602
                                        #   in Loop: Header=BB60_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_127
.LBB60_141:                             # %for.end604
	jmp	.LBB60_142
.LBB60_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB60_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_145 Depth 2
                                        #       Child Loop BB60_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB60_143 Depth=1
	movl	$0, -28(%rbp)
.LBB60_145:                             # %for.cond611
                                        #   Parent Loop BB60_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB60_145 Depth=2
	movl	$0, -20(%rbp)
.LBB60_147:                             # %for.cond617
                                        #   Parent Loop BB60_143 Depth=1
                                        #     Parent Loop BB60_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB60_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB60_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB60_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB60_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB60_151
.LBB60_150:                             # %if.then638
                                        #   in Loop: Header=BB60_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB60_154
.LBB60_151:                             # %if.end639
                                        #   in Loop: Header=BB60_147 Depth=3
	jmp	.LBB60_152
.LBB60_152:                             # %for.inc640
                                        #   in Loop: Header=BB60_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_147
.LBB60_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB60_145 Depth=2
	jmp	.LBB60_154
.LBB60_154:                             # %for.end642
                                        #   in Loop: Header=BB60_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB60_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB60_143 Depth=1
	jmp	.LBB60_159
.LBB60_156:                             # %if.end646
                                        #   in Loop: Header=BB60_145 Depth=2
	jmp	.LBB60_157
.LBB60_157:                             # %for.inc647
                                        #   in Loop: Header=BB60_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_145
.LBB60_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB60_143 Depth=1
	jmp	.LBB60_159
.LBB60_159:                             # %for.end649
                                        #   in Loop: Header=BB60_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB60_161
# %bb.160:                              # %if.then652
	jmp	.LBB60_164
.LBB60_161:                             # %if.end653
                                        #   in Loop: Header=BB60_143 Depth=1
	jmp	.LBB60_162
.LBB60_162:                             # %for.inc654
                                        #   in Loop: Header=BB60_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_143
.LBB60_163:                             # %for.end656.loopexit
	jmp	.LBB60_164
.LBB60_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$423609522, -88(%rbp)   # imm = 0x193FC4B2
	jne	.LBB60_166
.LBB60_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_165
.Lfunc_end60:
	.size	test_wp_B_slice.57, .Lfunc_end60-test_wp_B_slice.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.58
.LCPI61_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.58
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.58,@function
estimate_weighting_factor_B_slice.58:   # @estimate_weighting_factor_B_slice.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$2147281634, -92(%rbp)  # imm = 0x7FFCEAE2
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB61_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB61_4
.LBB61_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB61_4
.LBB61_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB61_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB61_7
.LBB61_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB61_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB61_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_10 Depth 2
                                        #       Child Loop BB61_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB61_8 Depth=1
	movl	$0, -8(%rbp)
.LBB61_10:                              # %for.cond14
                                        #   Parent Loop BB61_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB61_10 Depth=2
	movl	$0, -16(%rbp)
.LBB61_12:                              # %for.cond19
                                        #   Parent Loop BB61_8 Depth=1
                                        #     Parent Loop BB61_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB61_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB61_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB61_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_12
.LBB61_15:                              # %for.end
                                        #   in Loop: Header=BB61_10 Depth=2
	jmp	.LBB61_16
.LBB61_16:                              # %for.inc50
                                        #   in Loop: Header=BB61_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_10
.LBB61_17:                              # %for.end52
                                        #   in Loop: Header=BB61_8 Depth=1
	jmp	.LBB61_18
.LBB61_18:                              # %for.inc53
                                        #   in Loop: Header=BB61_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_8
.LBB61_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB61_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_22 Depth 2
                                        #       Child Loop BB61_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB61_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB61_20 Depth=1
	movl	$0, -8(%rbp)
.LBB61_22:                              # %for.cond59
                                        #   Parent Loop BB61_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB61_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB61_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB61_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB61_29
.LBB61_25:                              # %cond.false70
                                        #   in Loop: Header=BB61_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB61_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	$127, %eax
	jmp	.LBB61_28
.LBB61_27:                              # %cond.false80
                                        #   in Loop: Header=BB61_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB61_28:                              # %cond.end88
                                        #   in Loop: Header=BB61_22 Depth=2
.LBB61_29:                              # %cond.end90
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB61_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB61_35
.LBB61_31:                              # %cond.false99
                                        #   in Loop: Header=BB61_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB61_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	$127, %eax
	jmp	.LBB61_34
.LBB61_33:                              # %cond.false107
                                        #   in Loop: Header=BB61_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB61_34:                              # %cond.end113
                                        #   in Loop: Header=BB61_22 Depth=2
.LBB61_35:                              # %cond.end115
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB61_36:                              # %for.cond117
                                        #   Parent Loop BB61_20 Depth=1
                                        #     Parent Loop BB61_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB61_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB61_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB61_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB61_49
.LBB61_39:                              # %if.else154
                                        #   in Loop: Header=BB61_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB61_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB61_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB61_45
.LBB61_41:                              # %cond.false160
                                        #   in Loop: Header=BB61_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB61_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB61_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB61_44
.LBB61_43:                              # %cond.false166
                                        #   in Loop: Header=BB61_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB61_44:                              # %cond.end170
                                        #   in Loop: Header=BB61_36 Depth=3
.LBB61_45:                              # %cond.end172
                                        #   in Loop: Header=BB61_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB61_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB61_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB61_48
.LBB61_47:                              # %if.then198
                                        #   in Loop: Header=BB61_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB61_48:                              # %if.end208
                                        #   in Loop: Header=BB61_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB61_49:                              # %if.end238
                                        #   in Loop: Header=BB61_36 Depth=3
	jmp	.LBB61_50
.LBB61_50:                              # %for.inc239
                                        #   in Loop: Header=BB61_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_36
.LBB61_51:                              # %for.end241
                                        #   in Loop: Header=BB61_22 Depth=2
	jmp	.LBB61_52
.LBB61_52:                              # %for.inc242
                                        #   in Loop: Header=BB61_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_22
.LBB61_53:                              # %for.end244
                                        #   in Loop: Header=BB61_20 Depth=1
	jmp	.LBB61_54
.LBB61_54:                              # %for.inc245
                                        #   in Loop: Header=BB61_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_20
.LBB61_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB61_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB61_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_59 Depth 2
                                        #       Child Loop BB61_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB61_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB61_57 Depth=1
	movl	$0, -8(%rbp)
.LBB61_59:                              # %for.cond254
                                        #   Parent Loop BB61_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB61_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB61_59 Depth=2
	movl	$0, -20(%rbp)
.LBB61_61:                              # %for.cond257
                                        #   Parent Loop BB61_57 Depth=1
                                        #     Parent Loop BB61_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB61_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB61_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB61_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB61_65
.LBB61_64:                              # %cond.false262
                                        #   in Loop: Header=BB61_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB61_65:                              # %cond.end263
                                        #   in Loop: Header=BB61_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB61_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_61
.LBB61_67:                              # %for.end295
                                        #   in Loop: Header=BB61_59 Depth=2
	jmp	.LBB61_68
.LBB61_68:                              # %for.inc296
                                        #   in Loop: Header=BB61_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_59
.LBB61_69:                              # %for.end298
                                        #   in Loop: Header=BB61_57 Depth=1
	jmp	.LBB61_70
.LBB61_70:                              # %for.inc299
                                        #   in Loop: Header=BB61_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_57
.LBB61_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB61_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB61_72 Depth=1
	movl	$0, -24(%rbp)
.LBB61_74:                              # %for.cond306
                                        #   Parent Loop BB61_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB61_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB61_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_74
.LBB61_77:                              # %for.end346
                                        #   in Loop: Header=BB61_72 Depth=1
	jmp	.LBB61_78
.LBB61_78:                              # %for.inc347
                                        #   in Loop: Header=BB61_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_72
.LBB61_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB61_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_82 Depth 2
                                        #       Child Loop BB61_84 Depth 3
                                        #       Child Loop BB61_88 Depth 3
                                        #         Child Loop BB61_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB61_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB61_80 Depth=1
	movl	$0, -8(%rbp)
.LBB61_82:                              # %for.cond353
                                        #   Parent Loop BB61_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_84 Depth 3
                                        #       Child Loop BB61_88 Depth 3
                                        #         Child Loop BB61_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB61_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB61_82 Depth=2
	movl	$0, -16(%rbp)
.LBB61_84:                              # %for.cond356
                                        #   Parent Loop BB61_80 Depth=1
                                        #     Parent Loop BB61_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB61_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB61_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_84
.LBB61_87:                              # %for.end380
                                        #   in Loop: Header=BB61_82 Depth=2
	movl	$0, -16(%rbp)
.LBB61_88:                              # %for.cond381
                                        #   Parent Loop BB61_80 Depth=1
                                        #     Parent Loop BB61_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB61_88 Depth=3
	movl	$0, -32(%rbp)
.LBB61_90:                              # %for.cond387
                                        #   Parent Loop BB61_80 Depth=1
                                        #     Parent Loop BB61_82 Depth=2
                                        #       Parent Loop BB61_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB61_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB61_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_90
.LBB61_93:                              # %for.end421
                                        #   in Loop: Header=BB61_88 Depth=3
	jmp	.LBB61_94
.LBB61_94:                              # %for.inc422
                                        #   in Loop: Header=BB61_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_88
.LBB61_95:                              # %for.end424
                                        #   in Loop: Header=BB61_82 Depth=2
	jmp	.LBB61_96
.LBB61_96:                              # %for.inc425
                                        #   in Loop: Header=BB61_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_82
.LBB61_97:                              # %for.end427
                                        #   in Loop: Header=BB61_80 Depth=1
	jmp	.LBB61_98
.LBB61_98:                              # %for.inc428
                                        #   in Loop: Header=BB61_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_80
.LBB61_99:                              # %for.end430
	jmp	.LBB61_189
.LBB61_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB61_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB61_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB61_101 Depth=1
	movl	$0, -8(%rbp)
.LBB61_103:                             # %for.cond436
                                        #   Parent Loop BB61_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB61_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB61_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB61_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_103
.LBB61_106:                             # %for.end447
                                        #   in Loop: Header=BB61_101 Depth=1
	jmp	.LBB61_107
.LBB61_107:                             # %for.inc448
                                        #   in Loop: Header=BB61_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_101
.LBB61_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB61_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_111 Depth 2
                                        #       Child Loop BB61_113 Depth 3
                                        #       Child Loop BB61_123 Depth 3
                                        #       Child Loop BB61_133 Depth 3
                                        #         Child Loop BB61_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB61_109 Depth=1
	movl	$0, -16(%rbp)
.LBB61_111:                             # %for.cond456
                                        #   Parent Loop BB61_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_113 Depth 3
                                        #       Child Loop BB61_123 Depth 3
                                        #       Child Loop BB61_133 Depth 3
                                        #         Child Loop BB61_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB61_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB61_113:                             # %for.cond476
                                        #   Parent Loop BB61_109 Depth=1
                                        #     Parent Loop BB61_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB61_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB61_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_113
.LBB61_116:                             # %for.end493
                                        #   in Loop: Header=BB61_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB61_117
	jp	.LBB61_117
	jmp	.LBB61_118
.LBB61_117:                             # %if.then500
                                        #   in Loop: Header=BB61_111 Depth=2
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_119
.LBB61_118:                             # %if.else511
                                        #   in Loop: Header=BB61_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB61_119:                             # %if.end513
                                        #   in Loop: Header=BB61_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB61_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB61_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB61_122
.LBB61_121:                             # %if.then519
                                        #   in Loop: Header=BB61_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB61_122:                             # %if.end521
                                        #   in Loop: Header=BB61_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB61_123:                             # %for.cond554
                                        #   Parent Loop BB61_109 Depth=1
                                        #     Parent Loop BB61_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB61_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB61_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB61_130
.LBB61_126:                             # %cond.false571
                                        #   in Loop: Header=BB61_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB61_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB61_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_129
.LBB61_128:                             # %cond.false583
                                        #   in Loop: Header=BB61_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB61_129:                             # %cond.end591
                                        #   in Loop: Header=BB61_123 Depth=3
.LBB61_130:                             # %cond.end593
                                        #   in Loop: Header=BB61_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB61_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_123
.LBB61_132:                             # %for.end600
                                        #   in Loop: Header=BB61_111 Depth=2
	movl	$0, -4(%rbp)
.LBB61_133:                             # %for.cond601
                                        #   Parent Loop BB61_109 Depth=1
                                        #     Parent Loop BB61_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB61_133 Depth=3
	movl	$0, -8(%rbp)
.LBB61_135:                             # %for.cond608
                                        #   Parent Loop BB61_109 Depth=1
                                        #     Parent Loop BB61_111 Depth=2
                                        #       Parent Loop BB61_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB61_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB61_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB61_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB61_142
.LBB61_138:                             # %cond.false630
                                        #   in Loop: Header=BB61_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB61_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB61_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB61_141
.LBB61_140:                             # %cond.false648
                                        #   in Loop: Header=BB61_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB61_141:                             # %cond.end661
                                        #   in Loop: Header=BB61_135 Depth=4
.LBB61_142:                             # %cond.end663
                                        #   in Loop: Header=BB61_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB61_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_135
.LBB61_144:                             # %for.end675
                                        #   in Loop: Header=BB61_133 Depth=3
	jmp	.LBB61_145
.LBB61_145:                             # %for.inc676
                                        #   in Loop: Header=BB61_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_133
.LBB61_146:                             # %for.end678
                                        #   in Loop: Header=BB61_111 Depth=2
	jmp	.LBB61_147
.LBB61_147:                             # %for.inc679
                                        #   in Loop: Header=BB61_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_111
.LBB61_148:                             # %for.end681
                                        #   in Loop: Header=BB61_109 Depth=1
	jmp	.LBB61_149
.LBB61_149:                             # %for.inc682
                                        #   in Loop: Header=BB61_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_109
.LBB61_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB61_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB61_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_154 Depth 2
                                        #       Child Loop BB61_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB61_152 Depth=1
	movl	$0, -24(%rbp)
.LBB61_154:                             # %for.cond694
                                        #   Parent Loop BB61_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB61_154 Depth=2
	movl	$0, -20(%rbp)
.LBB61_156:                             # %for.cond700
                                        #   Parent Loop BB61_152 Depth=1
                                        #     Parent Loop BB61_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB61_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB61_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_156
.LBB61_159:                             # %for.end730
                                        #   in Loop: Header=BB61_154 Depth=2
	jmp	.LBB61_160
.LBB61_160:                             # %for.inc731
                                        #   in Loop: Header=BB61_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_154
.LBB61_161:                             # %for.end733
                                        #   in Loop: Header=BB61_152 Depth=1
	jmp	.LBB61_162
.LBB61_162:                             # %for.inc734
                                        #   in Loop: Header=BB61_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_152
.LBB61_163:                             # %for.end736
	jmp	.LBB61_173
.LBB61_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB61_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB61_165 Depth=1
	movl	$0, -24(%rbp)
.LBB61_167:                             # %for.cond743
                                        #   Parent Loop BB61_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB61_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB61_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_167
.LBB61_170:                             # %for.end784
                                        #   in Loop: Header=BB61_165 Depth=1
	jmp	.LBB61_171
.LBB61_171:                             # %for.inc785
                                        #   in Loop: Header=BB61_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_165
.LBB61_172:                             # %for.end787
	jmp	.LBB61_173
.LBB61_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB61_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_176 Depth 2
                                        #       Child Loop BB61_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB61_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB61_174 Depth=1
	movl	$0, -8(%rbp)
.LBB61_176:                             # %for.cond793
                                        #   Parent Loop BB61_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB61_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB61_176 Depth=2
	movl	$0, -20(%rbp)
.LBB61_178:                             # %for.cond797
                                        #   Parent Loop BB61_174 Depth=1
                                        #     Parent Loop BB61_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB61_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB61_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB61_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB61_182
.LBB61_181:                             # %cond.false804
                                        #   in Loop: Header=BB61_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB61_182:                             # %cond.end805
                                        #   in Loop: Header=BB61_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB61_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_178
.LBB61_184:                             # %for.end833
                                        #   in Loop: Header=BB61_176 Depth=2
	jmp	.LBB61_185
.LBB61_185:                             # %for.inc834
                                        #   in Loop: Header=BB61_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_176
.LBB61_186:                             # %for.end836
                                        #   in Loop: Header=BB61_174 Depth=1
	jmp	.LBB61_187
.LBB61_187:                             # %for.inc837
                                        #   in Loop: Header=BB61_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_174
.LBB61_188:                             # %for.end839
	jmp	.LBB61_189
.LBB61_189:                             # %if.end840
	cmpl	$2147281634, -92(%rbp)  # imm = 0x7FFCEAE2
	jne	.LBB61_191
.LBB61_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_190
.Lfunc_end61:
	.size	estimate_weighting_factor_B_slice.58, .Lfunc_end61-estimate_weighting_factor_B_slice.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.59
.LCPI62_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.59
	.p2align	4, 0x90
	.type	test_wp_P_slice.59,@function
test_wp_P_slice.59:                     # @test_wp_P_slice.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$296342713, -64(%rbp)   # imm = 0x11A9D4B9
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB62_4
.LBB62_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB62_4
.LBB62_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB62_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_7 Depth 2
                                        #       Child Loop BB62_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB62_5 Depth=1
	movl	$0, -24(%rbp)
.LBB62_7:                               # %for.cond9
                                        #   Parent Loop BB62_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB62_7 Depth=2
	movl	$0, -12(%rbp)
.LBB62_9:                               # %for.cond14
                                        #   Parent Loop BB62_5 Depth=1
                                        #     Parent Loop BB62_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB62_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB62_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB62_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_9
.LBB62_12:                              # %for.end
                                        #   in Loop: Header=BB62_7 Depth=2
	jmp	.LBB62_13
.LBB62_13:                              # %for.inc41
                                        #   in Loop: Header=BB62_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_7
.LBB62_14:                              # %for.end43
                                        #   in Loop: Header=BB62_5 Depth=1
	jmp	.LBB62_15
.LBB62_15:                              # %for.inc44
                                        #   in Loop: Header=BB62_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_5
.LBB62_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB62_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB62_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB62_17 Depth=1
	movl	$0, -24(%rbp)
.LBB62_19:                              # %for.cond50
                                        #   Parent Loop BB62_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB62_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB62_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_19
.LBB62_22:                              # %for.end60
                                        #   in Loop: Header=BB62_17 Depth=1
	jmp	.LBB62_23
.LBB62_23:                              # %for.inc61
                                        #   in Loop: Header=BB62_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_17
.LBB62_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB62_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_27 Depth 2
                                        #       Child Loop BB62_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	$0, -12(%rbp)
.LBB62_27:                              # %for.cond69
                                        #   Parent Loop BB62_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB62_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB62_29:                              # %for.cond85
                                        #   Parent Loop BB62_25 Depth=1
                                        #     Parent Loop BB62_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB62_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB62_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_29
.LBB62_32:                              # %for.end99
                                        #   in Loop: Header=BB62_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB62_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB62_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB62_34
	jp	.LBB62_34
	jmp	.LBB62_35
.LBB62_34:                              # %if.then106
                                        #   in Loop: Header=BB62_27 Depth=2
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB62_36
.LBB62_35:                              # %if.else
                                        #   in Loop: Header=BB62_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB62_36:                              # %if.end
                                        #   in Loop: Header=BB62_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB62_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB62_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB62_39
.LBB62_38:                              # %if.then137
                                        #   in Loop: Header=BB62_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB62_39:                              # %if.end143
                                        #   in Loop: Header=BB62_27 Depth=2
	jmp	.LBB62_47
.LBB62_40:                              # %if.else144
                                        #   in Loop: Header=BB62_27 Depth=2
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB62_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB62_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB62_46
.LBB62_42:                              # %cond.false168
                                        #   in Loop: Header=BB62_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB62_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB62_27 Depth=2
	movl	$127, %eax
	jmp	.LBB62_45
.LBB62_44:                              # %cond.false177
                                        #   in Loop: Header=BB62_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB62_45:                              # %cond.end183
                                        #   in Loop: Header=BB62_27 Depth=2
.LBB62_46:                              # %cond.end185
                                        #   in Loop: Header=BB62_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB62_47:                              # %if.end197
                                        #   in Loop: Header=BB62_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB62_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_27
.LBB62_49:                              # %for.end210
                                        #   in Loop: Header=BB62_25 Depth=1
	jmp	.LBB62_50
.LBB62_50:                              # %for.inc211
                                        #   in Loop: Header=BB62_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_25
.LBB62_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB62_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_54 Depth 2
                                        #       Child Loop BB62_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	$0, -32(%rbp)
.LBB62_54:                              # %for.cond219
                                        #   Parent Loop BB62_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB62_54 Depth=2
	movl	$0, -36(%rbp)
.LBB62_56:                              # %for.cond225
                                        #   Parent Loop BB62_52 Depth=1
                                        #     Parent Loop BB62_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB62_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB62_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB62_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB62_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB62_60
.LBB62_59:                              # %if.then246
                                        #   in Loop: Header=BB62_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB62_63
.LBB62_60:                              # %if.end247
                                        #   in Loop: Header=BB62_56 Depth=3
	jmp	.LBB62_61
.LBB62_61:                              # %for.inc248
                                        #   in Loop: Header=BB62_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_56
.LBB62_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB62_54 Depth=2
	jmp	.LBB62_63
.LBB62_63:                              # %for.end250
                                        #   in Loop: Header=BB62_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB62_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB62_52 Depth=1
	jmp	.LBB62_68
.LBB62_65:                              # %if.end254
                                        #   in Loop: Header=BB62_54 Depth=2
	jmp	.LBB62_66
.LBB62_66:                              # %for.inc255
                                        #   in Loop: Header=BB62_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB62_54
.LBB62_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB62_52 Depth=1
	jmp	.LBB62_68
.LBB62_68:                              # %for.end257
                                        #   in Loop: Header=BB62_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB62_70
# %bb.69:                               # %if.then260
	jmp	.LBB62_73
.LBB62_70:                              # %if.end261
                                        #   in Loop: Header=BB62_52 Depth=1
	jmp	.LBB62_71
.LBB62_71:                              # %for.inc262
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_52
.LBB62_72:                              # %for.end264.loopexit
	jmp	.LBB62_73
.LBB62_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$296342713, -64(%rbp)   # imm = 0x11A9D4B9
	jne	.LBB62_75
.LBB62_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_74
.Lfunc_end62:
	.size	test_wp_P_slice.59, .Lfunc_end62-test_wp_P_slice.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.60
.LCPI63_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.60
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.60,@function
estimate_weighting_factor_B_slice.60:   # @estimate_weighting_factor_B_slice.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$968189659, -84(%rbp)   # imm = 0x39B566DB
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB63_4
.LBB63_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB63_4
.LBB63_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB63_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB63_7
.LBB63_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB63_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB63_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_10 Depth 2
                                        #       Child Loop BB63_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB63_8 Depth=1
	movl	$0, -8(%rbp)
.LBB63_10:                              # %for.cond14
                                        #   Parent Loop BB63_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB63_10 Depth=2
	movl	$0, -16(%rbp)
.LBB63_12:                              # %for.cond19
                                        #   Parent Loop BB63_8 Depth=1
                                        #     Parent Loop BB63_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB63_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB63_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB63_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_12
.LBB63_15:                              # %for.end
                                        #   in Loop: Header=BB63_10 Depth=2
	jmp	.LBB63_16
.LBB63_16:                              # %for.inc50
                                        #   in Loop: Header=BB63_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_10
.LBB63_17:                              # %for.end52
                                        #   in Loop: Header=BB63_8 Depth=1
	jmp	.LBB63_18
.LBB63_18:                              # %for.inc53
                                        #   in Loop: Header=BB63_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_8
.LBB63_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB63_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_22 Depth 2
                                        #       Child Loop BB63_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB63_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB63_20 Depth=1
	movl	$0, -8(%rbp)
.LBB63_22:                              # %for.cond59
                                        #   Parent Loop BB63_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB63_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB63_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB63_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB63_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB63_29
.LBB63_25:                              # %cond.false70
                                        #   in Loop: Header=BB63_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB63_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB63_22 Depth=2
	movl	$127, %eax
	jmp	.LBB63_28
.LBB63_27:                              # %cond.false80
                                        #   in Loop: Header=BB63_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB63_28:                              # %cond.end88
                                        #   in Loop: Header=BB63_22 Depth=2
.LBB63_29:                              # %cond.end90
                                        #   in Loop: Header=BB63_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB63_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB63_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB63_35
.LBB63_31:                              # %cond.false99
                                        #   in Loop: Header=BB63_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB63_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB63_22 Depth=2
	movl	$127, %eax
	jmp	.LBB63_34
.LBB63_33:                              # %cond.false107
                                        #   in Loop: Header=BB63_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB63_34:                              # %cond.end113
                                        #   in Loop: Header=BB63_22 Depth=2
.LBB63_35:                              # %cond.end115
                                        #   in Loop: Header=BB63_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB63_36:                              # %for.cond117
                                        #   Parent Loop BB63_20 Depth=1
                                        #     Parent Loop BB63_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB63_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB63_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB63_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB63_49
.LBB63_39:                              # %if.else154
                                        #   in Loop: Header=BB63_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB63_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB63_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB63_45
.LBB63_41:                              # %cond.false160
                                        #   in Loop: Header=BB63_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB63_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB63_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB63_44
.LBB63_43:                              # %cond.false166
                                        #   in Loop: Header=BB63_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB63_44:                              # %cond.end170
                                        #   in Loop: Header=BB63_36 Depth=3
.LBB63_45:                              # %cond.end172
                                        #   in Loop: Header=BB63_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB63_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB63_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB63_48
.LBB63_47:                              # %if.then198
                                        #   in Loop: Header=BB63_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB63_48:                              # %if.end208
                                        #   in Loop: Header=BB63_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB63_49:                              # %if.end238
                                        #   in Loop: Header=BB63_36 Depth=3
	jmp	.LBB63_50
.LBB63_50:                              # %for.inc239
                                        #   in Loop: Header=BB63_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_36
.LBB63_51:                              # %for.end241
                                        #   in Loop: Header=BB63_22 Depth=2
	jmp	.LBB63_52
.LBB63_52:                              # %for.inc242
                                        #   in Loop: Header=BB63_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_22
.LBB63_53:                              # %for.end244
                                        #   in Loop: Header=BB63_20 Depth=1
	jmp	.LBB63_54
.LBB63_54:                              # %for.inc245
                                        #   in Loop: Header=BB63_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_20
.LBB63_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB63_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB63_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_59 Depth 2
                                        #       Child Loop BB63_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB63_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB63_57 Depth=1
	movl	$0, -8(%rbp)
.LBB63_59:                              # %for.cond254
                                        #   Parent Loop BB63_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB63_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB63_59 Depth=2
	movl	$0, -20(%rbp)
.LBB63_61:                              # %for.cond257
                                        #   Parent Loop BB63_57 Depth=1
                                        #     Parent Loop BB63_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB63_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB63_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB63_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB63_65
.LBB63_64:                              # %cond.false262
                                        #   in Loop: Header=BB63_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB63_65:                              # %cond.end263
                                        #   in Loop: Header=BB63_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB63_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_61
.LBB63_67:                              # %for.end295
                                        #   in Loop: Header=BB63_59 Depth=2
	jmp	.LBB63_68
.LBB63_68:                              # %for.inc296
                                        #   in Loop: Header=BB63_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_59
.LBB63_69:                              # %for.end298
                                        #   in Loop: Header=BB63_57 Depth=1
	jmp	.LBB63_70
.LBB63_70:                              # %for.inc299
                                        #   in Loop: Header=BB63_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_57
.LBB63_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB63_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB63_72 Depth=1
	movl	$0, -24(%rbp)
.LBB63_74:                              # %for.cond306
                                        #   Parent Loop BB63_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB63_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB63_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_74
.LBB63_77:                              # %for.end346
                                        #   in Loop: Header=BB63_72 Depth=1
	jmp	.LBB63_78
.LBB63_78:                              # %for.inc347
                                        #   in Loop: Header=BB63_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_72
.LBB63_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB63_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_82 Depth 2
                                        #       Child Loop BB63_84 Depth 3
                                        #       Child Loop BB63_88 Depth 3
                                        #         Child Loop BB63_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB63_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB63_80 Depth=1
	movl	$0, -8(%rbp)
.LBB63_82:                              # %for.cond353
                                        #   Parent Loop BB63_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_84 Depth 3
                                        #       Child Loop BB63_88 Depth 3
                                        #         Child Loop BB63_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB63_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB63_82 Depth=2
	movl	$0, -16(%rbp)
.LBB63_84:                              # %for.cond356
                                        #   Parent Loop BB63_80 Depth=1
                                        #     Parent Loop BB63_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB63_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB63_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_84
.LBB63_87:                              # %for.end380
                                        #   in Loop: Header=BB63_82 Depth=2
	movl	$0, -16(%rbp)
.LBB63_88:                              # %for.cond381
                                        #   Parent Loop BB63_80 Depth=1
                                        #     Parent Loop BB63_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB63_88 Depth=3
	movl	$0, -32(%rbp)
.LBB63_90:                              # %for.cond387
                                        #   Parent Loop BB63_80 Depth=1
                                        #     Parent Loop BB63_82 Depth=2
                                        #       Parent Loop BB63_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB63_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB63_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB63_90
.LBB63_93:                              # %for.end421
                                        #   in Loop: Header=BB63_88 Depth=3
	jmp	.LBB63_94
.LBB63_94:                              # %for.inc422
                                        #   in Loop: Header=BB63_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_88
.LBB63_95:                              # %for.end424
                                        #   in Loop: Header=BB63_82 Depth=2
	jmp	.LBB63_96
.LBB63_96:                              # %for.inc425
                                        #   in Loop: Header=BB63_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_82
.LBB63_97:                              # %for.end427
                                        #   in Loop: Header=BB63_80 Depth=1
	jmp	.LBB63_98
.LBB63_98:                              # %for.inc428
                                        #   in Loop: Header=BB63_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_80
.LBB63_99:                              # %for.end430
	jmp	.LBB63_189
.LBB63_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB63_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB63_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB63_101 Depth=1
	movl	$0, -8(%rbp)
.LBB63_103:                             # %for.cond436
                                        #   Parent Loop BB63_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB63_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB63_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB63_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_103
.LBB63_106:                             # %for.end447
                                        #   in Loop: Header=BB63_101 Depth=1
	jmp	.LBB63_107
.LBB63_107:                             # %for.inc448
                                        #   in Loop: Header=BB63_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_101
.LBB63_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB63_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_111 Depth 2
                                        #       Child Loop BB63_113 Depth 3
                                        #       Child Loop BB63_123 Depth 3
                                        #       Child Loop BB63_133 Depth 3
                                        #         Child Loop BB63_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB63_109 Depth=1
	movl	$0, -16(%rbp)
.LBB63_111:                             # %for.cond456
                                        #   Parent Loop BB63_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_113 Depth 3
                                        #       Child Loop BB63_123 Depth 3
                                        #       Child Loop BB63_133 Depth 3
                                        #         Child Loop BB63_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB63_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB63_113:                             # %for.cond476
                                        #   Parent Loop BB63_109 Depth=1
                                        #     Parent Loop BB63_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB63_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB63_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_113
.LBB63_116:                             # %for.end493
                                        #   in Loop: Header=BB63_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB63_117
	jp	.LBB63_117
	jmp	.LBB63_118
.LBB63_117:                             # %if.then500
                                        #   in Loop: Header=BB63_111 Depth=2
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_119
.LBB63_118:                             # %if.else511
                                        #   in Loop: Header=BB63_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB63_119:                             # %if.end513
                                        #   in Loop: Header=BB63_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB63_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB63_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB63_122
.LBB63_121:                             # %if.then519
                                        #   in Loop: Header=BB63_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB63_122:                             # %if.end521
                                        #   in Loop: Header=BB63_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB63_123:                             # %for.cond554
                                        #   Parent Loop BB63_109 Depth=1
                                        #     Parent Loop BB63_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB63_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB63_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB63_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB63_130
.LBB63_126:                             # %cond.false571
                                        #   in Loop: Header=BB63_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB63_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB63_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_129
.LBB63_128:                             # %cond.false583
                                        #   in Loop: Header=BB63_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB63_129:                             # %cond.end591
                                        #   in Loop: Header=BB63_123 Depth=3
.LBB63_130:                             # %cond.end593
                                        #   in Loop: Header=BB63_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB63_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_123
.LBB63_132:                             # %for.end600
                                        #   in Loop: Header=BB63_111 Depth=2
	movl	$0, -4(%rbp)
.LBB63_133:                             # %for.cond601
                                        #   Parent Loop BB63_109 Depth=1
                                        #     Parent Loop BB63_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	$0, -8(%rbp)
.LBB63_135:                             # %for.cond608
                                        #   Parent Loop BB63_109 Depth=1
                                        #     Parent Loop BB63_111 Depth=2
                                        #       Parent Loop BB63_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB63_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB63_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB63_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB63_142
.LBB63_138:                             # %cond.false630
                                        #   in Loop: Header=BB63_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB63_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB63_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_141
.LBB63_140:                             # %cond.false648
                                        #   in Loop: Header=BB63_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB63_141:                             # %cond.end661
                                        #   in Loop: Header=BB63_135 Depth=4
.LBB63_142:                             # %cond.end663
                                        #   in Loop: Header=BB63_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB63_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_135
.LBB63_144:                             # %for.end675
                                        #   in Loop: Header=BB63_133 Depth=3
	jmp	.LBB63_145
.LBB63_145:                             # %for.inc676
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_133
.LBB63_146:                             # %for.end678
                                        #   in Loop: Header=BB63_111 Depth=2
	jmp	.LBB63_147
.LBB63_147:                             # %for.inc679
                                        #   in Loop: Header=BB63_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_111
.LBB63_148:                             # %for.end681
                                        #   in Loop: Header=BB63_109 Depth=1
	jmp	.LBB63_149
.LBB63_149:                             # %for.inc682
                                        #   in Loop: Header=BB63_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_109
.LBB63_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB63_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB63_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_154 Depth 2
                                        #       Child Loop BB63_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB63_152 Depth=1
	movl	$0, -24(%rbp)
.LBB63_154:                             # %for.cond694
                                        #   Parent Loop BB63_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB63_154 Depth=2
	movl	$0, -20(%rbp)
.LBB63_156:                             # %for.cond700
                                        #   Parent Loop BB63_152 Depth=1
                                        #     Parent Loop BB63_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB63_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB63_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_156
.LBB63_159:                             # %for.end730
                                        #   in Loop: Header=BB63_154 Depth=2
	jmp	.LBB63_160
.LBB63_160:                             # %for.inc731
                                        #   in Loop: Header=BB63_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_154
.LBB63_161:                             # %for.end733
                                        #   in Loop: Header=BB63_152 Depth=1
	jmp	.LBB63_162
.LBB63_162:                             # %for.inc734
                                        #   in Loop: Header=BB63_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_152
.LBB63_163:                             # %for.end736
	jmp	.LBB63_173
.LBB63_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB63_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB63_165 Depth=1
	movl	$0, -24(%rbp)
.LBB63_167:                             # %for.cond743
                                        #   Parent Loop BB63_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB63_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB63_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_167
.LBB63_170:                             # %for.end784
                                        #   in Loop: Header=BB63_165 Depth=1
	jmp	.LBB63_171
.LBB63_171:                             # %for.inc785
                                        #   in Loop: Header=BB63_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_165
.LBB63_172:                             # %for.end787
	jmp	.LBB63_173
.LBB63_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB63_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_176 Depth 2
                                        #       Child Loop BB63_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB63_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB63_174 Depth=1
	movl	$0, -8(%rbp)
.LBB63_176:                             # %for.cond793
                                        #   Parent Loop BB63_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB63_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB63_176 Depth=2
	movl	$0, -20(%rbp)
.LBB63_178:                             # %for.cond797
                                        #   Parent Loop BB63_174 Depth=1
                                        #     Parent Loop BB63_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB63_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB63_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB63_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB63_182
.LBB63_181:                             # %cond.false804
                                        #   in Loop: Header=BB63_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB63_182:                             # %cond.end805
                                        #   in Loop: Header=BB63_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB63_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_178
.LBB63_184:                             # %for.end833
                                        #   in Loop: Header=BB63_176 Depth=2
	jmp	.LBB63_185
.LBB63_185:                             # %for.inc834
                                        #   in Loop: Header=BB63_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_176
.LBB63_186:                             # %for.end836
                                        #   in Loop: Header=BB63_174 Depth=1
	jmp	.LBB63_187
.LBB63_187:                             # %for.inc837
                                        #   in Loop: Header=BB63_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_174
.LBB63_188:                             # %for.end839
	jmp	.LBB63_189
.LBB63_189:                             # %if.end840
	cmpl	$968189659, -84(%rbp)   # imm = 0x39B566DB
	jne	.LBB63_191
.LBB63_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_190
.Lfunc_end63:
	.size	estimate_weighting_factor_B_slice.60, .Lfunc_end63-estimate_weighting_factor_B_slice.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.61
.LCPI64_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.61
	.p2align	4, 0x90
	.type	test_wp_P_slice.61,@function
test_wp_P_slice.61:                     # @test_wp_P_slice.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$258973331, -64(%rbp)   # imm = 0xF6F9E93
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB64_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB64_4
.LBB64_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB64_4
.LBB64_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB64_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_7 Depth 2
                                        #       Child Loop BB64_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	$0, -24(%rbp)
.LBB64_7:                               # %for.cond9
                                        #   Parent Loop BB64_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB64_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB64_7 Depth=2
	movl	$0, -12(%rbp)
.LBB64_9:                               # %for.cond14
                                        #   Parent Loop BB64_5 Depth=1
                                        #     Parent Loop BB64_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB64_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB64_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB64_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_9
.LBB64_12:                              # %for.end
                                        #   in Loop: Header=BB64_7 Depth=2
	jmp	.LBB64_13
.LBB64_13:                              # %for.inc41
                                        #   in Loop: Header=BB64_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_7
.LBB64_14:                              # %for.end43
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_15
.LBB64_15:                              # %for.inc44
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_5
.LBB64_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB64_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB64_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB64_17 Depth=1
	movl	$0, -24(%rbp)
.LBB64_19:                              # %for.cond50
                                        #   Parent Loop BB64_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB64_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB64_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB64_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_19
.LBB64_22:                              # %for.end60
                                        #   in Loop: Header=BB64_17 Depth=1
	jmp	.LBB64_23
.LBB64_23:                              # %for.inc61
                                        #   in Loop: Header=BB64_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_17
.LBB64_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB64_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_27 Depth 2
                                        #       Child Loop BB64_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB64_25 Depth=1
	movl	$0, -12(%rbp)
.LBB64_27:                              # %for.cond69
                                        #   Parent Loop BB64_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB64_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB64_29:                              # %for.cond85
                                        #   Parent Loop BB64_25 Depth=1
                                        #     Parent Loop BB64_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB64_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB64_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_29
.LBB64_32:                              # %for.end99
                                        #   in Loop: Header=BB64_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB64_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB64_34
	jp	.LBB64_34
	jmp	.LBB64_35
.LBB64_34:                              # %if.then106
                                        #   in Loop: Header=BB64_27 Depth=2
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB64_36
.LBB64_35:                              # %if.else
                                        #   in Loop: Header=BB64_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB64_36:                              # %if.end
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB64_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB64_39
.LBB64_38:                              # %if.then137
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB64_39:                              # %if.end143
                                        #   in Loop: Header=BB64_27 Depth=2
	jmp	.LBB64_47
.LBB64_40:                              # %if.else144
                                        #   in Loop: Header=BB64_27 Depth=2
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB64_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB64_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB64_46
.LBB64_42:                              # %cond.false168
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB64_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB64_27 Depth=2
	movl	$127, %eax
	jmp	.LBB64_45
.LBB64_44:                              # %cond.false177
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB64_45:                              # %cond.end183
                                        #   in Loop: Header=BB64_27 Depth=2
.LBB64_46:                              # %cond.end185
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB64_47:                              # %if.end197
                                        #   in Loop: Header=BB64_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB64_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_27
.LBB64_49:                              # %for.end210
                                        #   in Loop: Header=BB64_25 Depth=1
	jmp	.LBB64_50
.LBB64_50:                              # %for.inc211
                                        #   in Loop: Header=BB64_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_25
.LBB64_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB64_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_54 Depth 2
                                        #       Child Loop BB64_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	$0, -32(%rbp)
.LBB64_54:                              # %for.cond219
                                        #   Parent Loop BB64_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB64_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB64_54 Depth=2
	movl	$0, -36(%rbp)
.LBB64_56:                              # %for.cond225
                                        #   Parent Loop BB64_52 Depth=1
                                        #     Parent Loop BB64_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB64_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB64_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB64_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB64_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB64_60
.LBB64_59:                              # %if.then246
                                        #   in Loop: Header=BB64_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB64_63
.LBB64_60:                              # %if.end247
                                        #   in Loop: Header=BB64_56 Depth=3
	jmp	.LBB64_61
.LBB64_61:                              # %for.inc248
                                        #   in Loop: Header=BB64_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB64_56
.LBB64_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB64_54 Depth=2
	jmp	.LBB64_63
.LBB64_63:                              # %for.end250
                                        #   in Loop: Header=BB64_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB64_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB64_52 Depth=1
	jmp	.LBB64_68
.LBB64_65:                              # %if.end254
                                        #   in Loop: Header=BB64_54 Depth=2
	jmp	.LBB64_66
.LBB64_66:                              # %for.inc255
                                        #   in Loop: Header=BB64_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB64_54
.LBB64_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB64_52 Depth=1
	jmp	.LBB64_68
.LBB64_68:                              # %for.end257
                                        #   in Loop: Header=BB64_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB64_70
# %bb.69:                               # %if.then260
	jmp	.LBB64_73
.LBB64_70:                              # %if.end261
                                        #   in Loop: Header=BB64_52 Depth=1
	jmp	.LBB64_71
.LBB64_71:                              # %for.inc262
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_52
.LBB64_72:                              # %for.end264.loopexit
	jmp	.LBB64_73
.LBB64_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$258973331, -64(%rbp)   # imm = 0xF6F9E93
	jne	.LBB64_75
.LBB64_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_74
.Lfunc_end64:
	.size	test_wp_P_slice.61, .Lfunc_end64-test_wp_P_slice.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.62
.LCPI65_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.62
	.p2align	4, 0x90
	.type	test_wp_P_slice.62,@function
test_wp_P_slice.62:                     # @test_wp_P_slice.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$684542932, -60(%rbp)   # imm = 0x28CD4BD4
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB65_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB65_4
.LBB65_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB65_4
.LBB65_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB65_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_7 Depth 2
                                        #       Child Loop BB65_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB65_5 Depth=1
	movl	$0, -24(%rbp)
.LBB65_7:                               # %for.cond9
                                        #   Parent Loop BB65_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB65_7 Depth=2
	movl	$0, -12(%rbp)
.LBB65_9:                               # %for.cond14
                                        #   Parent Loop BB65_5 Depth=1
                                        #     Parent Loop BB65_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB65_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB65_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB65_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_9
.LBB65_12:                              # %for.end
                                        #   in Loop: Header=BB65_7 Depth=2
	jmp	.LBB65_13
.LBB65_13:                              # %for.inc41
                                        #   in Loop: Header=BB65_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_7
.LBB65_14:                              # %for.end43
                                        #   in Loop: Header=BB65_5 Depth=1
	jmp	.LBB65_15
.LBB65_15:                              # %for.inc44
                                        #   in Loop: Header=BB65_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_5
.LBB65_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB65_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB65_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB65_17 Depth=1
	movl	$0, -24(%rbp)
.LBB65_19:                              # %for.cond50
                                        #   Parent Loop BB65_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB65_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB65_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_19
.LBB65_22:                              # %for.end60
                                        #   in Loop: Header=BB65_17 Depth=1
	jmp	.LBB65_23
.LBB65_23:                              # %for.inc61
                                        #   in Loop: Header=BB65_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_17
.LBB65_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB65_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_27 Depth 2
                                        #       Child Loop BB65_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB65_25 Depth=1
	movl	$0, -12(%rbp)
.LBB65_27:                              # %for.cond69
                                        #   Parent Loop BB65_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB65_29:                              # %for.cond85
                                        #   Parent Loop BB65_25 Depth=1
                                        #     Parent Loop BB65_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB65_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB65_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_29
.LBB65_32:                              # %for.end99
                                        #   in Loop: Header=BB65_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB65_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB65_34
	jp	.LBB65_34
	jmp	.LBB65_35
.LBB65_34:                              # %if.then106
                                        #   in Loop: Header=BB65_27 Depth=2
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB65_36
.LBB65_35:                              # %if.else
                                        #   in Loop: Header=BB65_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB65_36:                              # %if.end
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB65_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB65_39
.LBB65_38:                              # %if.then137
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB65_39:                              # %if.end143
                                        #   in Loop: Header=BB65_27 Depth=2
	jmp	.LBB65_47
.LBB65_40:                              # %if.else144
                                        #   in Loop: Header=BB65_27 Depth=2
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB65_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB65_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB65_46
.LBB65_42:                              # %cond.false168
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB65_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB65_27 Depth=2
	movl	$127, %eax
	jmp	.LBB65_45
.LBB65_44:                              # %cond.false177
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB65_45:                              # %cond.end183
                                        #   in Loop: Header=BB65_27 Depth=2
.LBB65_46:                              # %cond.end185
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB65_47:                              # %if.end197
                                        #   in Loop: Header=BB65_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB65_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_27
.LBB65_49:                              # %for.end210
                                        #   in Loop: Header=BB65_25 Depth=1
	jmp	.LBB65_50
.LBB65_50:                              # %for.inc211
                                        #   in Loop: Header=BB65_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_25
.LBB65_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB65_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_54 Depth 2
                                        #       Child Loop BB65_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	$0, -36(%rbp)
.LBB65_54:                              # %for.cond219
                                        #   Parent Loop BB65_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	$0, -32(%rbp)
.LBB65_56:                              # %for.cond225
                                        #   Parent Loop BB65_52 Depth=1
                                        #     Parent Loop BB65_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB65_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB65_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB65_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB65_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB65_60
.LBB65_59:                              # %if.then246
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB65_63
.LBB65_60:                              # %if.end247
                                        #   in Loop: Header=BB65_56 Depth=3
	jmp	.LBB65_61
.LBB65_61:                              # %for.inc248
                                        #   in Loop: Header=BB65_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_56
.LBB65_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB65_54 Depth=2
	jmp	.LBB65_63
.LBB65_63:                              # %for.end250
                                        #   in Loop: Header=BB65_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB65_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB65_52 Depth=1
	jmp	.LBB65_68
.LBB65_65:                              # %if.end254
                                        #   in Loop: Header=BB65_54 Depth=2
	jmp	.LBB65_66
.LBB65_66:                              # %for.inc255
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB65_54
.LBB65_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB65_52 Depth=1
	jmp	.LBB65_68
.LBB65_68:                              # %for.end257
                                        #   in Loop: Header=BB65_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB65_70
# %bb.69:                               # %if.then260
	jmp	.LBB65_73
.LBB65_70:                              # %if.end261
                                        #   in Loop: Header=BB65_52 Depth=1
	jmp	.LBB65_71
.LBB65_71:                              # %for.inc262
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_52
.LBB65_72:                              # %for.end264.loopexit
	jmp	.LBB65_73
.LBB65_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$684542932, -60(%rbp)   # imm = 0x28CD4BD4
	jne	.LBB65_75
.LBB65_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_74
.Lfunc_end65:
	.size	test_wp_P_slice.62, .Lfunc_end65-test_wp_P_slice.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.63
.LCPI66_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.63
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.63,@function
estimate_weighting_factor_B_slice.63:   # @estimate_weighting_factor_B_slice.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$41403205, -88(%rbp)    # imm = 0x277C345
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB66_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB66_4
.LBB66_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB66_4
.LBB66_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB66_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB66_7
.LBB66_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB66_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB66_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_10 Depth 2
                                        #       Child Loop BB66_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB66_8 Depth=1
	movl	$0, -8(%rbp)
.LBB66_10:                              # %for.cond14
                                        #   Parent Loop BB66_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB66_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB66_10 Depth=2
	movl	$0, -16(%rbp)
.LBB66_12:                              # %for.cond19
                                        #   Parent Loop BB66_8 Depth=1
                                        #     Parent Loop BB66_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB66_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB66_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB66_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_12
.LBB66_15:                              # %for.end
                                        #   in Loop: Header=BB66_10 Depth=2
	jmp	.LBB66_16
.LBB66_16:                              # %for.inc50
                                        #   in Loop: Header=BB66_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_10
.LBB66_17:                              # %for.end52
                                        #   in Loop: Header=BB66_8 Depth=1
	jmp	.LBB66_18
.LBB66_18:                              # %for.inc53
                                        #   in Loop: Header=BB66_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_8
.LBB66_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB66_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_22 Depth 2
                                        #       Child Loop BB66_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB66_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB66_20 Depth=1
	movl	$0, -8(%rbp)
.LBB66_22:                              # %for.cond59
                                        #   Parent Loop BB66_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB66_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB66_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB66_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB66_29
.LBB66_25:                              # %cond.false70
                                        #   in Loop: Header=BB66_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB66_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	$127, %eax
	jmp	.LBB66_28
.LBB66_27:                              # %cond.false80
                                        #   in Loop: Header=BB66_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB66_28:                              # %cond.end88
                                        #   in Loop: Header=BB66_22 Depth=2
.LBB66_29:                              # %cond.end90
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB66_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB66_35
.LBB66_31:                              # %cond.false99
                                        #   in Loop: Header=BB66_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB66_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	$127, %eax
	jmp	.LBB66_34
.LBB66_33:                              # %cond.false107
                                        #   in Loop: Header=BB66_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB66_34:                              # %cond.end113
                                        #   in Loop: Header=BB66_22 Depth=2
.LBB66_35:                              # %cond.end115
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB66_36:                              # %for.cond117
                                        #   Parent Loop BB66_20 Depth=1
                                        #     Parent Loop BB66_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB66_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB66_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB66_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB66_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB66_49
.LBB66_39:                              # %if.else154
                                        #   in Loop: Header=BB66_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB66_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB66_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB66_45
.LBB66_41:                              # %cond.false160
                                        #   in Loop: Header=BB66_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB66_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB66_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB66_44
.LBB66_43:                              # %cond.false166
                                        #   in Loop: Header=BB66_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB66_44:                              # %cond.end170
                                        #   in Loop: Header=BB66_36 Depth=3
.LBB66_45:                              # %cond.end172
                                        #   in Loop: Header=BB66_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB66_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB66_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB66_48
.LBB66_47:                              # %if.then198
                                        #   in Loop: Header=BB66_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB66_48:                              # %if.end208
                                        #   in Loop: Header=BB66_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB66_49:                              # %if.end238
                                        #   in Loop: Header=BB66_36 Depth=3
	jmp	.LBB66_50
.LBB66_50:                              # %for.inc239
                                        #   in Loop: Header=BB66_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_36
.LBB66_51:                              # %for.end241
                                        #   in Loop: Header=BB66_22 Depth=2
	jmp	.LBB66_52
.LBB66_52:                              # %for.inc242
                                        #   in Loop: Header=BB66_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_22
.LBB66_53:                              # %for.end244
                                        #   in Loop: Header=BB66_20 Depth=1
	jmp	.LBB66_54
.LBB66_54:                              # %for.inc245
                                        #   in Loop: Header=BB66_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_20
.LBB66_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB66_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB66_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_59 Depth 2
                                        #       Child Loop BB66_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB66_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB66_57 Depth=1
	movl	$0, -8(%rbp)
.LBB66_59:                              # %for.cond254
                                        #   Parent Loop BB66_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB66_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB66_59 Depth=2
	movl	$0, -20(%rbp)
.LBB66_61:                              # %for.cond257
                                        #   Parent Loop BB66_57 Depth=1
                                        #     Parent Loop BB66_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB66_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB66_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB66_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB66_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB66_65
.LBB66_64:                              # %cond.false262
                                        #   in Loop: Header=BB66_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB66_65:                              # %cond.end263
                                        #   in Loop: Header=BB66_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB66_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_61
.LBB66_67:                              # %for.end295
                                        #   in Loop: Header=BB66_59 Depth=2
	jmp	.LBB66_68
.LBB66_68:                              # %for.inc296
                                        #   in Loop: Header=BB66_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_59
.LBB66_69:                              # %for.end298
                                        #   in Loop: Header=BB66_57 Depth=1
	jmp	.LBB66_70
.LBB66_70:                              # %for.inc299
                                        #   in Loop: Header=BB66_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_57
.LBB66_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB66_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB66_72 Depth=1
	movl	$0, -24(%rbp)
.LBB66_74:                              # %for.cond306
                                        #   Parent Loop BB66_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB66_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB66_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB66_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_74
.LBB66_77:                              # %for.end346
                                        #   in Loop: Header=BB66_72 Depth=1
	jmp	.LBB66_78
.LBB66_78:                              # %for.inc347
                                        #   in Loop: Header=BB66_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_72
.LBB66_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB66_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_82 Depth 2
                                        #       Child Loop BB66_84 Depth 3
                                        #       Child Loop BB66_88 Depth 3
                                        #         Child Loop BB66_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB66_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB66_80 Depth=1
	movl	$0, -8(%rbp)
.LBB66_82:                              # %for.cond353
                                        #   Parent Loop BB66_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_84 Depth 3
                                        #       Child Loop BB66_88 Depth 3
                                        #         Child Loop BB66_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB66_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	$0, -16(%rbp)
.LBB66_84:                              # %for.cond356
                                        #   Parent Loop BB66_80 Depth=1
                                        #     Parent Loop BB66_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB66_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB66_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_84
.LBB66_87:                              # %for.end380
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	$0, -16(%rbp)
.LBB66_88:                              # %for.cond381
                                        #   Parent Loop BB66_80 Depth=1
                                        #     Parent Loop BB66_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB66_88 Depth=3
	movl	$0, -32(%rbp)
.LBB66_90:                              # %for.cond387
                                        #   Parent Loop BB66_80 Depth=1
                                        #     Parent Loop BB66_82 Depth=2
                                        #       Parent Loop BB66_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB66_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB66_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB66_90
.LBB66_93:                              # %for.end421
                                        #   in Loop: Header=BB66_88 Depth=3
	jmp	.LBB66_94
.LBB66_94:                              # %for.inc422
                                        #   in Loop: Header=BB66_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_88
.LBB66_95:                              # %for.end424
                                        #   in Loop: Header=BB66_82 Depth=2
	jmp	.LBB66_96
.LBB66_96:                              # %for.inc425
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_82
.LBB66_97:                              # %for.end427
                                        #   in Loop: Header=BB66_80 Depth=1
	jmp	.LBB66_98
.LBB66_98:                              # %for.inc428
                                        #   in Loop: Header=BB66_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_80
.LBB66_99:                              # %for.end430
	jmp	.LBB66_189
.LBB66_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB66_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB66_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB66_101 Depth=1
	movl	$0, -8(%rbp)
.LBB66_103:                             # %for.cond436
                                        #   Parent Loop BB66_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB66_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB66_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB66_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_103
.LBB66_106:                             # %for.end447
                                        #   in Loop: Header=BB66_101 Depth=1
	jmp	.LBB66_107
.LBB66_107:                             # %for.inc448
                                        #   in Loop: Header=BB66_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_101
.LBB66_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB66_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_111 Depth 2
                                        #       Child Loop BB66_113 Depth 3
                                        #       Child Loop BB66_123 Depth 3
                                        #       Child Loop BB66_133 Depth 3
                                        #         Child Loop BB66_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB66_109 Depth=1
	movl	$0, -16(%rbp)
.LBB66_111:                             # %for.cond456
                                        #   Parent Loop BB66_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_113 Depth 3
                                        #       Child Loop BB66_123 Depth 3
                                        #       Child Loop BB66_133 Depth 3
                                        #         Child Loop BB66_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB66_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB66_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB66_113:                             # %for.cond476
                                        #   Parent Loop BB66_109 Depth=1
                                        #     Parent Loop BB66_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB66_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB66_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_113
.LBB66_116:                             # %for.end493
                                        #   in Loop: Header=BB66_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB66_117
	jp	.LBB66_117
	jmp	.LBB66_118
.LBB66_117:                             # %if.then500
                                        #   in Loop: Header=BB66_111 Depth=2
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_119
.LBB66_118:                             # %if.else511
                                        #   in Loop: Header=BB66_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB66_119:                             # %if.end513
                                        #   in Loop: Header=BB66_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB66_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB66_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB66_122
.LBB66_121:                             # %if.then519
                                        #   in Loop: Header=BB66_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB66_122:                             # %if.end521
                                        #   in Loop: Header=BB66_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB66_123:                             # %for.cond554
                                        #   Parent Loop BB66_109 Depth=1
                                        #     Parent Loop BB66_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB66_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB66_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB66_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_130
.LBB66_126:                             # %cond.false571
                                        #   in Loop: Header=BB66_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB66_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB66_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_129
.LBB66_128:                             # %cond.false583
                                        #   in Loop: Header=BB66_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB66_129:                             # %cond.end591
                                        #   in Loop: Header=BB66_123 Depth=3
.LBB66_130:                             # %cond.end593
                                        #   in Loop: Header=BB66_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB66_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_123
.LBB66_132:                             # %for.end600
                                        #   in Loop: Header=BB66_111 Depth=2
	movl	$0, -4(%rbp)
.LBB66_133:                             # %for.cond601
                                        #   Parent Loop BB66_109 Depth=1
                                        #     Parent Loop BB66_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	$0, -8(%rbp)
.LBB66_135:                             # %for.cond608
                                        #   Parent Loop BB66_109 Depth=1
                                        #     Parent Loop BB66_111 Depth=2
                                        #       Parent Loop BB66_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB66_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB66_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB66_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB66_142
.LBB66_138:                             # %cond.false630
                                        #   in Loop: Header=BB66_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB66_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB66_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_141
.LBB66_140:                             # %cond.false648
                                        #   in Loop: Header=BB66_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB66_141:                             # %cond.end661
                                        #   in Loop: Header=BB66_135 Depth=4
.LBB66_142:                             # %cond.end663
                                        #   in Loop: Header=BB66_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB66_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_135
.LBB66_144:                             # %for.end675
                                        #   in Loop: Header=BB66_133 Depth=3
	jmp	.LBB66_145
.LBB66_145:                             # %for.inc676
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_133
.LBB66_146:                             # %for.end678
                                        #   in Loop: Header=BB66_111 Depth=2
	jmp	.LBB66_147
.LBB66_147:                             # %for.inc679
                                        #   in Loop: Header=BB66_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_111
.LBB66_148:                             # %for.end681
                                        #   in Loop: Header=BB66_109 Depth=1
	jmp	.LBB66_149
.LBB66_149:                             # %for.inc682
                                        #   in Loop: Header=BB66_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_109
.LBB66_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB66_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB66_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_154 Depth 2
                                        #       Child Loop BB66_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB66_152 Depth=1
	movl	$0, -24(%rbp)
.LBB66_154:                             # %for.cond694
                                        #   Parent Loop BB66_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB66_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB66_154 Depth=2
	movl	$0, -20(%rbp)
.LBB66_156:                             # %for.cond700
                                        #   Parent Loop BB66_152 Depth=1
                                        #     Parent Loop BB66_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB66_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB66_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB66_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_156
.LBB66_159:                             # %for.end730
                                        #   in Loop: Header=BB66_154 Depth=2
	jmp	.LBB66_160
.LBB66_160:                             # %for.inc731
                                        #   in Loop: Header=BB66_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_154
.LBB66_161:                             # %for.end733
                                        #   in Loop: Header=BB66_152 Depth=1
	jmp	.LBB66_162
.LBB66_162:                             # %for.inc734
                                        #   in Loop: Header=BB66_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_152
.LBB66_163:                             # %for.end736
	jmp	.LBB66_173
.LBB66_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB66_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB66_165 Depth=1
	movl	$0, -24(%rbp)
.LBB66_167:                             # %for.cond743
                                        #   Parent Loop BB66_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB66_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB66_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB66_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_167
.LBB66_170:                             # %for.end784
                                        #   in Loop: Header=BB66_165 Depth=1
	jmp	.LBB66_171
.LBB66_171:                             # %for.inc785
                                        #   in Loop: Header=BB66_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_165
.LBB66_172:                             # %for.end787
	jmp	.LBB66_173
.LBB66_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB66_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_176 Depth 2
                                        #       Child Loop BB66_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB66_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB66_174 Depth=1
	movl	$0, -8(%rbp)
.LBB66_176:                             # %for.cond793
                                        #   Parent Loop BB66_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB66_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB66_176 Depth=2
	movl	$0, -20(%rbp)
.LBB66_178:                             # %for.cond797
                                        #   Parent Loop BB66_174 Depth=1
                                        #     Parent Loop BB66_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB66_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB66_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB66_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB66_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB66_182
.LBB66_181:                             # %cond.false804
                                        #   in Loop: Header=BB66_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB66_182:                             # %cond.end805
                                        #   in Loop: Header=BB66_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB66_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_178
.LBB66_184:                             # %for.end833
                                        #   in Loop: Header=BB66_176 Depth=2
	jmp	.LBB66_185
.LBB66_185:                             # %for.inc834
                                        #   in Loop: Header=BB66_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_176
.LBB66_186:                             # %for.end836
                                        #   in Loop: Header=BB66_174 Depth=1
	jmp	.LBB66_187
.LBB66_187:                             # %for.inc837
                                        #   in Loop: Header=BB66_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_174
.LBB66_188:                             # %for.end839
	jmp	.LBB66_189
.LBB66_189:                             # %if.end840
	cmpl	$41403205, -88(%rbp)    # imm = 0x277C345
	jne	.LBB66_191
.LBB66_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_190
.Lfunc_end66:
	.size	estimate_weighting_factor_B_slice.63, .Lfunc_end66-estimate_weighting_factor_B_slice.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.64
.LCPI67_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.64
	.p2align	4, 0x90
	.type	test_wp_P_slice.64,@function
test_wp_P_slice.64:                     # @test_wp_P_slice.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1485367330, -60(%rbp)  # imm = 0x5888E822
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB67_4
.LBB67_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB67_4
.LBB67_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB67_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_7 Depth 2
                                        #       Child Loop BB67_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -24(%rbp)
.LBB67_7:                               # %for.cond9
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	$0, -12(%rbp)
.LBB67_9:                               # %for.cond14
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB67_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB67_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB67_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_9
.LBB67_12:                              # %for.end
                                        #   in Loop: Header=BB67_7 Depth=2
	jmp	.LBB67_13
.LBB67_13:                              # %for.inc41
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_7
.LBB67_14:                              # %for.end43
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_15
.LBB67_15:                              # %for.inc44
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_5
.LBB67_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB67_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB67_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB67_17 Depth=1
	movl	$0, -24(%rbp)
.LBB67_19:                              # %for.cond50
                                        #   Parent Loop BB67_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB67_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB67_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB67_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_19
.LBB67_22:                              # %for.end60
                                        #   in Loop: Header=BB67_17 Depth=1
	jmp	.LBB67_23
.LBB67_23:                              # %for.inc61
                                        #   in Loop: Header=BB67_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_17
.LBB67_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB67_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_27 Depth 2
                                        #       Child Loop BB67_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB67_25 Depth=1
	movl	$0, -12(%rbp)
.LBB67_27:                              # %for.cond69
                                        #   Parent Loop BB67_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB67_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB67_29:                              # %for.cond85
                                        #   Parent Loop BB67_25 Depth=1
                                        #     Parent Loop BB67_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB67_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB67_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_29
.LBB67_32:                              # %for.end99
                                        #   in Loop: Header=BB67_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB67_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB67_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB67_34
	jp	.LBB67_34
	jmp	.LBB67_35
.LBB67_34:                              # %if.then106
                                        #   in Loop: Header=BB67_27 Depth=2
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB67_36
.LBB67_35:                              # %if.else
                                        #   in Loop: Header=BB67_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB67_36:                              # %if.end
                                        #   in Loop: Header=BB67_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB67_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB67_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB67_39
.LBB67_38:                              # %if.then137
                                        #   in Loop: Header=BB67_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB67_39:                              # %if.end143
                                        #   in Loop: Header=BB67_27 Depth=2
	jmp	.LBB67_47
.LBB67_40:                              # %if.else144
                                        #   in Loop: Header=BB67_27 Depth=2
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB67_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB67_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB67_46
.LBB67_42:                              # %cond.false168
                                        #   in Loop: Header=BB67_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB67_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB67_27 Depth=2
	movl	$127, %eax
	jmp	.LBB67_45
.LBB67_44:                              # %cond.false177
                                        #   in Loop: Header=BB67_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB67_45:                              # %cond.end183
                                        #   in Loop: Header=BB67_27 Depth=2
.LBB67_46:                              # %cond.end185
                                        #   in Loop: Header=BB67_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB67_47:                              # %if.end197
                                        #   in Loop: Header=BB67_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB67_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_27
.LBB67_49:                              # %for.end210
                                        #   in Loop: Header=BB67_25 Depth=1
	jmp	.LBB67_50
.LBB67_50:                              # %for.inc211
                                        #   in Loop: Header=BB67_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_25
.LBB67_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB67_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_54 Depth 2
                                        #       Child Loop BB67_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	$0, -36(%rbp)
.LBB67_54:                              # %for.cond219
                                        #   Parent Loop BB67_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB67_54 Depth=2
	movl	$0, -32(%rbp)
.LBB67_56:                              # %for.cond225
                                        #   Parent Loop BB67_52 Depth=1
                                        #     Parent Loop BB67_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB67_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB67_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB67_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB67_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB67_60
.LBB67_59:                              # %if.then246
                                        #   in Loop: Header=BB67_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB67_63
.LBB67_60:                              # %if.end247
                                        #   in Loop: Header=BB67_56 Depth=3
	jmp	.LBB67_61
.LBB67_61:                              # %for.inc248
                                        #   in Loop: Header=BB67_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_56
.LBB67_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB67_54 Depth=2
	jmp	.LBB67_63
.LBB67_63:                              # %for.end250
                                        #   in Loop: Header=BB67_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB67_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_68
.LBB67_65:                              # %if.end254
                                        #   in Loop: Header=BB67_54 Depth=2
	jmp	.LBB67_66
.LBB67_66:                              # %for.inc255
                                        #   in Loop: Header=BB67_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB67_54
.LBB67_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_68
.LBB67_68:                              # %for.end257
                                        #   in Loop: Header=BB67_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB67_70
# %bb.69:                               # %if.then260
	jmp	.LBB67_73
.LBB67_70:                              # %if.end261
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_71
.LBB67_71:                              # %for.inc262
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_52
.LBB67_72:                              # %for.end264.loopexit
	jmp	.LBB67_73
.LBB67_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1485367330, -60(%rbp)  # imm = 0x5888E822
	jne	.LBB67_75
.LBB67_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_74
.Lfunc_end67:
	.size	test_wp_P_slice.64, .Lfunc_end67-test_wp_P_slice.64
	.cfi_endproc
                                        # -- End function
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
