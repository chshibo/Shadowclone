	.text
	.file	"decompress.c"
	.globl	BZ2_decompress          # -- Begin function BZ2_decompress
	.p2align	4, 0x90
	.type	BZ2_decompress,@function
BZ2_decompress:                         # @BZ2_decompress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_BZ2_decompress.2
	movq	%rbx, %rdi
	callq	BZ2_decompress.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_BZ2_decompress.3
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_BZ2_decompress.4
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_BZ2_decompress.5
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_BZ2_decompress.6
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_BZ2_decompress.7
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_BZ2_decompress.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_BZ2_decompress.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_BZ2_decompress.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_BZ2_decompress.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_BZ2_decompress.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_BZ2_decompress.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.14
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_BZ2_decompress.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.15
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_BZ2_decompress.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_BZ2_decompress.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_BZ2_decompress.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_decompress.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	BZ2_decompress, .Lfunc_end0-BZ2_decompress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function makeMaps_d
	.type	makeMaps_d,@function
makeMaps_d:                             # @makeMaps_d
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_makeMaps_d.1
	movq	%rbx, %rdi
	callq	makeMaps_d.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_makeMaps_d.8
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	makeMaps_d.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	makeMaps_d, .Lfunc_end1-makeMaps_d
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function makeMaps_d.1
	.type	makeMaps_d.1,@function
makeMaps_d.1:                           # @makeMaps_d.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1185391649, -20(%rbp)  # imm = 0x46A7A421
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, 3192(%rax)
	movl	$0, -4(%rbp)
.LBB2_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -4(%rbp)          # imm = 0x100
	jge	.LBB2_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB2_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, 3196(%rax,%rcx)
	je	.LBB2_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB2_1 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	3192(%rdx), %rdx
	movb	%al, 3468(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	3192(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 3192(%rax)
.LBB2_4:                                # %if.end
                                        #   in Loop: Header=BB2_1 Depth=1
	jmp	.LBB2_5
.LBB2_5:                                # %for.inc
                                        #   in Loop: Header=BB2_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB2_1
.LBB2_6:                                # %for.end
	cmpl	$1185391649, -20(%rbp)  # imm = 0x46A7A421
	jne	.LBB2_8
.LBB2_7:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB2_7
.Lfunc_end2:
	.size	makeMaps_d.1, .Lfunc_end2-makeMaps_d.1
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_decompress.2        # -- Begin function BZ2_decompress.2
	.p2align	4, 0x90
	.type	BZ2_decompress.2,@function
BZ2_decompress.2:                       # @BZ2_decompress.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$840853147, -320(%rbp)  # imm = 0x321E669B
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB3_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB3_2:                                # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB3_671
# %bb.3:                                # %if.end
	movq	.LJTI3_0(,%rax,8), %rax
	jmpq	*%rax
.LBB3_4:                                # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB3_5:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_12
.LBB3_7:                                # %if.end33
                                        #   in Loop: Header=BB3_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_9:                                # %if.end38
                                        #   in Loop: Header=BB3_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB3_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_11:                               # %if.end56
                                        #   in Loop: Header=BB3_5 Depth=1
	jmp	.LBB3_5
.LBB3_12:                               # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB3_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB3_673
.LBB3_14:                               # %if.end61
	jmp	.LBB3_15
.LBB3_15:                               # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB3_16:                               # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_23
.LBB3_18:                               # %if.end78
                                        #   in Loop: Header=BB3_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_20:                               # %if.end84
                                        #   in Loop: Header=BB3_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB3_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_22:                               # %if.end111
                                        #   in Loop: Header=BB3_16 Depth=1
	jmp	.LBB3_16
.LBB3_23:                               # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB3_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB3_673
.LBB3_25:                               # %if.end117
	jmp	.LBB3_26
.LBB3_26:                               # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB3_27:                               # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_34
.LBB3_29:                               # %if.end134
                                        #   in Loop: Header=BB3_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_31:                               # %if.end140
                                        #   in Loop: Header=BB3_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB3_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_33:                               # %if.end167
                                        #   in Loop: Header=BB3_27 Depth=1
	jmp	.LBB3_27
.LBB3_34:                               # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB3_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB3_673
.LBB3_36:                               # %if.end173
	jmp	.LBB3_37
.LBB3_37:                               # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB3_38:                               # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB3_45
.LBB3_40:                               # %if.end189
                                        #   in Loop: Header=BB3_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_42:                               # %if.end195
                                        #   in Loop: Header=BB3_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB3_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_44:                               # %if.end222
                                        #   in Loop: Header=BB3_38 Depth=1
	jmp	.LBB3_38
.LBB3_45:                               # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB3_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB3_48
.LBB3_47:                               # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB3_673
.LBB3_48:                               # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB3_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB3_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB3_52
.LBB3_51:                               # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB3_673
.LBB3_52:                               # %if.end257
	jmp	.LBB3_56
.LBB3_53:                               # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB3_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB3_673
.LBB3_55:                               # %if.end270
	jmp	.LBB3_56
.LBB3_56:                               # %if.end271
	jmp	.LBB3_57
.LBB3_57:                               # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB3_58:                               # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_65
.LBB3_60:                               # %if.end288
                                        #   in Loop: Header=BB3_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_62:                               # %if.end294
                                        #   in Loop: Header=BB3_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB3_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_64:                               # %if.end321
                                        #   in Loop: Header=BB3_58 Depth=1
	jmp	.LBB3_58
.LBB3_65:                               # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB3_67
# %bb.66:                               # %if.then326
	jmp	.LBB3_579
.LBB3_67:                               # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB3_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_69:                               # %if.end332
	jmp	.LBB3_70
.LBB3_70:                               # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB3_71:                               # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_78
.LBB3_73:                               # %if.end349
                                        #   in Loop: Header=BB3_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_75:                               # %if.end355
                                        #   in Loop: Header=BB3_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB3_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_77:                               # %if.end382
                                        #   in Loop: Header=BB3_71 Depth=1
	jmp	.LBB3_71
.LBB3_78:                               # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB3_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_80:                               # %if.end388
	jmp	.LBB3_81
.LBB3_81:                               # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB3_82:                               # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_89
.LBB3_84:                               # %if.end405
                                        #   in Loop: Header=BB3_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_86:                               # %if.end411
                                        #   in Loop: Header=BB3_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB3_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_88:                               # %if.end438
                                        #   in Loop: Header=BB3_82 Depth=1
	jmp	.LBB3_82
.LBB3_89:                               # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB3_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_91:                               # %if.end444
	jmp	.LBB3_92
.LBB3_92:                               # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB3_93:                               # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_100
.LBB3_95:                               # %if.end461
                                        #   in Loop: Header=BB3_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_97:                               # %if.end467
                                        #   in Loop: Header=BB3_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB3_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_99:                               # %if.end494
                                        #   in Loop: Header=BB3_93 Depth=1
	jmp	.LBB3_93
.LBB3_100:                              # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB3_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_102:                              # %if.end500
	jmp	.LBB3_103
.LBB3_103:                              # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB3_104:                              # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_111
.LBB3_106:                              # %if.end517
                                        #   in Loop: Header=BB3_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_108:                              # %if.end523
                                        #   in Loop: Header=BB3_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB3_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_110:                              # %if.end550
                                        #   in Loop: Header=BB3_104 Depth=1
	jmp	.LBB3_104
.LBB3_111:                              # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB3_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_113:                              # %if.end556
	jmp	.LBB3_114
.LBB3_114:                              # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB3_115:                              # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_122
.LBB3_117:                              # %if.end573
                                        #   in Loop: Header=BB3_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_119:                              # %if.end579
                                        #   in Loop: Header=BB3_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB3_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_121:                              # %if.end606
                                        #   in Loop: Header=BB3_115 Depth=1
	jmp	.LBB3_115
.LBB3_122:                              # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB3_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_124:                              # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB3_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB3_126:                              # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB3_127:                              # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB3_128:                              # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_135
.LBB3_130:                              # %if.end636
                                        #   in Loop: Header=BB3_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_132:                              # %if.end642
                                        #   in Loop: Header=BB3_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB3_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_134:                              # %if.end669
                                        #   in Loop: Header=BB3_128 Depth=1
	jmp	.LBB3_128
.LBB3_135:                              # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB3_136:                              # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB3_137:                              # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_144
.LBB3_139:                              # %if.end692
                                        #   in Loop: Header=BB3_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_141:                              # %if.end698
                                        #   in Loop: Header=BB3_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB3_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_143:                              # %if.end725
                                        #   in Loop: Header=BB3_137 Depth=1
	jmp	.LBB3_137
.LBB3_144:                              # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB3_145:                              # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB3_146:                              # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_153
.LBB3_148:                              # %if.end748
                                        #   in Loop: Header=BB3_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_150:                              # %if.end754
                                        #   in Loop: Header=BB3_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB3_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_152:                              # %if.end781
                                        #   in Loop: Header=BB3_146 Depth=1
	jmp	.LBB3_146
.LBB3_153:                              # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB3_154:                              # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB3_155:                              # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_162
.LBB3_157:                              # %if.end804
                                        #   in Loop: Header=BB3_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_159:                              # %if.end810
                                        #   in Loop: Header=BB3_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB3_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_161:                              # %if.end837
                                        #   in Loop: Header=BB3_155 Depth=1
	jmp	.LBB3_155
.LBB3_162:                              # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB3_163:                              # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB3_164:                              # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB3_171
.LBB3_166:                              # %if.end860
                                        #   in Loop: Header=BB3_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_168:                              # %if.end866
                                        #   in Loop: Header=BB3_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB3_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_170:                              # %if.end893
                                        #   in Loop: Header=BB3_164 Depth=1
	jmp	.LBB3_164
.LBB3_171:                              # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB3_172:                              # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB3_173:                              # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_180
.LBB3_175:                              # %if.end911
                                        #   in Loop: Header=BB3_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_177:                              # %if.end917
                                        #   in Loop: Header=BB3_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB3_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_179:                              # %if.end944
                                        #   in Loop: Header=BB3_173 Depth=1
	jmp	.LBB3_173
.LBB3_180:                              # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB3_181:                              # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB3_182:                              # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_189
.LBB3_184:                              # %if.end967
                                        #   in Loop: Header=BB3_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_186:                              # %if.end973
                                        #   in Loop: Header=BB3_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB3_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_188:                              # %if.end1000
                                        #   in Loop: Header=BB3_182 Depth=1
	jmp	.LBB3_182
.LBB3_189:                              # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB3_190:                              # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB3_191:                              # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_198
.LBB3_193:                              # %if.end1023
                                        #   in Loop: Header=BB3_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_195:                              # %if.end1029
                                        #   in Loop: Header=BB3_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB3_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_197:                              # %if.end1056
                                        #   in Loop: Header=BB3_191 Depth=1
	jmp	.LBB3_191
.LBB3_198:                              # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB3_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_200:                              # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB3_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_202:                              # %if.end1075
	movl	$0, -24(%rbp)
.LBB3_203:                              # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB3_218
# %bb.204:                              # %for.body
	jmp	.LBB3_205
.LBB3_205:                              # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB3_206:                              # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_213
.LBB3_208:                              # %if.end1094
                                        #   in Loop: Header=BB3_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_210:                              # %if.end1100
                                        #   in Loop: Header=BB3_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB3_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_212:                              # %if.end1127
                                        #   in Loop: Header=BB3_206 Depth=1
	jmp	.LBB3_206
.LBB3_213:                              # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB3_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB3_216
.LBB3_215:                              # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB3_216:                              # %if.end1137
	jmp	.LBB3_217
.LBB3_217:                              # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_203
.LBB3_218:                              # %for.end
	movl	$0, -24(%rbp)
.LBB3_219:                              # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB3_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB3_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB3_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_219
.LBB3_222:                              # %for.end1147
	movl	$0, -24(%rbp)
.LBB3_223:                              # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB3_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB3_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB3_226:                              # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB3_240
# %bb.227:                              # %for.body1160
	jmp	.LBB3_228
.LBB3_228:                              # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB3_229:                              # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_236
.LBB3_231:                              # %if.end1177
                                        #   in Loop: Header=BB3_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_233:                              # %if.end1183
                                        #   in Loop: Header=BB3_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB3_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_235:                              # %if.end1210
                                        #   in Loop: Header=BB3_229 Depth=1
	jmp	.LBB3_229
.LBB3_236:                              # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB3_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB3_238:                              # %if.end1221
	jmp	.LBB3_239
.LBB3_239:                              # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB3_226
.LBB3_240:                              # %for.end1224
	jmp	.LBB3_241
.LBB3_241:                              # %if.end1225
	jmp	.LBB3_242
.LBB3_242:                              # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_223
.LBB3_243:                              # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB3_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_245:                              # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -140(%rbp)
.LBB3_246:                              # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB3_247:                              # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB3_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB3_254
.LBB3_249:                              # %if.end1250
                                        #   in Loop: Header=BB3_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_251:                              # %if.end1256
                                        #   in Loop: Header=BB3_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB3_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_253:                              # %if.end1283
                                        #   in Loop: Header=BB3_247 Depth=1
	jmp	.LBB3_247
.LBB3_254:                              # %while.end1284
	cmpl	$2, -100(%rbp)
	jl	.LBB3_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -100(%rbp)
	jle	.LBB3_257
.LBB3_256:                              # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_257:                              # %if.end1291
	jmp	.LBB3_258
.LBB3_258:                              # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB3_259:                              # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB3_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB3_266
.LBB3_261:                              # %if.end1307
                                        #   in Loop: Header=BB3_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_263:                              # %if.end1313
                                        #   in Loop: Header=BB3_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB3_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_265:                              # %if.end1340
                                        #   in Loop: Header=BB3_259 Depth=1
	jmp	.LBB3_259
.LBB3_266:                              # %while.end1341
	cmpl	$1, -96(%rbp)
	jge	.LBB3_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_268:                              # %if.end1345
	movl	$0, -24(%rbp)
.LBB3_269:                              # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB3_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB3_271:                              # %while.body1350
	jmp	.LBB3_272
.LBB3_272:                              # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB3_273:                              # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_280
.LBB3_275:                              # %if.end1368
                                        #   in Loop: Header=BB3_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_277:                              # %if.end1374
                                        #   in Loop: Header=BB3_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB3_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_279:                              # %if.end1401
                                        #   in Loop: Header=BB3_273 Depth=1
	jmp	.LBB3_273
.LBB3_280:                              # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB3_282
# %bb.281:                              # %if.then1406
	jmp	.LBB3_285
.LBB3_282:                              # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB3_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_284:                              # %if.end1412
	jmp	.LBB3_271
.LBB3_285:                              # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_269
.LBB3_287:                              # %for.end1419
	movb	$0, -29(%rbp)
.LBB3_288:                              # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB3_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB3_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB3_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB3_288
.LBB3_291:                              # %for.end1430
	movl	$0, -24(%rbp)
.LBB3_292:                              # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB3_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB3_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB3_294:                              # %while.cond
                                        #   Parent Loop BB3_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB3_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB3_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB3_294
.LBB3_296:                              # %while.end1451
                                        #   in Loop: Header=BB3_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB3_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_292
.LBB3_298:                              # %for.end1457
	movl	$0, -52(%rbp)
.LBB3_299:                              # %for.cond1458
	movl	-52(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB3_343
# %bb.300:                              # %for.body1461
	jmp	.LBB3_301
.LBB3_301:                              # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB3_302:                              # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB3_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB3_309
.LBB3_304:                              # %if.end1478
                                        #   in Loop: Header=BB3_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_306:                              # %if.end1484
                                        #   in Loop: Header=BB3_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB3_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_308:                              # %if.end1511
                                        #   in Loop: Header=BB3_302 Depth=1
	jmp	.LBB3_302
.LBB3_309:                              # %while.end1512
	movl	$0, -24(%rbp)
.LBB3_310:                              # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB3_341
# %bb.311:                              # %for.body1516
	jmp	.LBB3_312
.LBB3_312:                              # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB3_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB3_315
.LBB3_314:                              # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_315:                              # %if.end1525
	jmp	.LBB3_316
.LBB3_316:                              # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB3_317:                              # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_324
.LBB3_319:                              # %if.end1543
                                        #   in Loop: Header=BB3_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_321:                              # %if.end1549
                                        #   in Loop: Header=BB3_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB3_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_323:                              # %if.end1576
                                        #   in Loop: Header=BB3_317 Depth=1
	jmp	.LBB3_317
.LBB3_324:                              # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB3_326
# %bb.325:                              # %if.then1581
	jmp	.LBB3_339
.LBB3_326:                              # %if.end1582
	jmp	.LBB3_327
.LBB3_327:                              # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB3_328:                              # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_335
.LBB3_330:                              # %if.end1600
                                        #   in Loop: Header=BB3_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_332:                              # %if.end1606
                                        #   in Loop: Header=BB3_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB3_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_334:                              # %if.end1633
                                        #   in Loop: Header=BB3_328 Depth=1
	jmp	.LBB3_328
.LBB3_335:                              # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB3_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB3_338
.LBB3_337:                              # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB3_338:                              # %if.end1642
	jmp	.LBB3_312
.LBB3_339:                              # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_310
.LBB3_341:                              # %for.end1651
	jmp	.LBB3_342
.LBB3_342:                              # %for.inc1652
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB3_299
.LBB3_343:                              # %for.end1654
	movl	$0, -52(%rbp)
.LBB3_344:                              # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_346 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB3_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB3_344 Depth=1
	movl	$32, -156(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB3_346:                              # %for.cond1659
                                        #   Parent Loop BB3_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB3_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB3_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-180(%rbp), %eax
	jle	.LBB3_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB3_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -180(%rbp)
.LBB3_349:                              # %if.end1678
                                        #   in Loop: Header=BB3_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB3_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB3_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
.LBB3_351:                              # %if.end1694
                                        #   in Loop: Header=BB3_346 Depth=2
	jmp	.LBB3_352
.LBB3_352:                              # %for.inc1695
                                        #   in Loop: Header=BB3_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_346
.LBB3_353:                              # %for.end1697
                                        #   in Loop: Header=BB3_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-156(%rbp), %r8d
	movl	-180(%rbp), %r9d
	movl	-140(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-156(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB3_344 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB3_344
.LBB3_355:                              # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -136(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
.LBB3_356:                              # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB3_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB3_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB3_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_356
.LBB3_359:                              # %for.end1728
	movl	$4095, -144(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB3_360:                              # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_362 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB3_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB3_360 Depth=1
	movl	$15, -160(%rbp)
.LBB3_362:                              # %for.cond1733
                                        #   Parent Loop BB3_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -160(%rbp)
	jl	.LBB3_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB3_362 Depth=2
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-160(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-144(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB3_362 Depth=2
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB3_362
.LBB3_365:                              # %for.end1745
                                        #   in Loop: Header=BB3_360 Depth=1
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB3_360 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB3_360
.LBB3_367:                              # %for.end1751
	movl	$0, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB3_371
# %bb.368:                              # %if.then1754
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB3_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_370:                              # %if.end1759
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB3_371:                              # %if.end1779
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB3_372:                              # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB3_373:                              # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB3_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -224(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-224(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB3_380
.LBB3_375:                              # %if.end1799
                                        #   in Loop: Header=BB3_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_377:                              # %if.end1805
                                        #   in Loop: Header=BB3_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB3_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_379:                              # %if.end1832
                                        #   in Loop: Header=BB3_373 Depth=1
	jmp	.LBB3_373
.LBB3_380:                              # %while.end1833
	jmp	.LBB3_381
.LBB3_381:                              # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB3_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_383:                              # %if.end1839
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB3_385
# %bb.384:                              # %if.then1844
	jmp	.LBB3_395
.LBB3_385:                              # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB3_386:                              # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB3_387:                              # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB3_394
.LBB3_389:                              # %if.end1863
                                        #   in Loop: Header=BB3_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_391:                              # %if.end1869
                                        #   in Loop: Header=BB3_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB3_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_393:                              # %if.end1896
                                        #   in Loop: Header=BB3_387 Depth=1
	jmp	.LBB3_387
.LBB3_394:                              # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB3_381
.LBB3_395:                              # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB3_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB3_398
.LBB3_397:                              # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_398:                              # %if.end1913
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB3_399:                              # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jne	.LBB3_401
# %bb.400:                              # %if.then1923
	jmp	.LBB3_520
.LBB3_401:                              # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB3_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB3_458
.LBB3_403:                              # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB3_404:                              # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB3_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB3_409
.LBB3_406:                              # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB3_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB3_408:                              # %if.end1942
	jmp	.LBB3_409
.LBB3_409:                              # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB3_413
# %bb.410:                              # %if.then1947
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB3_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_412:                              # %if.end1952
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB3_413:                              # %if.end1972
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB3_414:                              # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB3_415:                              # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB3_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -260(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-260(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB3_422
.LBB3_417:                              # %if.end1992
                                        #   in Loop: Header=BB3_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_419:                              # %if.end1998
                                        #   in Loop: Header=BB3_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB3_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_421:                              # %if.end2025
                                        #   in Loop: Header=BB3_415 Depth=1
	jmp	.LBB3_415
.LBB3_422:                              # %while.end2026
	jmp	.LBB3_423
.LBB3_423:                              # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB3_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_425:                              # %if.end2032
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB3_427
# %bb.426:                              # %if.then2037
	jmp	.LBB3_437
.LBB3_427:                              # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB3_428:                              # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB3_429:                              # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB3_436
.LBB3_431:                              # %if.end2056
                                        #   in Loop: Header=BB3_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_433:                              # %if.end2062
                                        #   in Loop: Header=BB3_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB3_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_435:                              # %if.end2089
                                        #   in Loop: Header=BB3_429 Depth=1
	jmp	.LBB3_429
.LBB3_436:                              # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB3_423
.LBB3_437:                              # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB3_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB3_440
.LBB3_439:                              # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_440:                              # %if.end2106
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB3_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB3_443:                              # %lor.end
	testb	$1, %al
	jne	.LBB3_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB3_451
# %bb.445:                              # %if.then2130
	jmp	.LBB3_446
.LBB3_446:                              # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB3_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB3_446 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB3_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_449:                              # %if.end2138
                                        #   in Loop: Header=BB3_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB3_446
.LBB3_450:                              # %while.end2145
	jmp	.LBB3_457
.LBB3_451:                              # %if.else2146
	jmp	.LBB3_452
.LBB3_452:                              # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB3_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB3_452 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB3_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_455:                              # %if.end2154
                                        #   in Loop: Header=BB3_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB3_452
.LBB3_456:                              # %while.end2161
	jmp	.LBB3_457
.LBB3_457:                              # %if.end2162
	jmp	.LBB3_399
.LBB3_458:                              # %if.else2163
	movl	-48(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB3_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_460:                              # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB3_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB3_462:                              # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB3_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB3_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB3_462
.LBB3_464:                              # %while.end2218
	jmp	.LBB3_465
.LBB3_465:                              # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB3_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB3_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB3_465
.LBB3_467:                              # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB3_485
.LBB3_468:                              # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-356(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB3_469:                              # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB3_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB3_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB3_469
.LBB3_471:                              # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB3_472:                              # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB3_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB3_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB3_472
.LBB3_474:                              # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB3_484
# %bb.475:                              # %if.then2302
	movl	$4095, -152(%rbp)       # imm = 0xFFF
	movl	$15, -128(%rbp)
.LBB3_476:                              # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_478 Depth 2
	cmpl	$0, -128(%rbp)
	jl	.LBB3_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB3_476 Depth=1
	movl	$15, -148(%rbp)
.LBB3_478:                              # %for.cond2307
                                        #   Parent Loop BB3_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB3_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB3_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-152(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB3_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB3_478
.LBB3_481:                              # %for.end2324
                                        #   in Loop: Header=BB3_476 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB3_476 Depth=1
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB3_476
.LBB3_483:                              # %for.end2331
	jmp	.LBB3_484
.LBB3_484:                              # %if.end2332
	jmp	.LBB3_485
.LBB3_485:                              # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB3_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB3_488
.LBB3_487:                              # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB3_488:                              # %if.end2359
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB3_492
# %bb.489:                              # %if.then2363
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB3_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_491:                              # %if.end2368
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB3_492:                              # %if.end2388
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB3_493:                              # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB3_494:                              # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB3_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -360(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-360(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB3_501
.LBB3_496:                              # %if.end2408
                                        #   in Loop: Header=BB3_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_498:                              # %if.end2414
                                        #   in Loop: Header=BB3_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB3_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_500:                              # %if.end2441
                                        #   in Loop: Header=BB3_494 Depth=1
	jmp	.LBB3_494
.LBB3_501:                              # %while.end2442
	jmp	.LBB3_502
.LBB3_502:                              # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB3_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_504:                              # %if.end2448
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB3_506
# %bb.505:                              # %if.then2453
	jmp	.LBB3_516
.LBB3_506:                              # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB3_507:                              # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB3_508:                              # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB3_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB3_515
.LBB3_510:                              # %if.end2472
                                        #   in Loop: Header=BB3_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_512:                              # %if.end2478
                                        #   in Loop: Header=BB3_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB3_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_514:                              # %if.end2505
                                        #   in Loop: Header=BB3_508 Depth=1
	jmp	.LBB3_508
.LBB3_515:                              # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB3_502
.LBB3_516:                              # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB3_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB3_519
.LBB3_518:                              # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_519:                              # %if.end2522
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB3_399
.LBB3_520:                              # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB3_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB3_523
.LBB3_522:                              # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_523:                              # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB3_524:                              # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB3_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB3_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB3_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_524
.LBB3_527:                              # %for.end2552
	movl	$1, -24(%rbp)
.LBB3_528:                              # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB3_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB3_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB3_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_528
.LBB3_531:                              # %for.end2567
	movl	$0, -24(%rbp)
.LBB3_532:                              # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB3_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB3_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB3_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB3_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB3_536
.LBB3_535:                              # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_536:                              # %if.end2584
                                        #   in Loop: Header=BB3_532 Depth=1
	jmp	.LBB3_537
.LBB3_537:                              # %for.inc2585
                                        #   in Loop: Header=BB3_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_532
.LBB3_538:                              # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB3_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB3_540:                              # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB3_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB3_542:                              # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB3_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB3_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB3_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_542
.LBB3_545:                              # %for.end2609
	movl	$0, -24(%rbp)
.LBB3_546:                              # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB3_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB3_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB3_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB3_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB3_550
.LBB3_549:                              # %if.else2646
                                        #   in Loop: Header=BB3_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB3_550:                              # %if.end2664
                                        #   in Loop: Header=BB3_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB3_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_546
.LBB3_552:                              # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB3_553:                              # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -292(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB3_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB3_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB3_556
.LBB3_555:                              # %if.else2727
                                        #   in Loop: Header=BB3_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB3_556:                              # %if.end2742
                                        #   in Loop: Header=BB3_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-292(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB3_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB3_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB3_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB3_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB3_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB3_562:                              # %if.end2791
	jmp	.LBB3_563
.LBB3_563:                              # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB3_565
.LBB3_564:                              # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB3_565:                              # %if.end2826
	jmp	.LBB3_578
.LBB3_566:                              # %if.else2827
	movl	$0, -24(%rbp)
.LBB3_567:                              # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB3_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB3_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB3_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB3_567
.LBB3_570:                              # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB3_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB3_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB3_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB3_574:                              # %if.end2893
	jmp	.LBB3_575
.LBB3_575:                              # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB3_577
.LBB3_576:                              # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB3_577:                              # %if.end2918
	jmp	.LBB3_578
.LBB3_578:                              # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_579:                              # %endhdr_2
	jmp	.LBB3_580
.LBB3_580:                              # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB3_581:                              # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_588
.LBB3_583:                              # %if.end2937
                                        #   in Loop: Header=BB3_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_585:                              # %if.end2943
                                        #   in Loop: Header=BB3_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB3_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_587:                              # %if.end2970
                                        #   in Loop: Header=BB3_581 Depth=1
	jmp	.LBB3_581
.LBB3_588:                              # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB3_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_590:                              # %if.end2976
	jmp	.LBB3_591
.LBB3_591:                              # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB3_592:                              # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_599
.LBB3_594:                              # %if.end2994
                                        #   in Loop: Header=BB3_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_596:                              # %if.end3000
                                        #   in Loop: Header=BB3_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB3_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_598:                              # %if.end3027
                                        #   in Loop: Header=BB3_592 Depth=1
	jmp	.LBB3_592
.LBB3_599:                              # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB3_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_601:                              # %if.end3033
	jmp	.LBB3_602
.LBB3_602:                              # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB3_603:                              # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_610
.LBB3_605:                              # %if.end3051
                                        #   in Loop: Header=BB3_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_607:                              # %if.end3057
                                        #   in Loop: Header=BB3_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB3_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_609:                              # %if.end3084
                                        #   in Loop: Header=BB3_603 Depth=1
	jmp	.LBB3_603
.LBB3_610:                              # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB3_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_612:                              # %if.end3090
	jmp	.LBB3_613
.LBB3_613:                              # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB3_614:                              # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_621
.LBB3_616:                              # %if.end3108
                                        #   in Loop: Header=BB3_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_618:                              # %if.end3114
                                        #   in Loop: Header=BB3_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB3_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_620:                              # %if.end3141
                                        #   in Loop: Header=BB3_614 Depth=1
	jmp	.LBB3_614
.LBB3_621:                              # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB3_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_623:                              # %if.end3147
	jmp	.LBB3_624
.LBB3_624:                              # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB3_625:                              # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_632
.LBB3_627:                              # %if.end3165
                                        #   in Loop: Header=BB3_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_629:                              # %if.end3171
                                        #   in Loop: Header=BB3_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB3_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_631:                              # %if.end3198
                                        #   in Loop: Header=BB3_625 Depth=1
	jmp	.LBB3_625
.LBB3_632:                              # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB3_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_634:                              # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB3_635:                              # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB3_636:                              # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_643
.LBB3_638:                              # %if.end3222
                                        #   in Loop: Header=BB3_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_640:                              # %if.end3228
                                        #   in Loop: Header=BB3_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB3_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_642:                              # %if.end3255
                                        #   in Loop: Header=BB3_636 Depth=1
	jmp	.LBB3_636
.LBB3_643:                              # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB3_644:                              # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB3_645:                              # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_652
.LBB3_647:                              # %if.end3279
                                        #   in Loop: Header=BB3_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_649:                              # %if.end3285
                                        #   in Loop: Header=BB3_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB3_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_651:                              # %if.end3312
                                        #   in Loop: Header=BB3_645 Depth=1
	jmp	.LBB3_645
.LBB3_652:                              # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB3_653:                              # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB3_654:                              # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_661
.LBB3_656:                              # %if.end3336
                                        #   in Loop: Header=BB3_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_658:                              # %if.end3342
                                        #   in Loop: Header=BB3_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB3_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_660:                              # %if.end3369
                                        #   in Loop: Header=BB3_654 Depth=1
	jmp	.LBB3_654
.LBB3_661:                              # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB3_662:                              # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB3_663:                              # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB3_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB3_670
.LBB3_665:                              # %if.end3393
                                        #   in Loop: Header=BB3_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB3_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB3_673
.LBB3_667:                              # %if.end3399
                                        #   in Loop: Header=BB3_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB3_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB3_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB3_669:                              # %if.end3426
                                        #   in Loop: Header=BB3_663 Depth=1
	jmp	.LBB3_663
.LBB3_670:                              # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB3_673
.LBB3_671:                              # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB3_673:                              # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-140(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-184(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-136(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-380(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$840853147, -320(%rbp)  # imm = 0x321E669B
	jne	.LBB3_675
.LBB3_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_675:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB3_674
.Lfunc_end3:
	.size	BZ2_decompress.2, .Lfunc_end3-BZ2_decompress.2
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI3_0:
	.quad	.LBB3_4
	.quad	.LBB3_15
	.quad	.LBB3_26
	.quad	.LBB3_37
	.quad	.LBB3_57
	.quad	.LBB3_70
	.quad	.LBB3_81
	.quad	.LBB3_92
	.quad	.LBB3_103
	.quad	.LBB3_114
	.quad	.LBB3_127
	.quad	.LBB3_136
	.quad	.LBB3_145
	.quad	.LBB3_154
	.quad	.LBB3_163
	.quad	.LBB3_172
	.quad	.LBB3_181
	.quad	.LBB3_190
	.quad	.LBB3_205
	.quad	.LBB3_228
	.quad	.LBB3_246
	.quad	.LBB3_258
	.quad	.LBB3_272
	.quad	.LBB3_301
	.quad	.LBB3_316
	.quad	.LBB3_327
	.quad	.LBB3_372
	.quad	.LBB3_386
	.quad	.LBB3_414
	.quad	.LBB3_428
	.quad	.LBB3_493
	.quad	.LBB3_507
	.quad	.LBB3_580
	.quad	.LBB3_591
	.quad	.LBB3_602
	.quad	.LBB3_613
	.quad	.LBB3_624
	.quad	.LBB3_635
	.quad	.LBB3_644
	.quad	.LBB3_653
	.quad	.LBB3_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.3        # -- Begin function BZ2_decompress.3
	.p2align	4, 0x90
	.type	BZ2_decompress.3,@function
BZ2_decompress.3:                       # @BZ2_decompress.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$1930845210, -372(%rbp) # imm = 0x73165C1A
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB4_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB4_2:                                # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB4_671
# %bb.3:                                # %if.end
	movq	.LJTI4_0(,%rax,8), %rax
	jmpq	*%rax
.LBB4_4:                                # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB4_5:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_12
.LBB4_7:                                # %if.end33
                                        #   in Loop: Header=BB4_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_9:                                # %if.end38
                                        #   in Loop: Header=BB4_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB4_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_11:                               # %if.end56
                                        #   in Loop: Header=BB4_5 Depth=1
	jmp	.LBB4_5
.LBB4_12:                               # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB4_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB4_673
.LBB4_14:                               # %if.end61
	jmp	.LBB4_15
.LBB4_15:                               # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB4_16:                               # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_23
.LBB4_18:                               # %if.end78
                                        #   in Loop: Header=BB4_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_20:                               # %if.end84
                                        #   in Loop: Header=BB4_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB4_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_22:                               # %if.end111
                                        #   in Loop: Header=BB4_16 Depth=1
	jmp	.LBB4_16
.LBB4_23:                               # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB4_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB4_673
.LBB4_25:                               # %if.end117
	jmp	.LBB4_26
.LBB4_26:                               # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB4_27:                               # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_34
.LBB4_29:                               # %if.end134
                                        #   in Loop: Header=BB4_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_31:                               # %if.end140
                                        #   in Loop: Header=BB4_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB4_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_33:                               # %if.end167
                                        #   in Loop: Header=BB4_27 Depth=1
	jmp	.LBB4_27
.LBB4_34:                               # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB4_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB4_673
.LBB4_36:                               # %if.end173
	jmp	.LBB4_37
.LBB4_37:                               # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB4_38:                               # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB4_45
.LBB4_40:                               # %if.end189
                                        #   in Loop: Header=BB4_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_42:                               # %if.end195
                                        #   in Loop: Header=BB4_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB4_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_44:                               # %if.end222
                                        #   in Loop: Header=BB4_38 Depth=1
	jmp	.LBB4_38
.LBB4_45:                               # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB4_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB4_48
.LBB4_47:                               # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB4_673
.LBB4_48:                               # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB4_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB4_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB4_52
.LBB4_51:                               # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB4_673
.LBB4_52:                               # %if.end257
	jmp	.LBB4_56
.LBB4_53:                               # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB4_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB4_673
.LBB4_55:                               # %if.end270
	jmp	.LBB4_56
.LBB4_56:                               # %if.end271
	jmp	.LBB4_57
.LBB4_57:                               # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB4_58:                               # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_65
.LBB4_60:                               # %if.end288
                                        #   in Loop: Header=BB4_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_62:                               # %if.end294
                                        #   in Loop: Header=BB4_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB4_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_64:                               # %if.end321
                                        #   in Loop: Header=BB4_58 Depth=1
	jmp	.LBB4_58
.LBB4_65:                               # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB4_67
# %bb.66:                               # %if.then326
	jmp	.LBB4_579
.LBB4_67:                               # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB4_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_69:                               # %if.end332
	jmp	.LBB4_70
.LBB4_70:                               # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB4_71:                               # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_78
.LBB4_73:                               # %if.end349
                                        #   in Loop: Header=BB4_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_75:                               # %if.end355
                                        #   in Loop: Header=BB4_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB4_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_77:                               # %if.end382
                                        #   in Loop: Header=BB4_71 Depth=1
	jmp	.LBB4_71
.LBB4_78:                               # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB4_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_80:                               # %if.end388
	jmp	.LBB4_81
.LBB4_81:                               # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB4_82:                               # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_89
.LBB4_84:                               # %if.end405
                                        #   in Loop: Header=BB4_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_86:                               # %if.end411
                                        #   in Loop: Header=BB4_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB4_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_88:                               # %if.end438
                                        #   in Loop: Header=BB4_82 Depth=1
	jmp	.LBB4_82
.LBB4_89:                               # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB4_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_91:                               # %if.end444
	jmp	.LBB4_92
.LBB4_92:                               # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB4_93:                               # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_100
.LBB4_95:                               # %if.end461
                                        #   in Loop: Header=BB4_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_97:                               # %if.end467
                                        #   in Loop: Header=BB4_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB4_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_99:                               # %if.end494
                                        #   in Loop: Header=BB4_93 Depth=1
	jmp	.LBB4_93
.LBB4_100:                              # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB4_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_102:                              # %if.end500
	jmp	.LBB4_103
.LBB4_103:                              # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB4_104:                              # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_111
.LBB4_106:                              # %if.end517
                                        #   in Loop: Header=BB4_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_108:                              # %if.end523
                                        #   in Loop: Header=BB4_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB4_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_110:                              # %if.end550
                                        #   in Loop: Header=BB4_104 Depth=1
	jmp	.LBB4_104
.LBB4_111:                              # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB4_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_113:                              # %if.end556
	jmp	.LBB4_114
.LBB4_114:                              # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB4_115:                              # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_122
.LBB4_117:                              # %if.end573
                                        #   in Loop: Header=BB4_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_119:                              # %if.end579
                                        #   in Loop: Header=BB4_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB4_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_121:                              # %if.end606
                                        #   in Loop: Header=BB4_115 Depth=1
	jmp	.LBB4_115
.LBB4_122:                              # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB4_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_124:                              # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB4_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB4_126:                              # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB4_127:                              # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB4_128:                              # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_135
.LBB4_130:                              # %if.end636
                                        #   in Loop: Header=BB4_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_132:                              # %if.end642
                                        #   in Loop: Header=BB4_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB4_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_134:                              # %if.end669
                                        #   in Loop: Header=BB4_128 Depth=1
	jmp	.LBB4_128
.LBB4_135:                              # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB4_136:                              # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB4_137:                              # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_144
.LBB4_139:                              # %if.end692
                                        #   in Loop: Header=BB4_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_141:                              # %if.end698
                                        #   in Loop: Header=BB4_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB4_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_143:                              # %if.end725
                                        #   in Loop: Header=BB4_137 Depth=1
	jmp	.LBB4_137
.LBB4_144:                              # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB4_145:                              # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB4_146:                              # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_153
.LBB4_148:                              # %if.end748
                                        #   in Loop: Header=BB4_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_150:                              # %if.end754
                                        #   in Loop: Header=BB4_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB4_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_152:                              # %if.end781
                                        #   in Loop: Header=BB4_146 Depth=1
	jmp	.LBB4_146
.LBB4_153:                              # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB4_154:                              # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB4_155:                              # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_162
.LBB4_157:                              # %if.end804
                                        #   in Loop: Header=BB4_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_159:                              # %if.end810
                                        #   in Loop: Header=BB4_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB4_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_161:                              # %if.end837
                                        #   in Loop: Header=BB4_155 Depth=1
	jmp	.LBB4_155
.LBB4_162:                              # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB4_163:                              # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB4_164:                              # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB4_171
.LBB4_166:                              # %if.end860
                                        #   in Loop: Header=BB4_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_168:                              # %if.end866
                                        #   in Loop: Header=BB4_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB4_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_170:                              # %if.end893
                                        #   in Loop: Header=BB4_164 Depth=1
	jmp	.LBB4_164
.LBB4_171:                              # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB4_172:                              # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB4_173:                              # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_180
.LBB4_175:                              # %if.end911
                                        #   in Loop: Header=BB4_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_177:                              # %if.end917
                                        #   in Loop: Header=BB4_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB4_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_179:                              # %if.end944
                                        #   in Loop: Header=BB4_173 Depth=1
	jmp	.LBB4_173
.LBB4_180:                              # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB4_181:                              # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB4_182:                              # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_189
.LBB4_184:                              # %if.end967
                                        #   in Loop: Header=BB4_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_186:                              # %if.end973
                                        #   in Loop: Header=BB4_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB4_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_188:                              # %if.end1000
                                        #   in Loop: Header=BB4_182 Depth=1
	jmp	.LBB4_182
.LBB4_189:                              # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB4_190:                              # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB4_191:                              # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_198
.LBB4_193:                              # %if.end1023
                                        #   in Loop: Header=BB4_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_195:                              # %if.end1029
                                        #   in Loop: Header=BB4_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB4_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_197:                              # %if.end1056
                                        #   in Loop: Header=BB4_191 Depth=1
	jmp	.LBB4_191
.LBB4_198:                              # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB4_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_200:                              # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB4_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_202:                              # %if.end1075
	movl	$0, -24(%rbp)
.LBB4_203:                              # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB4_218
# %bb.204:                              # %for.body
	jmp	.LBB4_205
.LBB4_205:                              # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB4_206:                              # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_213
.LBB4_208:                              # %if.end1094
                                        #   in Loop: Header=BB4_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_210:                              # %if.end1100
                                        #   in Loop: Header=BB4_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB4_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_212:                              # %if.end1127
                                        #   in Loop: Header=BB4_206 Depth=1
	jmp	.LBB4_206
.LBB4_213:                              # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB4_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB4_216
.LBB4_215:                              # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB4_216:                              # %if.end1137
	jmp	.LBB4_217
.LBB4_217:                              # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_203
.LBB4_218:                              # %for.end
	movl	$0, -24(%rbp)
.LBB4_219:                              # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB4_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB4_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB4_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_219
.LBB4_222:                              # %for.end1147
	movl	$0, -24(%rbp)
.LBB4_223:                              # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB4_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB4_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB4_226:                              # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB4_240
# %bb.227:                              # %for.body1160
	jmp	.LBB4_228
.LBB4_228:                              # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB4_229:                              # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_236
.LBB4_231:                              # %if.end1177
                                        #   in Loop: Header=BB4_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_233:                              # %if.end1183
                                        #   in Loop: Header=BB4_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB4_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_235:                              # %if.end1210
                                        #   in Loop: Header=BB4_229 Depth=1
	jmp	.LBB4_229
.LBB4_236:                              # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB4_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB4_238:                              # %if.end1221
	jmp	.LBB4_239
.LBB4_239:                              # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB4_226
.LBB4_240:                              # %for.end1224
	jmp	.LBB4_241
.LBB4_241:                              # %if.end1225
	jmp	.LBB4_242
.LBB4_242:                              # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_223
.LBB4_243:                              # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB4_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_245:                              # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB4_246:                              # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB4_247:                              # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB4_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB4_254
.LBB4_249:                              # %if.end1250
                                        #   in Loop: Header=BB4_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_251:                              # %if.end1256
                                        #   in Loop: Header=BB4_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB4_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_253:                              # %if.end1283
                                        #   in Loop: Header=BB4_247 Depth=1
	jmp	.LBB4_247
.LBB4_254:                              # %while.end1284
	cmpl	$2, -104(%rbp)
	jl	.LBB4_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -104(%rbp)
	jle	.LBB4_257
.LBB4_256:                              # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_257:                              # %if.end1291
	jmp	.LBB4_258
.LBB4_258:                              # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB4_259:                              # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB4_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB4_266
.LBB4_261:                              # %if.end1307
                                        #   in Loop: Header=BB4_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_263:                              # %if.end1313
                                        #   in Loop: Header=BB4_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB4_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_265:                              # %if.end1340
                                        #   in Loop: Header=BB4_259 Depth=1
	jmp	.LBB4_259
.LBB4_266:                              # %while.end1341
	cmpl	$1, -100(%rbp)
	jge	.LBB4_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_268:                              # %if.end1345
	movl	$0, -24(%rbp)
.LBB4_269:                              # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB4_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB4_271:                              # %while.body1350
	jmp	.LBB4_272
.LBB4_272:                              # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB4_273:                              # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_280
.LBB4_275:                              # %if.end1368
                                        #   in Loop: Header=BB4_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_277:                              # %if.end1374
                                        #   in Loop: Header=BB4_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB4_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_279:                              # %if.end1401
                                        #   in Loop: Header=BB4_273 Depth=1
	jmp	.LBB4_273
.LBB4_280:                              # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB4_282
# %bb.281:                              # %if.then1406
	jmp	.LBB4_285
.LBB4_282:                              # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB4_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_284:                              # %if.end1412
	jmp	.LBB4_271
.LBB4_285:                              # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_269
.LBB4_287:                              # %for.end1419
	movb	$0, -29(%rbp)
.LBB4_288:                              # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB4_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB4_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB4_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB4_288
.LBB4_291:                              # %for.end1430
	movl	$0, -24(%rbp)
.LBB4_292:                              # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB4_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB4_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB4_294:                              # %while.cond
                                        #   Parent Loop BB4_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB4_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB4_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB4_294
.LBB4_296:                              # %while.end1451
                                        #   in Loop: Header=BB4_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB4_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_292
.LBB4_298:                              # %for.end1457
	movl	$0, -52(%rbp)
.LBB4_299:                              # %for.cond1458
	movl	-52(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB4_343
# %bb.300:                              # %for.body1461
	jmp	.LBB4_301
.LBB4_301:                              # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB4_302:                              # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB4_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB4_309
.LBB4_304:                              # %if.end1478
                                        #   in Loop: Header=BB4_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_306:                              # %if.end1484
                                        #   in Loop: Header=BB4_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB4_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_308:                              # %if.end1511
                                        #   in Loop: Header=BB4_302 Depth=1
	jmp	.LBB4_302
.LBB4_309:                              # %while.end1512
	movl	$0, -24(%rbp)
.LBB4_310:                              # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB4_341
# %bb.311:                              # %for.body1516
	jmp	.LBB4_312
.LBB4_312:                              # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB4_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB4_315
.LBB4_314:                              # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_315:                              # %if.end1525
	jmp	.LBB4_316
.LBB4_316:                              # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB4_317:                              # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_324
.LBB4_319:                              # %if.end1543
                                        #   in Loop: Header=BB4_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_321:                              # %if.end1549
                                        #   in Loop: Header=BB4_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB4_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_323:                              # %if.end1576
                                        #   in Loop: Header=BB4_317 Depth=1
	jmp	.LBB4_317
.LBB4_324:                              # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB4_326
# %bb.325:                              # %if.then1581
	jmp	.LBB4_339
.LBB4_326:                              # %if.end1582
	jmp	.LBB4_327
.LBB4_327:                              # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB4_328:                              # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_335
.LBB4_330:                              # %if.end1600
                                        #   in Loop: Header=BB4_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_332:                              # %if.end1606
                                        #   in Loop: Header=BB4_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB4_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_334:                              # %if.end1633
                                        #   in Loop: Header=BB4_328 Depth=1
	jmp	.LBB4_328
.LBB4_335:                              # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB4_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB4_338
.LBB4_337:                              # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB4_338:                              # %if.end1642
	jmp	.LBB4_312
.LBB4_339:                              # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_310
.LBB4_341:                              # %for.end1651
	jmp	.LBB4_342
.LBB4_342:                              # %for.inc1652
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB4_299
.LBB4_343:                              # %for.end1654
	movl	$0, -52(%rbp)
.LBB4_344:                              # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_346 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB4_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB4_344 Depth=1
	movl	$32, -156(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB4_346:                              # %for.cond1659
                                        #   Parent Loop BB4_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB4_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB4_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-180(%rbp), %eax
	jle	.LBB4_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB4_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -180(%rbp)
.LBB4_349:                              # %if.end1678
                                        #   in Loop: Header=BB4_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB4_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB4_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
.LBB4_351:                              # %if.end1694
                                        #   in Loop: Header=BB4_346 Depth=2
	jmp	.LBB4_352
.LBB4_352:                              # %for.inc1695
                                        #   in Loop: Header=BB4_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_346
.LBB4_353:                              # %for.end1697
                                        #   in Loop: Header=BB4_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-156(%rbp), %r8d
	movl	-180(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-156(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB4_344 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB4_344
.LBB4_355:                              # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -132(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
.LBB4_356:                              # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB4_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB4_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB4_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_356
.LBB4_359:                              # %for.end1728
	movl	$4095, -160(%rbp)       # imm = 0xFFF
	movl	$15, -136(%rbp)
.LBB4_360:                              # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_362 Depth 2
	cmpl	$0, -136(%rbp)
	jl	.LBB4_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB4_360 Depth=1
	movl	$15, -144(%rbp)
.LBB4_362:                              # %for.cond1733
                                        #   Parent Loop BB4_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -144(%rbp)
	jl	.LBB4_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB4_362 Depth=2
	movl	-136(%rbp), %eax
	shll	$4, %eax
	addl	-144(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-160(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB4_362 Depth=2
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB4_362
.LBB4_365:                              # %for.end1745
                                        #   in Loop: Header=BB4_360 Depth=1
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB4_360 Depth=1
	movl	-136(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB4_360
.LBB4_367:                              # %for.end1751
	movl	$0, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB4_371
# %bb.368:                              # %if.then1754
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB4_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_370:                              # %if.end1759
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB4_371:                              # %if.end1779
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB4_372:                              # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB4_373:                              # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB4_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -332(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-332(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB4_380
.LBB4_375:                              # %if.end1799
                                        #   in Loop: Header=BB4_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_377:                              # %if.end1805
                                        #   in Loop: Header=BB4_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB4_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_379:                              # %if.end1832
                                        #   in Loop: Header=BB4_373 Depth=1
	jmp	.LBB4_373
.LBB4_380:                              # %while.end1833
	jmp	.LBB4_381
.LBB4_381:                              # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB4_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_383:                              # %if.end1839
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB4_385
# %bb.384:                              # %if.then1844
	jmp	.LBB4_395
.LBB4_385:                              # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB4_386:                              # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB4_387:                              # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB4_394
.LBB4_389:                              # %if.end1863
                                        #   in Loop: Header=BB4_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_391:                              # %if.end1869
                                        #   in Loop: Header=BB4_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB4_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_393:                              # %if.end1896
                                        #   in Loop: Header=BB4_387 Depth=1
	jmp	.LBB4_387
.LBB4_394:                              # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB4_381
.LBB4_395:                              # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB4_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB4_398
.LBB4_397:                              # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_398:                              # %if.end1913
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB4_399:                              # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jne	.LBB4_401
# %bb.400:                              # %if.then1923
	jmp	.LBB4_520
.LBB4_401:                              # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB4_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB4_458
.LBB4_403:                              # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB4_404:                              # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB4_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB4_409
.LBB4_406:                              # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB4_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB4_408:                              # %if.end1942
	jmp	.LBB4_409
.LBB4_409:                              # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB4_413
# %bb.410:                              # %if.then1947
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB4_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_412:                              # %if.end1952
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB4_413:                              # %if.end1972
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB4_414:                              # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB4_415:                              # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB4_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -368(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-368(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB4_422
.LBB4_417:                              # %if.end1992
                                        #   in Loop: Header=BB4_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_419:                              # %if.end1998
                                        #   in Loop: Header=BB4_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB4_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_421:                              # %if.end2025
                                        #   in Loop: Header=BB4_415 Depth=1
	jmp	.LBB4_415
.LBB4_422:                              # %while.end2026
	jmp	.LBB4_423
.LBB4_423:                              # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB4_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_425:                              # %if.end2032
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB4_427
# %bb.426:                              # %if.then2037
	jmp	.LBB4_437
.LBB4_427:                              # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB4_428:                              # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB4_429:                              # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB4_436
.LBB4_431:                              # %if.end2056
                                        #   in Loop: Header=BB4_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_433:                              # %if.end2062
                                        #   in Loop: Header=BB4_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB4_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_435:                              # %if.end2089
                                        #   in Loop: Header=BB4_429 Depth=1
	jmp	.LBB4_429
.LBB4_436:                              # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB4_423
.LBB4_437:                              # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB4_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB4_440
.LBB4_439:                              # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_440:                              # %if.end2106
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB4_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB4_443:                              # %lor.end
	testb	$1, %al
	jne	.LBB4_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB4_451
# %bb.445:                              # %if.then2130
	jmp	.LBB4_446
.LBB4_446:                              # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB4_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB4_446 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB4_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_449:                              # %if.end2138
                                        #   in Loop: Header=BB4_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB4_446
.LBB4_450:                              # %while.end2145
	jmp	.LBB4_457
.LBB4_451:                              # %if.else2146
	jmp	.LBB4_452
.LBB4_452:                              # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB4_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB4_452 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB4_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_455:                              # %if.end2154
                                        #   in Loop: Header=BB4_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB4_452
.LBB4_456:                              # %while.end2161
	jmp	.LBB4_457
.LBB4_457:                              # %if.end2162
	jmp	.LBB4_399
.LBB4_458:                              # %if.else2163
	movl	-48(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB4_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_460:                              # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB4_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB4_462:                              # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB4_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB4_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB4_462
.LBB4_464:                              # %while.end2218
	jmp	.LBB4_465
.LBB4_465:                              # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB4_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB4_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB4_465
.LBB4_467:                              # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB4_485
.LBB4_468:                              # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-268(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB4_469:                              # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB4_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB4_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB4_469
.LBB4_471:                              # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB4_472:                              # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB4_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB4_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB4_472
.LBB4_474:                              # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB4_484
# %bb.475:                              # %if.then2302
	movl	$4095, -152(%rbp)       # imm = 0xFFF
	movl	$15, -140(%rbp)
.LBB4_476:                              # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_478 Depth 2
	cmpl	$0, -140(%rbp)
	jl	.LBB4_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB4_476 Depth=1
	movl	$15, -148(%rbp)
.LBB4_478:                              # %for.cond2307
                                        #   Parent Loop BB4_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB4_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB4_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-152(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB4_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB4_478
.LBB4_481:                              # %for.end2324
                                        #   in Loop: Header=BB4_476 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB4_476 Depth=1
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB4_476
.LBB4_483:                              # %for.end2331
	jmp	.LBB4_484
.LBB4_484:                              # %if.end2332
	jmp	.LBB4_485
.LBB4_485:                              # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB4_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB4_488
.LBB4_487:                              # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB4_488:                              # %if.end2359
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB4_492
# %bb.489:                              # %if.then2363
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB4_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_491:                              # %if.end2368
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB4_492:                              # %if.end2388
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB4_493:                              # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB4_494:                              # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB4_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-204(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB4_501
.LBB4_496:                              # %if.end2408
                                        #   in Loop: Header=BB4_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_498:                              # %if.end2414
                                        #   in Loop: Header=BB4_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB4_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_500:                              # %if.end2441
                                        #   in Loop: Header=BB4_494 Depth=1
	jmp	.LBB4_494
.LBB4_501:                              # %while.end2442
	jmp	.LBB4_502
.LBB4_502:                              # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB4_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_504:                              # %if.end2448
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB4_506
# %bb.505:                              # %if.then2453
	jmp	.LBB4_516
.LBB4_506:                              # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB4_507:                              # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB4_508:                              # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB4_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB4_515
.LBB4_510:                              # %if.end2472
                                        #   in Loop: Header=BB4_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_512:                              # %if.end2478
                                        #   in Loop: Header=BB4_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB4_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_514:                              # %if.end2505
                                        #   in Loop: Header=BB4_508 Depth=1
	jmp	.LBB4_508
.LBB4_515:                              # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB4_502
.LBB4_516:                              # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB4_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB4_519
.LBB4_518:                              # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_519:                              # %if.end2522
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB4_399
.LBB4_520:                              # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB4_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB4_523
.LBB4_522:                              # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_523:                              # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB4_524:                              # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB4_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB4_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB4_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_524
.LBB4_527:                              # %for.end2552
	movl	$1, -24(%rbp)
.LBB4_528:                              # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB4_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB4_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB4_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_528
.LBB4_531:                              # %for.end2567
	movl	$0, -24(%rbp)
.LBB4_532:                              # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB4_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB4_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB4_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB4_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB4_536
.LBB4_535:                              # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_536:                              # %if.end2584
                                        #   in Loop: Header=BB4_532 Depth=1
	jmp	.LBB4_537
.LBB4_537:                              # %for.inc2585
                                        #   in Loop: Header=BB4_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_532
.LBB4_538:                              # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB4_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB4_540:                              # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB4_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB4_542:                              # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB4_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB4_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB4_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_542
.LBB4_545:                              # %for.end2609
	movl	$0, -24(%rbp)
.LBB4_546:                              # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB4_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB4_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB4_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB4_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB4_550
.LBB4_549:                              # %if.else2646
                                        #   in Loop: Header=BB4_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB4_550:                              # %if.end2664
                                        #   in Loop: Header=BB4_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB4_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_546
.LBB4_552:                              # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB4_553:                              # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -336(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB4_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB4_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB4_556
.LBB4_555:                              # %if.else2727
                                        #   in Loop: Header=BB4_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB4_556:                              # %if.end2742
                                        #   in Loop: Header=BB4_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-336(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB4_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB4_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB4_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB4_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB4_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB4_562:                              # %if.end2791
	jmp	.LBB4_563
.LBB4_563:                              # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB4_565
.LBB4_564:                              # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB4_565:                              # %if.end2826
	jmp	.LBB4_578
.LBB4_566:                              # %if.else2827
	movl	$0, -24(%rbp)
.LBB4_567:                              # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB4_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB4_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB4_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_567
.LBB4_570:                              # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB4_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB4_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB4_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB4_574:                              # %if.end2893
	jmp	.LBB4_575
.LBB4_575:                              # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB4_577
.LBB4_576:                              # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB4_577:                              # %if.end2918
	jmp	.LBB4_578
.LBB4_578:                              # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_579:                              # %endhdr_2
	jmp	.LBB4_580
.LBB4_580:                              # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB4_581:                              # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_588
.LBB4_583:                              # %if.end2937
                                        #   in Loop: Header=BB4_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_585:                              # %if.end2943
                                        #   in Loop: Header=BB4_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB4_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_587:                              # %if.end2970
                                        #   in Loop: Header=BB4_581 Depth=1
	jmp	.LBB4_581
.LBB4_588:                              # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB4_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_590:                              # %if.end2976
	jmp	.LBB4_591
.LBB4_591:                              # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB4_592:                              # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_599
.LBB4_594:                              # %if.end2994
                                        #   in Loop: Header=BB4_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_596:                              # %if.end3000
                                        #   in Loop: Header=BB4_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB4_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_598:                              # %if.end3027
                                        #   in Loop: Header=BB4_592 Depth=1
	jmp	.LBB4_592
.LBB4_599:                              # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB4_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_601:                              # %if.end3033
	jmp	.LBB4_602
.LBB4_602:                              # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB4_603:                              # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_610
.LBB4_605:                              # %if.end3051
                                        #   in Loop: Header=BB4_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_607:                              # %if.end3057
                                        #   in Loop: Header=BB4_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB4_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_609:                              # %if.end3084
                                        #   in Loop: Header=BB4_603 Depth=1
	jmp	.LBB4_603
.LBB4_610:                              # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB4_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_612:                              # %if.end3090
	jmp	.LBB4_613
.LBB4_613:                              # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB4_614:                              # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_621
.LBB4_616:                              # %if.end3108
                                        #   in Loop: Header=BB4_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_618:                              # %if.end3114
                                        #   in Loop: Header=BB4_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB4_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_620:                              # %if.end3141
                                        #   in Loop: Header=BB4_614 Depth=1
	jmp	.LBB4_614
.LBB4_621:                              # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB4_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_623:                              # %if.end3147
	jmp	.LBB4_624
.LBB4_624:                              # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB4_625:                              # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_632
.LBB4_627:                              # %if.end3165
                                        #   in Loop: Header=BB4_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_629:                              # %if.end3171
                                        #   in Loop: Header=BB4_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB4_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_631:                              # %if.end3198
                                        #   in Loop: Header=BB4_625 Depth=1
	jmp	.LBB4_625
.LBB4_632:                              # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB4_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_634:                              # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB4_635:                              # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB4_636:                              # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_643
.LBB4_638:                              # %if.end3222
                                        #   in Loop: Header=BB4_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_640:                              # %if.end3228
                                        #   in Loop: Header=BB4_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB4_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_642:                              # %if.end3255
                                        #   in Loop: Header=BB4_636 Depth=1
	jmp	.LBB4_636
.LBB4_643:                              # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB4_644:                              # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB4_645:                              # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_652
.LBB4_647:                              # %if.end3279
                                        #   in Loop: Header=BB4_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_649:                              # %if.end3285
                                        #   in Loop: Header=BB4_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB4_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_651:                              # %if.end3312
                                        #   in Loop: Header=BB4_645 Depth=1
	jmp	.LBB4_645
.LBB4_652:                              # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB4_653:                              # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB4_654:                              # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_661
.LBB4_656:                              # %if.end3336
                                        #   in Loop: Header=BB4_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_658:                              # %if.end3342
                                        #   in Loop: Header=BB4_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB4_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_660:                              # %if.end3369
                                        #   in Loop: Header=BB4_654 Depth=1
	jmp	.LBB4_654
.LBB4_661:                              # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB4_662:                              # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB4_663:                              # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB4_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB4_670
.LBB4_665:                              # %if.end3393
                                        #   in Loop: Header=BB4_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB4_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB4_673
.LBB4_667:                              # %if.end3399
                                        #   in Loop: Header=BB4_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB4_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB4_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB4_669:                              # %if.end3426
                                        #   in Loop: Header=BB4_663 Depth=1
	jmp	.LBB4_663
.LBB4_670:                              # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB4_673
.LBB4_671:                              # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB4_673:                              # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-184(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-324(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$1930845210, -372(%rbp) # imm = 0x73165C1A
	jne	.LBB4_675
.LBB4_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_675:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB4_674
.Lfunc_end4:
	.size	BZ2_decompress.3, .Lfunc_end4-BZ2_decompress.3
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI4_0:
	.quad	.LBB4_4
	.quad	.LBB4_15
	.quad	.LBB4_26
	.quad	.LBB4_37
	.quad	.LBB4_57
	.quad	.LBB4_70
	.quad	.LBB4_81
	.quad	.LBB4_92
	.quad	.LBB4_103
	.quad	.LBB4_114
	.quad	.LBB4_127
	.quad	.LBB4_136
	.quad	.LBB4_145
	.quad	.LBB4_154
	.quad	.LBB4_163
	.quad	.LBB4_172
	.quad	.LBB4_181
	.quad	.LBB4_190
	.quad	.LBB4_205
	.quad	.LBB4_228
	.quad	.LBB4_246
	.quad	.LBB4_258
	.quad	.LBB4_272
	.quad	.LBB4_301
	.quad	.LBB4_316
	.quad	.LBB4_327
	.quad	.LBB4_372
	.quad	.LBB4_386
	.quad	.LBB4_414
	.quad	.LBB4_428
	.quad	.LBB4_493
	.quad	.LBB4_507
	.quad	.LBB4_580
	.quad	.LBB4_591
	.quad	.LBB4_602
	.quad	.LBB4_613
	.quad	.LBB4_624
	.quad	.LBB4_635
	.quad	.LBB4_644
	.quad	.LBB4_653
	.quad	.LBB4_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.4        # -- Begin function BZ2_decompress.4
	.p2align	4, 0x90
	.type	BZ2_decompress.4,@function
BZ2_decompress.4:                       # @BZ2_decompress.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$195094640, -220(%rbp)  # imm = 0xBA0E870
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB5_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB5_2:                                # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB5_671
# %bb.3:                                # %if.end
	movq	.LJTI5_0(,%rax,8), %rax
	jmpq	*%rax
.LBB5_4:                                # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB5_5:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_12
.LBB5_7:                                # %if.end33
                                        #   in Loop: Header=BB5_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_9:                                # %if.end38
                                        #   in Loop: Header=BB5_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB5_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_11:                               # %if.end56
                                        #   in Loop: Header=BB5_5 Depth=1
	jmp	.LBB5_5
.LBB5_12:                               # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB5_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB5_673
.LBB5_14:                               # %if.end61
	jmp	.LBB5_15
.LBB5_15:                               # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB5_16:                               # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_23
.LBB5_18:                               # %if.end78
                                        #   in Loop: Header=BB5_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_20:                               # %if.end84
                                        #   in Loop: Header=BB5_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB5_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_22:                               # %if.end111
                                        #   in Loop: Header=BB5_16 Depth=1
	jmp	.LBB5_16
.LBB5_23:                               # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB5_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB5_673
.LBB5_25:                               # %if.end117
	jmp	.LBB5_26
.LBB5_26:                               # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB5_27:                               # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_34
.LBB5_29:                               # %if.end134
                                        #   in Loop: Header=BB5_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_31:                               # %if.end140
                                        #   in Loop: Header=BB5_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB5_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_33:                               # %if.end167
                                        #   in Loop: Header=BB5_27 Depth=1
	jmp	.LBB5_27
.LBB5_34:                               # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB5_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB5_673
.LBB5_36:                               # %if.end173
	jmp	.LBB5_37
.LBB5_37:                               # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB5_38:                               # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB5_45
.LBB5_40:                               # %if.end189
                                        #   in Loop: Header=BB5_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_42:                               # %if.end195
                                        #   in Loop: Header=BB5_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB5_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_44:                               # %if.end222
                                        #   in Loop: Header=BB5_38 Depth=1
	jmp	.LBB5_38
.LBB5_45:                               # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB5_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB5_48
.LBB5_47:                               # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB5_673
.LBB5_48:                               # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB5_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB5_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB5_52
.LBB5_51:                               # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB5_673
.LBB5_52:                               # %if.end257
	jmp	.LBB5_56
.LBB5_53:                               # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB5_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB5_673
.LBB5_55:                               # %if.end270
	jmp	.LBB5_56
.LBB5_56:                               # %if.end271
	jmp	.LBB5_57
.LBB5_57:                               # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB5_58:                               # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_65
.LBB5_60:                               # %if.end288
                                        #   in Loop: Header=BB5_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_62:                               # %if.end294
                                        #   in Loop: Header=BB5_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB5_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_64:                               # %if.end321
                                        #   in Loop: Header=BB5_58 Depth=1
	jmp	.LBB5_58
.LBB5_65:                               # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB5_67
# %bb.66:                               # %if.then326
	jmp	.LBB5_579
.LBB5_67:                               # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB5_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_69:                               # %if.end332
	jmp	.LBB5_70
.LBB5_70:                               # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB5_71:                               # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_78
.LBB5_73:                               # %if.end349
                                        #   in Loop: Header=BB5_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_75:                               # %if.end355
                                        #   in Loop: Header=BB5_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB5_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_77:                               # %if.end382
                                        #   in Loop: Header=BB5_71 Depth=1
	jmp	.LBB5_71
.LBB5_78:                               # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB5_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_80:                               # %if.end388
	jmp	.LBB5_81
.LBB5_81:                               # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB5_82:                               # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_89
.LBB5_84:                               # %if.end405
                                        #   in Loop: Header=BB5_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_86:                               # %if.end411
                                        #   in Loop: Header=BB5_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB5_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_88:                               # %if.end438
                                        #   in Loop: Header=BB5_82 Depth=1
	jmp	.LBB5_82
.LBB5_89:                               # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB5_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_91:                               # %if.end444
	jmp	.LBB5_92
.LBB5_92:                               # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB5_93:                               # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_100
.LBB5_95:                               # %if.end461
                                        #   in Loop: Header=BB5_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_97:                               # %if.end467
                                        #   in Loop: Header=BB5_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB5_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_99:                               # %if.end494
                                        #   in Loop: Header=BB5_93 Depth=1
	jmp	.LBB5_93
.LBB5_100:                              # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB5_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_102:                              # %if.end500
	jmp	.LBB5_103
.LBB5_103:                              # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB5_104:                              # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_111
.LBB5_106:                              # %if.end517
                                        #   in Loop: Header=BB5_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_108:                              # %if.end523
                                        #   in Loop: Header=BB5_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB5_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_110:                              # %if.end550
                                        #   in Loop: Header=BB5_104 Depth=1
	jmp	.LBB5_104
.LBB5_111:                              # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB5_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_113:                              # %if.end556
	jmp	.LBB5_114
.LBB5_114:                              # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB5_115:                              # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_122
.LBB5_117:                              # %if.end573
                                        #   in Loop: Header=BB5_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_119:                              # %if.end579
                                        #   in Loop: Header=BB5_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB5_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_121:                              # %if.end606
                                        #   in Loop: Header=BB5_115 Depth=1
	jmp	.LBB5_115
.LBB5_122:                              # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB5_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_124:                              # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB5_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB5_126:                              # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB5_127:                              # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB5_128:                              # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_135
.LBB5_130:                              # %if.end636
                                        #   in Loop: Header=BB5_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_132:                              # %if.end642
                                        #   in Loop: Header=BB5_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB5_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_134:                              # %if.end669
                                        #   in Loop: Header=BB5_128 Depth=1
	jmp	.LBB5_128
.LBB5_135:                              # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB5_136:                              # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB5_137:                              # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_144
.LBB5_139:                              # %if.end692
                                        #   in Loop: Header=BB5_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_141:                              # %if.end698
                                        #   in Loop: Header=BB5_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB5_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_143:                              # %if.end725
                                        #   in Loop: Header=BB5_137 Depth=1
	jmp	.LBB5_137
.LBB5_144:                              # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB5_145:                              # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB5_146:                              # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_153
.LBB5_148:                              # %if.end748
                                        #   in Loop: Header=BB5_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_150:                              # %if.end754
                                        #   in Loop: Header=BB5_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB5_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_152:                              # %if.end781
                                        #   in Loop: Header=BB5_146 Depth=1
	jmp	.LBB5_146
.LBB5_153:                              # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB5_154:                              # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB5_155:                              # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_162
.LBB5_157:                              # %if.end804
                                        #   in Loop: Header=BB5_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_159:                              # %if.end810
                                        #   in Loop: Header=BB5_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB5_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_161:                              # %if.end837
                                        #   in Loop: Header=BB5_155 Depth=1
	jmp	.LBB5_155
.LBB5_162:                              # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB5_163:                              # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB5_164:                              # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB5_171
.LBB5_166:                              # %if.end860
                                        #   in Loop: Header=BB5_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_168:                              # %if.end866
                                        #   in Loop: Header=BB5_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB5_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_170:                              # %if.end893
                                        #   in Loop: Header=BB5_164 Depth=1
	jmp	.LBB5_164
.LBB5_171:                              # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB5_172:                              # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB5_173:                              # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_180
.LBB5_175:                              # %if.end911
                                        #   in Loop: Header=BB5_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_177:                              # %if.end917
                                        #   in Loop: Header=BB5_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB5_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_179:                              # %if.end944
                                        #   in Loop: Header=BB5_173 Depth=1
	jmp	.LBB5_173
.LBB5_180:                              # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB5_181:                              # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB5_182:                              # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_189
.LBB5_184:                              # %if.end967
                                        #   in Loop: Header=BB5_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_186:                              # %if.end973
                                        #   in Loop: Header=BB5_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB5_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_188:                              # %if.end1000
                                        #   in Loop: Header=BB5_182 Depth=1
	jmp	.LBB5_182
.LBB5_189:                              # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB5_190:                              # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB5_191:                              # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_198
.LBB5_193:                              # %if.end1023
                                        #   in Loop: Header=BB5_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_195:                              # %if.end1029
                                        #   in Loop: Header=BB5_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB5_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_197:                              # %if.end1056
                                        #   in Loop: Header=BB5_191 Depth=1
	jmp	.LBB5_191
.LBB5_198:                              # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB5_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_200:                              # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB5_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_202:                              # %if.end1075
	movl	$0, -24(%rbp)
.LBB5_203:                              # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB5_218
# %bb.204:                              # %for.body
	jmp	.LBB5_205
.LBB5_205:                              # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB5_206:                              # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_213
.LBB5_208:                              # %if.end1094
                                        #   in Loop: Header=BB5_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_210:                              # %if.end1100
                                        #   in Loop: Header=BB5_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB5_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_212:                              # %if.end1127
                                        #   in Loop: Header=BB5_206 Depth=1
	jmp	.LBB5_206
.LBB5_213:                              # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB5_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB5_216
.LBB5_215:                              # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB5_216:                              # %if.end1137
	jmp	.LBB5_217
.LBB5_217:                              # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_203
.LBB5_218:                              # %for.end
	movl	$0, -24(%rbp)
.LBB5_219:                              # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB5_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB5_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB5_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_219
.LBB5_222:                              # %for.end1147
	movl	$0, -24(%rbp)
.LBB5_223:                              # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB5_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB5_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB5_226:                              # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB5_240
# %bb.227:                              # %for.body1160
	jmp	.LBB5_228
.LBB5_228:                              # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB5_229:                              # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_236
.LBB5_231:                              # %if.end1177
                                        #   in Loop: Header=BB5_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_233:                              # %if.end1183
                                        #   in Loop: Header=BB5_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB5_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_235:                              # %if.end1210
                                        #   in Loop: Header=BB5_229 Depth=1
	jmp	.LBB5_229
.LBB5_236:                              # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB5_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB5_238:                              # %if.end1221
	jmp	.LBB5_239
.LBB5_239:                              # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB5_226
.LBB5_240:                              # %for.end1224
	jmp	.LBB5_241
.LBB5_241:                              # %if.end1225
	jmp	.LBB5_242
.LBB5_242:                              # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_223
.LBB5_243:                              # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB5_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_245:                              # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB5_246:                              # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB5_247:                              # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB5_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB5_254
.LBB5_249:                              # %if.end1250
                                        #   in Loop: Header=BB5_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_251:                              # %if.end1256
                                        #   in Loop: Header=BB5_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB5_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_253:                              # %if.end1283
                                        #   in Loop: Header=BB5_247 Depth=1
	jmp	.LBB5_247
.LBB5_254:                              # %while.end1284
	cmpl	$2, -100(%rbp)
	jl	.LBB5_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -100(%rbp)
	jle	.LBB5_257
.LBB5_256:                              # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_257:                              # %if.end1291
	jmp	.LBB5_258
.LBB5_258:                              # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB5_259:                              # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB5_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB5_266
.LBB5_261:                              # %if.end1307
                                        #   in Loop: Header=BB5_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_263:                              # %if.end1313
                                        #   in Loop: Header=BB5_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB5_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_265:                              # %if.end1340
                                        #   in Loop: Header=BB5_259 Depth=1
	jmp	.LBB5_259
.LBB5_266:                              # %while.end1341
	cmpl	$1, -96(%rbp)
	jge	.LBB5_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_268:                              # %if.end1345
	movl	$0, -24(%rbp)
.LBB5_269:                              # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB5_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB5_271:                              # %while.body1350
	jmp	.LBB5_272
.LBB5_272:                              # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB5_273:                              # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_280
.LBB5_275:                              # %if.end1368
                                        #   in Loop: Header=BB5_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_277:                              # %if.end1374
                                        #   in Loop: Header=BB5_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB5_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_279:                              # %if.end1401
                                        #   in Loop: Header=BB5_273 Depth=1
	jmp	.LBB5_273
.LBB5_280:                              # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB5_282
# %bb.281:                              # %if.then1406
	jmp	.LBB5_285
.LBB5_282:                              # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB5_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_284:                              # %if.end1412
	jmp	.LBB5_271
.LBB5_285:                              # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_269
.LBB5_287:                              # %for.end1419
	movb	$0, -29(%rbp)
.LBB5_288:                              # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB5_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB5_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB5_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB5_288
.LBB5_291:                              # %for.end1430
	movl	$0, -24(%rbp)
.LBB5_292:                              # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB5_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB5_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB5_294:                              # %while.cond
                                        #   Parent Loop BB5_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB5_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB5_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB5_294
.LBB5_296:                              # %while.end1451
                                        #   in Loop: Header=BB5_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB5_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_292
.LBB5_298:                              # %for.end1457
	movl	$0, -52(%rbp)
.LBB5_299:                              # %for.cond1458
	movl	-52(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB5_343
# %bb.300:                              # %for.body1461
	jmp	.LBB5_301
.LBB5_301:                              # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB5_302:                              # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB5_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB5_309
.LBB5_304:                              # %if.end1478
                                        #   in Loop: Header=BB5_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_306:                              # %if.end1484
                                        #   in Loop: Header=BB5_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB5_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_308:                              # %if.end1511
                                        #   in Loop: Header=BB5_302 Depth=1
	jmp	.LBB5_302
.LBB5_309:                              # %while.end1512
	movl	$0, -24(%rbp)
.LBB5_310:                              # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB5_341
# %bb.311:                              # %for.body1516
	jmp	.LBB5_312
.LBB5_312:                              # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB5_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB5_315
.LBB5_314:                              # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_315:                              # %if.end1525
	jmp	.LBB5_316
.LBB5_316:                              # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB5_317:                              # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_324
.LBB5_319:                              # %if.end1543
                                        #   in Loop: Header=BB5_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_321:                              # %if.end1549
                                        #   in Loop: Header=BB5_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB5_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_323:                              # %if.end1576
                                        #   in Loop: Header=BB5_317 Depth=1
	jmp	.LBB5_317
.LBB5_324:                              # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB5_326
# %bb.325:                              # %if.then1581
	jmp	.LBB5_339
.LBB5_326:                              # %if.end1582
	jmp	.LBB5_327
.LBB5_327:                              # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB5_328:                              # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_335
.LBB5_330:                              # %if.end1600
                                        #   in Loop: Header=BB5_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_332:                              # %if.end1606
                                        #   in Loop: Header=BB5_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB5_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_334:                              # %if.end1633
                                        #   in Loop: Header=BB5_328 Depth=1
	jmp	.LBB5_328
.LBB5_335:                              # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB5_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB5_338
.LBB5_337:                              # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB5_338:                              # %if.end1642
	jmp	.LBB5_312
.LBB5_339:                              # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_310
.LBB5_341:                              # %for.end1651
	jmp	.LBB5_342
.LBB5_342:                              # %for.inc1652
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB5_299
.LBB5_343:                              # %for.end1654
	movl	$0, -52(%rbp)
.LBB5_344:                              # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_346 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB5_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB5_344 Depth=1
	movl	$32, -156(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB5_346:                              # %for.cond1659
                                        #   Parent Loop BB5_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB5_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB5_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB5_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB5_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB5_349:                              # %if.end1678
                                        #   in Loop: Header=BB5_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB5_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB5_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
.LBB5_351:                              # %if.end1694
                                        #   in Loop: Header=BB5_346 Depth=2
	jmp	.LBB5_352
.LBB5_352:                              # %for.inc1695
                                        #   in Loop: Header=BB5_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_346
.LBB5_353:                              # %for.end1697
                                        #   in Loop: Header=BB5_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-156(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-156(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB5_344 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB5_344
.LBB5_355:                              # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -132(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB5_356:                              # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB5_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB5_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB5_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_356
.LBB5_359:                              # %for.end1728
	movl	$4095, -144(%rbp)       # imm = 0xFFF
	movl	$15, -140(%rbp)
.LBB5_360:                              # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_362 Depth 2
	cmpl	$0, -140(%rbp)
	jl	.LBB5_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB5_360 Depth=1
	movl	$15, -160(%rbp)
.LBB5_362:                              # %for.cond1733
                                        #   Parent Loop BB5_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -160(%rbp)
	jl	.LBB5_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB5_362 Depth=2
	movl	-140(%rbp), %eax
	shll	$4, %eax
	addl	-160(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-144(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB5_362 Depth=2
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB5_362
.LBB5_365:                              # %for.end1745
                                        #   in Loop: Header=BB5_360 Depth=1
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB5_360 Depth=1
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB5_360
.LBB5_367:                              # %for.end1751
	movl	$0, -48(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB5_371
# %bb.368:                              # %if.then1754
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB5_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_370:                              # %if.end1759
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB5_371:                              # %if.end1779
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB5_372:                              # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB5_373:                              # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB5_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -268(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-268(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB5_380
.LBB5_375:                              # %if.end1799
                                        #   in Loop: Header=BB5_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_377:                              # %if.end1805
                                        #   in Loop: Header=BB5_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB5_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_379:                              # %if.end1832
                                        #   in Loop: Header=BB5_373 Depth=1
	jmp	.LBB5_373
.LBB5_380:                              # %while.end1833
	jmp	.LBB5_381
.LBB5_381:                              # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB5_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_383:                              # %if.end1839
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB5_385
# %bb.384:                              # %if.then1844
	jmp	.LBB5_395
.LBB5_385:                              # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB5_386:                              # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB5_387:                              # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB5_394
.LBB5_389:                              # %if.end1863
                                        #   in Loop: Header=BB5_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_391:                              # %if.end1869
                                        #   in Loop: Header=BB5_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB5_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_393:                              # %if.end1896
                                        #   in Loop: Header=BB5_387 Depth=1
	jmp	.LBB5_387
.LBB5_394:                              # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB5_381
.LBB5_395:                              # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB5_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB5_398
.LBB5_397:                              # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_398:                              # %if.end1913
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
.LBB5_399:                              # %while.body1920
	movl	-80(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB5_401
# %bb.400:                              # %if.then1923
	jmp	.LBB5_520
.LBB5_401:                              # %if.end1924
	cmpl	$0, -80(%rbp)
	je	.LBB5_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -80(%rbp)
	jne	.LBB5_458
.LBB5_403:                              # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB5_404:                              # %do.body
	cmpl	$0, -80(%rbp)
	jne	.LBB5_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB5_409
.LBB5_406:                              # %if.else1936
	cmpl	$1, -80(%rbp)
	jne	.LBB5_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB5_408:                              # %if.end1942
	jmp	.LBB5_409
.LBB5_409:                              # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB5_413
# %bb.410:                              # %if.then1947
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB5_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_412:                              # %if.end1952
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB5_413:                              # %if.end1972
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB5_414:                              # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB5_415:                              # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB5_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -332(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-332(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB5_422
.LBB5_417:                              # %if.end1992
                                        #   in Loop: Header=BB5_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_419:                              # %if.end1998
                                        #   in Loop: Header=BB5_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB5_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_421:                              # %if.end2025
                                        #   in Loop: Header=BB5_415 Depth=1
	jmp	.LBB5_415
.LBB5_422:                              # %while.end2026
	jmp	.LBB5_423
.LBB5_423:                              # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB5_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_425:                              # %if.end2032
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB5_427
# %bb.426:                              # %if.then2037
	jmp	.LBB5_437
.LBB5_427:                              # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB5_428:                              # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB5_429:                              # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB5_436
.LBB5_431:                              # %if.end2056
                                        #   in Loop: Header=BB5_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_433:                              # %if.end2062
                                        #   in Loop: Header=BB5_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB5_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_435:                              # %if.end2089
                                        #   in Loop: Header=BB5_429 Depth=1
	jmp	.LBB5_429
.LBB5_436:                              # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB5_423
.LBB5_437:                              # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB5_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB5_440
.LBB5_439:                              # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_440:                              # %if.end2106
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB5_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -80(%rbp)
	sete	%al
.LBB5_443:                              # %lor.end
	testb	$1, %al
	jne	.LBB5_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB5_451
# %bb.445:                              # %if.then2130
	jmp	.LBB5_446
.LBB5_446:                              # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB5_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB5_446 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB5_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_449:                              # %if.end2138
                                        #   in Loop: Header=BB5_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB5_446
.LBB5_450:                              # %while.end2145
	jmp	.LBB5_457
.LBB5_451:                              # %if.else2146
	jmp	.LBB5_452
.LBB5_452:                              # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB5_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB5_452 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB5_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_455:                              # %if.end2154
                                        #   in Loop: Header=BB5_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB5_452
.LBB5_456:                              # %while.end2161
	jmp	.LBB5_457
.LBB5_457:                              # %if.end2162
	jmp	.LBB5_399
.LBB5_458:                              # %if.else2163
	movl	-48(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB5_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_460:                              # %if.end2167
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB5_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB5_462:                              # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB5_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB5_462 Depth=1
	movl	-76(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB5_462
.LBB5_464:                              # %while.end2218
	jmp	.LBB5_465
.LBB5_465:                              # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB5_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB5_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-76(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB5_465
.LBB5_467:                              # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB5_485
.LBB5_468:                              # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-236(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB5_469:                              # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB5_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB5_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-76(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB5_469
.LBB5_471:                              # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB5_472:                              # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB5_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB5_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB5_472
.LBB5_474:                              # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB5_484
# %bb.475:                              # %if.then2302
	movl	$4095, -148(%rbp)       # imm = 0xFFF
	movl	$15, -136(%rbp)
.LBB5_476:                              # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_478 Depth 2
	cmpl	$0, -136(%rbp)
	jl	.LBB5_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB5_476 Depth=1
	movl	$15, -152(%rbp)
.LBB5_478:                              # %for.cond2307
                                        #   Parent Loop BB5_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -152(%rbp)
	jl	.LBB5_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB5_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-152(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-148(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB5_478 Depth=2
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB5_478
.LBB5_481:                              # %for.end2324
                                        #   in Loop: Header=BB5_476 Depth=1
	movl	-148(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB5_476 Depth=1
	movl	-136(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB5_476
.LBB5_483:                              # %for.end2331
	jmp	.LBB5_484
.LBB5_484:                              # %if.end2332
	jmp	.LBB5_485
.LBB5_485:                              # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB5_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB5_488
.LBB5_487:                              # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB5_488:                              # %if.end2359
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB5_492
# %bb.489:                              # %if.then2363
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB5_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_491:                              # %if.end2368
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB5_492:                              # %if.end2388
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB5_493:                              # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB5_494:                              # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB5_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -248(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-248(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB5_501
.LBB5_496:                              # %if.end2408
                                        #   in Loop: Header=BB5_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_498:                              # %if.end2414
                                        #   in Loop: Header=BB5_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB5_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_500:                              # %if.end2441
                                        #   in Loop: Header=BB5_494 Depth=1
	jmp	.LBB5_494
.LBB5_501:                              # %while.end2442
	jmp	.LBB5_502
.LBB5_502:                              # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB5_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_504:                              # %if.end2448
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB5_506
# %bb.505:                              # %if.then2453
	jmp	.LBB5_516
.LBB5_506:                              # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB5_507:                              # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB5_508:                              # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB5_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB5_515
.LBB5_510:                              # %if.end2472
                                        #   in Loop: Header=BB5_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_512:                              # %if.end2478
                                        #   in Loop: Header=BB5_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB5_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_514:                              # %if.end2505
                                        #   in Loop: Header=BB5_508 Depth=1
	jmp	.LBB5_508
.LBB5_515:                              # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB5_502
.LBB5_516:                              # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB5_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB5_519
.LBB5_518:                              # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_519:                              # %if.end2522
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB5_399
.LBB5_520:                              # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB5_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB5_523
.LBB5_522:                              # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_523:                              # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB5_524:                              # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB5_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB5_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB5_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_524
.LBB5_527:                              # %for.end2552
	movl	$1, -24(%rbp)
.LBB5_528:                              # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB5_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB5_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB5_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_528
.LBB5_531:                              # %for.end2567
	movl	$0, -24(%rbp)
.LBB5_532:                              # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB5_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB5_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB5_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB5_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB5_536
.LBB5_535:                              # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_536:                              # %if.end2584
                                        #   in Loop: Header=BB5_532 Depth=1
	jmp	.LBB5_537
.LBB5_537:                              # %for.inc2585
                                        #   in Loop: Header=BB5_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_532
.LBB5_538:                              # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB5_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB5_540:                              # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB5_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB5_542:                              # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB5_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB5_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB5_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_542
.LBB5_545:                              # %for.end2609
	movl	$0, -24(%rbp)
.LBB5_546:                              # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB5_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB5_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB5_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB5_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB5_550
.LBB5_549:                              # %if.else2646
                                        #   in Loop: Header=BB5_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB5_550:                              # %if.end2664
                                        #   in Loop: Header=BB5_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB5_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_546
.LBB5_552:                              # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB5_553:                              # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -280(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB5_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB5_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB5_556
.LBB5_555:                              # %if.else2727
                                        #   in Loop: Header=BB5_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB5_556:                              # %if.end2742
                                        #   in Loop: Header=BB5_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-280(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB5_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB5_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB5_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB5_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB5_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB5_562:                              # %if.end2791
	jmp	.LBB5_563
.LBB5_563:                              # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB5_565
.LBB5_564:                              # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB5_565:                              # %if.end2826
	jmp	.LBB5_578
.LBB5_566:                              # %if.else2827
	movl	$0, -24(%rbp)
.LBB5_567:                              # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB5_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB5_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB5_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_567
.LBB5_570:                              # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB5_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB5_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB5_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB5_574:                              # %if.end2893
	jmp	.LBB5_575
.LBB5_575:                              # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB5_577
.LBB5_576:                              # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB5_577:                              # %if.end2918
	jmp	.LBB5_578
.LBB5_578:                              # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_579:                              # %endhdr_2
	jmp	.LBB5_580
.LBB5_580:                              # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB5_581:                              # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_588
.LBB5_583:                              # %if.end2937
                                        #   in Loop: Header=BB5_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_585:                              # %if.end2943
                                        #   in Loop: Header=BB5_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB5_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_587:                              # %if.end2970
                                        #   in Loop: Header=BB5_581 Depth=1
	jmp	.LBB5_581
.LBB5_588:                              # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB5_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_590:                              # %if.end2976
	jmp	.LBB5_591
.LBB5_591:                              # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB5_592:                              # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_599
.LBB5_594:                              # %if.end2994
                                        #   in Loop: Header=BB5_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_596:                              # %if.end3000
                                        #   in Loop: Header=BB5_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB5_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_598:                              # %if.end3027
                                        #   in Loop: Header=BB5_592 Depth=1
	jmp	.LBB5_592
.LBB5_599:                              # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB5_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_601:                              # %if.end3033
	jmp	.LBB5_602
.LBB5_602:                              # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB5_603:                              # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_610
.LBB5_605:                              # %if.end3051
                                        #   in Loop: Header=BB5_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_607:                              # %if.end3057
                                        #   in Loop: Header=BB5_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB5_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_609:                              # %if.end3084
                                        #   in Loop: Header=BB5_603 Depth=1
	jmp	.LBB5_603
.LBB5_610:                              # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB5_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_612:                              # %if.end3090
	jmp	.LBB5_613
.LBB5_613:                              # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB5_614:                              # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_621
.LBB5_616:                              # %if.end3108
                                        #   in Loop: Header=BB5_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_618:                              # %if.end3114
                                        #   in Loop: Header=BB5_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB5_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_620:                              # %if.end3141
                                        #   in Loop: Header=BB5_614 Depth=1
	jmp	.LBB5_614
.LBB5_621:                              # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB5_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_623:                              # %if.end3147
	jmp	.LBB5_624
.LBB5_624:                              # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB5_625:                              # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_632
.LBB5_627:                              # %if.end3165
                                        #   in Loop: Header=BB5_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_629:                              # %if.end3171
                                        #   in Loop: Header=BB5_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB5_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_631:                              # %if.end3198
                                        #   in Loop: Header=BB5_625 Depth=1
	jmp	.LBB5_625
.LBB5_632:                              # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB5_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_634:                              # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB5_635:                              # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB5_636:                              # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_643
.LBB5_638:                              # %if.end3222
                                        #   in Loop: Header=BB5_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_640:                              # %if.end3228
                                        #   in Loop: Header=BB5_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB5_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_642:                              # %if.end3255
                                        #   in Loop: Header=BB5_636 Depth=1
	jmp	.LBB5_636
.LBB5_643:                              # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB5_644:                              # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB5_645:                              # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_652
.LBB5_647:                              # %if.end3279
                                        #   in Loop: Header=BB5_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_649:                              # %if.end3285
                                        #   in Loop: Header=BB5_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB5_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_651:                              # %if.end3312
                                        #   in Loop: Header=BB5_645 Depth=1
	jmp	.LBB5_645
.LBB5_652:                              # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB5_653:                              # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB5_654:                              # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_661
.LBB5_656:                              # %if.end3336
                                        #   in Loop: Header=BB5_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_658:                              # %if.end3342
                                        #   in Loop: Header=BB5_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB5_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_660:                              # %if.end3369
                                        #   in Loop: Header=BB5_654 Depth=1
	jmp	.LBB5_654
.LBB5_661:                              # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB5_662:                              # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB5_663:                              # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB5_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB5_670
.LBB5_665:                              # %if.end3393
                                        #   in Loop: Header=BB5_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB5_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB5_673
.LBB5_667:                              # %if.end3399
                                        #   in Loop: Header=BB5_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB5_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB5_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB5_669:                              # %if.end3426
                                        #   in Loop: Header=BB5_663 Depth=1
	jmp	.LBB5_663
.LBB5_670:                              # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB5_673
.LBB5_671:                              # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB5_673:                              # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-304(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$195094640, -220(%rbp)  # imm = 0xBA0E870
	jne	.LBB5_675
.LBB5_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_675:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB5_674
.Lfunc_end5:
	.size	BZ2_decompress.4, .Lfunc_end5-BZ2_decompress.4
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI5_0:
	.quad	.LBB5_4
	.quad	.LBB5_15
	.quad	.LBB5_26
	.quad	.LBB5_37
	.quad	.LBB5_57
	.quad	.LBB5_70
	.quad	.LBB5_81
	.quad	.LBB5_92
	.quad	.LBB5_103
	.quad	.LBB5_114
	.quad	.LBB5_127
	.quad	.LBB5_136
	.quad	.LBB5_145
	.quad	.LBB5_154
	.quad	.LBB5_163
	.quad	.LBB5_172
	.quad	.LBB5_181
	.quad	.LBB5_190
	.quad	.LBB5_205
	.quad	.LBB5_228
	.quad	.LBB5_246
	.quad	.LBB5_258
	.quad	.LBB5_272
	.quad	.LBB5_301
	.quad	.LBB5_316
	.quad	.LBB5_327
	.quad	.LBB5_372
	.quad	.LBB5_386
	.quad	.LBB5_414
	.quad	.LBB5_428
	.quad	.LBB5_493
	.quad	.LBB5_507
	.quad	.LBB5_580
	.quad	.LBB5_591
	.quad	.LBB5_602
	.quad	.LBB5_613
	.quad	.LBB5_624
	.quad	.LBB5_635
	.quad	.LBB5_644
	.quad	.LBB5_653
	.quad	.LBB5_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.5        # -- Begin function BZ2_decompress.5
	.p2align	4, 0x90
	.type	BZ2_decompress.5,@function
BZ2_decompress.5:                       # @BZ2_decompress.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$1166892895, -260(%rbp) # imm = 0x458D5F5F
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB6_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB6_2:                                # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB6_671
# %bb.3:                                # %if.end
	movq	.LJTI6_0(,%rax,8), %rax
	jmpq	*%rax
.LBB6_4:                                # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB6_5:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_12
.LBB6_7:                                # %if.end33
                                        #   in Loop: Header=BB6_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_9:                                # %if.end38
                                        #   in Loop: Header=BB6_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB6_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_11:                               # %if.end56
                                        #   in Loop: Header=BB6_5 Depth=1
	jmp	.LBB6_5
.LBB6_12:                               # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB6_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB6_673
.LBB6_14:                               # %if.end61
	jmp	.LBB6_15
.LBB6_15:                               # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB6_16:                               # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_23
.LBB6_18:                               # %if.end78
                                        #   in Loop: Header=BB6_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_20:                               # %if.end84
                                        #   in Loop: Header=BB6_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB6_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_22:                               # %if.end111
                                        #   in Loop: Header=BB6_16 Depth=1
	jmp	.LBB6_16
.LBB6_23:                               # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB6_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB6_673
.LBB6_25:                               # %if.end117
	jmp	.LBB6_26
.LBB6_26:                               # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB6_27:                               # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_34
.LBB6_29:                               # %if.end134
                                        #   in Loop: Header=BB6_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_31:                               # %if.end140
                                        #   in Loop: Header=BB6_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB6_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_33:                               # %if.end167
                                        #   in Loop: Header=BB6_27 Depth=1
	jmp	.LBB6_27
.LBB6_34:                               # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB6_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB6_673
.LBB6_36:                               # %if.end173
	jmp	.LBB6_37
.LBB6_37:                               # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB6_38:                               # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB6_45
.LBB6_40:                               # %if.end189
                                        #   in Loop: Header=BB6_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_42:                               # %if.end195
                                        #   in Loop: Header=BB6_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB6_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_44:                               # %if.end222
                                        #   in Loop: Header=BB6_38 Depth=1
	jmp	.LBB6_38
.LBB6_45:                               # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB6_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB6_48
.LBB6_47:                               # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB6_673
.LBB6_48:                               # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB6_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB6_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB6_52
.LBB6_51:                               # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB6_673
.LBB6_52:                               # %if.end257
	jmp	.LBB6_56
.LBB6_53:                               # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB6_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB6_673
.LBB6_55:                               # %if.end270
	jmp	.LBB6_56
.LBB6_56:                               # %if.end271
	jmp	.LBB6_57
.LBB6_57:                               # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB6_58:                               # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_65
.LBB6_60:                               # %if.end288
                                        #   in Loop: Header=BB6_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_62:                               # %if.end294
                                        #   in Loop: Header=BB6_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB6_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_64:                               # %if.end321
                                        #   in Loop: Header=BB6_58 Depth=1
	jmp	.LBB6_58
.LBB6_65:                               # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB6_67
# %bb.66:                               # %if.then326
	jmp	.LBB6_579
.LBB6_67:                               # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB6_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_69:                               # %if.end332
	jmp	.LBB6_70
.LBB6_70:                               # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB6_71:                               # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_78
.LBB6_73:                               # %if.end349
                                        #   in Loop: Header=BB6_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_75:                               # %if.end355
                                        #   in Loop: Header=BB6_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB6_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_77:                               # %if.end382
                                        #   in Loop: Header=BB6_71 Depth=1
	jmp	.LBB6_71
.LBB6_78:                               # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB6_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_80:                               # %if.end388
	jmp	.LBB6_81
.LBB6_81:                               # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB6_82:                               # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_89
.LBB6_84:                               # %if.end405
                                        #   in Loop: Header=BB6_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_86:                               # %if.end411
                                        #   in Loop: Header=BB6_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB6_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_88:                               # %if.end438
                                        #   in Loop: Header=BB6_82 Depth=1
	jmp	.LBB6_82
.LBB6_89:                               # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB6_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_91:                               # %if.end444
	jmp	.LBB6_92
.LBB6_92:                               # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB6_93:                               # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_100
.LBB6_95:                               # %if.end461
                                        #   in Loop: Header=BB6_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_97:                               # %if.end467
                                        #   in Loop: Header=BB6_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB6_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_99:                               # %if.end494
                                        #   in Loop: Header=BB6_93 Depth=1
	jmp	.LBB6_93
.LBB6_100:                              # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB6_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_102:                              # %if.end500
	jmp	.LBB6_103
.LBB6_103:                              # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB6_104:                              # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_111
.LBB6_106:                              # %if.end517
                                        #   in Loop: Header=BB6_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_108:                              # %if.end523
                                        #   in Loop: Header=BB6_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB6_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_110:                              # %if.end550
                                        #   in Loop: Header=BB6_104 Depth=1
	jmp	.LBB6_104
.LBB6_111:                              # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB6_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_113:                              # %if.end556
	jmp	.LBB6_114
.LBB6_114:                              # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB6_115:                              # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_122
.LBB6_117:                              # %if.end573
                                        #   in Loop: Header=BB6_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_119:                              # %if.end579
                                        #   in Loop: Header=BB6_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB6_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_121:                              # %if.end606
                                        #   in Loop: Header=BB6_115 Depth=1
	jmp	.LBB6_115
.LBB6_122:                              # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB6_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_124:                              # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB6_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB6_126:                              # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB6_127:                              # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB6_128:                              # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_135
.LBB6_130:                              # %if.end636
                                        #   in Loop: Header=BB6_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_132:                              # %if.end642
                                        #   in Loop: Header=BB6_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB6_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_134:                              # %if.end669
                                        #   in Loop: Header=BB6_128 Depth=1
	jmp	.LBB6_128
.LBB6_135:                              # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB6_136:                              # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB6_137:                              # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_144
.LBB6_139:                              # %if.end692
                                        #   in Loop: Header=BB6_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_141:                              # %if.end698
                                        #   in Loop: Header=BB6_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB6_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_143:                              # %if.end725
                                        #   in Loop: Header=BB6_137 Depth=1
	jmp	.LBB6_137
.LBB6_144:                              # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB6_145:                              # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB6_146:                              # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_153
.LBB6_148:                              # %if.end748
                                        #   in Loop: Header=BB6_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_150:                              # %if.end754
                                        #   in Loop: Header=BB6_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB6_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_152:                              # %if.end781
                                        #   in Loop: Header=BB6_146 Depth=1
	jmp	.LBB6_146
.LBB6_153:                              # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB6_154:                              # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB6_155:                              # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_162
.LBB6_157:                              # %if.end804
                                        #   in Loop: Header=BB6_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_159:                              # %if.end810
                                        #   in Loop: Header=BB6_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB6_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_161:                              # %if.end837
                                        #   in Loop: Header=BB6_155 Depth=1
	jmp	.LBB6_155
.LBB6_162:                              # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB6_163:                              # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB6_164:                              # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB6_171
.LBB6_166:                              # %if.end860
                                        #   in Loop: Header=BB6_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_168:                              # %if.end866
                                        #   in Loop: Header=BB6_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB6_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_170:                              # %if.end893
                                        #   in Loop: Header=BB6_164 Depth=1
	jmp	.LBB6_164
.LBB6_171:                              # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB6_172:                              # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB6_173:                              # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_180
.LBB6_175:                              # %if.end911
                                        #   in Loop: Header=BB6_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_177:                              # %if.end917
                                        #   in Loop: Header=BB6_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB6_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_179:                              # %if.end944
                                        #   in Loop: Header=BB6_173 Depth=1
	jmp	.LBB6_173
.LBB6_180:                              # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB6_181:                              # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB6_182:                              # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_189
.LBB6_184:                              # %if.end967
                                        #   in Loop: Header=BB6_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_186:                              # %if.end973
                                        #   in Loop: Header=BB6_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB6_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_188:                              # %if.end1000
                                        #   in Loop: Header=BB6_182 Depth=1
	jmp	.LBB6_182
.LBB6_189:                              # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB6_190:                              # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB6_191:                              # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_198
.LBB6_193:                              # %if.end1023
                                        #   in Loop: Header=BB6_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_195:                              # %if.end1029
                                        #   in Loop: Header=BB6_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB6_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_197:                              # %if.end1056
                                        #   in Loop: Header=BB6_191 Depth=1
	jmp	.LBB6_191
.LBB6_198:                              # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB6_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_200:                              # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB6_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_202:                              # %if.end1075
	movl	$0, -24(%rbp)
.LBB6_203:                              # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB6_218
# %bb.204:                              # %for.body
	jmp	.LBB6_205
.LBB6_205:                              # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB6_206:                              # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_213
.LBB6_208:                              # %if.end1094
                                        #   in Loop: Header=BB6_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_210:                              # %if.end1100
                                        #   in Loop: Header=BB6_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB6_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_212:                              # %if.end1127
                                        #   in Loop: Header=BB6_206 Depth=1
	jmp	.LBB6_206
.LBB6_213:                              # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB6_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB6_216
.LBB6_215:                              # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB6_216:                              # %if.end1137
	jmp	.LBB6_217
.LBB6_217:                              # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_203
.LBB6_218:                              # %for.end
	movl	$0, -24(%rbp)
.LBB6_219:                              # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB6_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB6_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB6_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_219
.LBB6_222:                              # %for.end1147
	movl	$0, -24(%rbp)
.LBB6_223:                              # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB6_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB6_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB6_226:                              # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB6_240
# %bb.227:                              # %for.body1160
	jmp	.LBB6_228
.LBB6_228:                              # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB6_229:                              # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_236
.LBB6_231:                              # %if.end1177
                                        #   in Loop: Header=BB6_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_233:                              # %if.end1183
                                        #   in Loop: Header=BB6_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB6_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_235:                              # %if.end1210
                                        #   in Loop: Header=BB6_229 Depth=1
	jmp	.LBB6_229
.LBB6_236:                              # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB6_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB6_238:                              # %if.end1221
	jmp	.LBB6_239
.LBB6_239:                              # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB6_226
.LBB6_240:                              # %for.end1224
	jmp	.LBB6_241
.LBB6_241:                              # %if.end1225
	jmp	.LBB6_242
.LBB6_242:                              # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_223
.LBB6_243:                              # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB6_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_245:                              # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB6_246:                              # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB6_247:                              # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB6_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB6_254
.LBB6_249:                              # %if.end1250
                                        #   in Loop: Header=BB6_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_251:                              # %if.end1256
                                        #   in Loop: Header=BB6_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB6_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_253:                              # %if.end1283
                                        #   in Loop: Header=BB6_247 Depth=1
	jmp	.LBB6_247
.LBB6_254:                              # %while.end1284
	cmpl	$2, -96(%rbp)
	jl	.LBB6_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -96(%rbp)
	jle	.LBB6_257
.LBB6_256:                              # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_257:                              # %if.end1291
	jmp	.LBB6_258
.LBB6_258:                              # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB6_259:                              # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB6_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB6_266
.LBB6_261:                              # %if.end1307
                                        #   in Loop: Header=BB6_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_263:                              # %if.end1313
                                        #   in Loop: Header=BB6_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB6_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_265:                              # %if.end1340
                                        #   in Loop: Header=BB6_259 Depth=1
	jmp	.LBB6_259
.LBB6_266:                              # %while.end1341
	cmpl	$1, -100(%rbp)
	jge	.LBB6_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_268:                              # %if.end1345
	movl	$0, -24(%rbp)
.LBB6_269:                              # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB6_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB6_271:                              # %while.body1350
	jmp	.LBB6_272
.LBB6_272:                              # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB6_273:                              # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_280
.LBB6_275:                              # %if.end1368
                                        #   in Loop: Header=BB6_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_277:                              # %if.end1374
                                        #   in Loop: Header=BB6_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB6_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_279:                              # %if.end1401
                                        #   in Loop: Header=BB6_273 Depth=1
	jmp	.LBB6_273
.LBB6_280:                              # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB6_282
# %bb.281:                              # %if.then1406
	jmp	.LBB6_285
.LBB6_282:                              # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB6_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_284:                              # %if.end1412
	jmp	.LBB6_271
.LBB6_285:                              # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_269
.LBB6_287:                              # %for.end1419
	movb	$0, -29(%rbp)
.LBB6_288:                              # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB6_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB6_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB6_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB6_288
.LBB6_291:                              # %for.end1430
	movl	$0, -24(%rbp)
.LBB6_292:                              # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB6_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB6_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB6_294:                              # %while.cond
                                        #   Parent Loop BB6_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB6_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB6_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB6_294
.LBB6_296:                              # %while.end1451
                                        #   in Loop: Header=BB6_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB6_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_292
.LBB6_298:                              # %for.end1457
	movl	$0, -48(%rbp)
.LBB6_299:                              # %for.cond1458
	movl	-48(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB6_343
# %bb.300:                              # %for.body1461
	jmp	.LBB6_301
.LBB6_301:                              # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB6_302:                              # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB6_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB6_309
.LBB6_304:                              # %if.end1478
                                        #   in Loop: Header=BB6_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_306:                              # %if.end1484
                                        #   in Loop: Header=BB6_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB6_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_308:                              # %if.end1511
                                        #   in Loop: Header=BB6_302 Depth=1
	jmp	.LBB6_302
.LBB6_309:                              # %while.end1512
	movl	$0, -24(%rbp)
.LBB6_310:                              # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB6_341
# %bb.311:                              # %for.body1516
	jmp	.LBB6_312
.LBB6_312:                              # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB6_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB6_315
.LBB6_314:                              # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_315:                              # %if.end1525
	jmp	.LBB6_316
.LBB6_316:                              # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB6_317:                              # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_324
.LBB6_319:                              # %if.end1543
                                        #   in Loop: Header=BB6_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_321:                              # %if.end1549
                                        #   in Loop: Header=BB6_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB6_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_323:                              # %if.end1576
                                        #   in Loop: Header=BB6_317 Depth=1
	jmp	.LBB6_317
.LBB6_324:                              # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB6_326
# %bb.325:                              # %if.then1581
	jmp	.LBB6_339
.LBB6_326:                              # %if.end1582
	jmp	.LBB6_327
.LBB6_327:                              # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB6_328:                              # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_335
.LBB6_330:                              # %if.end1600
                                        #   in Loop: Header=BB6_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_332:                              # %if.end1606
                                        #   in Loop: Header=BB6_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB6_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_334:                              # %if.end1633
                                        #   in Loop: Header=BB6_328 Depth=1
	jmp	.LBB6_328
.LBB6_335:                              # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB6_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB6_338
.LBB6_337:                              # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB6_338:                              # %if.end1642
	jmp	.LBB6_312
.LBB6_339:                              # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_310
.LBB6_341:                              # %for.end1651
	jmp	.LBB6_342
.LBB6_342:                              # %for.inc1652
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB6_299
.LBB6_343:                              # %for.end1654
	movl	$0, -48(%rbp)
.LBB6_344:                              # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_346 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB6_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB6_344 Depth=1
	movl	$32, -160(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB6_346:                              # %for.cond1659
                                        #   Parent Loop BB6_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB6_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB6_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB6_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB6_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB6_349:                              # %if.end1678
                                        #   in Loop: Header=BB6_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB6_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB6_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
.LBB6_351:                              # %if.end1694
                                        #   in Loop: Header=BB6_346 Depth=2
	jmp	.LBB6_352
.LBB6_352:                              # %for.inc1695
                                        #   in Loop: Header=BB6_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_346
.LBB6_353:                              # %for.end1697
                                        #   in Loop: Header=BB6_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-160(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-160(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB6_344 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB6_344
.LBB6_355:                              # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -136(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB6_356:                              # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB6_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB6_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB6_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_356
.LBB6_359:                              # %for.end1728
	movl	$4095, -156(%rbp)       # imm = 0xFFF
	movl	$15, -140(%rbp)
.LBB6_360:                              # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_362 Depth 2
	cmpl	$0, -140(%rbp)
	jl	.LBB6_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB6_360 Depth=1
	movl	$15, -152(%rbp)
.LBB6_362:                              # %for.cond1733
                                        #   Parent Loop BB6_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -152(%rbp)
	jl	.LBB6_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB6_362 Depth=2
	movl	-140(%rbp), %eax
	shll	$4, %eax
	addl	-152(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-156(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB6_362 Depth=2
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB6_362
.LBB6_365:                              # %for.end1745
                                        #   in Loop: Header=BB6_360 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB6_360 Depth=1
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB6_360
.LBB6_367:                              # %for.end1751
	movl	$0, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB6_371
# %bb.368:                              # %if.then1754
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB6_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_370:                              # %if.end1759
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB6_371:                              # %if.end1779
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB6_372:                              # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB6_373:                              # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB6_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -332(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-332(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB6_380
.LBB6_375:                              # %if.end1799
                                        #   in Loop: Header=BB6_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_377:                              # %if.end1805
                                        #   in Loop: Header=BB6_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB6_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_379:                              # %if.end1832
                                        #   in Loop: Header=BB6_373 Depth=1
	jmp	.LBB6_373
.LBB6_380:                              # %while.end1833
	jmp	.LBB6_381
.LBB6_381:                              # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB6_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_383:                              # %if.end1839
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB6_385
# %bb.384:                              # %if.then1844
	jmp	.LBB6_395
.LBB6_385:                              # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB6_386:                              # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB6_387:                              # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB6_394
.LBB6_389:                              # %if.end1863
                                        #   in Loop: Header=BB6_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_391:                              # %if.end1869
                                        #   in Loop: Header=BB6_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB6_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_393:                              # %if.end1896
                                        #   in Loop: Header=BB6_387 Depth=1
	jmp	.LBB6_387
.LBB6_394:                              # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB6_381
.LBB6_395:                              # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB6_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB6_398
.LBB6_397:                              # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_398:                              # %if.end1913
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
.LBB6_399:                              # %while.body1920
	movl	-80(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB6_401
# %bb.400:                              # %if.then1923
	jmp	.LBB6_520
.LBB6_401:                              # %if.end1924
	cmpl	$0, -80(%rbp)
	je	.LBB6_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -80(%rbp)
	jne	.LBB6_458
.LBB6_403:                              # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB6_404:                              # %do.body
	cmpl	$0, -80(%rbp)
	jne	.LBB6_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB6_409
.LBB6_406:                              # %if.else1936
	cmpl	$1, -80(%rbp)
	jne	.LBB6_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB6_408:                              # %if.end1942
	jmp	.LBB6_409
.LBB6_409:                              # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB6_413
# %bb.410:                              # %if.then1947
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB6_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_412:                              # %if.end1952
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB6_413:                              # %if.end1972
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB6_414:                              # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB6_415:                              # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB6_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -340(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-340(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB6_422
.LBB6_417:                              # %if.end1992
                                        #   in Loop: Header=BB6_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_419:                              # %if.end1998
                                        #   in Loop: Header=BB6_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB6_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_421:                              # %if.end2025
                                        #   in Loop: Header=BB6_415 Depth=1
	jmp	.LBB6_415
.LBB6_422:                              # %while.end2026
	jmp	.LBB6_423
.LBB6_423:                              # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB6_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_425:                              # %if.end2032
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB6_427
# %bb.426:                              # %if.then2037
	jmp	.LBB6_437
.LBB6_427:                              # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB6_428:                              # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB6_429:                              # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB6_436
.LBB6_431:                              # %if.end2056
                                        #   in Loop: Header=BB6_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_433:                              # %if.end2062
                                        #   in Loop: Header=BB6_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB6_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_435:                              # %if.end2089
                                        #   in Loop: Header=BB6_429 Depth=1
	jmp	.LBB6_429
.LBB6_436:                              # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB6_423
.LBB6_437:                              # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB6_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB6_440
.LBB6_439:                              # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_440:                              # %if.end2106
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB6_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -80(%rbp)
	sete	%al
.LBB6_443:                              # %lor.end
	testb	$1, %al
	jne	.LBB6_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB6_451
# %bb.445:                              # %if.then2130
	jmp	.LBB6_446
.LBB6_446:                              # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB6_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB6_446 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB6_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_449:                              # %if.end2138
                                        #   in Loop: Header=BB6_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB6_446
.LBB6_450:                              # %while.end2145
	jmp	.LBB6_457
.LBB6_451:                              # %if.else2146
	jmp	.LBB6_452
.LBB6_452:                              # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB6_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB6_452 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB6_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_455:                              # %if.end2154
                                        #   in Loop: Header=BB6_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB6_452
.LBB6_456:                              # %while.end2161
	jmp	.LBB6_457
.LBB6_457:                              # %if.end2162
	jmp	.LBB6_399
.LBB6_458:                              # %if.else2163
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB6_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_460:                              # %if.end2167
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB6_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB6_462:                              # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB6_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB6_462 Depth=1
	movl	-76(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB6_462
.LBB6_464:                              # %while.end2218
	jmp	.LBB6_465
.LBB6_465:                              # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB6_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB6_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-76(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB6_465
.LBB6_467:                              # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB6_485
.LBB6_468:                              # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB6_469:                              # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB6_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB6_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-76(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB6_469
.LBB6_471:                              # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB6_472:                              # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB6_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB6_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB6_472
.LBB6_474:                              # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB6_484
# %bb.475:                              # %if.then2302
	movl	$4095, -144(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB6_476:                              # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_478 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB6_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB6_476 Depth=1
	movl	$15, -148(%rbp)
.LBB6_478:                              # %for.cond2307
                                        #   Parent Loop BB6_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB6_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB6_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-144(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB6_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB6_478
.LBB6_481:                              # %for.end2324
                                        #   in Loop: Header=BB6_476 Depth=1
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB6_476 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB6_476
.LBB6_483:                              # %for.end2331
	jmp	.LBB6_484
.LBB6_484:                              # %if.end2332
	jmp	.LBB6_485
.LBB6_485:                              # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB6_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB6_488
.LBB6_487:                              # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB6_488:                              # %if.end2359
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB6_492
# %bb.489:                              # %if.then2363
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB6_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_491:                              # %if.end2368
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB6_492:                              # %if.end2388
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB6_493:                              # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB6_494:                              # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB6_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -368(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-368(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB6_501
.LBB6_496:                              # %if.end2408
                                        #   in Loop: Header=BB6_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_498:                              # %if.end2414
                                        #   in Loop: Header=BB6_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB6_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_500:                              # %if.end2441
                                        #   in Loop: Header=BB6_494 Depth=1
	jmp	.LBB6_494
.LBB6_501:                              # %while.end2442
	jmp	.LBB6_502
.LBB6_502:                              # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB6_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_504:                              # %if.end2448
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB6_506
# %bb.505:                              # %if.then2453
	jmp	.LBB6_516
.LBB6_506:                              # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB6_507:                              # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB6_508:                              # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB6_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB6_515
.LBB6_510:                              # %if.end2472
                                        #   in Loop: Header=BB6_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_512:                              # %if.end2478
                                        #   in Loop: Header=BB6_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB6_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_514:                              # %if.end2505
                                        #   in Loop: Header=BB6_508 Depth=1
	jmp	.LBB6_508
.LBB6_515:                              # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB6_502
.LBB6_516:                              # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB6_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB6_519
.LBB6_518:                              # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_519:                              # %if.end2522
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB6_399
.LBB6_520:                              # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB6_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB6_523
.LBB6_522:                              # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_523:                              # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB6_524:                              # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB6_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB6_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB6_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_524
.LBB6_527:                              # %for.end2552
	movl	$1, -24(%rbp)
.LBB6_528:                              # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB6_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB6_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB6_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_528
.LBB6_531:                              # %for.end2567
	movl	$0, -24(%rbp)
.LBB6_532:                              # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB6_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB6_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB6_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB6_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB6_536
.LBB6_535:                              # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_536:                              # %if.end2584
                                        #   in Loop: Header=BB6_532 Depth=1
	jmp	.LBB6_537
.LBB6_537:                              # %for.inc2585
                                        #   in Loop: Header=BB6_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_532
.LBB6_538:                              # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB6_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB6_540:                              # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB6_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB6_542:                              # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB6_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB6_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB6_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_542
.LBB6_545:                              # %for.end2609
	movl	$0, -24(%rbp)
.LBB6_546:                              # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB6_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB6_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB6_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB6_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB6_550
.LBB6_549:                              # %if.else2646
                                        #   in Loop: Header=BB6_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB6_550:                              # %if.end2664
                                        #   in Loop: Header=BB6_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB6_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_546
.LBB6_552:                              # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB6_553:                              # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -252(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB6_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB6_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB6_556
.LBB6_555:                              # %if.else2727
                                        #   in Loop: Header=BB6_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB6_556:                              # %if.end2742
                                        #   in Loop: Header=BB6_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-252(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB6_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB6_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB6_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB6_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB6_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB6_562:                              # %if.end2791
	jmp	.LBB6_563
.LBB6_563:                              # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB6_565
.LBB6_564:                              # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB6_565:                              # %if.end2826
	jmp	.LBB6_578
.LBB6_566:                              # %if.else2827
	movl	$0, -24(%rbp)
.LBB6_567:                              # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB6_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB6_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB6_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_567
.LBB6_570:                              # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB6_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB6_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB6_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB6_574:                              # %if.end2893
	jmp	.LBB6_575
.LBB6_575:                              # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB6_577
.LBB6_576:                              # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB6_577:                              # %if.end2918
	jmp	.LBB6_578
.LBB6_578:                              # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_579:                              # %endhdr_2
	jmp	.LBB6_580
.LBB6_580:                              # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB6_581:                              # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_588
.LBB6_583:                              # %if.end2937
                                        #   in Loop: Header=BB6_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_585:                              # %if.end2943
                                        #   in Loop: Header=BB6_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB6_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_587:                              # %if.end2970
                                        #   in Loop: Header=BB6_581 Depth=1
	jmp	.LBB6_581
.LBB6_588:                              # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB6_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_590:                              # %if.end2976
	jmp	.LBB6_591
.LBB6_591:                              # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB6_592:                              # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_599
.LBB6_594:                              # %if.end2994
                                        #   in Loop: Header=BB6_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_596:                              # %if.end3000
                                        #   in Loop: Header=BB6_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB6_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_598:                              # %if.end3027
                                        #   in Loop: Header=BB6_592 Depth=1
	jmp	.LBB6_592
.LBB6_599:                              # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB6_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_601:                              # %if.end3033
	jmp	.LBB6_602
.LBB6_602:                              # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB6_603:                              # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_610
.LBB6_605:                              # %if.end3051
                                        #   in Loop: Header=BB6_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_607:                              # %if.end3057
                                        #   in Loop: Header=BB6_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB6_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_609:                              # %if.end3084
                                        #   in Loop: Header=BB6_603 Depth=1
	jmp	.LBB6_603
.LBB6_610:                              # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB6_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_612:                              # %if.end3090
	jmp	.LBB6_613
.LBB6_613:                              # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB6_614:                              # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_621
.LBB6_616:                              # %if.end3108
                                        #   in Loop: Header=BB6_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_618:                              # %if.end3114
                                        #   in Loop: Header=BB6_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB6_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_620:                              # %if.end3141
                                        #   in Loop: Header=BB6_614 Depth=1
	jmp	.LBB6_614
.LBB6_621:                              # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB6_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_623:                              # %if.end3147
	jmp	.LBB6_624
.LBB6_624:                              # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB6_625:                              # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_632
.LBB6_627:                              # %if.end3165
                                        #   in Loop: Header=BB6_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_629:                              # %if.end3171
                                        #   in Loop: Header=BB6_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB6_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_631:                              # %if.end3198
                                        #   in Loop: Header=BB6_625 Depth=1
	jmp	.LBB6_625
.LBB6_632:                              # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB6_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_634:                              # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB6_635:                              # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB6_636:                              # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_643
.LBB6_638:                              # %if.end3222
                                        #   in Loop: Header=BB6_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_640:                              # %if.end3228
                                        #   in Loop: Header=BB6_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB6_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_642:                              # %if.end3255
                                        #   in Loop: Header=BB6_636 Depth=1
	jmp	.LBB6_636
.LBB6_643:                              # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB6_644:                              # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB6_645:                              # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_652
.LBB6_647:                              # %if.end3279
                                        #   in Loop: Header=BB6_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_649:                              # %if.end3285
                                        #   in Loop: Header=BB6_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB6_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_651:                              # %if.end3312
                                        #   in Loop: Header=BB6_645 Depth=1
	jmp	.LBB6_645
.LBB6_652:                              # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB6_653:                              # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB6_654:                              # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_661
.LBB6_656:                              # %if.end3336
                                        #   in Loop: Header=BB6_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_658:                              # %if.end3342
                                        #   in Loop: Header=BB6_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB6_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_660:                              # %if.end3369
                                        #   in Loop: Header=BB6_654 Depth=1
	jmp	.LBB6_654
.LBB6_661:                              # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB6_662:                              # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB6_663:                              # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB6_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB6_670
.LBB6_665:                              # %if.end3393
                                        #   in Loop: Header=BB6_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB6_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB6_673
.LBB6_667:                              # %if.end3399
                                        #   in Loop: Header=BB6_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB6_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB6_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB6_669:                              # %if.end3426
                                        #   in Loop: Header=BB6_663 Depth=1
	jmp	.LBB6_663
.LBB6_670:                              # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB6_673
.LBB6_671:                              # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB6_673:                              # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-136(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-312(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$1166892895, -260(%rbp) # imm = 0x458D5F5F
	jne	.LBB6_675
.LBB6_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_675:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB6_674
.Lfunc_end6:
	.size	BZ2_decompress.5, .Lfunc_end6-BZ2_decompress.5
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI6_0:
	.quad	.LBB6_4
	.quad	.LBB6_15
	.quad	.LBB6_26
	.quad	.LBB6_37
	.quad	.LBB6_57
	.quad	.LBB6_70
	.quad	.LBB6_81
	.quad	.LBB6_92
	.quad	.LBB6_103
	.quad	.LBB6_114
	.quad	.LBB6_127
	.quad	.LBB6_136
	.quad	.LBB6_145
	.quad	.LBB6_154
	.quad	.LBB6_163
	.quad	.LBB6_172
	.quad	.LBB6_181
	.quad	.LBB6_190
	.quad	.LBB6_205
	.quad	.LBB6_228
	.quad	.LBB6_246
	.quad	.LBB6_258
	.quad	.LBB6_272
	.quad	.LBB6_301
	.quad	.LBB6_316
	.quad	.LBB6_327
	.quad	.LBB6_372
	.quad	.LBB6_386
	.quad	.LBB6_414
	.quad	.LBB6_428
	.quad	.LBB6_493
	.quad	.LBB6_507
	.quad	.LBB6_580
	.quad	.LBB6_591
	.quad	.LBB6_602
	.quad	.LBB6_613
	.quad	.LBB6_624
	.quad	.LBB6_635
	.quad	.LBB6_644
	.quad	.LBB6_653
	.quad	.LBB6_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.6        # -- Begin function BZ2_decompress.6
	.p2align	4, 0x90
	.type	BZ2_decompress.6,@function
BZ2_decompress.6:                       # @BZ2_decompress.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$56860926, -220(%rbp)   # imm = 0x363A0FE
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB7_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB7_2:                                # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB7_671
# %bb.3:                                # %if.end
	movq	.LJTI7_0(,%rax,8), %rax
	jmpq	*%rax
.LBB7_4:                                # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB7_5:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_12
.LBB7_7:                                # %if.end33
                                        #   in Loop: Header=BB7_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_9:                                # %if.end38
                                        #   in Loop: Header=BB7_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB7_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_11:                               # %if.end56
                                        #   in Loop: Header=BB7_5 Depth=1
	jmp	.LBB7_5
.LBB7_12:                               # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB7_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB7_673
.LBB7_14:                               # %if.end61
	jmp	.LBB7_15
.LBB7_15:                               # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB7_16:                               # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_23
.LBB7_18:                               # %if.end78
                                        #   in Loop: Header=BB7_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_20:                               # %if.end84
                                        #   in Loop: Header=BB7_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB7_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_22:                               # %if.end111
                                        #   in Loop: Header=BB7_16 Depth=1
	jmp	.LBB7_16
.LBB7_23:                               # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB7_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB7_673
.LBB7_25:                               # %if.end117
	jmp	.LBB7_26
.LBB7_26:                               # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB7_27:                               # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_34
.LBB7_29:                               # %if.end134
                                        #   in Loop: Header=BB7_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_31:                               # %if.end140
                                        #   in Loop: Header=BB7_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB7_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_33:                               # %if.end167
                                        #   in Loop: Header=BB7_27 Depth=1
	jmp	.LBB7_27
.LBB7_34:                               # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB7_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB7_673
.LBB7_36:                               # %if.end173
	jmp	.LBB7_37
.LBB7_37:                               # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB7_38:                               # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB7_45
.LBB7_40:                               # %if.end189
                                        #   in Loop: Header=BB7_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_42:                               # %if.end195
                                        #   in Loop: Header=BB7_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB7_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_44:                               # %if.end222
                                        #   in Loop: Header=BB7_38 Depth=1
	jmp	.LBB7_38
.LBB7_45:                               # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB7_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB7_48
.LBB7_47:                               # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB7_673
.LBB7_48:                               # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB7_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB7_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB7_52
.LBB7_51:                               # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB7_673
.LBB7_52:                               # %if.end257
	jmp	.LBB7_56
.LBB7_53:                               # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB7_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB7_673
.LBB7_55:                               # %if.end270
	jmp	.LBB7_56
.LBB7_56:                               # %if.end271
	jmp	.LBB7_57
.LBB7_57:                               # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB7_58:                               # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_65
.LBB7_60:                               # %if.end288
                                        #   in Loop: Header=BB7_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_62:                               # %if.end294
                                        #   in Loop: Header=BB7_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB7_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_64:                               # %if.end321
                                        #   in Loop: Header=BB7_58 Depth=1
	jmp	.LBB7_58
.LBB7_65:                               # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB7_67
# %bb.66:                               # %if.then326
	jmp	.LBB7_579
.LBB7_67:                               # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB7_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_69:                               # %if.end332
	jmp	.LBB7_70
.LBB7_70:                               # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB7_71:                               # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_78
.LBB7_73:                               # %if.end349
                                        #   in Loop: Header=BB7_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_75:                               # %if.end355
                                        #   in Loop: Header=BB7_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB7_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_77:                               # %if.end382
                                        #   in Loop: Header=BB7_71 Depth=1
	jmp	.LBB7_71
.LBB7_78:                               # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB7_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_80:                               # %if.end388
	jmp	.LBB7_81
.LBB7_81:                               # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB7_82:                               # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_89
.LBB7_84:                               # %if.end405
                                        #   in Loop: Header=BB7_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_86:                               # %if.end411
                                        #   in Loop: Header=BB7_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB7_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_88:                               # %if.end438
                                        #   in Loop: Header=BB7_82 Depth=1
	jmp	.LBB7_82
.LBB7_89:                               # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB7_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_91:                               # %if.end444
	jmp	.LBB7_92
.LBB7_92:                               # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB7_93:                               # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_100
.LBB7_95:                               # %if.end461
                                        #   in Loop: Header=BB7_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_97:                               # %if.end467
                                        #   in Loop: Header=BB7_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB7_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_99:                               # %if.end494
                                        #   in Loop: Header=BB7_93 Depth=1
	jmp	.LBB7_93
.LBB7_100:                              # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB7_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_102:                              # %if.end500
	jmp	.LBB7_103
.LBB7_103:                              # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB7_104:                              # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_111
.LBB7_106:                              # %if.end517
                                        #   in Loop: Header=BB7_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_108:                              # %if.end523
                                        #   in Loop: Header=BB7_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB7_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_110:                              # %if.end550
                                        #   in Loop: Header=BB7_104 Depth=1
	jmp	.LBB7_104
.LBB7_111:                              # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB7_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_113:                              # %if.end556
	jmp	.LBB7_114
.LBB7_114:                              # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB7_115:                              # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_122
.LBB7_117:                              # %if.end573
                                        #   in Loop: Header=BB7_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_119:                              # %if.end579
                                        #   in Loop: Header=BB7_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB7_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_121:                              # %if.end606
                                        #   in Loop: Header=BB7_115 Depth=1
	jmp	.LBB7_115
.LBB7_122:                              # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB7_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_124:                              # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB7_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB7_126:                              # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB7_127:                              # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB7_128:                              # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_135
.LBB7_130:                              # %if.end636
                                        #   in Loop: Header=BB7_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_132:                              # %if.end642
                                        #   in Loop: Header=BB7_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB7_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_134:                              # %if.end669
                                        #   in Loop: Header=BB7_128 Depth=1
	jmp	.LBB7_128
.LBB7_135:                              # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB7_136:                              # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB7_137:                              # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_144
.LBB7_139:                              # %if.end692
                                        #   in Loop: Header=BB7_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_141:                              # %if.end698
                                        #   in Loop: Header=BB7_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB7_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_143:                              # %if.end725
                                        #   in Loop: Header=BB7_137 Depth=1
	jmp	.LBB7_137
.LBB7_144:                              # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB7_145:                              # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB7_146:                              # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_153
.LBB7_148:                              # %if.end748
                                        #   in Loop: Header=BB7_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_150:                              # %if.end754
                                        #   in Loop: Header=BB7_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB7_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_152:                              # %if.end781
                                        #   in Loop: Header=BB7_146 Depth=1
	jmp	.LBB7_146
.LBB7_153:                              # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB7_154:                              # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB7_155:                              # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_162
.LBB7_157:                              # %if.end804
                                        #   in Loop: Header=BB7_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_159:                              # %if.end810
                                        #   in Loop: Header=BB7_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB7_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_161:                              # %if.end837
                                        #   in Loop: Header=BB7_155 Depth=1
	jmp	.LBB7_155
.LBB7_162:                              # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB7_163:                              # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB7_164:                              # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB7_171
.LBB7_166:                              # %if.end860
                                        #   in Loop: Header=BB7_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_168:                              # %if.end866
                                        #   in Loop: Header=BB7_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB7_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_170:                              # %if.end893
                                        #   in Loop: Header=BB7_164 Depth=1
	jmp	.LBB7_164
.LBB7_171:                              # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB7_172:                              # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB7_173:                              # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_180
.LBB7_175:                              # %if.end911
                                        #   in Loop: Header=BB7_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_177:                              # %if.end917
                                        #   in Loop: Header=BB7_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB7_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_179:                              # %if.end944
                                        #   in Loop: Header=BB7_173 Depth=1
	jmp	.LBB7_173
.LBB7_180:                              # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB7_181:                              # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB7_182:                              # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_189
.LBB7_184:                              # %if.end967
                                        #   in Loop: Header=BB7_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_186:                              # %if.end973
                                        #   in Loop: Header=BB7_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB7_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_188:                              # %if.end1000
                                        #   in Loop: Header=BB7_182 Depth=1
	jmp	.LBB7_182
.LBB7_189:                              # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB7_190:                              # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB7_191:                              # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_198
.LBB7_193:                              # %if.end1023
                                        #   in Loop: Header=BB7_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_195:                              # %if.end1029
                                        #   in Loop: Header=BB7_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB7_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_197:                              # %if.end1056
                                        #   in Loop: Header=BB7_191 Depth=1
	jmp	.LBB7_191
.LBB7_198:                              # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB7_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_200:                              # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB7_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_202:                              # %if.end1075
	movl	$0, -24(%rbp)
.LBB7_203:                              # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB7_218
# %bb.204:                              # %for.body
	jmp	.LBB7_205
.LBB7_205:                              # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB7_206:                              # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_213
.LBB7_208:                              # %if.end1094
                                        #   in Loop: Header=BB7_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_210:                              # %if.end1100
                                        #   in Loop: Header=BB7_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB7_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_212:                              # %if.end1127
                                        #   in Loop: Header=BB7_206 Depth=1
	jmp	.LBB7_206
.LBB7_213:                              # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB7_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB7_216
.LBB7_215:                              # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB7_216:                              # %if.end1137
	jmp	.LBB7_217
.LBB7_217:                              # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_203
.LBB7_218:                              # %for.end
	movl	$0, -24(%rbp)
.LBB7_219:                              # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB7_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB7_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB7_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_219
.LBB7_222:                              # %for.end1147
	movl	$0, -24(%rbp)
.LBB7_223:                              # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB7_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB7_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB7_226:                              # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB7_240
# %bb.227:                              # %for.body1160
	jmp	.LBB7_228
.LBB7_228:                              # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB7_229:                              # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_236
.LBB7_231:                              # %if.end1177
                                        #   in Loop: Header=BB7_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_233:                              # %if.end1183
                                        #   in Loop: Header=BB7_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB7_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_235:                              # %if.end1210
                                        #   in Loop: Header=BB7_229 Depth=1
	jmp	.LBB7_229
.LBB7_236:                              # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB7_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB7_238:                              # %if.end1221
	jmp	.LBB7_239
.LBB7_239:                              # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB7_226
.LBB7_240:                              # %for.end1224
	jmp	.LBB7_241
.LBB7_241:                              # %if.end1225
	jmp	.LBB7_242
.LBB7_242:                              # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_223
.LBB7_243:                              # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB7_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_245:                              # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB7_246:                              # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB7_247:                              # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB7_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB7_254
.LBB7_249:                              # %if.end1250
                                        #   in Loop: Header=BB7_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_251:                              # %if.end1256
                                        #   in Loop: Header=BB7_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB7_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_253:                              # %if.end1283
                                        #   in Loop: Header=BB7_247 Depth=1
	jmp	.LBB7_247
.LBB7_254:                              # %while.end1284
	cmpl	$2, -96(%rbp)
	jl	.LBB7_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -96(%rbp)
	jle	.LBB7_257
.LBB7_256:                              # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_257:                              # %if.end1291
	jmp	.LBB7_258
.LBB7_258:                              # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB7_259:                              # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB7_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB7_266
.LBB7_261:                              # %if.end1307
                                        #   in Loop: Header=BB7_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_263:                              # %if.end1313
                                        #   in Loop: Header=BB7_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB7_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_265:                              # %if.end1340
                                        #   in Loop: Header=BB7_259 Depth=1
	jmp	.LBB7_259
.LBB7_266:                              # %while.end1341
	cmpl	$1, -104(%rbp)
	jge	.LBB7_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_268:                              # %if.end1345
	movl	$0, -24(%rbp)
.LBB7_269:                              # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB7_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB7_271:                              # %while.body1350
	jmp	.LBB7_272
.LBB7_272:                              # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB7_273:                              # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_280
.LBB7_275:                              # %if.end1368
                                        #   in Loop: Header=BB7_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_277:                              # %if.end1374
                                        #   in Loop: Header=BB7_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB7_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_279:                              # %if.end1401
                                        #   in Loop: Header=BB7_273 Depth=1
	jmp	.LBB7_273
.LBB7_280:                              # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB7_282
# %bb.281:                              # %if.then1406
	jmp	.LBB7_285
.LBB7_282:                              # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB7_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_284:                              # %if.end1412
	jmp	.LBB7_271
.LBB7_285:                              # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_269
.LBB7_287:                              # %for.end1419
	movb	$0, -29(%rbp)
.LBB7_288:                              # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB7_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB7_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB7_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB7_288
.LBB7_291:                              # %for.end1430
	movl	$0, -24(%rbp)
.LBB7_292:                              # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB7_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB7_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB7_294:                              # %while.cond
                                        #   Parent Loop BB7_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB7_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB7_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB7_294
.LBB7_296:                              # %while.end1451
                                        #   in Loop: Header=BB7_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB7_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_292
.LBB7_298:                              # %for.end1457
	movl	$0, -48(%rbp)
.LBB7_299:                              # %for.cond1458
	movl	-48(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB7_343
# %bb.300:                              # %for.body1461
	jmp	.LBB7_301
.LBB7_301:                              # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB7_302:                              # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB7_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB7_309
.LBB7_304:                              # %if.end1478
                                        #   in Loop: Header=BB7_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_306:                              # %if.end1484
                                        #   in Loop: Header=BB7_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB7_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_308:                              # %if.end1511
                                        #   in Loop: Header=BB7_302 Depth=1
	jmp	.LBB7_302
.LBB7_309:                              # %while.end1512
	movl	$0, -24(%rbp)
.LBB7_310:                              # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB7_341
# %bb.311:                              # %for.body1516
	jmp	.LBB7_312
.LBB7_312:                              # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB7_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB7_315
.LBB7_314:                              # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_315:                              # %if.end1525
	jmp	.LBB7_316
.LBB7_316:                              # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB7_317:                              # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_324
.LBB7_319:                              # %if.end1543
                                        #   in Loop: Header=BB7_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_321:                              # %if.end1549
                                        #   in Loop: Header=BB7_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB7_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_323:                              # %if.end1576
                                        #   in Loop: Header=BB7_317 Depth=1
	jmp	.LBB7_317
.LBB7_324:                              # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB7_326
# %bb.325:                              # %if.then1581
	jmp	.LBB7_339
.LBB7_326:                              # %if.end1582
	jmp	.LBB7_327
.LBB7_327:                              # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB7_328:                              # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_335
.LBB7_330:                              # %if.end1600
                                        #   in Loop: Header=BB7_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_332:                              # %if.end1606
                                        #   in Loop: Header=BB7_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB7_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_334:                              # %if.end1633
                                        #   in Loop: Header=BB7_328 Depth=1
	jmp	.LBB7_328
.LBB7_335:                              # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB7_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB7_338
.LBB7_337:                              # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB7_338:                              # %if.end1642
	jmp	.LBB7_312
.LBB7_339:                              # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_310
.LBB7_341:                              # %for.end1651
	jmp	.LBB7_342
.LBB7_342:                              # %for.inc1652
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB7_299
.LBB7_343:                              # %for.end1654
	movl	$0, -48(%rbp)
.LBB7_344:                              # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_346 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB7_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB7_344 Depth=1
	movl	$32, -152(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB7_346:                              # %for.cond1659
                                        #   Parent Loop BB7_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB7_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB7_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-180(%rbp), %eax
	jle	.LBB7_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB7_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -180(%rbp)
.LBB7_349:                              # %if.end1678
                                        #   in Loop: Header=BB7_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB7_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB7_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
.LBB7_351:                              # %if.end1694
                                        #   in Loop: Header=BB7_346 Depth=2
	jmp	.LBB7_352
.LBB7_352:                              # %for.inc1695
                                        #   in Loop: Header=BB7_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_346
.LBB7_353:                              # %for.end1697
                                        #   in Loop: Header=BB7_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-152(%rbp), %r8d
	movl	-180(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-152(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB7_344 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB7_344
.LBB7_355:                              # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -132(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB7_356:                              # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB7_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB7_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB7_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_356
.LBB7_359:                              # %for.end1728
	movl	$4095, -148(%rbp)       # imm = 0xFFF
	movl	$15, -140(%rbp)
.LBB7_360:                              # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_362 Depth 2
	cmpl	$0, -140(%rbp)
	jl	.LBB7_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB7_360 Depth=1
	movl	$15, -160(%rbp)
.LBB7_362:                              # %for.cond1733
                                        #   Parent Loop BB7_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -160(%rbp)
	jl	.LBB7_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB7_362 Depth=2
	movl	-140(%rbp), %eax
	shll	$4, %eax
	addl	-160(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-148(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB7_362 Depth=2
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB7_362
.LBB7_365:                              # %for.end1745
                                        #   in Loop: Header=BB7_360 Depth=1
	movl	-148(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB7_360 Depth=1
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB7_360
.LBB7_367:                              # %for.end1751
	movl	$0, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB7_371
# %bb.368:                              # %if.then1754
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB7_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_370:                              # %if.end1759
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB7_371:                              # %if.end1779
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB7_372:                              # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB7_373:                              # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB7_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -332(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-332(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_380
.LBB7_375:                              # %if.end1799
                                        #   in Loop: Header=BB7_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_377:                              # %if.end1805
                                        #   in Loop: Header=BB7_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB7_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_379:                              # %if.end1832
                                        #   in Loop: Header=BB7_373 Depth=1
	jmp	.LBB7_373
.LBB7_380:                              # %while.end1833
	jmp	.LBB7_381
.LBB7_381:                              # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB7_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_383:                              # %if.end1839
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB7_385
# %bb.384:                              # %if.then1844
	jmp	.LBB7_395
.LBB7_385:                              # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB7_386:                              # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB7_387:                              # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB7_394
.LBB7_389:                              # %if.end1863
                                        #   in Loop: Header=BB7_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_391:                              # %if.end1869
                                        #   in Loop: Header=BB7_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB7_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_393:                              # %if.end1896
                                        #   in Loop: Header=BB7_387 Depth=1
	jmp	.LBB7_387
.LBB7_394:                              # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_381
.LBB7_395:                              # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB7_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB7_398
.LBB7_397:                              # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_398:                              # %if.end1913
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB7_399:                              # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jne	.LBB7_401
# %bb.400:                              # %if.then1923
	jmp	.LBB7_520
.LBB7_401:                              # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB7_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB7_458
.LBB7_403:                              # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB7_404:                              # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB7_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB7_409
.LBB7_406:                              # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB7_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB7_408:                              # %if.end1942
	jmp	.LBB7_409
.LBB7_409:                              # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB7_413
# %bb.410:                              # %if.then1947
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB7_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_412:                              # %if.end1952
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB7_413:                              # %if.end1972
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB7_414:                              # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB7_415:                              # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB7_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -352(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-352(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_422
.LBB7_417:                              # %if.end1992
                                        #   in Loop: Header=BB7_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_419:                              # %if.end1998
                                        #   in Loop: Header=BB7_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB7_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_421:                              # %if.end2025
                                        #   in Loop: Header=BB7_415 Depth=1
	jmp	.LBB7_415
.LBB7_422:                              # %while.end2026
	jmp	.LBB7_423
.LBB7_423:                              # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB7_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_425:                              # %if.end2032
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB7_427
# %bb.426:                              # %if.then2037
	jmp	.LBB7_437
.LBB7_427:                              # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB7_428:                              # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB7_429:                              # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB7_436
.LBB7_431:                              # %if.end2056
                                        #   in Loop: Header=BB7_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_433:                              # %if.end2062
                                        #   in Loop: Header=BB7_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB7_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_435:                              # %if.end2089
                                        #   in Loop: Header=BB7_429 Depth=1
	jmp	.LBB7_429
.LBB7_436:                              # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_423
.LBB7_437:                              # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB7_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB7_440
.LBB7_439:                              # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_440:                              # %if.end2106
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB7_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB7_443:                              # %lor.end
	testb	$1, %al
	jne	.LBB7_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB7_451
# %bb.445:                              # %if.then2130
	jmp	.LBB7_446
.LBB7_446:                              # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB7_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB7_446 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB7_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_449:                              # %if.end2138
                                        #   in Loop: Header=BB7_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB7_446
.LBB7_450:                              # %while.end2145
	jmp	.LBB7_457
.LBB7_451:                              # %if.else2146
	jmp	.LBB7_452
.LBB7_452:                              # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB7_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB7_452 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB7_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_455:                              # %if.end2154
                                        #   in Loop: Header=BB7_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB7_452
.LBB7_456:                              # %while.end2161
	jmp	.LBB7_457
.LBB7_457:                              # %if.end2162
	jmp	.LBB7_399
.LBB7_458:                              # %if.else2163
	movl	-52(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB7_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_460:                              # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB7_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB7_462:                              # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB7_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB7_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB7_462
.LBB7_464:                              # %while.end2218
	jmp	.LBB7_465
.LBB7_465:                              # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB7_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB7_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB7_465
.LBB7_467:                              # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB7_485
.LBB7_468:                              # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB7_469:                              # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB7_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB7_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB7_469
.LBB7_471:                              # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB7_472:                              # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB7_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB7_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB7_472
.LBB7_474:                              # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB7_484
# %bb.475:                              # %if.then2302
	movl	$4095, -156(%rbp)       # imm = 0xFFF
	movl	$15, -136(%rbp)
.LBB7_476:                              # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_478 Depth 2
	cmpl	$0, -136(%rbp)
	jl	.LBB7_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB7_476 Depth=1
	movl	$15, -144(%rbp)
.LBB7_478:                              # %for.cond2307
                                        #   Parent Loop BB7_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -144(%rbp)
	jl	.LBB7_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB7_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-144(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-156(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB7_478 Depth=2
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB7_478
.LBB7_481:                              # %for.end2324
                                        #   in Loop: Header=BB7_476 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB7_476 Depth=1
	movl	-136(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB7_476
.LBB7_483:                              # %for.end2331
	jmp	.LBB7_484
.LBB7_484:                              # %if.end2332
	jmp	.LBB7_485
.LBB7_485:                              # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB7_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB7_488
.LBB7_487:                              # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB7_488:                              # %if.end2359
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB7_492
# %bb.489:                              # %if.then2363
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB7_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_491:                              # %if.end2368
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB7_492:                              # %if.end2388
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB7_493:                              # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB7_494:                              # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB7_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -296(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-296(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_501
.LBB7_496:                              # %if.end2408
                                        #   in Loop: Header=BB7_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_498:                              # %if.end2414
                                        #   in Loop: Header=BB7_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB7_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_500:                              # %if.end2441
                                        #   in Loop: Header=BB7_494 Depth=1
	jmp	.LBB7_494
.LBB7_501:                              # %while.end2442
	jmp	.LBB7_502
.LBB7_502:                              # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB7_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_504:                              # %if.end2448
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB7_506
# %bb.505:                              # %if.then2453
	jmp	.LBB7_516
.LBB7_506:                              # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB7_507:                              # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB7_508:                              # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB7_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB7_515
.LBB7_510:                              # %if.end2472
                                        #   in Loop: Header=BB7_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_512:                              # %if.end2478
                                        #   in Loop: Header=BB7_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB7_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_514:                              # %if.end2505
                                        #   in Loop: Header=BB7_508 Depth=1
	jmp	.LBB7_508
.LBB7_515:                              # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_502
.LBB7_516:                              # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB7_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB7_519
.LBB7_518:                              # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_519:                              # %if.end2522
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB7_399
.LBB7_520:                              # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB7_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB7_523
.LBB7_522:                              # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_523:                              # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB7_524:                              # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB7_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB7_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB7_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_524
.LBB7_527:                              # %for.end2552
	movl	$1, -24(%rbp)
.LBB7_528:                              # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB7_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB7_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB7_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_528
.LBB7_531:                              # %for.end2567
	movl	$0, -24(%rbp)
.LBB7_532:                              # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB7_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB7_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB7_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB7_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB7_536
.LBB7_535:                              # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_536:                              # %if.end2584
                                        #   in Loop: Header=BB7_532 Depth=1
	jmp	.LBB7_537
.LBB7_537:                              # %for.inc2585
                                        #   in Loop: Header=BB7_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_532
.LBB7_538:                              # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB7_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB7_540:                              # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB7_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB7_542:                              # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB7_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB7_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB7_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_542
.LBB7_545:                              # %for.end2609
	movl	$0, -24(%rbp)
.LBB7_546:                              # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB7_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB7_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB7_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB7_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB7_550
.LBB7_549:                              # %if.else2646
                                        #   in Loop: Header=BB7_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB7_550:                              # %if.end2664
                                        #   in Loop: Header=BB7_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB7_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_546
.LBB7_552:                              # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB7_553:                              # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -264(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB7_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB7_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB7_556
.LBB7_555:                              # %if.else2727
                                        #   in Loop: Header=BB7_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB7_556:                              # %if.end2742
                                        #   in Loop: Header=BB7_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-264(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB7_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB7_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB7_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB7_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB7_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB7_562:                              # %if.end2791
	jmp	.LBB7_563
.LBB7_563:                              # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB7_565
.LBB7_564:                              # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB7_565:                              # %if.end2826
	jmp	.LBB7_578
.LBB7_566:                              # %if.else2827
	movl	$0, -24(%rbp)
.LBB7_567:                              # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB7_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB7_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB7_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_567
.LBB7_570:                              # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB7_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB7_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB7_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB7_574:                              # %if.end2893
	jmp	.LBB7_575
.LBB7_575:                              # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB7_577
.LBB7_576:                              # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB7_577:                              # %if.end2918
	jmp	.LBB7_578
.LBB7_578:                              # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_579:                              # %endhdr_2
	jmp	.LBB7_580
.LBB7_580:                              # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB7_581:                              # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_588
.LBB7_583:                              # %if.end2937
                                        #   in Loop: Header=BB7_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_585:                              # %if.end2943
                                        #   in Loop: Header=BB7_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB7_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_587:                              # %if.end2970
                                        #   in Loop: Header=BB7_581 Depth=1
	jmp	.LBB7_581
.LBB7_588:                              # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB7_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_590:                              # %if.end2976
	jmp	.LBB7_591
.LBB7_591:                              # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB7_592:                              # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_599
.LBB7_594:                              # %if.end2994
                                        #   in Loop: Header=BB7_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_596:                              # %if.end3000
                                        #   in Loop: Header=BB7_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB7_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_598:                              # %if.end3027
                                        #   in Loop: Header=BB7_592 Depth=1
	jmp	.LBB7_592
.LBB7_599:                              # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB7_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_601:                              # %if.end3033
	jmp	.LBB7_602
.LBB7_602:                              # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB7_603:                              # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_610
.LBB7_605:                              # %if.end3051
                                        #   in Loop: Header=BB7_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_607:                              # %if.end3057
                                        #   in Loop: Header=BB7_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB7_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_609:                              # %if.end3084
                                        #   in Loop: Header=BB7_603 Depth=1
	jmp	.LBB7_603
.LBB7_610:                              # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB7_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_612:                              # %if.end3090
	jmp	.LBB7_613
.LBB7_613:                              # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB7_614:                              # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_621
.LBB7_616:                              # %if.end3108
                                        #   in Loop: Header=BB7_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_618:                              # %if.end3114
                                        #   in Loop: Header=BB7_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB7_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_620:                              # %if.end3141
                                        #   in Loop: Header=BB7_614 Depth=1
	jmp	.LBB7_614
.LBB7_621:                              # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB7_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_623:                              # %if.end3147
	jmp	.LBB7_624
.LBB7_624:                              # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB7_625:                              # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_632
.LBB7_627:                              # %if.end3165
                                        #   in Loop: Header=BB7_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_629:                              # %if.end3171
                                        #   in Loop: Header=BB7_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB7_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_631:                              # %if.end3198
                                        #   in Loop: Header=BB7_625 Depth=1
	jmp	.LBB7_625
.LBB7_632:                              # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB7_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_634:                              # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB7_635:                              # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB7_636:                              # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_643
.LBB7_638:                              # %if.end3222
                                        #   in Loop: Header=BB7_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_640:                              # %if.end3228
                                        #   in Loop: Header=BB7_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB7_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_642:                              # %if.end3255
                                        #   in Loop: Header=BB7_636 Depth=1
	jmp	.LBB7_636
.LBB7_643:                              # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB7_644:                              # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB7_645:                              # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_652
.LBB7_647:                              # %if.end3279
                                        #   in Loop: Header=BB7_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_649:                              # %if.end3285
                                        #   in Loop: Header=BB7_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB7_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_651:                              # %if.end3312
                                        #   in Loop: Header=BB7_645 Depth=1
	jmp	.LBB7_645
.LBB7_652:                              # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB7_653:                              # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB7_654:                              # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_661
.LBB7_656:                              # %if.end3336
                                        #   in Loop: Header=BB7_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_658:                              # %if.end3342
                                        #   in Loop: Header=BB7_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB7_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_660:                              # %if.end3369
                                        #   in Loop: Header=BB7_654 Depth=1
	jmp	.LBB7_654
.LBB7_661:                              # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB7_662:                              # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB7_663:                              # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB7_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB7_670
.LBB7_665:                              # %if.end3393
                                        #   in Loop: Header=BB7_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB7_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB7_673
.LBB7_667:                              # %if.end3399
                                        #   in Loop: Header=BB7_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB7_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB7_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB7_669:                              # %if.end3426
                                        #   in Loop: Header=BB7_663 Depth=1
	jmp	.LBB7_663
.LBB7_670:                              # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB7_673
.LBB7_671:                              # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB7_673:                              # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-184(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-356(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$56860926, -220(%rbp)   # imm = 0x363A0FE
	jne	.LBB7_675
.LBB7_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_675:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB7_674
.Lfunc_end7:
	.size	BZ2_decompress.6, .Lfunc_end7-BZ2_decompress.6
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI7_0:
	.quad	.LBB7_4
	.quad	.LBB7_15
	.quad	.LBB7_26
	.quad	.LBB7_37
	.quad	.LBB7_57
	.quad	.LBB7_70
	.quad	.LBB7_81
	.quad	.LBB7_92
	.quad	.LBB7_103
	.quad	.LBB7_114
	.quad	.LBB7_127
	.quad	.LBB7_136
	.quad	.LBB7_145
	.quad	.LBB7_154
	.quad	.LBB7_163
	.quad	.LBB7_172
	.quad	.LBB7_181
	.quad	.LBB7_190
	.quad	.LBB7_205
	.quad	.LBB7_228
	.quad	.LBB7_246
	.quad	.LBB7_258
	.quad	.LBB7_272
	.quad	.LBB7_301
	.quad	.LBB7_316
	.quad	.LBB7_327
	.quad	.LBB7_372
	.quad	.LBB7_386
	.quad	.LBB7_414
	.quad	.LBB7_428
	.quad	.LBB7_493
	.quad	.LBB7_507
	.quad	.LBB7_580
	.quad	.LBB7_591
	.quad	.LBB7_602
	.quad	.LBB7_613
	.quad	.LBB7_624
	.quad	.LBB7_635
	.quad	.LBB7_644
	.quad	.LBB7_653
	.quad	.LBB7_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.7        # -- Begin function BZ2_decompress.7
	.p2align	4, 0x90
	.type	BZ2_decompress.7,@function
BZ2_decompress.7:                       # @BZ2_decompress.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$461846511, -232(%rbp)  # imm = 0x1B8737EF
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB8_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB8_2:                                # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB8_671
# %bb.3:                                # %if.end
	movq	.LJTI8_0(,%rax,8), %rax
	jmpq	*%rax
.LBB8_4:                                # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB8_5:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_12
.LBB8_7:                                # %if.end33
                                        #   in Loop: Header=BB8_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_9:                                # %if.end38
                                        #   in Loop: Header=BB8_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB8_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_11:                               # %if.end56
                                        #   in Loop: Header=BB8_5 Depth=1
	jmp	.LBB8_5
.LBB8_12:                               # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB8_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB8_673
.LBB8_14:                               # %if.end61
	jmp	.LBB8_15
.LBB8_15:                               # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB8_16:                               # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_23
.LBB8_18:                               # %if.end78
                                        #   in Loop: Header=BB8_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_20:                               # %if.end84
                                        #   in Loop: Header=BB8_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB8_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_22:                               # %if.end111
                                        #   in Loop: Header=BB8_16 Depth=1
	jmp	.LBB8_16
.LBB8_23:                               # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB8_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB8_673
.LBB8_25:                               # %if.end117
	jmp	.LBB8_26
.LBB8_26:                               # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB8_27:                               # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_34
.LBB8_29:                               # %if.end134
                                        #   in Loop: Header=BB8_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_31:                               # %if.end140
                                        #   in Loop: Header=BB8_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB8_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_33:                               # %if.end167
                                        #   in Loop: Header=BB8_27 Depth=1
	jmp	.LBB8_27
.LBB8_34:                               # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB8_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB8_673
.LBB8_36:                               # %if.end173
	jmp	.LBB8_37
.LBB8_37:                               # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB8_38:                               # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB8_45
.LBB8_40:                               # %if.end189
                                        #   in Loop: Header=BB8_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_42:                               # %if.end195
                                        #   in Loop: Header=BB8_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB8_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_44:                               # %if.end222
                                        #   in Loop: Header=BB8_38 Depth=1
	jmp	.LBB8_38
.LBB8_45:                               # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB8_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB8_48
.LBB8_47:                               # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB8_673
.LBB8_48:                               # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB8_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB8_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB8_52
.LBB8_51:                               # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB8_673
.LBB8_52:                               # %if.end257
	jmp	.LBB8_56
.LBB8_53:                               # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB8_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB8_673
.LBB8_55:                               # %if.end270
	jmp	.LBB8_56
.LBB8_56:                               # %if.end271
	jmp	.LBB8_57
.LBB8_57:                               # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB8_58:                               # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_65
.LBB8_60:                               # %if.end288
                                        #   in Loop: Header=BB8_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_62:                               # %if.end294
                                        #   in Loop: Header=BB8_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB8_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_64:                               # %if.end321
                                        #   in Loop: Header=BB8_58 Depth=1
	jmp	.LBB8_58
.LBB8_65:                               # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB8_67
# %bb.66:                               # %if.then326
	jmp	.LBB8_579
.LBB8_67:                               # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB8_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_69:                               # %if.end332
	jmp	.LBB8_70
.LBB8_70:                               # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB8_71:                               # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_78
.LBB8_73:                               # %if.end349
                                        #   in Loop: Header=BB8_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_75:                               # %if.end355
                                        #   in Loop: Header=BB8_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB8_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_77:                               # %if.end382
                                        #   in Loop: Header=BB8_71 Depth=1
	jmp	.LBB8_71
.LBB8_78:                               # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB8_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_80:                               # %if.end388
	jmp	.LBB8_81
.LBB8_81:                               # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB8_82:                               # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_89
.LBB8_84:                               # %if.end405
                                        #   in Loop: Header=BB8_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_86:                               # %if.end411
                                        #   in Loop: Header=BB8_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB8_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_88:                               # %if.end438
                                        #   in Loop: Header=BB8_82 Depth=1
	jmp	.LBB8_82
.LBB8_89:                               # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB8_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_91:                               # %if.end444
	jmp	.LBB8_92
.LBB8_92:                               # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB8_93:                               # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_100
.LBB8_95:                               # %if.end461
                                        #   in Loop: Header=BB8_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_97:                               # %if.end467
                                        #   in Loop: Header=BB8_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB8_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_99:                               # %if.end494
                                        #   in Loop: Header=BB8_93 Depth=1
	jmp	.LBB8_93
.LBB8_100:                              # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB8_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_102:                              # %if.end500
	jmp	.LBB8_103
.LBB8_103:                              # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB8_104:                              # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_111
.LBB8_106:                              # %if.end517
                                        #   in Loop: Header=BB8_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_108:                              # %if.end523
                                        #   in Loop: Header=BB8_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB8_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_110:                              # %if.end550
                                        #   in Loop: Header=BB8_104 Depth=1
	jmp	.LBB8_104
.LBB8_111:                              # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB8_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_113:                              # %if.end556
	jmp	.LBB8_114
.LBB8_114:                              # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB8_115:                              # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_122
.LBB8_117:                              # %if.end573
                                        #   in Loop: Header=BB8_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_119:                              # %if.end579
                                        #   in Loop: Header=BB8_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB8_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_121:                              # %if.end606
                                        #   in Loop: Header=BB8_115 Depth=1
	jmp	.LBB8_115
.LBB8_122:                              # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB8_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_124:                              # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB8_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB8_126:                              # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB8_127:                              # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB8_128:                              # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_135
.LBB8_130:                              # %if.end636
                                        #   in Loop: Header=BB8_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_132:                              # %if.end642
                                        #   in Loop: Header=BB8_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB8_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_134:                              # %if.end669
                                        #   in Loop: Header=BB8_128 Depth=1
	jmp	.LBB8_128
.LBB8_135:                              # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB8_136:                              # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB8_137:                              # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_144
.LBB8_139:                              # %if.end692
                                        #   in Loop: Header=BB8_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_141:                              # %if.end698
                                        #   in Loop: Header=BB8_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB8_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_143:                              # %if.end725
                                        #   in Loop: Header=BB8_137 Depth=1
	jmp	.LBB8_137
.LBB8_144:                              # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB8_145:                              # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB8_146:                              # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_153
.LBB8_148:                              # %if.end748
                                        #   in Loop: Header=BB8_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_150:                              # %if.end754
                                        #   in Loop: Header=BB8_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB8_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_152:                              # %if.end781
                                        #   in Loop: Header=BB8_146 Depth=1
	jmp	.LBB8_146
.LBB8_153:                              # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB8_154:                              # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB8_155:                              # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_162
.LBB8_157:                              # %if.end804
                                        #   in Loop: Header=BB8_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_159:                              # %if.end810
                                        #   in Loop: Header=BB8_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB8_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_161:                              # %if.end837
                                        #   in Loop: Header=BB8_155 Depth=1
	jmp	.LBB8_155
.LBB8_162:                              # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB8_163:                              # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB8_164:                              # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB8_171
.LBB8_166:                              # %if.end860
                                        #   in Loop: Header=BB8_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_168:                              # %if.end866
                                        #   in Loop: Header=BB8_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB8_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_170:                              # %if.end893
                                        #   in Loop: Header=BB8_164 Depth=1
	jmp	.LBB8_164
.LBB8_171:                              # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB8_172:                              # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB8_173:                              # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_180
.LBB8_175:                              # %if.end911
                                        #   in Loop: Header=BB8_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_177:                              # %if.end917
                                        #   in Loop: Header=BB8_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB8_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_179:                              # %if.end944
                                        #   in Loop: Header=BB8_173 Depth=1
	jmp	.LBB8_173
.LBB8_180:                              # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB8_181:                              # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB8_182:                              # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_189
.LBB8_184:                              # %if.end967
                                        #   in Loop: Header=BB8_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_186:                              # %if.end973
                                        #   in Loop: Header=BB8_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB8_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_188:                              # %if.end1000
                                        #   in Loop: Header=BB8_182 Depth=1
	jmp	.LBB8_182
.LBB8_189:                              # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB8_190:                              # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB8_191:                              # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_198
.LBB8_193:                              # %if.end1023
                                        #   in Loop: Header=BB8_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_195:                              # %if.end1029
                                        #   in Loop: Header=BB8_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB8_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_197:                              # %if.end1056
                                        #   in Loop: Header=BB8_191 Depth=1
	jmp	.LBB8_191
.LBB8_198:                              # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB8_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_200:                              # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB8_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_202:                              # %if.end1075
	movl	$0, -24(%rbp)
.LBB8_203:                              # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB8_218
# %bb.204:                              # %for.body
	jmp	.LBB8_205
.LBB8_205:                              # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB8_206:                              # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_213
.LBB8_208:                              # %if.end1094
                                        #   in Loop: Header=BB8_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_210:                              # %if.end1100
                                        #   in Loop: Header=BB8_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB8_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_212:                              # %if.end1127
                                        #   in Loop: Header=BB8_206 Depth=1
	jmp	.LBB8_206
.LBB8_213:                              # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB8_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB8_216
.LBB8_215:                              # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB8_216:                              # %if.end1137
	jmp	.LBB8_217
.LBB8_217:                              # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_203
.LBB8_218:                              # %for.end
	movl	$0, -24(%rbp)
.LBB8_219:                              # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB8_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB8_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB8_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_219
.LBB8_222:                              # %for.end1147
	movl	$0, -24(%rbp)
.LBB8_223:                              # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB8_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB8_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB8_226:                              # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB8_240
# %bb.227:                              # %for.body1160
	jmp	.LBB8_228
.LBB8_228:                              # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB8_229:                              # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_236
.LBB8_231:                              # %if.end1177
                                        #   in Loop: Header=BB8_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_233:                              # %if.end1183
                                        #   in Loop: Header=BB8_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB8_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_235:                              # %if.end1210
                                        #   in Loop: Header=BB8_229 Depth=1
	jmp	.LBB8_229
.LBB8_236:                              # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB8_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB8_238:                              # %if.end1221
	jmp	.LBB8_239
.LBB8_239:                              # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB8_226
.LBB8_240:                              # %for.end1224
	jmp	.LBB8_241
.LBB8_241:                              # %if.end1225
	jmp	.LBB8_242
.LBB8_242:                              # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_223
.LBB8_243:                              # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB8_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_245:                              # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -140(%rbp)
.LBB8_246:                              # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB8_247:                              # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB8_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB8_254
.LBB8_249:                              # %if.end1250
                                        #   in Loop: Header=BB8_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_251:                              # %if.end1256
                                        #   in Loop: Header=BB8_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB8_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_253:                              # %if.end1283
                                        #   in Loop: Header=BB8_247 Depth=1
	jmp	.LBB8_247
.LBB8_254:                              # %while.end1284
	cmpl	$2, -104(%rbp)
	jl	.LBB8_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -104(%rbp)
	jle	.LBB8_257
.LBB8_256:                              # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_257:                              # %if.end1291
	jmp	.LBB8_258
.LBB8_258:                              # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB8_259:                              # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB8_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB8_266
.LBB8_261:                              # %if.end1307
                                        #   in Loop: Header=BB8_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_263:                              # %if.end1313
                                        #   in Loop: Header=BB8_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB8_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_265:                              # %if.end1340
                                        #   in Loop: Header=BB8_259 Depth=1
	jmp	.LBB8_259
.LBB8_266:                              # %while.end1341
	cmpl	$1, -96(%rbp)
	jge	.LBB8_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_268:                              # %if.end1345
	movl	$0, -24(%rbp)
.LBB8_269:                              # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB8_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB8_271:                              # %while.body1350
	jmp	.LBB8_272
.LBB8_272:                              # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB8_273:                              # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_280
.LBB8_275:                              # %if.end1368
                                        #   in Loop: Header=BB8_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_277:                              # %if.end1374
                                        #   in Loop: Header=BB8_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB8_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_279:                              # %if.end1401
                                        #   in Loop: Header=BB8_273 Depth=1
	jmp	.LBB8_273
.LBB8_280:                              # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB8_282
# %bb.281:                              # %if.then1406
	jmp	.LBB8_285
.LBB8_282:                              # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB8_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_284:                              # %if.end1412
	jmp	.LBB8_271
.LBB8_285:                              # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_269
.LBB8_287:                              # %for.end1419
	movb	$0, -29(%rbp)
.LBB8_288:                              # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB8_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB8_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB8_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB8_288
.LBB8_291:                              # %for.end1430
	movl	$0, -24(%rbp)
.LBB8_292:                              # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB8_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB8_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB8_294:                              # %while.cond
                                        #   Parent Loop BB8_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB8_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB8_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB8_294
.LBB8_296:                              # %while.end1451
                                        #   in Loop: Header=BB8_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB8_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_292
.LBB8_298:                              # %for.end1457
	movl	$0, -48(%rbp)
.LBB8_299:                              # %for.cond1458
	movl	-48(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB8_343
# %bb.300:                              # %for.body1461
	jmp	.LBB8_301
.LBB8_301:                              # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB8_302:                              # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB8_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB8_309
.LBB8_304:                              # %if.end1478
                                        #   in Loop: Header=BB8_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_306:                              # %if.end1484
                                        #   in Loop: Header=BB8_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB8_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_308:                              # %if.end1511
                                        #   in Loop: Header=BB8_302 Depth=1
	jmp	.LBB8_302
.LBB8_309:                              # %while.end1512
	movl	$0, -24(%rbp)
.LBB8_310:                              # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB8_341
# %bb.311:                              # %for.body1516
	jmp	.LBB8_312
.LBB8_312:                              # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB8_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB8_315
.LBB8_314:                              # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_315:                              # %if.end1525
	jmp	.LBB8_316
.LBB8_316:                              # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB8_317:                              # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_324
.LBB8_319:                              # %if.end1543
                                        #   in Loop: Header=BB8_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_321:                              # %if.end1549
                                        #   in Loop: Header=BB8_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB8_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_323:                              # %if.end1576
                                        #   in Loop: Header=BB8_317 Depth=1
	jmp	.LBB8_317
.LBB8_324:                              # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB8_326
# %bb.325:                              # %if.then1581
	jmp	.LBB8_339
.LBB8_326:                              # %if.end1582
	jmp	.LBB8_327
.LBB8_327:                              # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB8_328:                              # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_335
.LBB8_330:                              # %if.end1600
                                        #   in Loop: Header=BB8_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_332:                              # %if.end1606
                                        #   in Loop: Header=BB8_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB8_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_334:                              # %if.end1633
                                        #   in Loop: Header=BB8_328 Depth=1
	jmp	.LBB8_328
.LBB8_335:                              # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB8_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB8_338
.LBB8_337:                              # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB8_338:                              # %if.end1642
	jmp	.LBB8_312
.LBB8_339:                              # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_310
.LBB8_341:                              # %for.end1651
	jmp	.LBB8_342
.LBB8_342:                              # %for.inc1652
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB8_299
.LBB8_343:                              # %for.end1654
	movl	$0, -48(%rbp)
.LBB8_344:                              # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_346 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB8_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB8_344 Depth=1
	movl	$32, -148(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB8_346:                              # %for.cond1659
                                        #   Parent Loop BB8_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB8_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB8_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB8_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB8_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB8_349:                              # %if.end1678
                                        #   in Loop: Header=BB8_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB8_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB8_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -148(%rbp)
.LBB8_351:                              # %if.end1694
                                        #   in Loop: Header=BB8_346 Depth=2
	jmp	.LBB8_352
.LBB8_352:                              # %for.inc1695
                                        #   in Loop: Header=BB8_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_346
.LBB8_353:                              # %for.end1697
                                        #   in Loop: Header=BB8_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-148(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-140(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-148(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB8_344 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB8_344
.LBB8_355:                              # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -136(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB8_356:                              # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB8_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB8_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB8_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_356
.LBB8_359:                              # %for.end1728
	movl	$4095, -160(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB8_360:                              # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_362 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB8_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB8_360 Depth=1
	movl	$15, -152(%rbp)
.LBB8_362:                              # %for.cond1733
                                        #   Parent Loop BB8_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -152(%rbp)
	jl	.LBB8_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB8_362 Depth=2
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-152(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-160(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB8_362 Depth=2
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB8_362
.LBB8_365:                              # %for.end1745
                                        #   in Loop: Header=BB8_360 Depth=1
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB8_360 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB8_360
.LBB8_367:                              # %for.end1751
	movl	$0, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB8_371
# %bb.368:                              # %if.then1754
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB8_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_370:                              # %if.end1759
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB8_371:                              # %if.end1779
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB8_372:                              # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB8_373:                              # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB8_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -244(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-244(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB8_380
.LBB8_375:                              # %if.end1799
                                        #   in Loop: Header=BB8_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_377:                              # %if.end1805
                                        #   in Loop: Header=BB8_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB8_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_379:                              # %if.end1832
                                        #   in Loop: Header=BB8_373 Depth=1
	jmp	.LBB8_373
.LBB8_380:                              # %while.end1833
	jmp	.LBB8_381
.LBB8_381:                              # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB8_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_383:                              # %if.end1839
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB8_385
# %bb.384:                              # %if.then1844
	jmp	.LBB8_395
.LBB8_385:                              # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB8_386:                              # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB8_387:                              # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB8_394
.LBB8_389:                              # %if.end1863
                                        #   in Loop: Header=BB8_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_391:                              # %if.end1869
                                        #   in Loop: Header=BB8_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB8_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_393:                              # %if.end1896
                                        #   in Loop: Header=BB8_387 Depth=1
	jmp	.LBB8_387
.LBB8_394:                              # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB8_381
.LBB8_395:                              # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB8_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB8_398
.LBB8_397:                              # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_398:                              # %if.end1913
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB8_399:                              # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB8_401
# %bb.400:                              # %if.then1923
	jmp	.LBB8_520
.LBB8_401:                              # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB8_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB8_458
.LBB8_403:                              # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB8_404:                              # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB8_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB8_409
.LBB8_406:                              # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB8_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB8_408:                              # %if.end1942
	jmp	.LBB8_409
.LBB8_409:                              # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB8_413
# %bb.410:                              # %if.then1947
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB8_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_412:                              # %if.end1952
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB8_413:                              # %if.end1972
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB8_414:                              # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB8_415:                              # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB8_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -356(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-356(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB8_422
.LBB8_417:                              # %if.end1992
                                        #   in Loop: Header=BB8_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_419:                              # %if.end1998
                                        #   in Loop: Header=BB8_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB8_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_421:                              # %if.end2025
                                        #   in Loop: Header=BB8_415 Depth=1
	jmp	.LBB8_415
.LBB8_422:                              # %while.end2026
	jmp	.LBB8_423
.LBB8_423:                              # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB8_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_425:                              # %if.end2032
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB8_427
# %bb.426:                              # %if.then2037
	jmp	.LBB8_437
.LBB8_427:                              # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB8_428:                              # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB8_429:                              # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB8_436
.LBB8_431:                              # %if.end2056
                                        #   in Loop: Header=BB8_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_433:                              # %if.end2062
                                        #   in Loop: Header=BB8_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB8_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_435:                              # %if.end2089
                                        #   in Loop: Header=BB8_429 Depth=1
	jmp	.LBB8_429
.LBB8_436:                              # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB8_423
.LBB8_437:                              # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB8_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB8_440
.LBB8_439:                              # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_440:                              # %if.end2106
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB8_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB8_443:                              # %lor.end
	testb	$1, %al
	jne	.LBB8_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB8_451
# %bb.445:                              # %if.then2130
	jmp	.LBB8_446
.LBB8_446:                              # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB8_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB8_446 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB8_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_449:                              # %if.end2138
                                        #   in Loop: Header=BB8_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB8_446
.LBB8_450:                              # %while.end2145
	jmp	.LBB8_457
.LBB8_451:                              # %if.else2146
	jmp	.LBB8_452
.LBB8_452:                              # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB8_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB8_452 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB8_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_455:                              # %if.end2154
                                        #   in Loop: Header=BB8_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB8_452
.LBB8_456:                              # %while.end2161
	jmp	.LBB8_457
.LBB8_457:                              # %if.end2162
	jmp	.LBB8_399
.LBB8_458:                              # %if.else2163
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB8_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_460:                              # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB8_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB8_462:                              # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB8_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB8_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB8_462
.LBB8_464:                              # %while.end2218
	jmp	.LBB8_465
.LBB8_465:                              # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB8_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB8_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB8_465
.LBB8_467:                              # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB8_485
.LBB8_468:                              # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-248(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB8_469:                              # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB8_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB8_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB8_469
.LBB8_471:                              # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB8_472:                              # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB8_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB8_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB8_472
.LBB8_474:                              # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB8_484
# %bb.475:                              # %if.then2302
	movl	$4095, -156(%rbp)       # imm = 0xFFF
	movl	$15, -128(%rbp)
.LBB8_476:                              # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_478 Depth 2
	cmpl	$0, -128(%rbp)
	jl	.LBB8_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB8_476 Depth=1
	movl	$15, -144(%rbp)
.LBB8_478:                              # %for.cond2307
                                        #   Parent Loop BB8_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -144(%rbp)
	jl	.LBB8_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB8_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-144(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-156(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB8_478 Depth=2
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB8_478
.LBB8_481:                              # %for.end2324
                                        #   in Loop: Header=BB8_476 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB8_476 Depth=1
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB8_476
.LBB8_483:                              # %for.end2331
	jmp	.LBB8_484
.LBB8_484:                              # %if.end2332
	jmp	.LBB8_485
.LBB8_485:                              # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB8_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB8_488
.LBB8_487:                              # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB8_488:                              # %if.end2359
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB8_492
# %bb.489:                              # %if.then2363
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB8_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_491:                              # %if.end2368
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB8_492:                              # %if.end2388
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB8_493:                              # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB8_494:                              # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB8_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -308(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-308(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB8_501
.LBB8_496:                              # %if.end2408
                                        #   in Loop: Header=BB8_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_498:                              # %if.end2414
                                        #   in Loop: Header=BB8_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB8_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_500:                              # %if.end2441
                                        #   in Loop: Header=BB8_494 Depth=1
	jmp	.LBB8_494
.LBB8_501:                              # %while.end2442
	jmp	.LBB8_502
.LBB8_502:                              # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB8_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_504:                              # %if.end2448
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB8_506
# %bb.505:                              # %if.then2453
	jmp	.LBB8_516
.LBB8_506:                              # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB8_507:                              # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB8_508:                              # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB8_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB8_515
.LBB8_510:                              # %if.end2472
                                        #   in Loop: Header=BB8_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_512:                              # %if.end2478
                                        #   in Loop: Header=BB8_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB8_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_514:                              # %if.end2505
                                        #   in Loop: Header=BB8_508 Depth=1
	jmp	.LBB8_508
.LBB8_515:                              # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB8_502
.LBB8_516:                              # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB8_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB8_519
.LBB8_518:                              # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_519:                              # %if.end2522
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB8_399
.LBB8_520:                              # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB8_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB8_523
.LBB8_522:                              # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_523:                              # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB8_524:                              # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB8_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB8_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB8_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_524
.LBB8_527:                              # %for.end2552
	movl	$1, -24(%rbp)
.LBB8_528:                              # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB8_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB8_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB8_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_528
.LBB8_531:                              # %for.end2567
	movl	$0, -24(%rbp)
.LBB8_532:                              # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB8_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB8_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB8_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB8_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB8_536
.LBB8_535:                              # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_536:                              # %if.end2584
                                        #   in Loop: Header=BB8_532 Depth=1
	jmp	.LBB8_537
.LBB8_537:                              # %for.inc2585
                                        #   in Loop: Header=BB8_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_532
.LBB8_538:                              # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB8_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB8_540:                              # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB8_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB8_542:                              # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB8_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB8_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB8_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_542
.LBB8_545:                              # %for.end2609
	movl	$0, -24(%rbp)
.LBB8_546:                              # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB8_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB8_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB8_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB8_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB8_550
.LBB8_549:                              # %if.else2646
                                        #   in Loop: Header=BB8_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB8_550:                              # %if.end2664
                                        #   in Loop: Header=BB8_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB8_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_546
.LBB8_552:                              # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB8_553:                              # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -236(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB8_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB8_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB8_556
.LBB8_555:                              # %if.else2727
                                        #   in Loop: Header=BB8_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB8_556:                              # %if.end2742
                                        #   in Loop: Header=BB8_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-236(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB8_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB8_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB8_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB8_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB8_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB8_562:                              # %if.end2791
	jmp	.LBB8_563
.LBB8_563:                              # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB8_565
.LBB8_564:                              # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB8_565:                              # %if.end2826
	jmp	.LBB8_578
.LBB8_566:                              # %if.else2827
	movl	$0, -24(%rbp)
.LBB8_567:                              # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB8_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB8_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB8_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_567
.LBB8_570:                              # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB8_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB8_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB8_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB8_574:                              # %if.end2893
	jmp	.LBB8_575
.LBB8_575:                              # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB8_577
.LBB8_576:                              # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB8_577:                              # %if.end2918
	jmp	.LBB8_578
.LBB8_578:                              # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_579:                              # %endhdr_2
	jmp	.LBB8_580
.LBB8_580:                              # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB8_581:                              # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_588
.LBB8_583:                              # %if.end2937
                                        #   in Loop: Header=BB8_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_585:                              # %if.end2943
                                        #   in Loop: Header=BB8_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB8_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_587:                              # %if.end2970
                                        #   in Loop: Header=BB8_581 Depth=1
	jmp	.LBB8_581
.LBB8_588:                              # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB8_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_590:                              # %if.end2976
	jmp	.LBB8_591
.LBB8_591:                              # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB8_592:                              # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_599
.LBB8_594:                              # %if.end2994
                                        #   in Loop: Header=BB8_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_596:                              # %if.end3000
                                        #   in Loop: Header=BB8_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB8_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_598:                              # %if.end3027
                                        #   in Loop: Header=BB8_592 Depth=1
	jmp	.LBB8_592
.LBB8_599:                              # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB8_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_601:                              # %if.end3033
	jmp	.LBB8_602
.LBB8_602:                              # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB8_603:                              # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_610
.LBB8_605:                              # %if.end3051
                                        #   in Loop: Header=BB8_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_607:                              # %if.end3057
                                        #   in Loop: Header=BB8_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB8_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_609:                              # %if.end3084
                                        #   in Loop: Header=BB8_603 Depth=1
	jmp	.LBB8_603
.LBB8_610:                              # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB8_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_612:                              # %if.end3090
	jmp	.LBB8_613
.LBB8_613:                              # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB8_614:                              # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_621
.LBB8_616:                              # %if.end3108
                                        #   in Loop: Header=BB8_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_618:                              # %if.end3114
                                        #   in Loop: Header=BB8_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB8_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_620:                              # %if.end3141
                                        #   in Loop: Header=BB8_614 Depth=1
	jmp	.LBB8_614
.LBB8_621:                              # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB8_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_623:                              # %if.end3147
	jmp	.LBB8_624
.LBB8_624:                              # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB8_625:                              # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_632
.LBB8_627:                              # %if.end3165
                                        #   in Loop: Header=BB8_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_629:                              # %if.end3171
                                        #   in Loop: Header=BB8_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB8_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_631:                              # %if.end3198
                                        #   in Loop: Header=BB8_625 Depth=1
	jmp	.LBB8_625
.LBB8_632:                              # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB8_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_634:                              # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB8_635:                              # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB8_636:                              # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_643
.LBB8_638:                              # %if.end3222
                                        #   in Loop: Header=BB8_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_640:                              # %if.end3228
                                        #   in Loop: Header=BB8_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB8_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_642:                              # %if.end3255
                                        #   in Loop: Header=BB8_636 Depth=1
	jmp	.LBB8_636
.LBB8_643:                              # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB8_644:                              # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB8_645:                              # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_652
.LBB8_647:                              # %if.end3279
                                        #   in Loop: Header=BB8_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_649:                              # %if.end3285
                                        #   in Loop: Header=BB8_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB8_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_651:                              # %if.end3312
                                        #   in Loop: Header=BB8_645 Depth=1
	jmp	.LBB8_645
.LBB8_652:                              # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB8_653:                              # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB8_654:                              # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_661
.LBB8_656:                              # %if.end3336
                                        #   in Loop: Header=BB8_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_658:                              # %if.end3342
                                        #   in Loop: Header=BB8_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB8_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_660:                              # %if.end3369
                                        #   in Loop: Header=BB8_654 Depth=1
	jmp	.LBB8_654
.LBB8_661:                              # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB8_662:                              # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB8_663:                              # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB8_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB8_670
.LBB8_665:                              # %if.end3393
                                        #   in Loop: Header=BB8_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB8_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB8_673
.LBB8_667:                              # %if.end3399
                                        #   in Loop: Header=BB8_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB8_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB8_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB8_669:                              # %if.end3426
                                        #   in Loop: Header=BB8_663 Depth=1
	jmp	.LBB8_663
.LBB8_670:                              # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB8_673
.LBB8_671:                              # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB8_673:                              # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-140(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-136(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-252(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$461846511, -232(%rbp)  # imm = 0x1B8737EF
	jne	.LBB8_675
.LBB8_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_675:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_674
.Lfunc_end8:
	.size	BZ2_decompress.7, .Lfunc_end8-BZ2_decompress.7
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI8_0:
	.quad	.LBB8_4
	.quad	.LBB8_15
	.quad	.LBB8_26
	.quad	.LBB8_37
	.quad	.LBB8_57
	.quad	.LBB8_70
	.quad	.LBB8_81
	.quad	.LBB8_92
	.quad	.LBB8_103
	.quad	.LBB8_114
	.quad	.LBB8_127
	.quad	.LBB8_136
	.quad	.LBB8_145
	.quad	.LBB8_154
	.quad	.LBB8_163
	.quad	.LBB8_172
	.quad	.LBB8_181
	.quad	.LBB8_190
	.quad	.LBB8_205
	.quad	.LBB8_228
	.quad	.LBB8_246
	.quad	.LBB8_258
	.quad	.LBB8_272
	.quad	.LBB8_301
	.quad	.LBB8_316
	.quad	.LBB8_327
	.quad	.LBB8_372
	.quad	.LBB8_386
	.quad	.LBB8_414
	.quad	.LBB8_428
	.quad	.LBB8_493
	.quad	.LBB8_507
	.quad	.LBB8_580
	.quad	.LBB8_591
	.quad	.LBB8_602
	.quad	.LBB8_613
	.quad	.LBB8_624
	.quad	.LBB8_635
	.quad	.LBB8_644
	.quad	.LBB8_653
	.quad	.LBB8_662
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function makeMaps_d.8
	.type	makeMaps_d.8,@function
makeMaps_d.8:                           # @makeMaps_d.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2089573038, -20(%rbp)  # imm = 0x7C8C5AAE
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, 3192(%rax)
	movl	$0, -4(%rbp)
.LBB9_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -4(%rbp)          # imm = 0x100
	jge	.LBB9_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, 3196(%rax,%rcx)
	je	.LBB9_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB9_1 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	3192(%rdx), %rdx
	movb	%al, 3468(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	3192(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 3192(%rax)
.LBB9_4:                                # %if.end
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_5
.LBB9_5:                                # %for.inc
                                        #   in Loop: Header=BB9_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_1
.LBB9_6:                                # %for.end
	cmpl	$2089573038, -20(%rbp)  # imm = 0x7C8C5AAE
	jne	.LBB9_8
.LBB9_7:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_7
.Lfunc_end9:
	.size	makeMaps_d.8, .Lfunc_end9-makeMaps_d.8
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_decompress.9        # -- Begin function BZ2_decompress.9
	.p2align	4, 0x90
	.type	BZ2_decompress.9,@function
BZ2_decompress.9:                       # @BZ2_decompress.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$434611781, -284(%rbp)  # imm = 0x19E7A645
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB10_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB10_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB10_671
# %bb.3:                                # %if.end
	movq	.LJTI10_0(,%rax,8), %rax
	jmpq	*%rax
.LBB10_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB10_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_12
.LBB10_7:                               # %if.end33
                                        #   in Loop: Header=BB10_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_9:                               # %if.end38
                                        #   in Loop: Header=BB10_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB10_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_11:                              # %if.end56
                                        #   in Loop: Header=BB10_5 Depth=1
	jmp	.LBB10_5
.LBB10_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB10_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB10_673
.LBB10_14:                              # %if.end61
	jmp	.LBB10_15
.LBB10_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB10_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_23
.LBB10_18:                              # %if.end78
                                        #   in Loop: Header=BB10_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_20:                              # %if.end84
                                        #   in Loop: Header=BB10_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB10_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_22:                              # %if.end111
                                        #   in Loop: Header=BB10_16 Depth=1
	jmp	.LBB10_16
.LBB10_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB10_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB10_673
.LBB10_25:                              # %if.end117
	jmp	.LBB10_26
.LBB10_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB10_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_34
.LBB10_29:                              # %if.end134
                                        #   in Loop: Header=BB10_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_31:                              # %if.end140
                                        #   in Loop: Header=BB10_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB10_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_33:                              # %if.end167
                                        #   in Loop: Header=BB10_27 Depth=1
	jmp	.LBB10_27
.LBB10_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB10_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB10_673
.LBB10_36:                              # %if.end173
	jmp	.LBB10_37
.LBB10_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB10_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB10_45
.LBB10_40:                              # %if.end189
                                        #   in Loop: Header=BB10_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_42:                              # %if.end195
                                        #   in Loop: Header=BB10_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB10_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_44:                              # %if.end222
                                        #   in Loop: Header=BB10_38 Depth=1
	jmp	.LBB10_38
.LBB10_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB10_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB10_48
.LBB10_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB10_673
.LBB10_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB10_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB10_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB10_52
.LBB10_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB10_673
.LBB10_52:                              # %if.end257
	jmp	.LBB10_56
.LBB10_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB10_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB10_673
.LBB10_55:                              # %if.end270
	jmp	.LBB10_56
.LBB10_56:                              # %if.end271
	jmp	.LBB10_57
.LBB10_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB10_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_65
.LBB10_60:                              # %if.end288
                                        #   in Loop: Header=BB10_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_62:                              # %if.end294
                                        #   in Loop: Header=BB10_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB10_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_64:                              # %if.end321
                                        #   in Loop: Header=BB10_58 Depth=1
	jmp	.LBB10_58
.LBB10_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB10_67
# %bb.66:                               # %if.then326
	jmp	.LBB10_579
.LBB10_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB10_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_69:                              # %if.end332
	jmp	.LBB10_70
.LBB10_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB10_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_78
.LBB10_73:                              # %if.end349
                                        #   in Loop: Header=BB10_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_75:                              # %if.end355
                                        #   in Loop: Header=BB10_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB10_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_77:                              # %if.end382
                                        #   in Loop: Header=BB10_71 Depth=1
	jmp	.LBB10_71
.LBB10_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB10_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_80:                              # %if.end388
	jmp	.LBB10_81
.LBB10_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB10_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_89
.LBB10_84:                              # %if.end405
                                        #   in Loop: Header=BB10_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_86:                              # %if.end411
                                        #   in Loop: Header=BB10_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB10_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_88:                              # %if.end438
                                        #   in Loop: Header=BB10_82 Depth=1
	jmp	.LBB10_82
.LBB10_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB10_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_91:                              # %if.end444
	jmp	.LBB10_92
.LBB10_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB10_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_100
.LBB10_95:                              # %if.end461
                                        #   in Loop: Header=BB10_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_97:                              # %if.end467
                                        #   in Loop: Header=BB10_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB10_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_99:                              # %if.end494
                                        #   in Loop: Header=BB10_93 Depth=1
	jmp	.LBB10_93
.LBB10_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB10_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_102:                             # %if.end500
	jmp	.LBB10_103
.LBB10_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB10_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_111
.LBB10_106:                             # %if.end517
                                        #   in Loop: Header=BB10_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_108:                             # %if.end523
                                        #   in Loop: Header=BB10_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB10_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_110:                             # %if.end550
                                        #   in Loop: Header=BB10_104 Depth=1
	jmp	.LBB10_104
.LBB10_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB10_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_113:                             # %if.end556
	jmp	.LBB10_114
.LBB10_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB10_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_122
.LBB10_117:                             # %if.end573
                                        #   in Loop: Header=BB10_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_119:                             # %if.end579
                                        #   in Loop: Header=BB10_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB10_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_121:                             # %if.end606
                                        #   in Loop: Header=BB10_115 Depth=1
	jmp	.LBB10_115
.LBB10_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB10_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB10_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB10_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB10_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB10_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_135
.LBB10_130:                             # %if.end636
                                        #   in Loop: Header=BB10_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_132:                             # %if.end642
                                        #   in Loop: Header=BB10_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB10_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_134:                             # %if.end669
                                        #   in Loop: Header=BB10_128 Depth=1
	jmp	.LBB10_128
.LBB10_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB10_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB10_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_144
.LBB10_139:                             # %if.end692
                                        #   in Loop: Header=BB10_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_141:                             # %if.end698
                                        #   in Loop: Header=BB10_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB10_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_143:                             # %if.end725
                                        #   in Loop: Header=BB10_137 Depth=1
	jmp	.LBB10_137
.LBB10_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB10_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB10_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_153
.LBB10_148:                             # %if.end748
                                        #   in Loop: Header=BB10_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_150:                             # %if.end754
                                        #   in Loop: Header=BB10_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB10_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_152:                             # %if.end781
                                        #   in Loop: Header=BB10_146 Depth=1
	jmp	.LBB10_146
.LBB10_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB10_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB10_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_162
.LBB10_157:                             # %if.end804
                                        #   in Loop: Header=BB10_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_159:                             # %if.end810
                                        #   in Loop: Header=BB10_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB10_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_161:                             # %if.end837
                                        #   in Loop: Header=BB10_155 Depth=1
	jmp	.LBB10_155
.LBB10_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB10_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB10_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB10_171
.LBB10_166:                             # %if.end860
                                        #   in Loop: Header=BB10_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_168:                             # %if.end866
                                        #   in Loop: Header=BB10_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB10_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_170:                             # %if.end893
                                        #   in Loop: Header=BB10_164 Depth=1
	jmp	.LBB10_164
.LBB10_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB10_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB10_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_180
.LBB10_175:                             # %if.end911
                                        #   in Loop: Header=BB10_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_177:                             # %if.end917
                                        #   in Loop: Header=BB10_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB10_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_179:                             # %if.end944
                                        #   in Loop: Header=BB10_173 Depth=1
	jmp	.LBB10_173
.LBB10_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB10_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB10_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_189
.LBB10_184:                             # %if.end967
                                        #   in Loop: Header=BB10_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_186:                             # %if.end973
                                        #   in Loop: Header=BB10_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB10_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_188:                             # %if.end1000
                                        #   in Loop: Header=BB10_182 Depth=1
	jmp	.LBB10_182
.LBB10_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB10_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB10_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_198
.LBB10_193:                             # %if.end1023
                                        #   in Loop: Header=BB10_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_195:                             # %if.end1029
                                        #   in Loop: Header=BB10_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB10_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_197:                             # %if.end1056
                                        #   in Loop: Header=BB10_191 Depth=1
	jmp	.LBB10_191
.LBB10_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB10_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB10_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB10_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB10_218
# %bb.204:                              # %for.body
	jmp	.LBB10_205
.LBB10_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB10_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_213
.LBB10_208:                             # %if.end1094
                                        #   in Loop: Header=BB10_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_210:                             # %if.end1100
                                        #   in Loop: Header=BB10_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB10_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_212:                             # %if.end1127
                                        #   in Loop: Header=BB10_206 Depth=1
	jmp	.LBB10_206
.LBB10_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB10_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB10_216
.LBB10_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB10_216:                             # %if.end1137
	jmp	.LBB10_217
.LBB10_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_203
.LBB10_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB10_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB10_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB10_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB10_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_219
.LBB10_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB10_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB10_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB10_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB10_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB10_240
# %bb.227:                              # %for.body1160
	jmp	.LBB10_228
.LBB10_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB10_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_236
.LBB10_231:                             # %if.end1177
                                        #   in Loop: Header=BB10_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_233:                             # %if.end1183
                                        #   in Loop: Header=BB10_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB10_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_235:                             # %if.end1210
                                        #   in Loop: Header=BB10_229 Depth=1
	jmp	.LBB10_229
.LBB10_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB10_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB10_238:                             # %if.end1221
	jmp	.LBB10_239
.LBB10_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB10_226
.LBB10_240:                             # %for.end1224
	jmp	.LBB10_241
.LBB10_241:                             # %if.end1225
	jmp	.LBB10_242
.LBB10_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_223
.LBB10_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB10_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB10_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB10_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB10_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB10_254
.LBB10_249:                             # %if.end1250
                                        #   in Loop: Header=BB10_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_251:                             # %if.end1256
                                        #   in Loop: Header=BB10_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB10_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_253:                             # %if.end1283
                                        #   in Loop: Header=BB10_247 Depth=1
	jmp	.LBB10_247
.LBB10_254:                             # %while.end1284
	cmpl	$2, -96(%rbp)
	jl	.LBB10_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -96(%rbp)
	jle	.LBB10_257
.LBB10_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_257:                             # %if.end1291
	jmp	.LBB10_258
.LBB10_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB10_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB10_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB10_266
.LBB10_261:                             # %if.end1307
                                        #   in Loop: Header=BB10_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_263:                             # %if.end1313
                                        #   in Loop: Header=BB10_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB10_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_265:                             # %if.end1340
                                        #   in Loop: Header=BB10_259 Depth=1
	jmp	.LBB10_259
.LBB10_266:                             # %while.end1341
	cmpl	$1, -100(%rbp)
	jge	.LBB10_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB10_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB10_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB10_271:                             # %while.body1350
	jmp	.LBB10_272
.LBB10_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB10_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_280
.LBB10_275:                             # %if.end1368
                                        #   in Loop: Header=BB10_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_277:                             # %if.end1374
                                        #   in Loop: Header=BB10_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB10_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_279:                             # %if.end1401
                                        #   in Loop: Header=BB10_273 Depth=1
	jmp	.LBB10_273
.LBB10_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB10_282
# %bb.281:                              # %if.then1406
	jmp	.LBB10_285
.LBB10_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB10_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_284:                             # %if.end1412
	jmp	.LBB10_271
.LBB10_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_269
.LBB10_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB10_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB10_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB10_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB10_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB10_288
.LBB10_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB10_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB10_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB10_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB10_294:                             # %while.cond
                                        #   Parent Loop BB10_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB10_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB10_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB10_294
.LBB10_296:                             # %while.end1451
                                        #   in Loop: Header=BB10_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB10_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_292
.LBB10_298:                             # %for.end1457
	movl	$0, -52(%rbp)
.LBB10_299:                             # %for.cond1458
	movl	-52(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB10_343
# %bb.300:                              # %for.body1461
	jmp	.LBB10_301
.LBB10_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB10_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB10_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB10_309
.LBB10_304:                             # %if.end1478
                                        #   in Loop: Header=BB10_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_306:                             # %if.end1484
                                        #   in Loop: Header=BB10_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB10_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_308:                             # %if.end1511
                                        #   in Loop: Header=BB10_302 Depth=1
	jmp	.LBB10_302
.LBB10_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB10_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB10_341
# %bb.311:                              # %for.body1516
	jmp	.LBB10_312
.LBB10_312:                             # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB10_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB10_315
.LBB10_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_315:                             # %if.end1525
	jmp	.LBB10_316
.LBB10_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB10_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_324
.LBB10_319:                             # %if.end1543
                                        #   in Loop: Header=BB10_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_321:                             # %if.end1549
                                        #   in Loop: Header=BB10_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB10_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_323:                             # %if.end1576
                                        #   in Loop: Header=BB10_317 Depth=1
	jmp	.LBB10_317
.LBB10_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB10_326
# %bb.325:                              # %if.then1581
	jmp	.LBB10_339
.LBB10_326:                             # %if.end1582
	jmp	.LBB10_327
.LBB10_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB10_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_335
.LBB10_330:                             # %if.end1600
                                        #   in Loop: Header=BB10_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_332:                             # %if.end1606
                                        #   in Loop: Header=BB10_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB10_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_334:                             # %if.end1633
                                        #   in Loop: Header=BB10_328 Depth=1
	jmp	.LBB10_328
.LBB10_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB10_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB10_338
.LBB10_337:                             # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB10_338:                             # %if.end1642
	jmp	.LBB10_312
.LBB10_339:                             # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_310
.LBB10_341:                             # %for.end1651
	jmp	.LBB10_342
.LBB10_342:                             # %for.inc1652
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB10_299
.LBB10_343:                             # %for.end1654
	movl	$0, -52(%rbp)
.LBB10_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_346 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB10_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB10_344 Depth=1
	movl	$32, -148(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB10_346:                             # %for.cond1659
                                        #   Parent Loop BB10_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB10_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB10_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB10_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB10_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB10_349:                             # %if.end1678
                                        #   in Loop: Header=BB10_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB10_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB10_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -148(%rbp)
.LBB10_351:                             # %if.end1694
                                        #   in Loop: Header=BB10_346 Depth=2
	jmp	.LBB10_352
.LBB10_352:                             # %for.inc1695
                                        #   in Loop: Header=BB10_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_346
.LBB10_353:                             # %for.end1697
                                        #   in Loop: Header=BB10_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-148(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-148(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB10_344 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB10_344
.LBB10_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -136(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
.LBB10_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB10_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB10_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB10_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_356
.LBB10_359:                             # %for.end1728
	movl	$4095, -144(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB10_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_362 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB10_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB10_360 Depth=1
	movl	$15, -156(%rbp)
.LBB10_362:                             # %for.cond1733
                                        #   Parent Loop BB10_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -156(%rbp)
	jl	.LBB10_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB10_362 Depth=2
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-156(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-144(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB10_362 Depth=2
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB10_362
.LBB10_365:                             # %for.end1745
                                        #   in Loop: Header=BB10_360 Depth=1
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB10_360 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB10_360
.LBB10_367:                             # %for.end1751
	movl	$0, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB10_371
# %bb.368:                              # %if.then1754
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB10_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_370:                             # %if.end1759
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB10_371:                             # %if.end1779
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB10_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB10_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB10_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -288(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-288(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB10_380
.LBB10_375:                             # %if.end1799
                                        #   in Loop: Header=BB10_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_377:                             # %if.end1805
                                        #   in Loop: Header=BB10_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB10_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_379:                             # %if.end1832
                                        #   in Loop: Header=BB10_373 Depth=1
	jmp	.LBB10_373
.LBB10_380:                             # %while.end1833
	jmp	.LBB10_381
.LBB10_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB10_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB10_385
# %bb.384:                              # %if.then1844
	jmp	.LBB10_395
.LBB10_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB10_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB10_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB10_394
.LBB10_389:                             # %if.end1863
                                        #   in Loop: Header=BB10_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_391:                             # %if.end1869
                                        #   in Loop: Header=BB10_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB10_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_393:                             # %if.end1896
                                        #   in Loop: Header=BB10_387 Depth=1
	jmp	.LBB10_387
.LBB10_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB10_381
.LBB10_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB10_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB10_398
.LBB10_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_398:                             # %if.end1913
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB10_399:                             # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB10_401
# %bb.400:                              # %if.then1923
	jmp	.LBB10_520
.LBB10_401:                             # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB10_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB10_458
.LBB10_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB10_404:                             # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB10_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB10_409
.LBB10_406:                             # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB10_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB10_408:                             # %if.end1942
	jmp	.LBB10_409
.LBB10_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB10_413
# %bb.410:                              # %if.then1947
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB10_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_412:                             # %if.end1952
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB10_413:                             # %if.end1972
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB10_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB10_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB10_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -224(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-224(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB10_422
.LBB10_417:                             # %if.end1992
                                        #   in Loop: Header=BB10_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_419:                             # %if.end1998
                                        #   in Loop: Header=BB10_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB10_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_421:                             # %if.end2025
                                        #   in Loop: Header=BB10_415 Depth=1
	jmp	.LBB10_415
.LBB10_422:                             # %while.end2026
	jmp	.LBB10_423
.LBB10_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB10_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB10_427
# %bb.426:                              # %if.then2037
	jmp	.LBB10_437
.LBB10_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB10_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB10_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB10_436
.LBB10_431:                             # %if.end2056
                                        #   in Loop: Header=BB10_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_433:                             # %if.end2062
                                        #   in Loop: Header=BB10_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB10_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_435:                             # %if.end2089
                                        #   in Loop: Header=BB10_429 Depth=1
	jmp	.LBB10_429
.LBB10_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB10_423
.LBB10_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB10_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB10_440
.LBB10_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_440:                             # %if.end2106
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB10_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB10_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB10_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB10_451
# %bb.445:                              # %if.then2130
	jmp	.LBB10_446
.LBB10_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB10_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB10_446 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB10_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_449:                             # %if.end2138
                                        #   in Loop: Header=BB10_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB10_446
.LBB10_450:                             # %while.end2145
	jmp	.LBB10_457
.LBB10_451:                             # %if.else2146
	jmp	.LBB10_452
.LBB10_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB10_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB10_452 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB10_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_455:                             # %if.end2154
                                        #   in Loop: Header=BB10_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB10_452
.LBB10_456:                             # %while.end2161
	jmp	.LBB10_457
.LBB10_457:                             # %if.end2162
	jmp	.LBB10_399
.LBB10_458:                             # %if.else2163
	movl	-48(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB10_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_460:                             # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB10_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB10_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB10_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB10_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB10_462
.LBB10_464:                             # %while.end2218
	jmp	.LBB10_465
.LBB10_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB10_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB10_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB10_465
.LBB10_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB10_485
.LBB10_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-232(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB10_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB10_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB10_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB10_469
.LBB10_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB10_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB10_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB10_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB10_472
.LBB10_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB10_484
# %bb.475:                              # %if.then2302
	movl	$4095, -152(%rbp)       # imm = 0xFFF
	movl	$15, -140(%rbp)
.LBB10_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_478 Depth 2
	cmpl	$0, -140(%rbp)
	jl	.LBB10_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB10_476 Depth=1
	movl	$15, -160(%rbp)
.LBB10_478:                             # %for.cond2307
                                        #   Parent Loop BB10_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -160(%rbp)
	jl	.LBB10_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB10_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-160(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-152(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB10_478 Depth=2
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB10_478
.LBB10_481:                             # %for.end2324
                                        #   in Loop: Header=BB10_476 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB10_476 Depth=1
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB10_476
.LBB10_483:                             # %for.end2331
	jmp	.LBB10_484
.LBB10_484:                             # %if.end2332
	jmp	.LBB10_485
.LBB10_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB10_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB10_488
.LBB10_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB10_488:                             # %if.end2359
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB10_492
# %bb.489:                              # %if.then2363
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB10_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_491:                             # %if.end2368
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB10_492:                             # %if.end2388
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB10_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB10_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB10_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -344(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-344(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB10_501
.LBB10_496:                             # %if.end2408
                                        #   in Loop: Header=BB10_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_498:                             # %if.end2414
                                        #   in Loop: Header=BB10_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB10_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_500:                             # %if.end2441
                                        #   in Loop: Header=BB10_494 Depth=1
	jmp	.LBB10_494
.LBB10_501:                             # %while.end2442
	jmp	.LBB10_502
.LBB10_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB10_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB10_506
# %bb.505:                              # %if.then2453
	jmp	.LBB10_516
.LBB10_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB10_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB10_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB10_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB10_515
.LBB10_510:                             # %if.end2472
                                        #   in Loop: Header=BB10_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_512:                             # %if.end2478
                                        #   in Loop: Header=BB10_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB10_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_514:                             # %if.end2505
                                        #   in Loop: Header=BB10_508 Depth=1
	jmp	.LBB10_508
.LBB10_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB10_502
.LBB10_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB10_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB10_519
.LBB10_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_519:                             # %if.end2522
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB10_399
.LBB10_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB10_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB10_523
.LBB10_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB10_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB10_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB10_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB10_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_524
.LBB10_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB10_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB10_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB10_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB10_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_528
.LBB10_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB10_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB10_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB10_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB10_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB10_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB10_536
.LBB10_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_536:                             # %if.end2584
                                        #   in Loop: Header=BB10_532 Depth=1
	jmp	.LBB10_537
.LBB10_537:                             # %for.inc2585
                                        #   in Loop: Header=BB10_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_532
.LBB10_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB10_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB10_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB10_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB10_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB10_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB10_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB10_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_542
.LBB10_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB10_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB10_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB10_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB10_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB10_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB10_550
.LBB10_549:                             # %if.else2646
                                        #   in Loop: Header=BB10_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB10_550:                             # %if.end2664
                                        #   in Loop: Header=BB10_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB10_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_546
.LBB10_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB10_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -280(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB10_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB10_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB10_556
.LBB10_555:                             # %if.else2727
                                        #   in Loop: Header=BB10_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB10_556:                             # %if.end2742
                                        #   in Loop: Header=BB10_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-280(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB10_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB10_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB10_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB10_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB10_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB10_562:                             # %if.end2791
	jmp	.LBB10_563
.LBB10_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB10_565
.LBB10_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB10_565:                             # %if.end2826
	jmp	.LBB10_578
.LBB10_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB10_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB10_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB10_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB10_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_567
.LBB10_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB10_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB10_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB10_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB10_574:                             # %if.end2893
	jmp	.LBB10_575
.LBB10_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB10_577
.LBB10_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB10_577:                             # %if.end2918
	jmp	.LBB10_578
.LBB10_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_579:                             # %endhdr_2
	jmp	.LBB10_580
.LBB10_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB10_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_588
.LBB10_583:                             # %if.end2937
                                        #   in Loop: Header=BB10_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_585:                             # %if.end2943
                                        #   in Loop: Header=BB10_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB10_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_587:                             # %if.end2970
                                        #   in Loop: Header=BB10_581 Depth=1
	jmp	.LBB10_581
.LBB10_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB10_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_590:                             # %if.end2976
	jmp	.LBB10_591
.LBB10_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB10_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_599
.LBB10_594:                             # %if.end2994
                                        #   in Loop: Header=BB10_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_596:                             # %if.end3000
                                        #   in Loop: Header=BB10_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB10_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_598:                             # %if.end3027
                                        #   in Loop: Header=BB10_592 Depth=1
	jmp	.LBB10_592
.LBB10_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB10_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_601:                             # %if.end3033
	jmp	.LBB10_602
.LBB10_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB10_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_610
.LBB10_605:                             # %if.end3051
                                        #   in Loop: Header=BB10_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_607:                             # %if.end3057
                                        #   in Loop: Header=BB10_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB10_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_609:                             # %if.end3084
                                        #   in Loop: Header=BB10_603 Depth=1
	jmp	.LBB10_603
.LBB10_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB10_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_612:                             # %if.end3090
	jmp	.LBB10_613
.LBB10_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB10_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_621
.LBB10_616:                             # %if.end3108
                                        #   in Loop: Header=BB10_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_618:                             # %if.end3114
                                        #   in Loop: Header=BB10_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB10_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_620:                             # %if.end3141
                                        #   in Loop: Header=BB10_614 Depth=1
	jmp	.LBB10_614
.LBB10_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB10_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_623:                             # %if.end3147
	jmp	.LBB10_624
.LBB10_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB10_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_632
.LBB10_627:                             # %if.end3165
                                        #   in Loop: Header=BB10_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_629:                             # %if.end3171
                                        #   in Loop: Header=BB10_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB10_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_631:                             # %if.end3198
                                        #   in Loop: Header=BB10_625 Depth=1
	jmp	.LBB10_625
.LBB10_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB10_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB10_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB10_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_643
.LBB10_638:                             # %if.end3222
                                        #   in Loop: Header=BB10_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_640:                             # %if.end3228
                                        #   in Loop: Header=BB10_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB10_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_642:                             # %if.end3255
                                        #   in Loop: Header=BB10_636 Depth=1
	jmp	.LBB10_636
.LBB10_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB10_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB10_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_652
.LBB10_647:                             # %if.end3279
                                        #   in Loop: Header=BB10_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_649:                             # %if.end3285
                                        #   in Loop: Header=BB10_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB10_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_651:                             # %if.end3312
                                        #   in Loop: Header=BB10_645 Depth=1
	jmp	.LBB10_645
.LBB10_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB10_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB10_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_661
.LBB10_656:                             # %if.end3336
                                        #   in Loop: Header=BB10_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_658:                             # %if.end3342
                                        #   in Loop: Header=BB10_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB10_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_660:                             # %if.end3369
                                        #   in Loop: Header=BB10_654 Depth=1
	jmp	.LBB10_654
.LBB10_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB10_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB10_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB10_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB10_670
.LBB10_665:                             # %if.end3393
                                        #   in Loop: Header=BB10_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB10_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB10_673
.LBB10_667:                             # %if.end3399
                                        #   in Loop: Header=BB10_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB10_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB10_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB10_669:                             # %if.end3426
                                        #   in Loop: Header=BB10_663 Depth=1
	jmp	.LBB10_663
.LBB10_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB10_673
.LBB10_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB10_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-136(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-204(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$434611781, -284(%rbp)  # imm = 0x19E7A645
	jne	.LBB10_675
.LBB10_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_674
.Lfunc_end10:
	.size	BZ2_decompress.9, .Lfunc_end10-BZ2_decompress.9
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI10_0:
	.quad	.LBB10_4
	.quad	.LBB10_15
	.quad	.LBB10_26
	.quad	.LBB10_37
	.quad	.LBB10_57
	.quad	.LBB10_70
	.quad	.LBB10_81
	.quad	.LBB10_92
	.quad	.LBB10_103
	.quad	.LBB10_114
	.quad	.LBB10_127
	.quad	.LBB10_136
	.quad	.LBB10_145
	.quad	.LBB10_154
	.quad	.LBB10_163
	.quad	.LBB10_172
	.quad	.LBB10_181
	.quad	.LBB10_190
	.quad	.LBB10_205
	.quad	.LBB10_228
	.quad	.LBB10_246
	.quad	.LBB10_258
	.quad	.LBB10_272
	.quad	.LBB10_301
	.quad	.LBB10_316
	.quad	.LBB10_327
	.quad	.LBB10_372
	.quad	.LBB10_386
	.quad	.LBB10_414
	.quad	.LBB10_428
	.quad	.LBB10_493
	.quad	.LBB10_507
	.quad	.LBB10_580
	.quad	.LBB10_591
	.quad	.LBB10_602
	.quad	.LBB10_613
	.quad	.LBB10_624
	.quad	.LBB10_635
	.quad	.LBB10_644
	.quad	.LBB10_653
	.quad	.LBB10_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.10       # -- Begin function BZ2_decompress.10
	.p2align	4, 0x90
	.type	BZ2_decompress.10,@function
BZ2_decompress.10:                      # @BZ2_decompress.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$172799230, -244(%rbp)  # imm = 0xA4CB4FE
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB11_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB11_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB11_671
# %bb.3:                                # %if.end
	movq	.LJTI11_0(,%rax,8), %rax
	jmpq	*%rax
.LBB11_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB11_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_12
.LBB11_7:                               # %if.end33
                                        #   in Loop: Header=BB11_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_9:                               # %if.end38
                                        #   in Loop: Header=BB11_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB11_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_11:                              # %if.end56
                                        #   in Loop: Header=BB11_5 Depth=1
	jmp	.LBB11_5
.LBB11_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB11_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB11_673
.LBB11_14:                              # %if.end61
	jmp	.LBB11_15
.LBB11_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB11_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_23
.LBB11_18:                              # %if.end78
                                        #   in Loop: Header=BB11_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_20:                              # %if.end84
                                        #   in Loop: Header=BB11_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB11_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_22:                              # %if.end111
                                        #   in Loop: Header=BB11_16 Depth=1
	jmp	.LBB11_16
.LBB11_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB11_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB11_673
.LBB11_25:                              # %if.end117
	jmp	.LBB11_26
.LBB11_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB11_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_34
.LBB11_29:                              # %if.end134
                                        #   in Loop: Header=BB11_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_31:                              # %if.end140
                                        #   in Loop: Header=BB11_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB11_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_33:                              # %if.end167
                                        #   in Loop: Header=BB11_27 Depth=1
	jmp	.LBB11_27
.LBB11_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB11_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB11_673
.LBB11_36:                              # %if.end173
	jmp	.LBB11_37
.LBB11_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB11_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB11_45
.LBB11_40:                              # %if.end189
                                        #   in Loop: Header=BB11_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_42:                              # %if.end195
                                        #   in Loop: Header=BB11_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB11_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_44:                              # %if.end222
                                        #   in Loop: Header=BB11_38 Depth=1
	jmp	.LBB11_38
.LBB11_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB11_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB11_48
.LBB11_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB11_673
.LBB11_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB11_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB11_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB11_52
.LBB11_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB11_673
.LBB11_52:                              # %if.end257
	jmp	.LBB11_56
.LBB11_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB11_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB11_673
.LBB11_55:                              # %if.end270
	jmp	.LBB11_56
.LBB11_56:                              # %if.end271
	jmp	.LBB11_57
.LBB11_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB11_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_65
.LBB11_60:                              # %if.end288
                                        #   in Loop: Header=BB11_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_62:                              # %if.end294
                                        #   in Loop: Header=BB11_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB11_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_64:                              # %if.end321
                                        #   in Loop: Header=BB11_58 Depth=1
	jmp	.LBB11_58
.LBB11_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB11_67
# %bb.66:                               # %if.then326
	jmp	.LBB11_579
.LBB11_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB11_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_69:                              # %if.end332
	jmp	.LBB11_70
.LBB11_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB11_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_78
.LBB11_73:                              # %if.end349
                                        #   in Loop: Header=BB11_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_75:                              # %if.end355
                                        #   in Loop: Header=BB11_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB11_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_77:                              # %if.end382
                                        #   in Loop: Header=BB11_71 Depth=1
	jmp	.LBB11_71
.LBB11_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB11_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_80:                              # %if.end388
	jmp	.LBB11_81
.LBB11_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB11_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_89
.LBB11_84:                              # %if.end405
                                        #   in Loop: Header=BB11_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_86:                              # %if.end411
                                        #   in Loop: Header=BB11_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB11_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_88:                              # %if.end438
                                        #   in Loop: Header=BB11_82 Depth=1
	jmp	.LBB11_82
.LBB11_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB11_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_91:                              # %if.end444
	jmp	.LBB11_92
.LBB11_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB11_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_100
.LBB11_95:                              # %if.end461
                                        #   in Loop: Header=BB11_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_97:                              # %if.end467
                                        #   in Loop: Header=BB11_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB11_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_99:                              # %if.end494
                                        #   in Loop: Header=BB11_93 Depth=1
	jmp	.LBB11_93
.LBB11_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB11_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_102:                             # %if.end500
	jmp	.LBB11_103
.LBB11_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB11_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_111
.LBB11_106:                             # %if.end517
                                        #   in Loop: Header=BB11_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_108:                             # %if.end523
                                        #   in Loop: Header=BB11_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB11_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_110:                             # %if.end550
                                        #   in Loop: Header=BB11_104 Depth=1
	jmp	.LBB11_104
.LBB11_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB11_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_113:                             # %if.end556
	jmp	.LBB11_114
.LBB11_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB11_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_122
.LBB11_117:                             # %if.end573
                                        #   in Loop: Header=BB11_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_119:                             # %if.end579
                                        #   in Loop: Header=BB11_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB11_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_121:                             # %if.end606
                                        #   in Loop: Header=BB11_115 Depth=1
	jmp	.LBB11_115
.LBB11_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB11_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB11_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB11_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB11_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB11_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_135
.LBB11_130:                             # %if.end636
                                        #   in Loop: Header=BB11_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_132:                             # %if.end642
                                        #   in Loop: Header=BB11_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB11_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_134:                             # %if.end669
                                        #   in Loop: Header=BB11_128 Depth=1
	jmp	.LBB11_128
.LBB11_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB11_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB11_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_144
.LBB11_139:                             # %if.end692
                                        #   in Loop: Header=BB11_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_141:                             # %if.end698
                                        #   in Loop: Header=BB11_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB11_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_143:                             # %if.end725
                                        #   in Loop: Header=BB11_137 Depth=1
	jmp	.LBB11_137
.LBB11_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB11_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB11_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_153
.LBB11_148:                             # %if.end748
                                        #   in Loop: Header=BB11_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_150:                             # %if.end754
                                        #   in Loop: Header=BB11_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB11_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_152:                             # %if.end781
                                        #   in Loop: Header=BB11_146 Depth=1
	jmp	.LBB11_146
.LBB11_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB11_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB11_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_162
.LBB11_157:                             # %if.end804
                                        #   in Loop: Header=BB11_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_159:                             # %if.end810
                                        #   in Loop: Header=BB11_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB11_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_161:                             # %if.end837
                                        #   in Loop: Header=BB11_155 Depth=1
	jmp	.LBB11_155
.LBB11_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB11_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB11_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB11_171
.LBB11_166:                             # %if.end860
                                        #   in Loop: Header=BB11_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_168:                             # %if.end866
                                        #   in Loop: Header=BB11_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB11_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_170:                             # %if.end893
                                        #   in Loop: Header=BB11_164 Depth=1
	jmp	.LBB11_164
.LBB11_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB11_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB11_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_180
.LBB11_175:                             # %if.end911
                                        #   in Loop: Header=BB11_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_177:                             # %if.end917
                                        #   in Loop: Header=BB11_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB11_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_179:                             # %if.end944
                                        #   in Loop: Header=BB11_173 Depth=1
	jmp	.LBB11_173
.LBB11_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB11_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB11_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_189
.LBB11_184:                             # %if.end967
                                        #   in Loop: Header=BB11_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_186:                             # %if.end973
                                        #   in Loop: Header=BB11_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB11_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_188:                             # %if.end1000
                                        #   in Loop: Header=BB11_182 Depth=1
	jmp	.LBB11_182
.LBB11_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB11_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB11_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_198
.LBB11_193:                             # %if.end1023
                                        #   in Loop: Header=BB11_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_195:                             # %if.end1029
                                        #   in Loop: Header=BB11_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB11_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_197:                             # %if.end1056
                                        #   in Loop: Header=BB11_191 Depth=1
	jmp	.LBB11_191
.LBB11_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB11_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB11_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB11_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB11_218
# %bb.204:                              # %for.body
	jmp	.LBB11_205
.LBB11_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB11_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_213
.LBB11_208:                             # %if.end1094
                                        #   in Loop: Header=BB11_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_210:                             # %if.end1100
                                        #   in Loop: Header=BB11_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB11_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_212:                             # %if.end1127
                                        #   in Loop: Header=BB11_206 Depth=1
	jmp	.LBB11_206
.LBB11_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB11_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB11_216
.LBB11_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB11_216:                             # %if.end1137
	jmp	.LBB11_217
.LBB11_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_203
.LBB11_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB11_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB11_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB11_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB11_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_219
.LBB11_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB11_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB11_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB11_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB11_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB11_240
# %bb.227:                              # %for.body1160
	jmp	.LBB11_228
.LBB11_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB11_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_236
.LBB11_231:                             # %if.end1177
                                        #   in Loop: Header=BB11_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_233:                             # %if.end1183
                                        #   in Loop: Header=BB11_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB11_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_235:                             # %if.end1210
                                        #   in Loop: Header=BB11_229 Depth=1
	jmp	.LBB11_229
.LBB11_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB11_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB11_238:                             # %if.end1221
	jmp	.LBB11_239
.LBB11_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB11_226
.LBB11_240:                             # %for.end1224
	jmp	.LBB11_241
.LBB11_241:                             # %if.end1225
	jmp	.LBB11_242
.LBB11_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_223
.LBB11_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB11_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -132(%rbp)
.LBB11_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB11_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB11_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB11_254
.LBB11_249:                             # %if.end1250
                                        #   in Loop: Header=BB11_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_251:                             # %if.end1256
                                        #   in Loop: Header=BB11_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB11_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_253:                             # %if.end1283
                                        #   in Loop: Header=BB11_247 Depth=1
	jmp	.LBB11_247
.LBB11_254:                             # %while.end1284
	cmpl	$2, -104(%rbp)
	jl	.LBB11_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -104(%rbp)
	jle	.LBB11_257
.LBB11_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_257:                             # %if.end1291
	jmp	.LBB11_258
.LBB11_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB11_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB11_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB11_266
.LBB11_261:                             # %if.end1307
                                        #   in Loop: Header=BB11_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_263:                             # %if.end1313
                                        #   in Loop: Header=BB11_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB11_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_265:                             # %if.end1340
                                        #   in Loop: Header=BB11_259 Depth=1
	jmp	.LBB11_259
.LBB11_266:                             # %while.end1341
	cmpl	$1, -100(%rbp)
	jge	.LBB11_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB11_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB11_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB11_271:                             # %while.body1350
	jmp	.LBB11_272
.LBB11_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB11_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_280
.LBB11_275:                             # %if.end1368
                                        #   in Loop: Header=BB11_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_277:                             # %if.end1374
                                        #   in Loop: Header=BB11_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB11_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_279:                             # %if.end1401
                                        #   in Loop: Header=BB11_273 Depth=1
	jmp	.LBB11_273
.LBB11_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB11_282
# %bb.281:                              # %if.then1406
	jmp	.LBB11_285
.LBB11_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB11_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_284:                             # %if.end1412
	jmp	.LBB11_271
.LBB11_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_269
.LBB11_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB11_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB11_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB11_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB11_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB11_288
.LBB11_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB11_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB11_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB11_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB11_294:                             # %while.cond
                                        #   Parent Loop BB11_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB11_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB11_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB11_294
.LBB11_296:                             # %while.end1451
                                        #   in Loop: Header=BB11_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB11_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_292
.LBB11_298:                             # %for.end1457
	movl	$0, -48(%rbp)
.LBB11_299:                             # %for.cond1458
	movl	-48(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB11_343
# %bb.300:                              # %for.body1461
	jmp	.LBB11_301
.LBB11_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB11_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB11_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB11_309
.LBB11_304:                             # %if.end1478
                                        #   in Loop: Header=BB11_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_306:                             # %if.end1484
                                        #   in Loop: Header=BB11_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB11_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_308:                             # %if.end1511
                                        #   in Loop: Header=BB11_302 Depth=1
	jmp	.LBB11_302
.LBB11_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB11_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB11_341
# %bb.311:                              # %for.body1516
	jmp	.LBB11_312
.LBB11_312:                             # %while.body1518
	cmpl	$1, -88(%rbp)
	jl	.LBB11_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -88(%rbp)
	jle	.LBB11_315
.LBB11_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_315:                             # %if.end1525
	jmp	.LBB11_316
.LBB11_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB11_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_324
.LBB11_319:                             # %if.end1543
                                        #   in Loop: Header=BB11_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_321:                             # %if.end1549
                                        #   in Loop: Header=BB11_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB11_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_323:                             # %if.end1576
                                        #   in Loop: Header=BB11_317 Depth=1
	jmp	.LBB11_317
.LBB11_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB11_326
# %bb.325:                              # %if.then1581
	jmp	.LBB11_339
.LBB11_326:                             # %if.end1582
	jmp	.LBB11_327
.LBB11_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB11_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_335
.LBB11_330:                             # %if.end1600
                                        #   in Loop: Header=BB11_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_332:                             # %if.end1606
                                        #   in Loop: Header=BB11_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB11_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_334:                             # %if.end1633
                                        #   in Loop: Header=BB11_328 Depth=1
	jmp	.LBB11_328
.LBB11_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB11_337
# %bb.336:                              # %if.then1638
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB11_338
.LBB11_337:                             # %if.else1640
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
.LBB11_338:                             # %if.end1642
	jmp	.LBB11_312
.LBB11_339:                             # %while.end1643
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_310
.LBB11_341:                             # %for.end1651
	jmp	.LBB11_342
.LBB11_342:                             # %for.inc1652
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB11_299
.LBB11_343:                             # %for.end1654
	movl	$0, -48(%rbp)
.LBB11_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_346 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB11_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB11_344 Depth=1
	movl	$32, -148(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB11_346:                             # %for.cond1659
                                        #   Parent Loop BB11_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB11_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB11_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-180(%rbp), %eax
	jle	.LBB11_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB11_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -180(%rbp)
.LBB11_349:                             # %if.end1678
                                        #   in Loop: Header=BB11_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB11_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB11_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -148(%rbp)
.LBB11_351:                             # %if.end1694
                                        #   in Loop: Header=BB11_346 Depth=2
	jmp	.LBB11_352
.LBB11_352:                             # %for.inc1695
                                        #   in Loop: Header=BB11_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_346
.LBB11_353:                             # %for.end1697
                                        #   in Loop: Header=BB11_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-148(%rbp), %r8d
	movl	-180(%rbp), %r9d
	movl	-132(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-148(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB11_344 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB11_344
.LBB11_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -128(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB11_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB11_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB11_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB11_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_356
.LBB11_359:                             # %for.end1728
	movl	$4095, -156(%rbp)       # imm = 0xFFF
	movl	$15, -140(%rbp)
.LBB11_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_362 Depth 2
	cmpl	$0, -140(%rbp)
	jl	.LBB11_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB11_360 Depth=1
	movl	$15, -144(%rbp)
.LBB11_362:                             # %for.cond1733
                                        #   Parent Loop BB11_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -144(%rbp)
	jl	.LBB11_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB11_362 Depth=2
	movl	-140(%rbp), %eax
	shll	$4, %eax
	addl	-144(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-156(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB11_362 Depth=2
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB11_362
.LBB11_365:                             # %for.end1745
                                        #   in Loop: Header=BB11_360 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB11_360 Depth=1
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB11_360
.LBB11_367:                             # %for.end1751
	movl	$0, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB11_371
# %bb.368:                              # %if.then1754
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB11_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_370:                             # %if.end1759
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB11_371:                             # %if.end1779
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB11_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB11_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB11_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -332(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-332(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB11_380
.LBB11_375:                             # %if.end1799
                                        #   in Loop: Header=BB11_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_377:                             # %if.end1805
                                        #   in Loop: Header=BB11_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB11_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_379:                             # %if.end1832
                                        #   in Loop: Header=BB11_373 Depth=1
	jmp	.LBB11_373
.LBB11_380:                             # %while.end1833
	jmp	.LBB11_381
.LBB11_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB11_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB11_385
# %bb.384:                              # %if.then1844
	jmp	.LBB11_395
.LBB11_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB11_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB11_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB11_394
.LBB11_389:                             # %if.end1863
                                        #   in Loop: Header=BB11_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_391:                             # %if.end1869
                                        #   in Loop: Header=BB11_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB11_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_393:                             # %if.end1896
                                        #   in Loop: Header=BB11_387 Depth=1
	jmp	.LBB11_387
.LBB11_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB11_381
.LBB11_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB11_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB11_398
.LBB11_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_398:                             # %if.end1913
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB11_399:                             # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jne	.LBB11_401
# %bb.400:                              # %if.then1923
	jmp	.LBB11_520
.LBB11_401:                             # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB11_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB11_458
.LBB11_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB11_404:                             # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB11_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB11_409
.LBB11_406:                             # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB11_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB11_408:                             # %if.end1942
	jmp	.LBB11_409
.LBB11_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB11_413
# %bb.410:                              # %if.then1947
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB11_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_412:                             # %if.end1952
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB11_413:                             # %if.end1972
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB11_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB11_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB11_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -216(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-216(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB11_422
.LBB11_417:                             # %if.end1992
                                        #   in Loop: Header=BB11_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_419:                             # %if.end1998
                                        #   in Loop: Header=BB11_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB11_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_421:                             # %if.end2025
                                        #   in Loop: Header=BB11_415 Depth=1
	jmp	.LBB11_415
.LBB11_422:                             # %while.end2026
	jmp	.LBB11_423
.LBB11_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB11_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB11_427
# %bb.426:                              # %if.then2037
	jmp	.LBB11_437
.LBB11_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB11_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB11_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB11_436
.LBB11_431:                             # %if.end2056
                                        #   in Loop: Header=BB11_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_433:                             # %if.end2062
                                        #   in Loop: Header=BB11_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB11_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_435:                             # %if.end2089
                                        #   in Loop: Header=BB11_429 Depth=1
	jmp	.LBB11_429
.LBB11_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB11_423
.LBB11_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB11_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB11_440
.LBB11_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_440:                             # %if.end2106
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB11_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB11_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB11_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB11_451
# %bb.445:                              # %if.then2130
	jmp	.LBB11_446
.LBB11_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB11_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB11_446 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jl	.LBB11_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_449:                             # %if.end2138
                                        #   in Loop: Header=BB11_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB11_446
.LBB11_450:                             # %while.end2145
	jmp	.LBB11_457
.LBB11_451:                             # %if.else2146
	jmp	.LBB11_452
.LBB11_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB11_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB11_452 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jl	.LBB11_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_455:                             # %if.end2154
                                        #   in Loop: Header=BB11_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB11_452
.LBB11_456:                             # %while.end2161
	jmp	.LBB11_457
.LBB11_457:                             # %if.end2162
	jmp	.LBB11_399
.LBB11_458:                             # %if.else2163
	movl	-52(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jl	.LBB11_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_460:                             # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB11_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB11_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB11_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB11_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB11_462
.LBB11_464:                             # %while.end2218
	jmp	.LBB11_465
.LBB11_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB11_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB11_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB11_465
.LBB11_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB11_485
.LBB11_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB11_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB11_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB11_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB11_469
.LBB11_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB11_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -92(%rbp)
	jle	.LBB11_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB11_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-92(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB11_472
.LBB11_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB11_484
# %bb.475:                              # %if.then2302
	movl	$4095, -160(%rbp)       # imm = 0xFFF
	movl	$15, -136(%rbp)
.LBB11_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_478 Depth 2
	cmpl	$0, -136(%rbp)
	jl	.LBB11_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB11_476 Depth=1
	movl	$15, -152(%rbp)
.LBB11_478:                             # %for.cond2307
                                        #   Parent Loop BB11_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -152(%rbp)
	jl	.LBB11_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB11_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-152(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-160(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB11_478 Depth=2
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB11_478
.LBB11_481:                             # %for.end2324
                                        #   in Loop: Header=BB11_476 Depth=1
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB11_476 Depth=1
	movl	-136(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB11_476
.LBB11_483:                             # %for.end2331
	jmp	.LBB11_484
.LBB11_484:                             # %if.end2332
	jmp	.LBB11_485
.LBB11_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB11_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB11_488
.LBB11_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB11_488:                             # %if.end2359
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB11_492
# %bb.489:                              # %if.then2363
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB11_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_491:                             # %if.end2368
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB11_492:                             # %if.end2388
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB11_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB11_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB11_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -308(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-308(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB11_501
.LBB11_496:                             # %if.end2408
                                        #   in Loop: Header=BB11_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_498:                             # %if.end2414
                                        #   in Loop: Header=BB11_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB11_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_500:                             # %if.end2441
                                        #   in Loop: Header=BB11_494 Depth=1
	jmp	.LBB11_494
.LBB11_501:                             # %while.end2442
	jmp	.LBB11_502
.LBB11_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB11_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB11_506
# %bb.505:                              # %if.then2453
	jmp	.LBB11_516
.LBB11_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB11_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB11_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB11_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB11_515
.LBB11_510:                             # %if.end2472
                                        #   in Loop: Header=BB11_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_512:                             # %if.end2478
                                        #   in Loop: Header=BB11_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB11_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_514:                             # %if.end2505
                                        #   in Loop: Header=BB11_508 Depth=1
	jmp	.LBB11_508
.LBB11_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB11_502
.LBB11_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB11_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB11_519
.LBB11_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_519:                             # %if.end2522
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB11_399
.LBB11_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB11_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB11_523
.LBB11_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB11_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB11_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB11_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB11_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_524
.LBB11_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB11_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB11_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB11_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB11_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_528
.LBB11_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB11_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB11_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB11_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB11_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB11_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB11_536
.LBB11_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_536:                             # %if.end2584
                                        #   in Loop: Header=BB11_532 Depth=1
	jmp	.LBB11_537
.LBB11_537:                             # %for.inc2585
                                        #   in Loop: Header=BB11_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_532
.LBB11_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB11_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB11_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB11_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB11_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB11_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB11_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB11_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_542
.LBB11_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB11_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB11_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB11_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB11_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB11_550
.LBB11_549:                             # %if.else2646
                                        #   in Loop: Header=BB11_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB11_550:                             # %if.end2664
                                        #   in Loop: Header=BB11_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB11_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_546
.LBB11_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB11_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -352(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB11_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB11_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB11_556
.LBB11_555:                             # %if.else2727
                                        #   in Loop: Header=BB11_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB11_556:                             # %if.end2742
                                        #   in Loop: Header=BB11_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-352(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB11_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB11_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB11_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB11_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB11_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB11_562:                             # %if.end2791
	jmp	.LBB11_563
.LBB11_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB11_565
.LBB11_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB11_565:                             # %if.end2826
	jmp	.LBB11_578
.LBB11_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB11_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB11_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB11_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB11_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_567
.LBB11_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB11_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB11_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB11_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB11_574:                             # %if.end2893
	jmp	.LBB11_575
.LBB11_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB11_577
.LBB11_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB11_577:                             # %if.end2918
	jmp	.LBB11_578
.LBB11_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_579:                             # %endhdr_2
	jmp	.LBB11_580
.LBB11_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB11_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_588
.LBB11_583:                             # %if.end2937
                                        #   in Loop: Header=BB11_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_585:                             # %if.end2943
                                        #   in Loop: Header=BB11_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB11_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_587:                             # %if.end2970
                                        #   in Loop: Header=BB11_581 Depth=1
	jmp	.LBB11_581
.LBB11_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB11_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_590:                             # %if.end2976
	jmp	.LBB11_591
.LBB11_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB11_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_599
.LBB11_594:                             # %if.end2994
                                        #   in Loop: Header=BB11_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_596:                             # %if.end3000
                                        #   in Loop: Header=BB11_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB11_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_598:                             # %if.end3027
                                        #   in Loop: Header=BB11_592 Depth=1
	jmp	.LBB11_592
.LBB11_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB11_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_601:                             # %if.end3033
	jmp	.LBB11_602
.LBB11_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB11_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_610
.LBB11_605:                             # %if.end3051
                                        #   in Loop: Header=BB11_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_607:                             # %if.end3057
                                        #   in Loop: Header=BB11_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB11_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_609:                             # %if.end3084
                                        #   in Loop: Header=BB11_603 Depth=1
	jmp	.LBB11_603
.LBB11_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB11_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_612:                             # %if.end3090
	jmp	.LBB11_613
.LBB11_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB11_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_621
.LBB11_616:                             # %if.end3108
                                        #   in Loop: Header=BB11_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_618:                             # %if.end3114
                                        #   in Loop: Header=BB11_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB11_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_620:                             # %if.end3141
                                        #   in Loop: Header=BB11_614 Depth=1
	jmp	.LBB11_614
.LBB11_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB11_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_623:                             # %if.end3147
	jmp	.LBB11_624
.LBB11_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB11_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_632
.LBB11_627:                             # %if.end3165
                                        #   in Loop: Header=BB11_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_629:                             # %if.end3171
                                        #   in Loop: Header=BB11_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB11_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_631:                             # %if.end3198
                                        #   in Loop: Header=BB11_625 Depth=1
	jmp	.LBB11_625
.LBB11_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB11_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB11_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB11_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_643
.LBB11_638:                             # %if.end3222
                                        #   in Loop: Header=BB11_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_640:                             # %if.end3228
                                        #   in Loop: Header=BB11_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB11_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_642:                             # %if.end3255
                                        #   in Loop: Header=BB11_636 Depth=1
	jmp	.LBB11_636
.LBB11_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB11_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB11_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_652
.LBB11_647:                             # %if.end3279
                                        #   in Loop: Header=BB11_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_649:                             # %if.end3285
                                        #   in Loop: Header=BB11_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB11_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_651:                             # %if.end3312
                                        #   in Loop: Header=BB11_645 Depth=1
	jmp	.LBB11_645
.LBB11_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB11_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB11_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_661
.LBB11_656:                             # %if.end3336
                                        #   in Loop: Header=BB11_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_658:                             # %if.end3342
                                        #   in Loop: Header=BB11_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB11_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_660:                             # %if.end3369
                                        #   in Loop: Header=BB11_654 Depth=1
	jmp	.LBB11_654
.LBB11_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB11_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB11_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB11_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB11_670
.LBB11_665:                             # %if.end3393
                                        #   in Loop: Header=BB11_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB11_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB11_673
.LBB11_667:                             # %if.end3399
                                        #   in Loop: Header=BB11_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB11_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB11_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB11_669:                             # %if.end3426
                                        #   in Loop: Header=BB11_663 Depth=1
	jmp	.LBB11_663
.LBB11_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB11_673
.LBB11_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB11_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-184(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-264(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$172799230, -244(%rbp)  # imm = 0xA4CB4FE
	jne	.LBB11_675
.LBB11_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_674
.Lfunc_end11:
	.size	BZ2_decompress.10, .Lfunc_end11-BZ2_decompress.10
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI11_0:
	.quad	.LBB11_4
	.quad	.LBB11_15
	.quad	.LBB11_26
	.quad	.LBB11_37
	.quad	.LBB11_57
	.quad	.LBB11_70
	.quad	.LBB11_81
	.quad	.LBB11_92
	.quad	.LBB11_103
	.quad	.LBB11_114
	.quad	.LBB11_127
	.quad	.LBB11_136
	.quad	.LBB11_145
	.quad	.LBB11_154
	.quad	.LBB11_163
	.quad	.LBB11_172
	.quad	.LBB11_181
	.quad	.LBB11_190
	.quad	.LBB11_205
	.quad	.LBB11_228
	.quad	.LBB11_246
	.quad	.LBB11_258
	.quad	.LBB11_272
	.quad	.LBB11_301
	.quad	.LBB11_316
	.quad	.LBB11_327
	.quad	.LBB11_372
	.quad	.LBB11_386
	.quad	.LBB11_414
	.quad	.LBB11_428
	.quad	.LBB11_493
	.quad	.LBB11_507
	.quad	.LBB11_580
	.quad	.LBB11_591
	.quad	.LBB11_602
	.quad	.LBB11_613
	.quad	.LBB11_624
	.quad	.LBB11_635
	.quad	.LBB11_644
	.quad	.LBB11_653
	.quad	.LBB11_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.11       # -- Begin function BZ2_decompress.11
	.p2align	4, 0x90
	.type	BZ2_decompress.11,@function
BZ2_decompress.11:                      # @BZ2_decompress.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$169711554, -232(%rbp)  # imm = 0xA1D97C2
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB12_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB12_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB12_671
# %bb.3:                                # %if.end
	movq	.LJTI12_0(,%rax,8), %rax
	jmpq	*%rax
.LBB12_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB12_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_12
.LBB12_7:                               # %if.end33
                                        #   in Loop: Header=BB12_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_9:                               # %if.end38
                                        #   in Loop: Header=BB12_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB12_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_11:                              # %if.end56
                                        #   in Loop: Header=BB12_5 Depth=1
	jmp	.LBB12_5
.LBB12_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB12_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB12_673
.LBB12_14:                              # %if.end61
	jmp	.LBB12_15
.LBB12_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB12_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_23
.LBB12_18:                              # %if.end78
                                        #   in Loop: Header=BB12_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_20:                              # %if.end84
                                        #   in Loop: Header=BB12_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB12_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_22:                              # %if.end111
                                        #   in Loop: Header=BB12_16 Depth=1
	jmp	.LBB12_16
.LBB12_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB12_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB12_673
.LBB12_25:                              # %if.end117
	jmp	.LBB12_26
.LBB12_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB12_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_34
.LBB12_29:                              # %if.end134
                                        #   in Loop: Header=BB12_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_31:                              # %if.end140
                                        #   in Loop: Header=BB12_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB12_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_33:                              # %if.end167
                                        #   in Loop: Header=BB12_27 Depth=1
	jmp	.LBB12_27
.LBB12_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB12_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB12_673
.LBB12_36:                              # %if.end173
	jmp	.LBB12_37
.LBB12_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB12_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB12_45
.LBB12_40:                              # %if.end189
                                        #   in Loop: Header=BB12_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_42:                              # %if.end195
                                        #   in Loop: Header=BB12_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB12_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_44:                              # %if.end222
                                        #   in Loop: Header=BB12_38 Depth=1
	jmp	.LBB12_38
.LBB12_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB12_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB12_48
.LBB12_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB12_673
.LBB12_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB12_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB12_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB12_52
.LBB12_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB12_673
.LBB12_52:                              # %if.end257
	jmp	.LBB12_56
.LBB12_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB12_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB12_673
.LBB12_55:                              # %if.end270
	jmp	.LBB12_56
.LBB12_56:                              # %if.end271
	jmp	.LBB12_57
.LBB12_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB12_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_65
.LBB12_60:                              # %if.end288
                                        #   in Loop: Header=BB12_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_62:                              # %if.end294
                                        #   in Loop: Header=BB12_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB12_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_64:                              # %if.end321
                                        #   in Loop: Header=BB12_58 Depth=1
	jmp	.LBB12_58
.LBB12_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB12_67
# %bb.66:                               # %if.then326
	jmp	.LBB12_579
.LBB12_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB12_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_69:                              # %if.end332
	jmp	.LBB12_70
.LBB12_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB12_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_78
.LBB12_73:                              # %if.end349
                                        #   in Loop: Header=BB12_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_75:                              # %if.end355
                                        #   in Loop: Header=BB12_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB12_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_77:                              # %if.end382
                                        #   in Loop: Header=BB12_71 Depth=1
	jmp	.LBB12_71
.LBB12_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB12_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_80:                              # %if.end388
	jmp	.LBB12_81
.LBB12_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB12_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_89
.LBB12_84:                              # %if.end405
                                        #   in Loop: Header=BB12_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_86:                              # %if.end411
                                        #   in Loop: Header=BB12_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB12_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_88:                              # %if.end438
                                        #   in Loop: Header=BB12_82 Depth=1
	jmp	.LBB12_82
.LBB12_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB12_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_91:                              # %if.end444
	jmp	.LBB12_92
.LBB12_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB12_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_100
.LBB12_95:                              # %if.end461
                                        #   in Loop: Header=BB12_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_97:                              # %if.end467
                                        #   in Loop: Header=BB12_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB12_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_99:                              # %if.end494
                                        #   in Loop: Header=BB12_93 Depth=1
	jmp	.LBB12_93
.LBB12_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB12_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_102:                             # %if.end500
	jmp	.LBB12_103
.LBB12_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB12_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_111
.LBB12_106:                             # %if.end517
                                        #   in Loop: Header=BB12_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_108:                             # %if.end523
                                        #   in Loop: Header=BB12_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB12_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_110:                             # %if.end550
                                        #   in Loop: Header=BB12_104 Depth=1
	jmp	.LBB12_104
.LBB12_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB12_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_113:                             # %if.end556
	jmp	.LBB12_114
.LBB12_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB12_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_122
.LBB12_117:                             # %if.end573
                                        #   in Loop: Header=BB12_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_119:                             # %if.end579
                                        #   in Loop: Header=BB12_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB12_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_121:                             # %if.end606
                                        #   in Loop: Header=BB12_115 Depth=1
	jmp	.LBB12_115
.LBB12_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB12_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB12_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB12_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB12_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB12_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_135
.LBB12_130:                             # %if.end636
                                        #   in Loop: Header=BB12_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_132:                             # %if.end642
                                        #   in Loop: Header=BB12_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB12_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_134:                             # %if.end669
                                        #   in Loop: Header=BB12_128 Depth=1
	jmp	.LBB12_128
.LBB12_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB12_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB12_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_144
.LBB12_139:                             # %if.end692
                                        #   in Loop: Header=BB12_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_141:                             # %if.end698
                                        #   in Loop: Header=BB12_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB12_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_143:                             # %if.end725
                                        #   in Loop: Header=BB12_137 Depth=1
	jmp	.LBB12_137
.LBB12_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB12_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB12_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_153
.LBB12_148:                             # %if.end748
                                        #   in Loop: Header=BB12_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_150:                             # %if.end754
                                        #   in Loop: Header=BB12_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB12_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_152:                             # %if.end781
                                        #   in Loop: Header=BB12_146 Depth=1
	jmp	.LBB12_146
.LBB12_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB12_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB12_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_162
.LBB12_157:                             # %if.end804
                                        #   in Loop: Header=BB12_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_159:                             # %if.end810
                                        #   in Loop: Header=BB12_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB12_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_161:                             # %if.end837
                                        #   in Loop: Header=BB12_155 Depth=1
	jmp	.LBB12_155
.LBB12_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB12_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB12_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB12_171
.LBB12_166:                             # %if.end860
                                        #   in Loop: Header=BB12_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_168:                             # %if.end866
                                        #   in Loop: Header=BB12_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB12_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_170:                             # %if.end893
                                        #   in Loop: Header=BB12_164 Depth=1
	jmp	.LBB12_164
.LBB12_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB12_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB12_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_180
.LBB12_175:                             # %if.end911
                                        #   in Loop: Header=BB12_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_177:                             # %if.end917
                                        #   in Loop: Header=BB12_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB12_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_179:                             # %if.end944
                                        #   in Loop: Header=BB12_173 Depth=1
	jmp	.LBB12_173
.LBB12_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB12_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB12_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_189
.LBB12_184:                             # %if.end967
                                        #   in Loop: Header=BB12_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_186:                             # %if.end973
                                        #   in Loop: Header=BB12_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB12_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_188:                             # %if.end1000
                                        #   in Loop: Header=BB12_182 Depth=1
	jmp	.LBB12_182
.LBB12_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB12_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB12_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_198
.LBB12_193:                             # %if.end1023
                                        #   in Loop: Header=BB12_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_195:                             # %if.end1029
                                        #   in Loop: Header=BB12_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB12_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_197:                             # %if.end1056
                                        #   in Loop: Header=BB12_191 Depth=1
	jmp	.LBB12_191
.LBB12_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB12_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB12_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB12_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB12_218
# %bb.204:                              # %for.body
	jmp	.LBB12_205
.LBB12_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB12_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_213
.LBB12_208:                             # %if.end1094
                                        #   in Loop: Header=BB12_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_210:                             # %if.end1100
                                        #   in Loop: Header=BB12_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB12_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_212:                             # %if.end1127
                                        #   in Loop: Header=BB12_206 Depth=1
	jmp	.LBB12_206
.LBB12_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB12_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB12_216
.LBB12_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB12_216:                             # %if.end1137
	jmp	.LBB12_217
.LBB12_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_203
.LBB12_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB12_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB12_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB12_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB12_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_219
.LBB12_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB12_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB12_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB12_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB12_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB12_240
# %bb.227:                              # %for.body1160
	jmp	.LBB12_228
.LBB12_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB12_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_236
.LBB12_231:                             # %if.end1177
                                        #   in Loop: Header=BB12_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_233:                             # %if.end1183
                                        #   in Loop: Header=BB12_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB12_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_235:                             # %if.end1210
                                        #   in Loop: Header=BB12_229 Depth=1
	jmp	.LBB12_229
.LBB12_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB12_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB12_238:                             # %if.end1221
	jmp	.LBB12_239
.LBB12_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB12_226
.LBB12_240:                             # %for.end1224
	jmp	.LBB12_241
.LBB12_241:                             # %if.end1225
	jmp	.LBB12_242
.LBB12_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_223
.LBB12_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB12_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB12_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB12_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB12_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB12_254
.LBB12_249:                             # %if.end1250
                                        #   in Loop: Header=BB12_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_251:                             # %if.end1256
                                        #   in Loop: Header=BB12_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB12_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_253:                             # %if.end1283
                                        #   in Loop: Header=BB12_247 Depth=1
	jmp	.LBB12_247
.LBB12_254:                             # %while.end1284
	cmpl	$2, -100(%rbp)
	jl	.LBB12_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -100(%rbp)
	jle	.LBB12_257
.LBB12_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_257:                             # %if.end1291
	jmp	.LBB12_258
.LBB12_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB12_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB12_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB12_266
.LBB12_261:                             # %if.end1307
                                        #   in Loop: Header=BB12_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_263:                             # %if.end1313
                                        #   in Loop: Header=BB12_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB12_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_265:                             # %if.end1340
                                        #   in Loop: Header=BB12_259 Depth=1
	jmp	.LBB12_259
.LBB12_266:                             # %while.end1341
	cmpl	$1, -96(%rbp)
	jge	.LBB12_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB12_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB12_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB12_271:                             # %while.body1350
	jmp	.LBB12_272
.LBB12_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB12_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_280
.LBB12_275:                             # %if.end1368
                                        #   in Loop: Header=BB12_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_277:                             # %if.end1374
                                        #   in Loop: Header=BB12_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB12_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_279:                             # %if.end1401
                                        #   in Loop: Header=BB12_273 Depth=1
	jmp	.LBB12_273
.LBB12_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB12_282
# %bb.281:                              # %if.then1406
	jmp	.LBB12_285
.LBB12_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB12_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_284:                             # %if.end1412
	jmp	.LBB12_271
.LBB12_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_269
.LBB12_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB12_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB12_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB12_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB12_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB12_288
.LBB12_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB12_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB12_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB12_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB12_294:                             # %while.cond
                                        #   Parent Loop BB12_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB12_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB12_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB12_294
.LBB12_296:                             # %while.end1451
                                        #   in Loop: Header=BB12_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB12_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_292
.LBB12_298:                             # %for.end1457
	movl	$0, -48(%rbp)
.LBB12_299:                             # %for.cond1458
	movl	-48(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB12_343
# %bb.300:                              # %for.body1461
	jmp	.LBB12_301
.LBB12_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB12_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB12_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB12_309
.LBB12_304:                             # %if.end1478
                                        #   in Loop: Header=BB12_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_306:                             # %if.end1484
                                        #   in Loop: Header=BB12_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB12_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_308:                             # %if.end1511
                                        #   in Loop: Header=BB12_302 Depth=1
	jmp	.LBB12_302
.LBB12_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB12_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB12_341
# %bb.311:                              # %for.body1516
	jmp	.LBB12_312
.LBB12_312:                             # %while.body1518
	cmpl	$1, -88(%rbp)
	jl	.LBB12_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -88(%rbp)
	jle	.LBB12_315
.LBB12_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_315:                             # %if.end1525
	jmp	.LBB12_316
.LBB12_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB12_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_324
.LBB12_319:                             # %if.end1543
                                        #   in Loop: Header=BB12_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_321:                             # %if.end1549
                                        #   in Loop: Header=BB12_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB12_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_323:                             # %if.end1576
                                        #   in Loop: Header=BB12_317 Depth=1
	jmp	.LBB12_317
.LBB12_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB12_326
# %bb.325:                              # %if.then1581
	jmp	.LBB12_339
.LBB12_326:                             # %if.end1582
	jmp	.LBB12_327
.LBB12_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB12_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_335
.LBB12_330:                             # %if.end1600
                                        #   in Loop: Header=BB12_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_332:                             # %if.end1606
                                        #   in Loop: Header=BB12_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB12_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_334:                             # %if.end1633
                                        #   in Loop: Header=BB12_328 Depth=1
	jmp	.LBB12_328
.LBB12_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB12_337
# %bb.336:                              # %if.then1638
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB12_338
.LBB12_337:                             # %if.else1640
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
.LBB12_338:                             # %if.end1642
	jmp	.LBB12_312
.LBB12_339:                             # %while.end1643
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_310
.LBB12_341:                             # %for.end1651
	jmp	.LBB12_342
.LBB12_342:                             # %for.inc1652
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB12_299
.LBB12_343:                             # %for.end1654
	movl	$0, -48(%rbp)
.LBB12_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_346 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB12_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB12_344 Depth=1
	movl	$32, -160(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB12_346:                             # %for.cond1659
                                        #   Parent Loop BB12_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB12_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB12_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB12_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB12_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB12_349:                             # %if.end1678
                                        #   in Loop: Header=BB12_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB12_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB12_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
.LBB12_351:                             # %if.end1694
                                        #   in Loop: Header=BB12_346 Depth=2
	jmp	.LBB12_352
.LBB12_352:                             # %for.inc1695
                                        #   in Loop: Header=BB12_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_346
.LBB12_353:                             # %for.end1697
                                        #   in Loop: Header=BB12_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-160(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-160(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB12_344 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB12_344
.LBB12_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -140(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
.LBB12_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB12_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB12_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB12_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_356
.LBB12_359:                             # %for.end1728
	movl	$4095, -152(%rbp)       # imm = 0xFFF
	movl	$15, -136(%rbp)
.LBB12_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_362 Depth 2
	cmpl	$0, -136(%rbp)
	jl	.LBB12_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB12_360 Depth=1
	movl	$15, -156(%rbp)
.LBB12_362:                             # %for.cond1733
                                        #   Parent Loop BB12_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -156(%rbp)
	jl	.LBB12_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB12_362 Depth=2
	movl	-136(%rbp), %eax
	shll	$4, %eax
	addl	-156(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-152(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB12_362 Depth=2
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB12_362
.LBB12_365:                             # %for.end1745
                                        #   in Loop: Header=BB12_360 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB12_360 Depth=1
	movl	-136(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB12_360
.LBB12_367:                             # %for.end1751
	movl	$0, -52(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB12_371
# %bb.368:                              # %if.then1754
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB12_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_370:                             # %if.end1759
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB12_371:                             # %if.end1779
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB12_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB12_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB12_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-348(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_380
.LBB12_375:                             # %if.end1799
                                        #   in Loop: Header=BB12_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_377:                             # %if.end1805
                                        #   in Loop: Header=BB12_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB12_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_379:                             # %if.end1832
                                        #   in Loop: Header=BB12_373 Depth=1
	jmp	.LBB12_373
.LBB12_380:                             # %while.end1833
	jmp	.LBB12_381
.LBB12_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB12_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB12_385
# %bb.384:                              # %if.then1844
	jmp	.LBB12_395
.LBB12_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB12_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB12_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB12_394
.LBB12_389:                             # %if.end1863
                                        #   in Loop: Header=BB12_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_391:                             # %if.end1869
                                        #   in Loop: Header=BB12_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB12_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_393:                             # %if.end1896
                                        #   in Loop: Header=BB12_387 Depth=1
	jmp	.LBB12_387
.LBB12_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_381
.LBB12_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB12_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB12_398
.LBB12_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_398:                             # %if.end1913
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB12_399:                             # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB12_401
# %bb.400:                              # %if.then1923
	jmp	.LBB12_520
.LBB12_401:                             # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB12_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB12_458
.LBB12_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB12_404:                             # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB12_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB12_409
.LBB12_406:                             # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB12_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB12_408:                             # %if.end1942
	jmp	.LBB12_409
.LBB12_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB12_413
# %bb.410:                              # %if.then1947
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB12_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_412:                             # %if.end1952
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB12_413:                             # %if.end1972
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB12_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB12_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB12_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -264(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-264(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_422
.LBB12_417:                             # %if.end1992
                                        #   in Loop: Header=BB12_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_419:                             # %if.end1998
                                        #   in Loop: Header=BB12_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB12_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_421:                             # %if.end2025
                                        #   in Loop: Header=BB12_415 Depth=1
	jmp	.LBB12_415
.LBB12_422:                             # %while.end2026
	jmp	.LBB12_423
.LBB12_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB12_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB12_427
# %bb.426:                              # %if.then2037
	jmp	.LBB12_437
.LBB12_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB12_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB12_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB12_436
.LBB12_431:                             # %if.end2056
                                        #   in Loop: Header=BB12_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_433:                             # %if.end2062
                                        #   in Loop: Header=BB12_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB12_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_435:                             # %if.end2089
                                        #   in Loop: Header=BB12_429 Depth=1
	jmp	.LBB12_429
.LBB12_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_423
.LBB12_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB12_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB12_440
.LBB12_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_440:                             # %if.end2106
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB12_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB12_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB12_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB12_451
# %bb.445:                              # %if.then2130
	jmp	.LBB12_446
.LBB12_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB12_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB12_446 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB12_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_449:                             # %if.end2138
                                        #   in Loop: Header=BB12_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB12_446
.LBB12_450:                             # %while.end2145
	jmp	.LBB12_457
.LBB12_451:                             # %if.else2146
	jmp	.LBB12_452
.LBB12_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB12_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB12_452 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB12_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_455:                             # %if.end2154
                                        #   in Loop: Header=BB12_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB12_452
.LBB12_456:                             # %while.end2161
	jmp	.LBB12_457
.LBB12_457:                             # %if.end2162
	jmp	.LBB12_399
.LBB12_458:                             # %if.else2163
	movl	-52(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB12_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_460:                             # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB12_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB12_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB12_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB12_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB12_462
.LBB12_464:                             # %while.end2218
	jmp	.LBB12_465
.LBB12_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB12_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB12_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB12_465
.LBB12_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB12_485
.LBB12_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB12_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB12_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB12_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB12_469
.LBB12_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB12_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -92(%rbp)
	jle	.LBB12_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB12_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-92(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB12_472
.LBB12_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB12_484
# %bb.475:                              # %if.then2302
	movl	$4095, -144(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB12_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_478 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB12_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB12_476 Depth=1
	movl	$15, -148(%rbp)
.LBB12_478:                             # %for.cond2307
                                        #   Parent Loop BB12_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB12_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB12_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-144(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB12_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB12_478
.LBB12_481:                             # %for.end2324
                                        #   in Loop: Header=BB12_476 Depth=1
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB12_476 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB12_476
.LBB12_483:                             # %for.end2331
	jmp	.LBB12_484
.LBB12_484:                             # %if.end2332
	jmp	.LBB12_485
.LBB12_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB12_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB12_488
.LBB12_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB12_488:                             # %if.end2359
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB12_492
# %bb.489:                              # %if.then2363
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB12_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_491:                             # %if.end2368
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB12_492:                             # %if.end2388
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB12_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB12_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB12_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -220(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-220(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_501
.LBB12_496:                             # %if.end2408
                                        #   in Loop: Header=BB12_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_498:                             # %if.end2414
                                        #   in Loop: Header=BB12_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB12_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_500:                             # %if.end2441
                                        #   in Loop: Header=BB12_494 Depth=1
	jmp	.LBB12_494
.LBB12_501:                             # %while.end2442
	jmp	.LBB12_502
.LBB12_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB12_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB12_506
# %bb.505:                              # %if.then2453
	jmp	.LBB12_516
.LBB12_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB12_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB12_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB12_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB12_515
.LBB12_510:                             # %if.end2472
                                        #   in Loop: Header=BB12_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_512:                             # %if.end2478
                                        #   in Loop: Header=BB12_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB12_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_514:                             # %if.end2505
                                        #   in Loop: Header=BB12_508 Depth=1
	jmp	.LBB12_508
.LBB12_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_502
.LBB12_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB12_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB12_519
.LBB12_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_519:                             # %if.end2522
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB12_399
.LBB12_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB12_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB12_523
.LBB12_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB12_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB12_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB12_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB12_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_524
.LBB12_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB12_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB12_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB12_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB12_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_528
.LBB12_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB12_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB12_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB12_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB12_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB12_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB12_536
.LBB12_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_536:                             # %if.end2584
                                        #   in Loop: Header=BB12_532 Depth=1
	jmp	.LBB12_537
.LBB12_537:                             # %for.inc2585
                                        #   in Loop: Header=BB12_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_532
.LBB12_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB12_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB12_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB12_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB12_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB12_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB12_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB12_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_542
.LBB12_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB12_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB12_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB12_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB12_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB12_550
.LBB12_549:                             # %if.else2646
                                        #   in Loop: Header=BB12_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB12_550:                             # %if.end2664
                                        #   in Loop: Header=BB12_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB12_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_546
.LBB12_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB12_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -300(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB12_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB12_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB12_556
.LBB12_555:                             # %if.else2727
                                        #   in Loop: Header=BB12_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB12_556:                             # %if.end2742
                                        #   in Loop: Header=BB12_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-300(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB12_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB12_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB12_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB12_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB12_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB12_562:                             # %if.end2791
	jmp	.LBB12_563
.LBB12_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB12_565
.LBB12_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB12_565:                             # %if.end2826
	jmp	.LBB12_578
.LBB12_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB12_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB12_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB12_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB12_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_567
.LBB12_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB12_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB12_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB12_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB12_574:                             # %if.end2893
	jmp	.LBB12_575
.LBB12_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB12_577
.LBB12_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB12_577:                             # %if.end2918
	jmp	.LBB12_578
.LBB12_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_579:                             # %endhdr_2
	jmp	.LBB12_580
.LBB12_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB12_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_588
.LBB12_583:                             # %if.end2937
                                        #   in Loop: Header=BB12_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_585:                             # %if.end2943
                                        #   in Loop: Header=BB12_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB12_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_587:                             # %if.end2970
                                        #   in Loop: Header=BB12_581 Depth=1
	jmp	.LBB12_581
.LBB12_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB12_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_590:                             # %if.end2976
	jmp	.LBB12_591
.LBB12_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB12_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_599
.LBB12_594:                             # %if.end2994
                                        #   in Loop: Header=BB12_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_596:                             # %if.end3000
                                        #   in Loop: Header=BB12_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB12_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_598:                             # %if.end3027
                                        #   in Loop: Header=BB12_592 Depth=1
	jmp	.LBB12_592
.LBB12_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB12_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_601:                             # %if.end3033
	jmp	.LBB12_602
.LBB12_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB12_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_610
.LBB12_605:                             # %if.end3051
                                        #   in Loop: Header=BB12_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_607:                             # %if.end3057
                                        #   in Loop: Header=BB12_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB12_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_609:                             # %if.end3084
                                        #   in Loop: Header=BB12_603 Depth=1
	jmp	.LBB12_603
.LBB12_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB12_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_612:                             # %if.end3090
	jmp	.LBB12_613
.LBB12_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB12_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_621
.LBB12_616:                             # %if.end3108
                                        #   in Loop: Header=BB12_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_618:                             # %if.end3114
                                        #   in Loop: Header=BB12_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB12_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_620:                             # %if.end3141
                                        #   in Loop: Header=BB12_614 Depth=1
	jmp	.LBB12_614
.LBB12_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB12_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_623:                             # %if.end3147
	jmp	.LBB12_624
.LBB12_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB12_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_632
.LBB12_627:                             # %if.end3165
                                        #   in Loop: Header=BB12_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_629:                             # %if.end3171
                                        #   in Loop: Header=BB12_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB12_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_631:                             # %if.end3198
                                        #   in Loop: Header=BB12_625 Depth=1
	jmp	.LBB12_625
.LBB12_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB12_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB12_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB12_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_643
.LBB12_638:                             # %if.end3222
                                        #   in Loop: Header=BB12_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_640:                             # %if.end3228
                                        #   in Loop: Header=BB12_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB12_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_642:                             # %if.end3255
                                        #   in Loop: Header=BB12_636 Depth=1
	jmp	.LBB12_636
.LBB12_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB12_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB12_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_652
.LBB12_647:                             # %if.end3279
                                        #   in Loop: Header=BB12_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_649:                             # %if.end3285
                                        #   in Loop: Header=BB12_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB12_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_651:                             # %if.end3312
                                        #   in Loop: Header=BB12_645 Depth=1
	jmp	.LBB12_645
.LBB12_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB12_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB12_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_661
.LBB12_656:                             # %if.end3336
                                        #   in Loop: Header=BB12_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_658:                             # %if.end3342
                                        #   in Loop: Header=BB12_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB12_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_660:                             # %if.end3369
                                        #   in Loop: Header=BB12_654 Depth=1
	jmp	.LBB12_654
.LBB12_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB12_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB12_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB12_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB12_670
.LBB12_665:                             # %if.end3393
                                        #   in Loop: Header=BB12_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB12_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB12_673
.LBB12_667:                             # %if.end3399
                                        #   in Loop: Header=BB12_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB12_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB12_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB12_669:                             # %if.end3426
                                        #   in Loop: Header=BB12_663 Depth=1
	jmp	.LBB12_663
.LBB12_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB12_673
.LBB12_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB12_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-140(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-336(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$169711554, -232(%rbp)  # imm = 0xA1D97C2
	jne	.LBB12_675
.LBB12_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_674
.Lfunc_end12:
	.size	BZ2_decompress.11, .Lfunc_end12-BZ2_decompress.11
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI12_0:
	.quad	.LBB12_4
	.quad	.LBB12_15
	.quad	.LBB12_26
	.quad	.LBB12_37
	.quad	.LBB12_57
	.quad	.LBB12_70
	.quad	.LBB12_81
	.quad	.LBB12_92
	.quad	.LBB12_103
	.quad	.LBB12_114
	.quad	.LBB12_127
	.quad	.LBB12_136
	.quad	.LBB12_145
	.quad	.LBB12_154
	.quad	.LBB12_163
	.quad	.LBB12_172
	.quad	.LBB12_181
	.quad	.LBB12_190
	.quad	.LBB12_205
	.quad	.LBB12_228
	.quad	.LBB12_246
	.quad	.LBB12_258
	.quad	.LBB12_272
	.quad	.LBB12_301
	.quad	.LBB12_316
	.quad	.LBB12_327
	.quad	.LBB12_372
	.quad	.LBB12_386
	.quad	.LBB12_414
	.quad	.LBB12_428
	.quad	.LBB12_493
	.quad	.LBB12_507
	.quad	.LBB12_580
	.quad	.LBB12_591
	.quad	.LBB12_602
	.quad	.LBB12_613
	.quad	.LBB12_624
	.quad	.LBB12_635
	.quad	.LBB12_644
	.quad	.LBB12_653
	.quad	.LBB12_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.12       # -- Begin function BZ2_decompress.12
	.p2align	4, 0x90
	.type	BZ2_decompress.12,@function
BZ2_decompress.12:                      # @BZ2_decompress.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$1908366254, -320(%rbp) # imm = 0x71BF5BAE
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB13_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB13_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB13_671
# %bb.3:                                # %if.end
	movq	.LJTI13_0(,%rax,8), %rax
	jmpq	*%rax
.LBB13_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB13_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_12
.LBB13_7:                               # %if.end33
                                        #   in Loop: Header=BB13_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_9:                               # %if.end38
                                        #   in Loop: Header=BB13_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB13_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_11:                              # %if.end56
                                        #   in Loop: Header=BB13_5 Depth=1
	jmp	.LBB13_5
.LBB13_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB13_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB13_673
.LBB13_14:                              # %if.end61
	jmp	.LBB13_15
.LBB13_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB13_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_23
.LBB13_18:                              # %if.end78
                                        #   in Loop: Header=BB13_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_20:                              # %if.end84
                                        #   in Loop: Header=BB13_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB13_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_22:                              # %if.end111
                                        #   in Loop: Header=BB13_16 Depth=1
	jmp	.LBB13_16
.LBB13_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB13_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB13_673
.LBB13_25:                              # %if.end117
	jmp	.LBB13_26
.LBB13_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB13_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_34
.LBB13_29:                              # %if.end134
                                        #   in Loop: Header=BB13_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_31:                              # %if.end140
                                        #   in Loop: Header=BB13_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB13_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_33:                              # %if.end167
                                        #   in Loop: Header=BB13_27 Depth=1
	jmp	.LBB13_27
.LBB13_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB13_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB13_673
.LBB13_36:                              # %if.end173
	jmp	.LBB13_37
.LBB13_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB13_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB13_45
.LBB13_40:                              # %if.end189
                                        #   in Loop: Header=BB13_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_42:                              # %if.end195
                                        #   in Loop: Header=BB13_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB13_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_44:                              # %if.end222
                                        #   in Loop: Header=BB13_38 Depth=1
	jmp	.LBB13_38
.LBB13_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB13_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB13_48
.LBB13_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB13_673
.LBB13_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB13_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB13_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB13_52
.LBB13_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB13_673
.LBB13_52:                              # %if.end257
	jmp	.LBB13_56
.LBB13_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB13_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB13_673
.LBB13_55:                              # %if.end270
	jmp	.LBB13_56
.LBB13_56:                              # %if.end271
	jmp	.LBB13_57
.LBB13_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB13_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_65
.LBB13_60:                              # %if.end288
                                        #   in Loop: Header=BB13_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_62:                              # %if.end294
                                        #   in Loop: Header=BB13_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB13_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_64:                              # %if.end321
                                        #   in Loop: Header=BB13_58 Depth=1
	jmp	.LBB13_58
.LBB13_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB13_67
# %bb.66:                               # %if.then326
	jmp	.LBB13_579
.LBB13_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB13_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_69:                              # %if.end332
	jmp	.LBB13_70
.LBB13_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB13_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_78
.LBB13_73:                              # %if.end349
                                        #   in Loop: Header=BB13_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_75:                              # %if.end355
                                        #   in Loop: Header=BB13_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB13_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_77:                              # %if.end382
                                        #   in Loop: Header=BB13_71 Depth=1
	jmp	.LBB13_71
.LBB13_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB13_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_80:                              # %if.end388
	jmp	.LBB13_81
.LBB13_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB13_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_89
.LBB13_84:                              # %if.end405
                                        #   in Loop: Header=BB13_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_86:                              # %if.end411
                                        #   in Loop: Header=BB13_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB13_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_88:                              # %if.end438
                                        #   in Loop: Header=BB13_82 Depth=1
	jmp	.LBB13_82
.LBB13_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB13_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_91:                              # %if.end444
	jmp	.LBB13_92
.LBB13_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB13_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_100
.LBB13_95:                              # %if.end461
                                        #   in Loop: Header=BB13_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_97:                              # %if.end467
                                        #   in Loop: Header=BB13_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB13_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_99:                              # %if.end494
                                        #   in Loop: Header=BB13_93 Depth=1
	jmp	.LBB13_93
.LBB13_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB13_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_102:                             # %if.end500
	jmp	.LBB13_103
.LBB13_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB13_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_111
.LBB13_106:                             # %if.end517
                                        #   in Loop: Header=BB13_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_108:                             # %if.end523
                                        #   in Loop: Header=BB13_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB13_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_110:                             # %if.end550
                                        #   in Loop: Header=BB13_104 Depth=1
	jmp	.LBB13_104
.LBB13_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB13_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_113:                             # %if.end556
	jmp	.LBB13_114
.LBB13_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB13_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_122
.LBB13_117:                             # %if.end573
                                        #   in Loop: Header=BB13_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_119:                             # %if.end579
                                        #   in Loop: Header=BB13_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB13_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_121:                             # %if.end606
                                        #   in Loop: Header=BB13_115 Depth=1
	jmp	.LBB13_115
.LBB13_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB13_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB13_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB13_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB13_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB13_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_135
.LBB13_130:                             # %if.end636
                                        #   in Loop: Header=BB13_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_132:                             # %if.end642
                                        #   in Loop: Header=BB13_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB13_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_134:                             # %if.end669
                                        #   in Loop: Header=BB13_128 Depth=1
	jmp	.LBB13_128
.LBB13_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB13_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB13_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_144
.LBB13_139:                             # %if.end692
                                        #   in Loop: Header=BB13_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_141:                             # %if.end698
                                        #   in Loop: Header=BB13_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB13_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_143:                             # %if.end725
                                        #   in Loop: Header=BB13_137 Depth=1
	jmp	.LBB13_137
.LBB13_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB13_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB13_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_153
.LBB13_148:                             # %if.end748
                                        #   in Loop: Header=BB13_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_150:                             # %if.end754
                                        #   in Loop: Header=BB13_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB13_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_152:                             # %if.end781
                                        #   in Loop: Header=BB13_146 Depth=1
	jmp	.LBB13_146
.LBB13_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB13_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB13_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_162
.LBB13_157:                             # %if.end804
                                        #   in Loop: Header=BB13_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_159:                             # %if.end810
                                        #   in Loop: Header=BB13_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB13_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_161:                             # %if.end837
                                        #   in Loop: Header=BB13_155 Depth=1
	jmp	.LBB13_155
.LBB13_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB13_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB13_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB13_171
.LBB13_166:                             # %if.end860
                                        #   in Loop: Header=BB13_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_168:                             # %if.end866
                                        #   in Loop: Header=BB13_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB13_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_170:                             # %if.end893
                                        #   in Loop: Header=BB13_164 Depth=1
	jmp	.LBB13_164
.LBB13_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB13_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB13_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_180
.LBB13_175:                             # %if.end911
                                        #   in Loop: Header=BB13_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_177:                             # %if.end917
                                        #   in Loop: Header=BB13_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB13_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_179:                             # %if.end944
                                        #   in Loop: Header=BB13_173 Depth=1
	jmp	.LBB13_173
.LBB13_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB13_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB13_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_189
.LBB13_184:                             # %if.end967
                                        #   in Loop: Header=BB13_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_186:                             # %if.end973
                                        #   in Loop: Header=BB13_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB13_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_188:                             # %if.end1000
                                        #   in Loop: Header=BB13_182 Depth=1
	jmp	.LBB13_182
.LBB13_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB13_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB13_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_198
.LBB13_193:                             # %if.end1023
                                        #   in Loop: Header=BB13_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_195:                             # %if.end1029
                                        #   in Loop: Header=BB13_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB13_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_197:                             # %if.end1056
                                        #   in Loop: Header=BB13_191 Depth=1
	jmp	.LBB13_191
.LBB13_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB13_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB13_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB13_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB13_218
# %bb.204:                              # %for.body
	jmp	.LBB13_205
.LBB13_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB13_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_213
.LBB13_208:                             # %if.end1094
                                        #   in Loop: Header=BB13_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_210:                             # %if.end1100
                                        #   in Loop: Header=BB13_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB13_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_212:                             # %if.end1127
                                        #   in Loop: Header=BB13_206 Depth=1
	jmp	.LBB13_206
.LBB13_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB13_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB13_216
.LBB13_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB13_216:                             # %if.end1137
	jmp	.LBB13_217
.LBB13_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_203
.LBB13_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB13_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB13_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB13_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB13_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_219
.LBB13_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB13_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB13_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB13_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB13_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB13_240
# %bb.227:                              # %for.body1160
	jmp	.LBB13_228
.LBB13_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB13_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_236
.LBB13_231:                             # %if.end1177
                                        #   in Loop: Header=BB13_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_233:                             # %if.end1183
                                        #   in Loop: Header=BB13_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB13_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_235:                             # %if.end1210
                                        #   in Loop: Header=BB13_229 Depth=1
	jmp	.LBB13_229
.LBB13_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB13_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB13_238:                             # %if.end1221
	jmp	.LBB13_239
.LBB13_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB13_226
.LBB13_240:                             # %for.end1224
	jmp	.LBB13_241
.LBB13_241:                             # %if.end1225
	jmp	.LBB13_242
.LBB13_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_223
.LBB13_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB13_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -136(%rbp)
.LBB13_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB13_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB13_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB13_254
.LBB13_249:                             # %if.end1250
                                        #   in Loop: Header=BB13_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_251:                             # %if.end1256
                                        #   in Loop: Header=BB13_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB13_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_253:                             # %if.end1283
                                        #   in Loop: Header=BB13_247 Depth=1
	jmp	.LBB13_247
.LBB13_254:                             # %while.end1284
	cmpl	$2, -100(%rbp)
	jl	.LBB13_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -100(%rbp)
	jle	.LBB13_257
.LBB13_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_257:                             # %if.end1291
	jmp	.LBB13_258
.LBB13_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB13_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB13_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB13_266
.LBB13_261:                             # %if.end1307
                                        #   in Loop: Header=BB13_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_263:                             # %if.end1313
                                        #   in Loop: Header=BB13_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB13_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_265:                             # %if.end1340
                                        #   in Loop: Header=BB13_259 Depth=1
	jmp	.LBB13_259
.LBB13_266:                             # %while.end1341
	cmpl	$1, -104(%rbp)
	jge	.LBB13_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB13_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB13_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB13_271:                             # %while.body1350
	jmp	.LBB13_272
.LBB13_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB13_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_280
.LBB13_275:                             # %if.end1368
                                        #   in Loop: Header=BB13_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_277:                             # %if.end1374
                                        #   in Loop: Header=BB13_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB13_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_279:                             # %if.end1401
                                        #   in Loop: Header=BB13_273 Depth=1
	jmp	.LBB13_273
.LBB13_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB13_282
# %bb.281:                              # %if.then1406
	jmp	.LBB13_285
.LBB13_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB13_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_284:                             # %if.end1412
	jmp	.LBB13_271
.LBB13_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_269
.LBB13_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB13_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB13_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB13_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB13_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB13_288
.LBB13_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB13_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB13_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB13_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB13_294:                             # %while.cond
                                        #   Parent Loop BB13_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB13_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB13_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB13_294
.LBB13_296:                             # %while.end1451
                                        #   in Loop: Header=BB13_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB13_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_292
.LBB13_298:                             # %for.end1457
	movl	$0, -52(%rbp)
.LBB13_299:                             # %for.cond1458
	movl	-52(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB13_343
# %bb.300:                              # %for.body1461
	jmp	.LBB13_301
.LBB13_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB13_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB13_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB13_309
.LBB13_304:                             # %if.end1478
                                        #   in Loop: Header=BB13_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_306:                             # %if.end1484
                                        #   in Loop: Header=BB13_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB13_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_308:                             # %if.end1511
                                        #   in Loop: Header=BB13_302 Depth=1
	jmp	.LBB13_302
.LBB13_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB13_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB13_341
# %bb.311:                              # %for.body1516
	jmp	.LBB13_312
.LBB13_312:                             # %while.body1518
	cmpl	$1, -88(%rbp)
	jl	.LBB13_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -88(%rbp)
	jle	.LBB13_315
.LBB13_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_315:                             # %if.end1525
	jmp	.LBB13_316
.LBB13_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB13_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_324
.LBB13_319:                             # %if.end1543
                                        #   in Loop: Header=BB13_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_321:                             # %if.end1549
                                        #   in Loop: Header=BB13_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB13_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_323:                             # %if.end1576
                                        #   in Loop: Header=BB13_317 Depth=1
	jmp	.LBB13_317
.LBB13_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB13_326
# %bb.325:                              # %if.then1581
	jmp	.LBB13_339
.LBB13_326:                             # %if.end1582
	jmp	.LBB13_327
.LBB13_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB13_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_335
.LBB13_330:                             # %if.end1600
                                        #   in Loop: Header=BB13_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_332:                             # %if.end1606
                                        #   in Loop: Header=BB13_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB13_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_334:                             # %if.end1633
                                        #   in Loop: Header=BB13_328 Depth=1
	jmp	.LBB13_328
.LBB13_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB13_337
# %bb.336:                              # %if.then1638
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB13_338
.LBB13_337:                             # %if.else1640
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
.LBB13_338:                             # %if.end1642
	jmp	.LBB13_312
.LBB13_339:                             # %while.end1643
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_310
.LBB13_341:                             # %for.end1651
	jmp	.LBB13_342
.LBB13_342:                             # %for.inc1652
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB13_299
.LBB13_343:                             # %for.end1654
	movl	$0, -52(%rbp)
.LBB13_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_346 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB13_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB13_344 Depth=1
	movl	$32, -160(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB13_346:                             # %for.cond1659
                                        #   Parent Loop BB13_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB13_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB13_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB13_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB13_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB13_349:                             # %if.end1678
                                        #   in Loop: Header=BB13_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB13_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB13_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
.LBB13_351:                             # %if.end1694
                                        #   in Loop: Header=BB13_346 Depth=2
	jmp	.LBB13_352
.LBB13_352:                             # %for.inc1695
                                        #   in Loop: Header=BB13_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_346
.LBB13_353:                             # %for.end1697
                                        #   in Loop: Header=BB13_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-160(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-136(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-160(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB13_344 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB13_344
.LBB13_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -140(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB13_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB13_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB13_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB13_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_356
.LBB13_359:                             # %for.end1728
	movl	$4095, -152(%rbp)       # imm = 0xFFF
	movl	$15, -128(%rbp)
.LBB13_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_362 Depth 2
	cmpl	$0, -128(%rbp)
	jl	.LBB13_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB13_360 Depth=1
	movl	$15, -156(%rbp)
.LBB13_362:                             # %for.cond1733
                                        #   Parent Loop BB13_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -156(%rbp)
	jl	.LBB13_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB13_362 Depth=2
	movl	-128(%rbp), %eax
	shll	$4, %eax
	addl	-156(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-152(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB13_362 Depth=2
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB13_362
.LBB13_365:                             # %for.end1745
                                        #   in Loop: Header=BB13_360 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB13_360 Depth=1
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB13_360
.LBB13_367:                             # %for.end1751
	movl	$0, -48(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB13_371
# %bb.368:                              # %if.then1754
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB13_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_370:                             # %if.end1759
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB13_371:                             # %if.end1779
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB13_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB13_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB13_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -360(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-360(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_380
.LBB13_375:                             # %if.end1799
                                        #   in Loop: Header=BB13_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_377:                             # %if.end1805
                                        #   in Loop: Header=BB13_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB13_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_379:                             # %if.end1832
                                        #   in Loop: Header=BB13_373 Depth=1
	jmp	.LBB13_373
.LBB13_380:                             # %while.end1833
	jmp	.LBB13_381
.LBB13_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB13_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB13_385
# %bb.384:                              # %if.then1844
	jmp	.LBB13_395
.LBB13_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB13_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB13_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB13_394
.LBB13_389:                             # %if.end1863
                                        #   in Loop: Header=BB13_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_391:                             # %if.end1869
                                        #   in Loop: Header=BB13_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB13_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_393:                             # %if.end1896
                                        #   in Loop: Header=BB13_387 Depth=1
	jmp	.LBB13_387
.LBB13_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_381
.LBB13_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB13_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB13_398
.LBB13_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_398:                             # %if.end1913
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB13_399:                             # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB13_401
# %bb.400:                              # %if.then1923
	jmp	.LBB13_520
.LBB13_401:                             # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB13_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB13_458
.LBB13_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB13_404:                             # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB13_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB13_409
.LBB13_406:                             # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB13_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB13_408:                             # %if.end1942
	jmp	.LBB13_409
.LBB13_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB13_413
# %bb.410:                              # %if.then1947
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB13_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_412:                             # %if.end1952
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB13_413:                             # %if.end1972
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB13_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB13_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB13_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -300(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-300(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_422
.LBB13_417:                             # %if.end1992
                                        #   in Loop: Header=BB13_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_419:                             # %if.end1998
                                        #   in Loop: Header=BB13_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB13_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_421:                             # %if.end2025
                                        #   in Loop: Header=BB13_415 Depth=1
	jmp	.LBB13_415
.LBB13_422:                             # %while.end2026
	jmp	.LBB13_423
.LBB13_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB13_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB13_427
# %bb.426:                              # %if.then2037
	jmp	.LBB13_437
.LBB13_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB13_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB13_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB13_436
.LBB13_431:                             # %if.end2056
                                        #   in Loop: Header=BB13_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_433:                             # %if.end2062
                                        #   in Loop: Header=BB13_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB13_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_435:                             # %if.end2089
                                        #   in Loop: Header=BB13_429 Depth=1
	jmp	.LBB13_429
.LBB13_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_423
.LBB13_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB13_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB13_440
.LBB13_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_440:                             # %if.end2106
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB13_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB13_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB13_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB13_451
# %bb.445:                              # %if.then2130
	jmp	.LBB13_446
.LBB13_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB13_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB13_446 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB13_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_449:                             # %if.end2138
                                        #   in Loop: Header=BB13_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB13_446
.LBB13_450:                             # %while.end2145
	jmp	.LBB13_457
.LBB13_451:                             # %if.else2146
	jmp	.LBB13_452
.LBB13_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB13_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB13_452 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB13_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_455:                             # %if.end2154
                                        #   in Loop: Header=BB13_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB13_452
.LBB13_456:                             # %while.end2161
	jmp	.LBB13_457
.LBB13_457:                             # %if.end2162
	jmp	.LBB13_399
.LBB13_458:                             # %if.else2163
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB13_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_460:                             # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB13_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB13_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB13_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB13_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB13_462
.LBB13_464:                             # %while.end2218
	jmp	.LBB13_465
.LBB13_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB13_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB13_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB13_465
.LBB13_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB13_485
.LBB13_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-284(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB13_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB13_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB13_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB13_469
.LBB13_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB13_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -92(%rbp)
	jle	.LBB13_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB13_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-92(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB13_472
.LBB13_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB13_484
# %bb.475:                              # %if.then2302
	movl	$4095, -144(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB13_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_478 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB13_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB13_476 Depth=1
	movl	$15, -148(%rbp)
.LBB13_478:                             # %for.cond2307
                                        #   Parent Loop BB13_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB13_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB13_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-144(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB13_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB13_478
.LBB13_481:                             # %for.end2324
                                        #   in Loop: Header=BB13_476 Depth=1
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB13_476 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB13_476
.LBB13_483:                             # %for.end2331
	jmp	.LBB13_484
.LBB13_484:                             # %if.end2332
	jmp	.LBB13_485
.LBB13_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB13_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB13_488
.LBB13_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB13_488:                             # %if.end2359
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB13_492
# %bb.489:                              # %if.then2363
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB13_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_491:                             # %if.end2368
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB13_492:                             # %if.end2388
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB13_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB13_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB13_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -268(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-268(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_501
.LBB13_496:                             # %if.end2408
                                        #   in Loop: Header=BB13_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_498:                             # %if.end2414
                                        #   in Loop: Header=BB13_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB13_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_500:                             # %if.end2441
                                        #   in Loop: Header=BB13_494 Depth=1
	jmp	.LBB13_494
.LBB13_501:                             # %while.end2442
	jmp	.LBB13_502
.LBB13_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB13_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB13_506
# %bb.505:                              # %if.then2453
	jmp	.LBB13_516
.LBB13_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB13_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB13_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB13_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB13_515
.LBB13_510:                             # %if.end2472
                                        #   in Loop: Header=BB13_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_512:                             # %if.end2478
                                        #   in Loop: Header=BB13_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB13_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_514:                             # %if.end2505
                                        #   in Loop: Header=BB13_508 Depth=1
	jmp	.LBB13_508
.LBB13_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_502
.LBB13_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB13_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB13_519
.LBB13_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_519:                             # %if.end2522
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB13_399
.LBB13_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB13_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB13_523
.LBB13_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB13_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB13_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB13_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB13_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_524
.LBB13_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB13_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB13_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB13_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB13_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_528
.LBB13_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB13_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB13_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB13_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB13_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB13_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB13_536
.LBB13_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_536:                             # %if.end2584
                                        #   in Loop: Header=BB13_532 Depth=1
	jmp	.LBB13_537
.LBB13_537:                             # %for.inc2585
                                        #   in Loop: Header=BB13_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_532
.LBB13_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB13_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB13_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB13_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB13_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB13_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB13_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB13_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_542
.LBB13_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB13_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB13_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB13_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB13_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB13_550
.LBB13_549:                             # %if.else2646
                                        #   in Loop: Header=BB13_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB13_550:                             # %if.end2664
                                        #   in Loop: Header=BB13_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB13_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_546
.LBB13_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB13_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -356(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB13_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB13_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB13_556
.LBB13_555:                             # %if.else2727
                                        #   in Loop: Header=BB13_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB13_556:                             # %if.end2742
                                        #   in Loop: Header=BB13_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-356(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB13_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB13_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB13_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB13_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB13_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB13_562:                             # %if.end2791
	jmp	.LBB13_563
.LBB13_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB13_565
.LBB13_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB13_565:                             # %if.end2826
	jmp	.LBB13_578
.LBB13_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB13_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB13_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB13_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB13_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_567
.LBB13_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB13_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB13_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB13_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB13_574:                             # %if.end2893
	jmp	.LBB13_575
.LBB13_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB13_577
.LBB13_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB13_577:                             # %if.end2918
	jmp	.LBB13_578
.LBB13_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_579:                             # %endhdr_2
	jmp	.LBB13_580
.LBB13_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB13_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_588
.LBB13_583:                             # %if.end2937
                                        #   in Loop: Header=BB13_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_585:                             # %if.end2943
                                        #   in Loop: Header=BB13_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB13_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_587:                             # %if.end2970
                                        #   in Loop: Header=BB13_581 Depth=1
	jmp	.LBB13_581
.LBB13_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB13_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_590:                             # %if.end2976
	jmp	.LBB13_591
.LBB13_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB13_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_599
.LBB13_594:                             # %if.end2994
                                        #   in Loop: Header=BB13_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_596:                             # %if.end3000
                                        #   in Loop: Header=BB13_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB13_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_598:                             # %if.end3027
                                        #   in Loop: Header=BB13_592 Depth=1
	jmp	.LBB13_592
.LBB13_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB13_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_601:                             # %if.end3033
	jmp	.LBB13_602
.LBB13_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB13_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_610
.LBB13_605:                             # %if.end3051
                                        #   in Loop: Header=BB13_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_607:                             # %if.end3057
                                        #   in Loop: Header=BB13_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB13_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_609:                             # %if.end3084
                                        #   in Loop: Header=BB13_603 Depth=1
	jmp	.LBB13_603
.LBB13_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB13_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_612:                             # %if.end3090
	jmp	.LBB13_613
.LBB13_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB13_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_621
.LBB13_616:                             # %if.end3108
                                        #   in Loop: Header=BB13_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_618:                             # %if.end3114
                                        #   in Loop: Header=BB13_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB13_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_620:                             # %if.end3141
                                        #   in Loop: Header=BB13_614 Depth=1
	jmp	.LBB13_614
.LBB13_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB13_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_623:                             # %if.end3147
	jmp	.LBB13_624
.LBB13_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB13_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_632
.LBB13_627:                             # %if.end3165
                                        #   in Loop: Header=BB13_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_629:                             # %if.end3171
                                        #   in Loop: Header=BB13_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB13_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_631:                             # %if.end3198
                                        #   in Loop: Header=BB13_625 Depth=1
	jmp	.LBB13_625
.LBB13_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB13_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB13_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB13_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_643
.LBB13_638:                             # %if.end3222
                                        #   in Loop: Header=BB13_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_640:                             # %if.end3228
                                        #   in Loop: Header=BB13_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB13_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_642:                             # %if.end3255
                                        #   in Loop: Header=BB13_636 Depth=1
	jmp	.LBB13_636
.LBB13_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB13_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB13_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_652
.LBB13_647:                             # %if.end3279
                                        #   in Loop: Header=BB13_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_649:                             # %if.end3285
                                        #   in Loop: Header=BB13_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB13_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_651:                             # %if.end3312
                                        #   in Loop: Header=BB13_645 Depth=1
	jmp	.LBB13_645
.LBB13_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB13_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB13_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_661
.LBB13_656:                             # %if.end3336
                                        #   in Loop: Header=BB13_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_658:                             # %if.end3342
                                        #   in Loop: Header=BB13_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB13_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_660:                             # %if.end3369
                                        #   in Loop: Header=BB13_654 Depth=1
	jmp	.LBB13_654
.LBB13_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB13_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB13_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB13_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB13_670
.LBB13_665:                             # %if.end3393
                                        #   in Loop: Header=BB13_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB13_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB13_673
.LBB13_667:                             # %if.end3399
                                        #   in Loop: Header=BB13_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB13_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB13_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB13_669:                             # %if.end3426
                                        #   in Loop: Header=BB13_663 Depth=1
	jmp	.LBB13_663
.LBB13_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB13_673
.LBB13_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB13_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-136(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-140(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-304(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$1908366254, -320(%rbp) # imm = 0x71BF5BAE
	jne	.LBB13_675
.LBB13_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_674
.Lfunc_end13:
	.size	BZ2_decompress.12, .Lfunc_end13-BZ2_decompress.12
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI13_0:
	.quad	.LBB13_4
	.quad	.LBB13_15
	.quad	.LBB13_26
	.quad	.LBB13_37
	.quad	.LBB13_57
	.quad	.LBB13_70
	.quad	.LBB13_81
	.quad	.LBB13_92
	.quad	.LBB13_103
	.quad	.LBB13_114
	.quad	.LBB13_127
	.quad	.LBB13_136
	.quad	.LBB13_145
	.quad	.LBB13_154
	.quad	.LBB13_163
	.quad	.LBB13_172
	.quad	.LBB13_181
	.quad	.LBB13_190
	.quad	.LBB13_205
	.quad	.LBB13_228
	.quad	.LBB13_246
	.quad	.LBB13_258
	.quad	.LBB13_272
	.quad	.LBB13_301
	.quad	.LBB13_316
	.quad	.LBB13_327
	.quad	.LBB13_372
	.quad	.LBB13_386
	.quad	.LBB13_414
	.quad	.LBB13_428
	.quad	.LBB13_493
	.quad	.LBB13_507
	.quad	.LBB13_580
	.quad	.LBB13_591
	.quad	.LBB13_602
	.quad	.LBB13_613
	.quad	.LBB13_624
	.quad	.LBB13_635
	.quad	.LBB13_644
	.quad	.LBB13_653
	.quad	.LBB13_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.13       # -- Begin function BZ2_decompress.13
	.p2align	4, 0x90
	.type	BZ2_decompress.13,@function
BZ2_decompress.13:                      # @BZ2_decompress.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$1388929475, -252(%rbp) # imm = 0x52C961C3
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB14_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB14_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB14_671
# %bb.3:                                # %if.end
	movq	.LJTI14_0(,%rax,8), %rax
	jmpq	*%rax
.LBB14_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB14_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_12
.LBB14_7:                               # %if.end33
                                        #   in Loop: Header=BB14_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_9:                               # %if.end38
                                        #   in Loop: Header=BB14_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB14_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_11:                              # %if.end56
                                        #   in Loop: Header=BB14_5 Depth=1
	jmp	.LBB14_5
.LBB14_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB14_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB14_673
.LBB14_14:                              # %if.end61
	jmp	.LBB14_15
.LBB14_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB14_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_23
.LBB14_18:                              # %if.end78
                                        #   in Loop: Header=BB14_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_20:                              # %if.end84
                                        #   in Loop: Header=BB14_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB14_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_22:                              # %if.end111
                                        #   in Loop: Header=BB14_16 Depth=1
	jmp	.LBB14_16
.LBB14_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB14_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB14_673
.LBB14_25:                              # %if.end117
	jmp	.LBB14_26
.LBB14_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB14_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_34
.LBB14_29:                              # %if.end134
                                        #   in Loop: Header=BB14_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_31:                              # %if.end140
                                        #   in Loop: Header=BB14_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB14_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_33:                              # %if.end167
                                        #   in Loop: Header=BB14_27 Depth=1
	jmp	.LBB14_27
.LBB14_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB14_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB14_673
.LBB14_36:                              # %if.end173
	jmp	.LBB14_37
.LBB14_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB14_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB14_45
.LBB14_40:                              # %if.end189
                                        #   in Loop: Header=BB14_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_42:                              # %if.end195
                                        #   in Loop: Header=BB14_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB14_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_44:                              # %if.end222
                                        #   in Loop: Header=BB14_38 Depth=1
	jmp	.LBB14_38
.LBB14_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB14_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB14_48
.LBB14_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB14_673
.LBB14_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB14_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB14_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB14_52
.LBB14_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB14_673
.LBB14_52:                              # %if.end257
	jmp	.LBB14_56
.LBB14_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB14_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB14_673
.LBB14_55:                              # %if.end270
	jmp	.LBB14_56
.LBB14_56:                              # %if.end271
	jmp	.LBB14_57
.LBB14_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB14_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_65
.LBB14_60:                              # %if.end288
                                        #   in Loop: Header=BB14_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_62:                              # %if.end294
                                        #   in Loop: Header=BB14_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB14_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_64:                              # %if.end321
                                        #   in Loop: Header=BB14_58 Depth=1
	jmp	.LBB14_58
.LBB14_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB14_67
# %bb.66:                               # %if.then326
	jmp	.LBB14_579
.LBB14_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB14_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_69:                              # %if.end332
	jmp	.LBB14_70
.LBB14_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB14_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_78
.LBB14_73:                              # %if.end349
                                        #   in Loop: Header=BB14_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_75:                              # %if.end355
                                        #   in Loop: Header=BB14_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB14_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_77:                              # %if.end382
                                        #   in Loop: Header=BB14_71 Depth=1
	jmp	.LBB14_71
.LBB14_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB14_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_80:                              # %if.end388
	jmp	.LBB14_81
.LBB14_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB14_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_89
.LBB14_84:                              # %if.end405
                                        #   in Loop: Header=BB14_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_86:                              # %if.end411
                                        #   in Loop: Header=BB14_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB14_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_88:                              # %if.end438
                                        #   in Loop: Header=BB14_82 Depth=1
	jmp	.LBB14_82
.LBB14_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB14_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_91:                              # %if.end444
	jmp	.LBB14_92
.LBB14_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB14_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_100
.LBB14_95:                              # %if.end461
                                        #   in Loop: Header=BB14_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_97:                              # %if.end467
                                        #   in Loop: Header=BB14_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB14_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_99:                              # %if.end494
                                        #   in Loop: Header=BB14_93 Depth=1
	jmp	.LBB14_93
.LBB14_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB14_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_102:                             # %if.end500
	jmp	.LBB14_103
.LBB14_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB14_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_111
.LBB14_106:                             # %if.end517
                                        #   in Loop: Header=BB14_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_108:                             # %if.end523
                                        #   in Loop: Header=BB14_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB14_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_110:                             # %if.end550
                                        #   in Loop: Header=BB14_104 Depth=1
	jmp	.LBB14_104
.LBB14_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB14_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_113:                             # %if.end556
	jmp	.LBB14_114
.LBB14_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB14_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_122
.LBB14_117:                             # %if.end573
                                        #   in Loop: Header=BB14_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_119:                             # %if.end579
                                        #   in Loop: Header=BB14_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB14_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_121:                             # %if.end606
                                        #   in Loop: Header=BB14_115 Depth=1
	jmp	.LBB14_115
.LBB14_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB14_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB14_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB14_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB14_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB14_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_135
.LBB14_130:                             # %if.end636
                                        #   in Loop: Header=BB14_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_132:                             # %if.end642
                                        #   in Loop: Header=BB14_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB14_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_134:                             # %if.end669
                                        #   in Loop: Header=BB14_128 Depth=1
	jmp	.LBB14_128
.LBB14_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB14_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB14_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_144
.LBB14_139:                             # %if.end692
                                        #   in Loop: Header=BB14_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_141:                             # %if.end698
                                        #   in Loop: Header=BB14_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB14_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_143:                             # %if.end725
                                        #   in Loop: Header=BB14_137 Depth=1
	jmp	.LBB14_137
.LBB14_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB14_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB14_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_153
.LBB14_148:                             # %if.end748
                                        #   in Loop: Header=BB14_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_150:                             # %if.end754
                                        #   in Loop: Header=BB14_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB14_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_152:                             # %if.end781
                                        #   in Loop: Header=BB14_146 Depth=1
	jmp	.LBB14_146
.LBB14_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB14_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB14_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_162
.LBB14_157:                             # %if.end804
                                        #   in Loop: Header=BB14_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_159:                             # %if.end810
                                        #   in Loop: Header=BB14_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB14_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_161:                             # %if.end837
                                        #   in Loop: Header=BB14_155 Depth=1
	jmp	.LBB14_155
.LBB14_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB14_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB14_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB14_171
.LBB14_166:                             # %if.end860
                                        #   in Loop: Header=BB14_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_168:                             # %if.end866
                                        #   in Loop: Header=BB14_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB14_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_170:                             # %if.end893
                                        #   in Loop: Header=BB14_164 Depth=1
	jmp	.LBB14_164
.LBB14_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB14_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB14_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_180
.LBB14_175:                             # %if.end911
                                        #   in Loop: Header=BB14_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_177:                             # %if.end917
                                        #   in Loop: Header=BB14_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB14_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_179:                             # %if.end944
                                        #   in Loop: Header=BB14_173 Depth=1
	jmp	.LBB14_173
.LBB14_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB14_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB14_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_189
.LBB14_184:                             # %if.end967
                                        #   in Loop: Header=BB14_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_186:                             # %if.end973
                                        #   in Loop: Header=BB14_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB14_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_188:                             # %if.end1000
                                        #   in Loop: Header=BB14_182 Depth=1
	jmp	.LBB14_182
.LBB14_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB14_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB14_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_198
.LBB14_193:                             # %if.end1023
                                        #   in Loop: Header=BB14_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_195:                             # %if.end1029
                                        #   in Loop: Header=BB14_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB14_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_197:                             # %if.end1056
                                        #   in Loop: Header=BB14_191 Depth=1
	jmp	.LBB14_191
.LBB14_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB14_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB14_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB14_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB14_218
# %bb.204:                              # %for.body
	jmp	.LBB14_205
.LBB14_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB14_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_213
.LBB14_208:                             # %if.end1094
                                        #   in Loop: Header=BB14_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_210:                             # %if.end1100
                                        #   in Loop: Header=BB14_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB14_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_212:                             # %if.end1127
                                        #   in Loop: Header=BB14_206 Depth=1
	jmp	.LBB14_206
.LBB14_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB14_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB14_216
.LBB14_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB14_216:                             # %if.end1137
	jmp	.LBB14_217
.LBB14_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_203
.LBB14_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB14_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB14_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB14_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB14_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_219
.LBB14_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB14_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB14_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB14_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB14_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB14_240
# %bb.227:                              # %for.body1160
	jmp	.LBB14_228
.LBB14_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB14_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_236
.LBB14_231:                             # %if.end1177
                                        #   in Loop: Header=BB14_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_233:                             # %if.end1183
                                        #   in Loop: Header=BB14_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB14_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_235:                             # %if.end1210
                                        #   in Loop: Header=BB14_229 Depth=1
	jmp	.LBB14_229
.LBB14_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB14_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB14_238:                             # %if.end1221
	jmp	.LBB14_239
.LBB14_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB14_226
.LBB14_240:                             # %for.end1224
	jmp	.LBB14_241
.LBB14_241:                             # %if.end1225
	jmp	.LBB14_242
.LBB14_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_223
.LBB14_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB14_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB14_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB14_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB14_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB14_254
.LBB14_249:                             # %if.end1250
                                        #   in Loop: Header=BB14_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_251:                             # %if.end1256
                                        #   in Loop: Header=BB14_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB14_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_253:                             # %if.end1283
                                        #   in Loop: Header=BB14_247 Depth=1
	jmp	.LBB14_247
.LBB14_254:                             # %while.end1284
	cmpl	$2, -100(%rbp)
	jl	.LBB14_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -100(%rbp)
	jle	.LBB14_257
.LBB14_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_257:                             # %if.end1291
	jmp	.LBB14_258
.LBB14_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB14_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB14_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB14_266
.LBB14_261:                             # %if.end1307
                                        #   in Loop: Header=BB14_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_263:                             # %if.end1313
                                        #   in Loop: Header=BB14_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB14_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_265:                             # %if.end1340
                                        #   in Loop: Header=BB14_259 Depth=1
	jmp	.LBB14_259
.LBB14_266:                             # %while.end1341
	cmpl	$1, -96(%rbp)
	jge	.LBB14_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB14_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB14_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB14_271:                             # %while.body1350
	jmp	.LBB14_272
.LBB14_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB14_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_280
.LBB14_275:                             # %if.end1368
                                        #   in Loop: Header=BB14_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_277:                             # %if.end1374
                                        #   in Loop: Header=BB14_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB14_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_279:                             # %if.end1401
                                        #   in Loop: Header=BB14_273 Depth=1
	jmp	.LBB14_273
.LBB14_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB14_282
# %bb.281:                              # %if.then1406
	jmp	.LBB14_285
.LBB14_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB14_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_284:                             # %if.end1412
	jmp	.LBB14_271
.LBB14_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_269
.LBB14_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB14_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB14_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB14_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB14_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB14_288
.LBB14_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB14_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB14_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB14_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB14_294:                             # %while.cond
                                        #   Parent Loop BB14_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB14_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB14_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB14_294
.LBB14_296:                             # %while.end1451
                                        #   in Loop: Header=BB14_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB14_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_292
.LBB14_298:                             # %for.end1457
	movl	$0, -52(%rbp)
.LBB14_299:                             # %for.cond1458
	movl	-52(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB14_343
# %bb.300:                              # %for.body1461
	jmp	.LBB14_301
.LBB14_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB14_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB14_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB14_309
.LBB14_304:                             # %if.end1478
                                        #   in Loop: Header=BB14_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_306:                             # %if.end1484
                                        #   in Loop: Header=BB14_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB14_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_308:                             # %if.end1511
                                        #   in Loop: Header=BB14_302 Depth=1
	jmp	.LBB14_302
.LBB14_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB14_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB14_341
# %bb.311:                              # %for.body1516
	jmp	.LBB14_312
.LBB14_312:                             # %while.body1518
	cmpl	$1, -88(%rbp)
	jl	.LBB14_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -88(%rbp)
	jle	.LBB14_315
.LBB14_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_315:                             # %if.end1525
	jmp	.LBB14_316
.LBB14_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB14_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_324
.LBB14_319:                             # %if.end1543
                                        #   in Loop: Header=BB14_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_321:                             # %if.end1549
                                        #   in Loop: Header=BB14_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB14_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_323:                             # %if.end1576
                                        #   in Loop: Header=BB14_317 Depth=1
	jmp	.LBB14_317
.LBB14_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB14_326
# %bb.325:                              # %if.then1581
	jmp	.LBB14_339
.LBB14_326:                             # %if.end1582
	jmp	.LBB14_327
.LBB14_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB14_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_335
.LBB14_330:                             # %if.end1600
                                        #   in Loop: Header=BB14_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_332:                             # %if.end1606
                                        #   in Loop: Header=BB14_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB14_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_334:                             # %if.end1633
                                        #   in Loop: Header=BB14_328 Depth=1
	jmp	.LBB14_328
.LBB14_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB14_337
# %bb.336:                              # %if.then1638
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB14_338
.LBB14_337:                             # %if.else1640
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
.LBB14_338:                             # %if.end1642
	jmp	.LBB14_312
.LBB14_339:                             # %while.end1643
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_310
.LBB14_341:                             # %for.end1651
	jmp	.LBB14_342
.LBB14_342:                             # %for.inc1652
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB14_299
.LBB14_343:                             # %for.end1654
	movl	$0, -52(%rbp)
.LBB14_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_346 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB14_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB14_344 Depth=1
	movl	$32, -160(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB14_346:                             # %for.cond1659
                                        #   Parent Loop BB14_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB14_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB14_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB14_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB14_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB14_349:                             # %if.end1678
                                        #   in Loop: Header=BB14_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB14_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB14_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -160(%rbp)
.LBB14_351:                             # %if.end1694
                                        #   in Loop: Header=BB14_346 Depth=2
	jmp	.LBB14_352
.LBB14_352:                             # %for.inc1695
                                        #   in Loop: Header=BB14_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_346
.LBB14_353:                             # %for.end1697
                                        #   in Loop: Header=BB14_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-160(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-160(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB14_344 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB14_344
.LBB14_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -140(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
.LBB14_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB14_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB14_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB14_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_356
.LBB14_359:                             # %for.end1728
	movl	$4095, -144(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB14_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_362 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB14_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB14_360 Depth=1
	movl	$15, -152(%rbp)
.LBB14_362:                             # %for.cond1733
                                        #   Parent Loop BB14_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -152(%rbp)
	jl	.LBB14_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB14_362 Depth=2
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-152(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-144(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB14_362 Depth=2
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB14_362
.LBB14_365:                             # %for.end1745
                                        #   in Loop: Header=BB14_360 Depth=1
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB14_360 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB14_360
.LBB14_367:                             # %for.end1751
	movl	$0, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB14_371
# %bb.368:                              # %if.then1754
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB14_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_370:                             # %if.end1759
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB14_371:                             # %if.end1779
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB14_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB14_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB14_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-208(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_380
.LBB14_375:                             # %if.end1799
                                        #   in Loop: Header=BB14_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_377:                             # %if.end1805
                                        #   in Loop: Header=BB14_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB14_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_379:                             # %if.end1832
                                        #   in Loop: Header=BB14_373 Depth=1
	jmp	.LBB14_373
.LBB14_380:                             # %while.end1833
	jmp	.LBB14_381
.LBB14_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB14_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB14_385
# %bb.384:                              # %if.then1844
	jmp	.LBB14_395
.LBB14_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB14_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB14_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB14_394
.LBB14_389:                             # %if.end1863
                                        #   in Loop: Header=BB14_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_391:                             # %if.end1869
                                        #   in Loop: Header=BB14_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB14_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_393:                             # %if.end1896
                                        #   in Loop: Header=BB14_387 Depth=1
	jmp	.LBB14_387
.LBB14_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_381
.LBB14_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB14_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB14_398
.LBB14_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_398:                             # %if.end1913
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
.LBB14_399:                             # %while.body1920
	movl	-80(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB14_401
# %bb.400:                              # %if.then1923
	jmp	.LBB14_520
.LBB14_401:                             # %if.end1924
	cmpl	$0, -80(%rbp)
	je	.LBB14_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -80(%rbp)
	jne	.LBB14_458
.LBB14_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB14_404:                             # %do.body
	cmpl	$0, -80(%rbp)
	jne	.LBB14_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB14_409
.LBB14_406:                             # %if.else1936
	cmpl	$1, -80(%rbp)
	jne	.LBB14_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB14_408:                             # %if.end1942
	jmp	.LBB14_409
.LBB14_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB14_413
# %bb.410:                              # %if.then1947
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB14_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_412:                             # %if.end1952
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB14_413:                             # %if.end1972
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB14_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB14_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB14_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -368(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-368(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_422
.LBB14_417:                             # %if.end1992
                                        #   in Loop: Header=BB14_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_419:                             # %if.end1998
                                        #   in Loop: Header=BB14_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB14_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_421:                             # %if.end2025
                                        #   in Loop: Header=BB14_415 Depth=1
	jmp	.LBB14_415
.LBB14_422:                             # %while.end2026
	jmp	.LBB14_423
.LBB14_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB14_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB14_427
# %bb.426:                              # %if.then2037
	jmp	.LBB14_437
.LBB14_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB14_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB14_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB14_436
.LBB14_431:                             # %if.end2056
                                        #   in Loop: Header=BB14_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_433:                             # %if.end2062
                                        #   in Loop: Header=BB14_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB14_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_435:                             # %if.end2089
                                        #   in Loop: Header=BB14_429 Depth=1
	jmp	.LBB14_429
.LBB14_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_423
.LBB14_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB14_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB14_440
.LBB14_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_440:                             # %if.end2106
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB14_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -80(%rbp)
	sete	%al
.LBB14_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB14_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB14_451
# %bb.445:                              # %if.then2130
	jmp	.LBB14_446
.LBB14_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB14_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB14_446 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB14_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_449:                             # %if.end2138
                                        #   in Loop: Header=BB14_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB14_446
.LBB14_450:                             # %while.end2145
	jmp	.LBB14_457
.LBB14_451:                             # %if.else2146
	jmp	.LBB14_452
.LBB14_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB14_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB14_452 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB14_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_455:                             # %if.end2154
                                        #   in Loop: Header=BB14_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB14_452
.LBB14_456:                             # %while.end2161
	jmp	.LBB14_457
.LBB14_457:                             # %if.end2162
	jmp	.LBB14_399
.LBB14_458:                             # %if.else2163
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB14_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_460:                             # %if.end2167
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB14_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB14_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB14_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB14_462 Depth=1
	movl	-76(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB14_462
.LBB14_464:                             # %while.end2218
	jmp	.LBB14_465
.LBB14_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB14_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB14_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-76(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB14_465
.LBB14_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB14_485
.LBB14_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-308(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB14_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB14_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB14_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-76(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB14_469
.LBB14_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB14_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -92(%rbp)
	jle	.LBB14_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB14_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-92(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB14_472
.LBB14_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB14_484
# %bb.475:                              # %if.then2302
	movl	$4095, -148(%rbp)       # imm = 0xFFF
	movl	$15, -136(%rbp)
.LBB14_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_478 Depth 2
	cmpl	$0, -136(%rbp)
	jl	.LBB14_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB14_476 Depth=1
	movl	$15, -156(%rbp)
.LBB14_478:                             # %for.cond2307
                                        #   Parent Loop BB14_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -156(%rbp)
	jl	.LBB14_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB14_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-156(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-148(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB14_478 Depth=2
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB14_478
.LBB14_481:                             # %for.end2324
                                        #   in Loop: Header=BB14_476 Depth=1
	movl	-148(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB14_476 Depth=1
	movl	-136(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB14_476
.LBB14_483:                             # %for.end2331
	jmp	.LBB14_484
.LBB14_484:                             # %if.end2332
	jmp	.LBB14_485
.LBB14_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB14_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB14_488
.LBB14_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB14_488:                             # %if.end2359
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB14_492
# %bb.489:                              # %if.then2363
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB14_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_491:                             # %if.end2368
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB14_492:                             # %if.end2388
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB14_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB14_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB14_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -232(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-232(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_501
.LBB14_496:                             # %if.end2408
                                        #   in Loop: Header=BB14_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_498:                             # %if.end2414
                                        #   in Loop: Header=BB14_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB14_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_500:                             # %if.end2441
                                        #   in Loop: Header=BB14_494 Depth=1
	jmp	.LBB14_494
.LBB14_501:                             # %while.end2442
	jmp	.LBB14_502
.LBB14_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB14_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB14_506
# %bb.505:                              # %if.then2453
	jmp	.LBB14_516
.LBB14_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB14_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB14_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB14_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB14_515
.LBB14_510:                             # %if.end2472
                                        #   in Loop: Header=BB14_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_512:                             # %if.end2478
                                        #   in Loop: Header=BB14_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB14_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_514:                             # %if.end2505
                                        #   in Loop: Header=BB14_508 Depth=1
	jmp	.LBB14_508
.LBB14_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_502
.LBB14_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB14_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB14_519
.LBB14_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_519:                             # %if.end2522
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB14_399
.LBB14_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB14_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB14_523
.LBB14_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB14_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB14_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB14_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB14_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_524
.LBB14_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB14_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB14_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB14_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB14_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_528
.LBB14_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB14_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB14_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB14_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB14_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB14_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB14_536
.LBB14_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_536:                             # %if.end2584
                                        #   in Loop: Header=BB14_532 Depth=1
	jmp	.LBB14_537
.LBB14_537:                             # %for.inc2585
                                        #   in Loop: Header=BB14_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_532
.LBB14_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB14_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB14_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB14_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB14_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB14_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB14_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB14_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_542
.LBB14_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB14_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB14_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB14_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB14_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB14_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB14_550
.LBB14_549:                             # %if.else2646
                                        #   in Loop: Header=BB14_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB14_550:                             # %if.end2664
                                        #   in Loop: Header=BB14_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB14_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_546
.LBB14_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB14_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -220(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB14_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB14_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB14_556
.LBB14_555:                             # %if.else2727
                                        #   in Loop: Header=BB14_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB14_556:                             # %if.end2742
                                        #   in Loop: Header=BB14_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-220(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB14_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB14_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB14_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB14_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB14_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB14_562:                             # %if.end2791
	jmp	.LBB14_563
.LBB14_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB14_565
.LBB14_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB14_565:                             # %if.end2826
	jmp	.LBB14_578
.LBB14_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB14_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB14_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB14_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB14_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_567
.LBB14_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB14_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB14_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB14_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB14_574:                             # %if.end2893
	jmp	.LBB14_575
.LBB14_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB14_577
.LBB14_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB14_577:                             # %if.end2918
	jmp	.LBB14_578
.LBB14_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_579:                             # %endhdr_2
	jmp	.LBB14_580
.LBB14_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB14_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_588
.LBB14_583:                             # %if.end2937
                                        #   in Loop: Header=BB14_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_585:                             # %if.end2943
                                        #   in Loop: Header=BB14_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB14_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_587:                             # %if.end2970
                                        #   in Loop: Header=BB14_581 Depth=1
	jmp	.LBB14_581
.LBB14_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB14_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_590:                             # %if.end2976
	jmp	.LBB14_591
.LBB14_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB14_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_599
.LBB14_594:                             # %if.end2994
                                        #   in Loop: Header=BB14_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_596:                             # %if.end3000
                                        #   in Loop: Header=BB14_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB14_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_598:                             # %if.end3027
                                        #   in Loop: Header=BB14_592 Depth=1
	jmp	.LBB14_592
.LBB14_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB14_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_601:                             # %if.end3033
	jmp	.LBB14_602
.LBB14_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB14_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_610
.LBB14_605:                             # %if.end3051
                                        #   in Loop: Header=BB14_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_607:                             # %if.end3057
                                        #   in Loop: Header=BB14_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB14_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_609:                             # %if.end3084
                                        #   in Loop: Header=BB14_603 Depth=1
	jmp	.LBB14_603
.LBB14_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB14_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_612:                             # %if.end3090
	jmp	.LBB14_613
.LBB14_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB14_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_621
.LBB14_616:                             # %if.end3108
                                        #   in Loop: Header=BB14_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_618:                             # %if.end3114
                                        #   in Loop: Header=BB14_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB14_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_620:                             # %if.end3141
                                        #   in Loop: Header=BB14_614 Depth=1
	jmp	.LBB14_614
.LBB14_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB14_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_623:                             # %if.end3147
	jmp	.LBB14_624
.LBB14_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB14_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_632
.LBB14_627:                             # %if.end3165
                                        #   in Loop: Header=BB14_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_629:                             # %if.end3171
                                        #   in Loop: Header=BB14_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB14_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_631:                             # %if.end3198
                                        #   in Loop: Header=BB14_625 Depth=1
	jmp	.LBB14_625
.LBB14_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB14_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB14_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB14_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_643
.LBB14_638:                             # %if.end3222
                                        #   in Loop: Header=BB14_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_640:                             # %if.end3228
                                        #   in Loop: Header=BB14_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB14_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_642:                             # %if.end3255
                                        #   in Loop: Header=BB14_636 Depth=1
	jmp	.LBB14_636
.LBB14_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB14_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB14_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_652
.LBB14_647:                             # %if.end3279
                                        #   in Loop: Header=BB14_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_649:                             # %if.end3285
                                        #   in Loop: Header=BB14_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB14_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_651:                             # %if.end3312
                                        #   in Loop: Header=BB14_645 Depth=1
	jmp	.LBB14_645
.LBB14_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB14_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB14_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_661
.LBB14_656:                             # %if.end3336
                                        #   in Loop: Header=BB14_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_658:                             # %if.end3342
                                        #   in Loop: Header=BB14_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB14_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_660:                             # %if.end3369
                                        #   in Loop: Header=BB14_654 Depth=1
	jmp	.LBB14_654
.LBB14_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB14_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB14_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB14_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB14_670
.LBB14_665:                             # %if.end3393
                                        #   in Loop: Header=BB14_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB14_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB14_673
.LBB14_667:                             # %if.end3399
                                        #   in Loop: Header=BB14_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB14_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB14_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB14_669:                             # %if.end3426
                                        #   in Loop: Header=BB14_663 Depth=1
	jmp	.LBB14_663
.LBB14_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB14_673
.LBB14_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB14_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-140(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-236(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$1388929475, -252(%rbp) # imm = 0x52C961C3
	jne	.LBB14_675
.LBB14_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_674
.Lfunc_end14:
	.size	BZ2_decompress.13, .Lfunc_end14-BZ2_decompress.13
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI14_0:
	.quad	.LBB14_4
	.quad	.LBB14_15
	.quad	.LBB14_26
	.quad	.LBB14_37
	.quad	.LBB14_57
	.quad	.LBB14_70
	.quad	.LBB14_81
	.quad	.LBB14_92
	.quad	.LBB14_103
	.quad	.LBB14_114
	.quad	.LBB14_127
	.quad	.LBB14_136
	.quad	.LBB14_145
	.quad	.LBB14_154
	.quad	.LBB14_163
	.quad	.LBB14_172
	.quad	.LBB14_181
	.quad	.LBB14_190
	.quad	.LBB14_205
	.quad	.LBB14_228
	.quad	.LBB14_246
	.quad	.LBB14_258
	.quad	.LBB14_272
	.quad	.LBB14_301
	.quad	.LBB14_316
	.quad	.LBB14_327
	.quad	.LBB14_372
	.quad	.LBB14_386
	.quad	.LBB14_414
	.quad	.LBB14_428
	.quad	.LBB14_493
	.quad	.LBB14_507
	.quad	.LBB14_580
	.quad	.LBB14_591
	.quad	.LBB14_602
	.quad	.LBB14_613
	.quad	.LBB14_624
	.quad	.LBB14_635
	.quad	.LBB14_644
	.quad	.LBB14_653
	.quad	.LBB14_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.14       # -- Begin function BZ2_decompress.14
	.p2align	4, 0x90
	.type	BZ2_decompress.14,@function
BZ2_decompress.14:                      # @BZ2_decompress.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$528129001, -232(%rbp)  # imm = 0x1F7A9BE9
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB15_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB15_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB15_671
# %bb.3:                                # %if.end
	movq	.LJTI15_0(,%rax,8), %rax
	jmpq	*%rax
.LBB15_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB15_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_12
.LBB15_7:                               # %if.end33
                                        #   in Loop: Header=BB15_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_9:                               # %if.end38
                                        #   in Loop: Header=BB15_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB15_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_11:                              # %if.end56
                                        #   in Loop: Header=BB15_5 Depth=1
	jmp	.LBB15_5
.LBB15_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB15_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB15_673
.LBB15_14:                              # %if.end61
	jmp	.LBB15_15
.LBB15_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB15_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_23
.LBB15_18:                              # %if.end78
                                        #   in Loop: Header=BB15_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_20:                              # %if.end84
                                        #   in Loop: Header=BB15_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB15_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_22:                              # %if.end111
                                        #   in Loop: Header=BB15_16 Depth=1
	jmp	.LBB15_16
.LBB15_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB15_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB15_673
.LBB15_25:                              # %if.end117
	jmp	.LBB15_26
.LBB15_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB15_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_34
.LBB15_29:                              # %if.end134
                                        #   in Loop: Header=BB15_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_31:                              # %if.end140
                                        #   in Loop: Header=BB15_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB15_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_33:                              # %if.end167
                                        #   in Loop: Header=BB15_27 Depth=1
	jmp	.LBB15_27
.LBB15_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB15_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB15_673
.LBB15_36:                              # %if.end173
	jmp	.LBB15_37
.LBB15_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB15_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB15_45
.LBB15_40:                              # %if.end189
                                        #   in Loop: Header=BB15_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_42:                              # %if.end195
                                        #   in Loop: Header=BB15_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB15_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_44:                              # %if.end222
                                        #   in Loop: Header=BB15_38 Depth=1
	jmp	.LBB15_38
.LBB15_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB15_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB15_48
.LBB15_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB15_673
.LBB15_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB15_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB15_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB15_52
.LBB15_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB15_673
.LBB15_52:                              # %if.end257
	jmp	.LBB15_56
.LBB15_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB15_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB15_673
.LBB15_55:                              # %if.end270
	jmp	.LBB15_56
.LBB15_56:                              # %if.end271
	jmp	.LBB15_57
.LBB15_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB15_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_65
.LBB15_60:                              # %if.end288
                                        #   in Loop: Header=BB15_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_62:                              # %if.end294
                                        #   in Loop: Header=BB15_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB15_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_64:                              # %if.end321
                                        #   in Loop: Header=BB15_58 Depth=1
	jmp	.LBB15_58
.LBB15_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB15_67
# %bb.66:                               # %if.then326
	jmp	.LBB15_579
.LBB15_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB15_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_69:                              # %if.end332
	jmp	.LBB15_70
.LBB15_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB15_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_78
.LBB15_73:                              # %if.end349
                                        #   in Loop: Header=BB15_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_75:                              # %if.end355
                                        #   in Loop: Header=BB15_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB15_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_77:                              # %if.end382
                                        #   in Loop: Header=BB15_71 Depth=1
	jmp	.LBB15_71
.LBB15_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB15_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_80:                              # %if.end388
	jmp	.LBB15_81
.LBB15_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB15_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_89
.LBB15_84:                              # %if.end405
                                        #   in Loop: Header=BB15_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_86:                              # %if.end411
                                        #   in Loop: Header=BB15_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB15_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_88:                              # %if.end438
                                        #   in Loop: Header=BB15_82 Depth=1
	jmp	.LBB15_82
.LBB15_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB15_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_91:                              # %if.end444
	jmp	.LBB15_92
.LBB15_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB15_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_100
.LBB15_95:                              # %if.end461
                                        #   in Loop: Header=BB15_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_97:                              # %if.end467
                                        #   in Loop: Header=BB15_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB15_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_99:                              # %if.end494
                                        #   in Loop: Header=BB15_93 Depth=1
	jmp	.LBB15_93
.LBB15_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB15_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_102:                             # %if.end500
	jmp	.LBB15_103
.LBB15_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB15_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_111
.LBB15_106:                             # %if.end517
                                        #   in Loop: Header=BB15_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_108:                             # %if.end523
                                        #   in Loop: Header=BB15_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB15_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_110:                             # %if.end550
                                        #   in Loop: Header=BB15_104 Depth=1
	jmp	.LBB15_104
.LBB15_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB15_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_113:                             # %if.end556
	jmp	.LBB15_114
.LBB15_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB15_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_122
.LBB15_117:                             # %if.end573
                                        #   in Loop: Header=BB15_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_119:                             # %if.end579
                                        #   in Loop: Header=BB15_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB15_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_121:                             # %if.end606
                                        #   in Loop: Header=BB15_115 Depth=1
	jmp	.LBB15_115
.LBB15_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB15_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB15_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB15_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB15_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB15_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_135
.LBB15_130:                             # %if.end636
                                        #   in Loop: Header=BB15_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_132:                             # %if.end642
                                        #   in Loop: Header=BB15_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB15_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_134:                             # %if.end669
                                        #   in Loop: Header=BB15_128 Depth=1
	jmp	.LBB15_128
.LBB15_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB15_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB15_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_144
.LBB15_139:                             # %if.end692
                                        #   in Loop: Header=BB15_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_141:                             # %if.end698
                                        #   in Loop: Header=BB15_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB15_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_143:                             # %if.end725
                                        #   in Loop: Header=BB15_137 Depth=1
	jmp	.LBB15_137
.LBB15_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB15_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB15_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_153
.LBB15_148:                             # %if.end748
                                        #   in Loop: Header=BB15_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_150:                             # %if.end754
                                        #   in Loop: Header=BB15_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB15_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_152:                             # %if.end781
                                        #   in Loop: Header=BB15_146 Depth=1
	jmp	.LBB15_146
.LBB15_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB15_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB15_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_162
.LBB15_157:                             # %if.end804
                                        #   in Loop: Header=BB15_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_159:                             # %if.end810
                                        #   in Loop: Header=BB15_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB15_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_161:                             # %if.end837
                                        #   in Loop: Header=BB15_155 Depth=1
	jmp	.LBB15_155
.LBB15_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB15_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB15_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB15_171
.LBB15_166:                             # %if.end860
                                        #   in Loop: Header=BB15_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_168:                             # %if.end866
                                        #   in Loop: Header=BB15_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB15_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_170:                             # %if.end893
                                        #   in Loop: Header=BB15_164 Depth=1
	jmp	.LBB15_164
.LBB15_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB15_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB15_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_180
.LBB15_175:                             # %if.end911
                                        #   in Loop: Header=BB15_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_177:                             # %if.end917
                                        #   in Loop: Header=BB15_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB15_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_179:                             # %if.end944
                                        #   in Loop: Header=BB15_173 Depth=1
	jmp	.LBB15_173
.LBB15_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB15_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB15_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_189
.LBB15_184:                             # %if.end967
                                        #   in Loop: Header=BB15_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_186:                             # %if.end973
                                        #   in Loop: Header=BB15_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB15_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_188:                             # %if.end1000
                                        #   in Loop: Header=BB15_182 Depth=1
	jmp	.LBB15_182
.LBB15_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB15_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB15_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_198
.LBB15_193:                             # %if.end1023
                                        #   in Loop: Header=BB15_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_195:                             # %if.end1029
                                        #   in Loop: Header=BB15_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB15_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_197:                             # %if.end1056
                                        #   in Loop: Header=BB15_191 Depth=1
	jmp	.LBB15_191
.LBB15_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB15_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB15_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB15_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB15_218
# %bb.204:                              # %for.body
	jmp	.LBB15_205
.LBB15_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB15_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_213
.LBB15_208:                             # %if.end1094
                                        #   in Loop: Header=BB15_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_210:                             # %if.end1100
                                        #   in Loop: Header=BB15_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB15_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_212:                             # %if.end1127
                                        #   in Loop: Header=BB15_206 Depth=1
	jmp	.LBB15_206
.LBB15_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB15_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB15_216
.LBB15_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB15_216:                             # %if.end1137
	jmp	.LBB15_217
.LBB15_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_203
.LBB15_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB15_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB15_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB15_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB15_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_219
.LBB15_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB15_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB15_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB15_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB15_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB15_240
# %bb.227:                              # %for.body1160
	jmp	.LBB15_228
.LBB15_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB15_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_236
.LBB15_231:                             # %if.end1177
                                        #   in Loop: Header=BB15_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_233:                             # %if.end1183
                                        #   in Loop: Header=BB15_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB15_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_235:                             # %if.end1210
                                        #   in Loop: Header=BB15_229 Depth=1
	jmp	.LBB15_229
.LBB15_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB15_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB15_238:                             # %if.end1221
	jmp	.LBB15_239
.LBB15_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB15_226
.LBB15_240:                             # %for.end1224
	jmp	.LBB15_241
.LBB15_241:                             # %if.end1225
	jmp	.LBB15_242
.LBB15_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_223
.LBB15_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB15_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -136(%rbp)
.LBB15_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB15_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB15_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB15_254
.LBB15_249:                             # %if.end1250
                                        #   in Loop: Header=BB15_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_251:                             # %if.end1256
                                        #   in Loop: Header=BB15_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB15_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_253:                             # %if.end1283
                                        #   in Loop: Header=BB15_247 Depth=1
	jmp	.LBB15_247
.LBB15_254:                             # %while.end1284
	cmpl	$2, -104(%rbp)
	jl	.LBB15_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -104(%rbp)
	jle	.LBB15_257
.LBB15_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_257:                             # %if.end1291
	jmp	.LBB15_258
.LBB15_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB15_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB15_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB15_266
.LBB15_261:                             # %if.end1307
                                        #   in Loop: Header=BB15_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_263:                             # %if.end1313
                                        #   in Loop: Header=BB15_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB15_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_265:                             # %if.end1340
                                        #   in Loop: Header=BB15_259 Depth=1
	jmp	.LBB15_259
.LBB15_266:                             # %while.end1341
	cmpl	$1, -100(%rbp)
	jge	.LBB15_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB15_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB15_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB15_271:                             # %while.body1350
	jmp	.LBB15_272
.LBB15_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB15_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_280
.LBB15_275:                             # %if.end1368
                                        #   in Loop: Header=BB15_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_277:                             # %if.end1374
                                        #   in Loop: Header=BB15_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB15_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_279:                             # %if.end1401
                                        #   in Loop: Header=BB15_273 Depth=1
	jmp	.LBB15_273
.LBB15_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB15_282
# %bb.281:                              # %if.then1406
	jmp	.LBB15_285
.LBB15_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB15_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_284:                             # %if.end1412
	jmp	.LBB15_271
.LBB15_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_269
.LBB15_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB15_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB15_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB15_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB15_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB15_288
.LBB15_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB15_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB15_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB15_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB15_294:                             # %while.cond
                                        #   Parent Loop BB15_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB15_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB15_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB15_294
.LBB15_296:                             # %while.end1451
                                        #   in Loop: Header=BB15_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB15_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_292
.LBB15_298:                             # %for.end1457
	movl	$0, -52(%rbp)
.LBB15_299:                             # %for.cond1458
	movl	-52(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB15_343
# %bb.300:                              # %for.body1461
	jmp	.LBB15_301
.LBB15_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB15_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB15_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB15_309
.LBB15_304:                             # %if.end1478
                                        #   in Loop: Header=BB15_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_306:                             # %if.end1484
                                        #   in Loop: Header=BB15_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB15_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_308:                             # %if.end1511
                                        #   in Loop: Header=BB15_302 Depth=1
	jmp	.LBB15_302
.LBB15_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB15_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB15_341
# %bb.311:                              # %for.body1516
	jmp	.LBB15_312
.LBB15_312:                             # %while.body1518
	cmpl	$1, -88(%rbp)
	jl	.LBB15_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -88(%rbp)
	jle	.LBB15_315
.LBB15_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_315:                             # %if.end1525
	jmp	.LBB15_316
.LBB15_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB15_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_324
.LBB15_319:                             # %if.end1543
                                        #   in Loop: Header=BB15_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_321:                             # %if.end1549
                                        #   in Loop: Header=BB15_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB15_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_323:                             # %if.end1576
                                        #   in Loop: Header=BB15_317 Depth=1
	jmp	.LBB15_317
.LBB15_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB15_326
# %bb.325:                              # %if.then1581
	jmp	.LBB15_339
.LBB15_326:                             # %if.end1582
	jmp	.LBB15_327
.LBB15_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB15_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_335
.LBB15_330:                             # %if.end1600
                                        #   in Loop: Header=BB15_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_332:                             # %if.end1606
                                        #   in Loop: Header=BB15_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB15_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_334:                             # %if.end1633
                                        #   in Loop: Header=BB15_328 Depth=1
	jmp	.LBB15_328
.LBB15_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB15_337
# %bb.336:                              # %if.then1638
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB15_338
.LBB15_337:                             # %if.else1640
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
.LBB15_338:                             # %if.end1642
	jmp	.LBB15_312
.LBB15_339:                             # %while.end1643
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_310
.LBB15_341:                             # %for.end1651
	jmp	.LBB15_342
.LBB15_342:                             # %for.inc1652
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB15_299
.LBB15_343:                             # %for.end1654
	movl	$0, -52(%rbp)
.LBB15_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_346 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB15_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB15_344 Depth=1
	movl	$32, -156(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB15_346:                             # %for.cond1659
                                        #   Parent Loop BB15_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB15_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB15_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB15_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB15_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB15_349:                             # %if.end1678
                                        #   in Loop: Header=BB15_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-156(%rbp), %eax
	jge	.LBB15_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB15_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
.LBB15_351:                             # %if.end1694
                                        #   in Loop: Header=BB15_346 Depth=2
	jmp	.LBB15_352
.LBB15_352:                             # %for.inc1695
                                        #   in Loop: Header=BB15_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_346
.LBB15_353:                             # %for.end1697
                                        #   in Loop: Header=BB15_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-156(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-136(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-156(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB15_344 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB15_344
.LBB15_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -140(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
.LBB15_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB15_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB15_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB15_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_356
.LBB15_359:                             # %for.end1728
	movl	$4095, -152(%rbp)       # imm = 0xFFF
	movl	$15, -128(%rbp)
.LBB15_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_362 Depth 2
	cmpl	$0, -128(%rbp)
	jl	.LBB15_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB15_360 Depth=1
	movl	$15, -144(%rbp)
.LBB15_362:                             # %for.cond1733
                                        #   Parent Loop BB15_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -144(%rbp)
	jl	.LBB15_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB15_362 Depth=2
	movl	-128(%rbp), %eax
	shll	$4, %eax
	addl	-144(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-152(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB15_362 Depth=2
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB15_362
.LBB15_365:                             # %for.end1745
                                        #   in Loop: Header=BB15_360 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB15_360 Depth=1
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB15_360
.LBB15_367:                             # %for.end1751
	movl	$0, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB15_371
# %bb.368:                              # %if.then1754
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB15_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_370:                             # %if.end1759
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB15_371:                             # %if.end1779
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB15_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB15_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB15_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -360(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-360(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_380
.LBB15_375:                             # %if.end1799
                                        #   in Loop: Header=BB15_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_377:                             # %if.end1805
                                        #   in Loop: Header=BB15_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB15_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_379:                             # %if.end1832
                                        #   in Loop: Header=BB15_373 Depth=1
	jmp	.LBB15_373
.LBB15_380:                             # %while.end1833
	jmp	.LBB15_381
.LBB15_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB15_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB15_385
# %bb.384:                              # %if.then1844
	jmp	.LBB15_395
.LBB15_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB15_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB15_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB15_394
.LBB15_389:                             # %if.end1863
                                        #   in Loop: Header=BB15_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_391:                             # %if.end1869
                                        #   in Loop: Header=BB15_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB15_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_393:                             # %if.end1896
                                        #   in Loop: Header=BB15_387 Depth=1
	jmp	.LBB15_387
.LBB15_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_381
.LBB15_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB15_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB15_398
.LBB15_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_398:                             # %if.end1913
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB15_399:                             # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB15_401
# %bb.400:                              # %if.then1923
	jmp	.LBB15_520
.LBB15_401:                             # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB15_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB15_458
.LBB15_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB15_404:                             # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB15_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB15_409
.LBB15_406:                             # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB15_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB15_408:                             # %if.end1942
	jmp	.LBB15_409
.LBB15_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB15_413
# %bb.410:                              # %if.then1947
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB15_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_412:                             # %if.end1952
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB15_413:                             # %if.end1972
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB15_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB15_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB15_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-208(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_422
.LBB15_417:                             # %if.end1992
                                        #   in Loop: Header=BB15_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_419:                             # %if.end1998
                                        #   in Loop: Header=BB15_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB15_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_421:                             # %if.end2025
                                        #   in Loop: Header=BB15_415 Depth=1
	jmp	.LBB15_415
.LBB15_422:                             # %while.end2026
	jmp	.LBB15_423
.LBB15_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB15_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB15_427
# %bb.426:                              # %if.then2037
	jmp	.LBB15_437
.LBB15_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB15_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB15_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB15_436
.LBB15_431:                             # %if.end2056
                                        #   in Loop: Header=BB15_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_433:                             # %if.end2062
                                        #   in Loop: Header=BB15_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB15_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_435:                             # %if.end2089
                                        #   in Loop: Header=BB15_429 Depth=1
	jmp	.LBB15_429
.LBB15_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_423
.LBB15_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB15_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB15_440
.LBB15_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_440:                             # %if.end2106
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB15_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB15_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB15_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB15_451
# %bb.445:                              # %if.then2130
	jmp	.LBB15_446
.LBB15_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB15_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB15_446 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB15_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_449:                             # %if.end2138
                                        #   in Loop: Header=BB15_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB15_446
.LBB15_450:                             # %while.end2145
	jmp	.LBB15_457
.LBB15_451:                             # %if.else2146
	jmp	.LBB15_452
.LBB15_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB15_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB15_452 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB15_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_455:                             # %if.end2154
                                        #   in Loop: Header=BB15_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB15_452
.LBB15_456:                             # %while.end2161
	jmp	.LBB15_457
.LBB15_457:                             # %if.end2162
	jmp	.LBB15_399
.LBB15_458:                             # %if.else2163
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB15_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_460:                             # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB15_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB15_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB15_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB15_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB15_462
.LBB15_464:                             # %while.end2218
	jmp	.LBB15_465
.LBB15_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB15_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB15_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB15_465
.LBB15_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB15_485
.LBB15_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-296(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB15_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB15_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB15_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB15_469
.LBB15_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB15_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -92(%rbp)
	jle	.LBB15_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB15_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-92(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB15_472
.LBB15_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB15_484
# %bb.475:                              # %if.then2302
	movl	$4095, -160(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB15_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_478 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB15_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB15_476 Depth=1
	movl	$15, -148(%rbp)
.LBB15_478:                             # %for.cond2307
                                        #   Parent Loop BB15_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB15_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB15_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-160(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB15_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB15_478
.LBB15_481:                             # %for.end2324
                                        #   in Loop: Header=BB15_476 Depth=1
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB15_476 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB15_476
.LBB15_483:                             # %for.end2331
	jmp	.LBB15_484
.LBB15_484:                             # %if.end2332
	jmp	.LBB15_485
.LBB15_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB15_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB15_488
.LBB15_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_488:                             # %if.end2359
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB15_492
# %bb.489:                              # %if.then2363
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB15_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_491:                             # %if.end2368
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB15_492:                             # %if.end2388
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB15_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB15_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB15_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -280(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-280(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_501
.LBB15_496:                             # %if.end2408
                                        #   in Loop: Header=BB15_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_498:                             # %if.end2414
                                        #   in Loop: Header=BB15_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB15_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_500:                             # %if.end2441
                                        #   in Loop: Header=BB15_494 Depth=1
	jmp	.LBB15_494
.LBB15_501:                             # %while.end2442
	jmp	.LBB15_502
.LBB15_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB15_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB15_506
# %bb.505:                              # %if.then2453
	jmp	.LBB15_516
.LBB15_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB15_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB15_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB15_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB15_515
.LBB15_510:                             # %if.end2472
                                        #   in Loop: Header=BB15_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_512:                             # %if.end2478
                                        #   in Loop: Header=BB15_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB15_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_514:                             # %if.end2505
                                        #   in Loop: Header=BB15_508 Depth=1
	jmp	.LBB15_508
.LBB15_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB15_502
.LBB15_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB15_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB15_519
.LBB15_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_519:                             # %if.end2522
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB15_399
.LBB15_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB15_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB15_523
.LBB15_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB15_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB15_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB15_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB15_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_524
.LBB15_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB15_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB15_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB15_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB15_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_528
.LBB15_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB15_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB15_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB15_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB15_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB15_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB15_536
.LBB15_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_536:                             # %if.end2584
                                        #   in Loop: Header=BB15_532 Depth=1
	jmp	.LBB15_537
.LBB15_537:                             # %for.inc2585
                                        #   in Loop: Header=BB15_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_532
.LBB15_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB15_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB15_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB15_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB15_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB15_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB15_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB15_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_542
.LBB15_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB15_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB15_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB15_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB15_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB15_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB15_550
.LBB15_549:                             # %if.else2646
                                        #   in Loop: Header=BB15_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB15_550:                             # %if.end2664
                                        #   in Loop: Header=BB15_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB15_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_546
.LBB15_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB15_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -236(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB15_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB15_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB15_556
.LBB15_555:                             # %if.else2727
                                        #   in Loop: Header=BB15_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB15_556:                             # %if.end2742
                                        #   in Loop: Header=BB15_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-236(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB15_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB15_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB15_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB15_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB15_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB15_562:                             # %if.end2791
	jmp	.LBB15_563
.LBB15_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB15_565
.LBB15_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB15_565:                             # %if.end2826
	jmp	.LBB15_578
.LBB15_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB15_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB15_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB15_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB15_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_567
.LBB15_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB15_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB15_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB15_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB15_574:                             # %if.end2893
	jmp	.LBB15_575
.LBB15_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB15_577
.LBB15_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB15_577:                             # %if.end2918
	jmp	.LBB15_578
.LBB15_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_579:                             # %endhdr_2
	jmp	.LBB15_580
.LBB15_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB15_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_588
.LBB15_583:                             # %if.end2937
                                        #   in Loop: Header=BB15_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_585:                             # %if.end2943
                                        #   in Loop: Header=BB15_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB15_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_587:                             # %if.end2970
                                        #   in Loop: Header=BB15_581 Depth=1
	jmp	.LBB15_581
.LBB15_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB15_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_590:                             # %if.end2976
	jmp	.LBB15_591
.LBB15_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB15_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_599
.LBB15_594:                             # %if.end2994
                                        #   in Loop: Header=BB15_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_596:                             # %if.end3000
                                        #   in Loop: Header=BB15_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB15_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_598:                             # %if.end3027
                                        #   in Loop: Header=BB15_592 Depth=1
	jmp	.LBB15_592
.LBB15_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB15_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_601:                             # %if.end3033
	jmp	.LBB15_602
.LBB15_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB15_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_610
.LBB15_605:                             # %if.end3051
                                        #   in Loop: Header=BB15_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_607:                             # %if.end3057
                                        #   in Loop: Header=BB15_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB15_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_609:                             # %if.end3084
                                        #   in Loop: Header=BB15_603 Depth=1
	jmp	.LBB15_603
.LBB15_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB15_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_612:                             # %if.end3090
	jmp	.LBB15_613
.LBB15_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB15_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_621
.LBB15_616:                             # %if.end3108
                                        #   in Loop: Header=BB15_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_618:                             # %if.end3114
                                        #   in Loop: Header=BB15_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB15_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_620:                             # %if.end3141
                                        #   in Loop: Header=BB15_614 Depth=1
	jmp	.LBB15_614
.LBB15_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB15_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_623:                             # %if.end3147
	jmp	.LBB15_624
.LBB15_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB15_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_632
.LBB15_627:                             # %if.end3165
                                        #   in Loop: Header=BB15_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_629:                             # %if.end3171
                                        #   in Loop: Header=BB15_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB15_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_631:                             # %if.end3198
                                        #   in Loop: Header=BB15_625 Depth=1
	jmp	.LBB15_625
.LBB15_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB15_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB15_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB15_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_643
.LBB15_638:                             # %if.end3222
                                        #   in Loop: Header=BB15_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_640:                             # %if.end3228
                                        #   in Loop: Header=BB15_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB15_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_642:                             # %if.end3255
                                        #   in Loop: Header=BB15_636 Depth=1
	jmp	.LBB15_636
.LBB15_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB15_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB15_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_652
.LBB15_647:                             # %if.end3279
                                        #   in Loop: Header=BB15_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_649:                             # %if.end3285
                                        #   in Loop: Header=BB15_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB15_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_651:                             # %if.end3312
                                        #   in Loop: Header=BB15_645 Depth=1
	jmp	.LBB15_645
.LBB15_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB15_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB15_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_661
.LBB15_656:                             # %if.end3336
                                        #   in Loop: Header=BB15_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_658:                             # %if.end3342
                                        #   in Loop: Header=BB15_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB15_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_660:                             # %if.end3369
                                        #   in Loop: Header=BB15_654 Depth=1
	jmp	.LBB15_654
.LBB15_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB15_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB15_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB15_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB15_670
.LBB15_665:                             # %if.end3393
                                        #   in Loop: Header=BB15_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB15_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB15_673
.LBB15_667:                             # %if.end3399
                                        #   in Loop: Header=BB15_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB15_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB15_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB15_669:                             # %if.end3426
                                        #   in Loop: Header=BB15_663 Depth=1
	jmp	.LBB15_663
.LBB15_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB15_673
.LBB15_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB15_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-136(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-140(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-240(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$528129001, -232(%rbp)  # imm = 0x1F7A9BE9
	jne	.LBB15_675
.LBB15_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_674
.Lfunc_end15:
	.size	BZ2_decompress.14, .Lfunc_end15-BZ2_decompress.14
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI15_0:
	.quad	.LBB15_4
	.quad	.LBB15_15
	.quad	.LBB15_26
	.quad	.LBB15_37
	.quad	.LBB15_57
	.quad	.LBB15_70
	.quad	.LBB15_81
	.quad	.LBB15_92
	.quad	.LBB15_103
	.quad	.LBB15_114
	.quad	.LBB15_127
	.quad	.LBB15_136
	.quad	.LBB15_145
	.quad	.LBB15_154
	.quad	.LBB15_163
	.quad	.LBB15_172
	.quad	.LBB15_181
	.quad	.LBB15_190
	.quad	.LBB15_205
	.quad	.LBB15_228
	.quad	.LBB15_246
	.quad	.LBB15_258
	.quad	.LBB15_272
	.quad	.LBB15_301
	.quad	.LBB15_316
	.quad	.LBB15_327
	.quad	.LBB15_372
	.quad	.LBB15_386
	.quad	.LBB15_414
	.quad	.LBB15_428
	.quad	.LBB15_493
	.quad	.LBB15_507
	.quad	.LBB15_580
	.quad	.LBB15_591
	.quad	.LBB15_602
	.quad	.LBB15_613
	.quad	.LBB15_624
	.quad	.LBB15_635
	.quad	.LBB15_644
	.quad	.LBB15_653
	.quad	.LBB15_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.15       # -- Begin function BZ2_decompress.15
	.p2align	4, 0x90
	.type	BZ2_decompress.15,@function
BZ2_decompress.15:                      # @BZ2_decompress.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$1278555793, -228(%rbp) # imm = 0x4C353691
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB16_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB16_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB16_671
# %bb.3:                                # %if.end
	movq	.LJTI16_0(,%rax,8), %rax
	jmpq	*%rax
.LBB16_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB16_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_12
.LBB16_7:                               # %if.end33
                                        #   in Loop: Header=BB16_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_9:                               # %if.end38
                                        #   in Loop: Header=BB16_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB16_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_11:                              # %if.end56
                                        #   in Loop: Header=BB16_5 Depth=1
	jmp	.LBB16_5
.LBB16_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB16_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB16_673
.LBB16_14:                              # %if.end61
	jmp	.LBB16_15
.LBB16_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB16_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_23
.LBB16_18:                              # %if.end78
                                        #   in Loop: Header=BB16_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_20:                              # %if.end84
                                        #   in Loop: Header=BB16_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB16_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_22:                              # %if.end111
                                        #   in Loop: Header=BB16_16 Depth=1
	jmp	.LBB16_16
.LBB16_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB16_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB16_673
.LBB16_25:                              # %if.end117
	jmp	.LBB16_26
.LBB16_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB16_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_34
.LBB16_29:                              # %if.end134
                                        #   in Loop: Header=BB16_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_31:                              # %if.end140
                                        #   in Loop: Header=BB16_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB16_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_33:                              # %if.end167
                                        #   in Loop: Header=BB16_27 Depth=1
	jmp	.LBB16_27
.LBB16_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB16_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB16_673
.LBB16_36:                              # %if.end173
	jmp	.LBB16_37
.LBB16_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB16_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB16_45
.LBB16_40:                              # %if.end189
                                        #   in Loop: Header=BB16_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_42:                              # %if.end195
                                        #   in Loop: Header=BB16_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB16_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_44:                              # %if.end222
                                        #   in Loop: Header=BB16_38 Depth=1
	jmp	.LBB16_38
.LBB16_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB16_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB16_48
.LBB16_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB16_673
.LBB16_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB16_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB16_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB16_52
.LBB16_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB16_673
.LBB16_52:                              # %if.end257
	jmp	.LBB16_56
.LBB16_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB16_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB16_673
.LBB16_55:                              # %if.end270
	jmp	.LBB16_56
.LBB16_56:                              # %if.end271
	jmp	.LBB16_57
.LBB16_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB16_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_65
.LBB16_60:                              # %if.end288
                                        #   in Loop: Header=BB16_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_62:                              # %if.end294
                                        #   in Loop: Header=BB16_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB16_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_64:                              # %if.end321
                                        #   in Loop: Header=BB16_58 Depth=1
	jmp	.LBB16_58
.LBB16_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB16_67
# %bb.66:                               # %if.then326
	jmp	.LBB16_579
.LBB16_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB16_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_69:                              # %if.end332
	jmp	.LBB16_70
.LBB16_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB16_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_78
.LBB16_73:                              # %if.end349
                                        #   in Loop: Header=BB16_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_75:                              # %if.end355
                                        #   in Loop: Header=BB16_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB16_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_77:                              # %if.end382
                                        #   in Loop: Header=BB16_71 Depth=1
	jmp	.LBB16_71
.LBB16_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB16_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_80:                              # %if.end388
	jmp	.LBB16_81
.LBB16_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB16_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_89
.LBB16_84:                              # %if.end405
                                        #   in Loop: Header=BB16_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_86:                              # %if.end411
                                        #   in Loop: Header=BB16_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB16_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_88:                              # %if.end438
                                        #   in Loop: Header=BB16_82 Depth=1
	jmp	.LBB16_82
.LBB16_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB16_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_91:                              # %if.end444
	jmp	.LBB16_92
.LBB16_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB16_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_100
.LBB16_95:                              # %if.end461
                                        #   in Loop: Header=BB16_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_97:                              # %if.end467
                                        #   in Loop: Header=BB16_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB16_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_99:                              # %if.end494
                                        #   in Loop: Header=BB16_93 Depth=1
	jmp	.LBB16_93
.LBB16_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB16_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_102:                             # %if.end500
	jmp	.LBB16_103
.LBB16_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB16_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_111
.LBB16_106:                             # %if.end517
                                        #   in Loop: Header=BB16_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_108:                             # %if.end523
                                        #   in Loop: Header=BB16_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB16_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_110:                             # %if.end550
                                        #   in Loop: Header=BB16_104 Depth=1
	jmp	.LBB16_104
.LBB16_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB16_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_113:                             # %if.end556
	jmp	.LBB16_114
.LBB16_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB16_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_122
.LBB16_117:                             # %if.end573
                                        #   in Loop: Header=BB16_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_119:                             # %if.end579
                                        #   in Loop: Header=BB16_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB16_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_121:                             # %if.end606
                                        #   in Loop: Header=BB16_115 Depth=1
	jmp	.LBB16_115
.LBB16_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB16_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB16_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB16_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB16_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB16_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_135
.LBB16_130:                             # %if.end636
                                        #   in Loop: Header=BB16_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_132:                             # %if.end642
                                        #   in Loop: Header=BB16_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB16_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_134:                             # %if.end669
                                        #   in Loop: Header=BB16_128 Depth=1
	jmp	.LBB16_128
.LBB16_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB16_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB16_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_144
.LBB16_139:                             # %if.end692
                                        #   in Loop: Header=BB16_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_141:                             # %if.end698
                                        #   in Loop: Header=BB16_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB16_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_143:                             # %if.end725
                                        #   in Loop: Header=BB16_137 Depth=1
	jmp	.LBB16_137
.LBB16_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB16_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB16_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_153
.LBB16_148:                             # %if.end748
                                        #   in Loop: Header=BB16_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_150:                             # %if.end754
                                        #   in Loop: Header=BB16_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB16_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_152:                             # %if.end781
                                        #   in Loop: Header=BB16_146 Depth=1
	jmp	.LBB16_146
.LBB16_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB16_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB16_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_162
.LBB16_157:                             # %if.end804
                                        #   in Loop: Header=BB16_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_159:                             # %if.end810
                                        #   in Loop: Header=BB16_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB16_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_161:                             # %if.end837
                                        #   in Loop: Header=BB16_155 Depth=1
	jmp	.LBB16_155
.LBB16_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB16_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB16_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB16_171
.LBB16_166:                             # %if.end860
                                        #   in Loop: Header=BB16_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_168:                             # %if.end866
                                        #   in Loop: Header=BB16_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB16_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_170:                             # %if.end893
                                        #   in Loop: Header=BB16_164 Depth=1
	jmp	.LBB16_164
.LBB16_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB16_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB16_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_180
.LBB16_175:                             # %if.end911
                                        #   in Loop: Header=BB16_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_177:                             # %if.end917
                                        #   in Loop: Header=BB16_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB16_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_179:                             # %if.end944
                                        #   in Loop: Header=BB16_173 Depth=1
	jmp	.LBB16_173
.LBB16_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB16_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB16_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_189
.LBB16_184:                             # %if.end967
                                        #   in Loop: Header=BB16_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_186:                             # %if.end973
                                        #   in Loop: Header=BB16_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB16_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_188:                             # %if.end1000
                                        #   in Loop: Header=BB16_182 Depth=1
	jmp	.LBB16_182
.LBB16_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB16_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB16_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_198
.LBB16_193:                             # %if.end1023
                                        #   in Loop: Header=BB16_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_195:                             # %if.end1029
                                        #   in Loop: Header=BB16_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB16_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_197:                             # %if.end1056
                                        #   in Loop: Header=BB16_191 Depth=1
	jmp	.LBB16_191
.LBB16_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB16_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB16_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB16_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB16_218
# %bb.204:                              # %for.body
	jmp	.LBB16_205
.LBB16_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB16_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_213
.LBB16_208:                             # %if.end1094
                                        #   in Loop: Header=BB16_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_210:                             # %if.end1100
                                        #   in Loop: Header=BB16_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB16_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_212:                             # %if.end1127
                                        #   in Loop: Header=BB16_206 Depth=1
	jmp	.LBB16_206
.LBB16_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB16_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB16_216
.LBB16_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB16_216:                             # %if.end1137
	jmp	.LBB16_217
.LBB16_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_203
.LBB16_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB16_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB16_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB16_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB16_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_219
.LBB16_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB16_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB16_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB16_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB16_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB16_240
# %bb.227:                              # %for.body1160
	jmp	.LBB16_228
.LBB16_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB16_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_236
.LBB16_231:                             # %if.end1177
                                        #   in Loop: Header=BB16_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_233:                             # %if.end1183
                                        #   in Loop: Header=BB16_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB16_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_235:                             # %if.end1210
                                        #   in Loop: Header=BB16_229 Depth=1
	jmp	.LBB16_229
.LBB16_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB16_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB16_238:                             # %if.end1221
	jmp	.LBB16_239
.LBB16_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB16_226
.LBB16_240:                             # %for.end1224
	jmp	.LBB16_241
.LBB16_241:                             # %if.end1225
	jmp	.LBB16_242
.LBB16_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_223
.LBB16_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB16_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB16_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB16_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB16_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB16_254
.LBB16_249:                             # %if.end1250
                                        #   in Loop: Header=BB16_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_251:                             # %if.end1256
                                        #   in Loop: Header=BB16_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB16_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_253:                             # %if.end1283
                                        #   in Loop: Header=BB16_247 Depth=1
	jmp	.LBB16_247
.LBB16_254:                             # %while.end1284
	cmpl	$2, -100(%rbp)
	jl	.LBB16_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -100(%rbp)
	jle	.LBB16_257
.LBB16_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_257:                             # %if.end1291
	jmp	.LBB16_258
.LBB16_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB16_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB16_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB16_266
.LBB16_261:                             # %if.end1307
                                        #   in Loop: Header=BB16_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_263:                             # %if.end1313
                                        #   in Loop: Header=BB16_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB16_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_265:                             # %if.end1340
                                        #   in Loop: Header=BB16_259 Depth=1
	jmp	.LBB16_259
.LBB16_266:                             # %while.end1341
	cmpl	$1, -104(%rbp)
	jge	.LBB16_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB16_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB16_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB16_271:                             # %while.body1350
	jmp	.LBB16_272
.LBB16_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB16_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_280
.LBB16_275:                             # %if.end1368
                                        #   in Loop: Header=BB16_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_277:                             # %if.end1374
                                        #   in Loop: Header=BB16_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB16_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_279:                             # %if.end1401
                                        #   in Loop: Header=BB16_273 Depth=1
	jmp	.LBB16_273
.LBB16_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB16_282
# %bb.281:                              # %if.then1406
	jmp	.LBB16_285
.LBB16_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB16_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_284:                             # %if.end1412
	jmp	.LBB16_271
.LBB16_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_269
.LBB16_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB16_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB16_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB16_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB16_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB16_288
.LBB16_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB16_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB16_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB16_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB16_294:                             # %while.cond
                                        #   Parent Loop BB16_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB16_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB16_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB16_294
.LBB16_296:                             # %while.end1451
                                        #   in Loop: Header=BB16_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB16_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_292
.LBB16_298:                             # %for.end1457
	movl	$0, -48(%rbp)
.LBB16_299:                             # %for.cond1458
	movl	-48(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB16_343
# %bb.300:                              # %for.body1461
	jmp	.LBB16_301
.LBB16_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB16_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB16_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB16_309
.LBB16_304:                             # %if.end1478
                                        #   in Loop: Header=BB16_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_306:                             # %if.end1484
                                        #   in Loop: Header=BB16_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB16_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_308:                             # %if.end1511
                                        #   in Loop: Header=BB16_302 Depth=1
	jmp	.LBB16_302
.LBB16_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB16_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB16_341
# %bb.311:                              # %for.body1516
	jmp	.LBB16_312
.LBB16_312:                             # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB16_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB16_315
.LBB16_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_315:                             # %if.end1525
	jmp	.LBB16_316
.LBB16_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB16_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_324
.LBB16_319:                             # %if.end1543
                                        #   in Loop: Header=BB16_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_321:                             # %if.end1549
                                        #   in Loop: Header=BB16_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB16_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_323:                             # %if.end1576
                                        #   in Loop: Header=BB16_317 Depth=1
	jmp	.LBB16_317
.LBB16_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB16_326
# %bb.325:                              # %if.then1581
	jmp	.LBB16_339
.LBB16_326:                             # %if.end1582
	jmp	.LBB16_327
.LBB16_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB16_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_335
.LBB16_330:                             # %if.end1600
                                        #   in Loop: Header=BB16_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_332:                             # %if.end1606
                                        #   in Loop: Header=BB16_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB16_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_334:                             # %if.end1633
                                        #   in Loop: Header=BB16_328 Depth=1
	jmp	.LBB16_328
.LBB16_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB16_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB16_338
.LBB16_337:                             # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB16_338:                             # %if.end1642
	jmp	.LBB16_312
.LBB16_339:                             # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_310
.LBB16_341:                             # %for.end1651
	jmp	.LBB16_342
.LBB16_342:                             # %for.inc1652
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB16_299
.LBB16_343:                             # %for.end1654
	movl	$0, -48(%rbp)
.LBB16_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_346 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB16_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB16_344 Depth=1
	movl	$32, -152(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB16_346:                             # %for.cond1659
                                        #   Parent Loop BB16_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB16_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB16_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-180(%rbp), %eax
	jle	.LBB16_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB16_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -180(%rbp)
.LBB16_349:                             # %if.end1678
                                        #   in Loop: Header=BB16_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB16_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB16_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -152(%rbp)
.LBB16_351:                             # %if.end1694
                                        #   in Loop: Header=BB16_346 Depth=2
	jmp	.LBB16_352
.LBB16_352:                             # %for.inc1695
                                        #   in Loop: Header=BB16_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_346
.LBB16_353:                             # %for.end1697
                                        #   in Loop: Header=BB16_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-152(%rbp), %r8d
	movl	-180(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-152(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB16_344 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB16_344
.LBB16_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -132(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
.LBB16_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB16_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB16_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB16_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_356
.LBB16_359:                             # %for.end1728
	movl	$4095, -144(%rbp)       # imm = 0xFFF
	movl	$15, -140(%rbp)
.LBB16_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_362 Depth 2
	cmpl	$0, -140(%rbp)
	jl	.LBB16_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB16_360 Depth=1
	movl	$15, -160(%rbp)
.LBB16_362:                             # %for.cond1733
                                        #   Parent Loop BB16_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -160(%rbp)
	jl	.LBB16_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB16_362 Depth=2
	movl	-140(%rbp), %eax
	shll	$4, %eax
	addl	-160(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-144(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB16_362 Depth=2
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB16_362
.LBB16_365:                             # %for.end1745
                                        #   in Loop: Header=BB16_360 Depth=1
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB16_360 Depth=1
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB16_360
.LBB16_367:                             # %for.end1751
	movl	$0, -52(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB16_371
# %bb.368:                              # %if.then1754
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB16_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_370:                             # %if.end1759
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB16_371:                             # %if.end1779
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB16_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB16_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB16_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -376(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-376(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_380
.LBB16_375:                             # %if.end1799
                                        #   in Loop: Header=BB16_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_377:                             # %if.end1805
                                        #   in Loop: Header=BB16_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB16_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_379:                             # %if.end1832
                                        #   in Loop: Header=BB16_373 Depth=1
	jmp	.LBB16_373
.LBB16_380:                             # %while.end1833
	jmp	.LBB16_381
.LBB16_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB16_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB16_385
# %bb.384:                              # %if.then1844
	jmp	.LBB16_395
.LBB16_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB16_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB16_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB16_394
.LBB16_389:                             # %if.end1863
                                        #   in Loop: Header=BB16_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_391:                             # %if.end1869
                                        #   in Loop: Header=BB16_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB16_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_393:                             # %if.end1896
                                        #   in Loop: Header=BB16_387 Depth=1
	jmp	.LBB16_387
.LBB16_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_381
.LBB16_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB16_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB16_398
.LBB16_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_398:                             # %if.end1913
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB16_399:                             # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jne	.LBB16_401
# %bb.400:                              # %if.then1923
	jmp	.LBB16_520
.LBB16_401:                             # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB16_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB16_458
.LBB16_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB16_404:                             # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB16_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB16_409
.LBB16_406:                             # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB16_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB16_408:                             # %if.end1942
	jmp	.LBB16_409
.LBB16_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB16_413
# %bb.410:                              # %if.then1947
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB16_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_412:                             # %if.end1952
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB16_413:                             # %if.end1972
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB16_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB16_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB16_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -220(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-220(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_422
.LBB16_417:                             # %if.end1992
                                        #   in Loop: Header=BB16_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_419:                             # %if.end1998
                                        #   in Loop: Header=BB16_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB16_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_421:                             # %if.end2025
                                        #   in Loop: Header=BB16_415 Depth=1
	jmp	.LBB16_415
.LBB16_422:                             # %while.end2026
	jmp	.LBB16_423
.LBB16_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB16_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB16_427
# %bb.426:                              # %if.then2037
	jmp	.LBB16_437
.LBB16_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB16_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB16_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB16_436
.LBB16_431:                             # %if.end2056
                                        #   in Loop: Header=BB16_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_433:                             # %if.end2062
                                        #   in Loop: Header=BB16_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB16_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_435:                             # %if.end2089
                                        #   in Loop: Header=BB16_429 Depth=1
	jmp	.LBB16_429
.LBB16_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_423
.LBB16_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB16_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB16_440
.LBB16_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_440:                             # %if.end2106
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB16_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB16_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB16_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB16_451
# %bb.445:                              # %if.then2130
	jmp	.LBB16_446
.LBB16_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB16_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB16_446 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB16_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_449:                             # %if.end2138
                                        #   in Loop: Header=BB16_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB16_446
.LBB16_450:                             # %while.end2145
	jmp	.LBB16_457
.LBB16_451:                             # %if.else2146
	jmp	.LBB16_452
.LBB16_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB16_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB16_452 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB16_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_455:                             # %if.end2154
                                        #   in Loop: Header=BB16_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB16_452
.LBB16_456:                             # %while.end2161
	jmp	.LBB16_457
.LBB16_457:                             # %if.end2162
	jmp	.LBB16_399
.LBB16_458:                             # %if.else2163
	movl	-52(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.LBB16_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_460:                             # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB16_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB16_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB16_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB16_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-96(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-96(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB16_462
.LBB16_464:                             # %while.end2218
	jmp	.LBB16_465
.LBB16_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB16_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB16_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB16_465
.LBB16_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB16_485
.LBB16_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-252(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB16_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB16_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB16_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB16_469
.LBB16_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB16_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB16_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB16_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB16_472
.LBB16_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB16_484
# %bb.475:                              # %if.then2302
	movl	$4095, -156(%rbp)       # imm = 0xFFF
	movl	$15, -136(%rbp)
.LBB16_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_478 Depth 2
	cmpl	$0, -136(%rbp)
	jl	.LBB16_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB16_476 Depth=1
	movl	$15, -148(%rbp)
.LBB16_478:                             # %for.cond2307
                                        #   Parent Loop BB16_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB16_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB16_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-156(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB16_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB16_478
.LBB16_481:                             # %for.end2324
                                        #   in Loop: Header=BB16_476 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB16_476 Depth=1
	movl	-136(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB16_476
.LBB16_483:                             # %for.end2331
	jmp	.LBB16_484
.LBB16_484:                             # %if.end2332
	jmp	.LBB16_485
.LBB16_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB16_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB16_488
.LBB16_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB16_488:                             # %if.end2359
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB16_492
# %bb.489:                              # %if.then2363
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB16_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_491:                             # %if.end2368
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB16_492:                             # %if.end2388
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB16_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB16_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB16_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-348(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_501
.LBB16_496:                             # %if.end2408
                                        #   in Loop: Header=BB16_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_498:                             # %if.end2414
                                        #   in Loop: Header=BB16_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB16_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_500:                             # %if.end2441
                                        #   in Loop: Header=BB16_494 Depth=1
	jmp	.LBB16_494
.LBB16_501:                             # %while.end2442
	jmp	.LBB16_502
.LBB16_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB16_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB16_506
# %bb.505:                              # %if.then2453
	jmp	.LBB16_516
.LBB16_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB16_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB16_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB16_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB16_515
.LBB16_510:                             # %if.end2472
                                        #   in Loop: Header=BB16_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_512:                             # %if.end2478
                                        #   in Loop: Header=BB16_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB16_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_514:                             # %if.end2505
                                        #   in Loop: Header=BB16_508 Depth=1
	jmp	.LBB16_508
.LBB16_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB16_502
.LBB16_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB16_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB16_519
.LBB16_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_519:                             # %if.end2522
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB16_399
.LBB16_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB16_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB16_523
.LBB16_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB16_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB16_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB16_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB16_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_524
.LBB16_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB16_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB16_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB16_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB16_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_528
.LBB16_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB16_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB16_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB16_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB16_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB16_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB16_536
.LBB16_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_536:                             # %if.end2584
                                        #   in Loop: Header=BB16_532 Depth=1
	jmp	.LBB16_537
.LBB16_537:                             # %for.inc2585
                                        #   in Loop: Header=BB16_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_532
.LBB16_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB16_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB16_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB16_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB16_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB16_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB16_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB16_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_542
.LBB16_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB16_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB16_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB16_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB16_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB16_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB16_550
.LBB16_549:                             # %if.else2646
                                        #   in Loop: Header=BB16_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB16_550:                             # %if.end2664
                                        #   in Loop: Header=BB16_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB16_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_546
.LBB16_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB16_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -204(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB16_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB16_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB16_556
.LBB16_555:                             # %if.else2727
                                        #   in Loop: Header=BB16_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB16_556:                             # %if.end2742
                                        #   in Loop: Header=BB16_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB16_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB16_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB16_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB16_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB16_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB16_562:                             # %if.end2791
	jmp	.LBB16_563
.LBB16_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB16_565
.LBB16_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB16_565:                             # %if.end2826
	jmp	.LBB16_578
.LBB16_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB16_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB16_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB16_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB16_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_567
.LBB16_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB16_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB16_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB16_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB16_574:                             # %if.end2893
	jmp	.LBB16_575
.LBB16_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB16_577
.LBB16_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB16_577:                             # %if.end2918
	jmp	.LBB16_578
.LBB16_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_579:                             # %endhdr_2
	jmp	.LBB16_580
.LBB16_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB16_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_588
.LBB16_583:                             # %if.end2937
                                        #   in Loop: Header=BB16_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_585:                             # %if.end2943
                                        #   in Loop: Header=BB16_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB16_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_587:                             # %if.end2970
                                        #   in Loop: Header=BB16_581 Depth=1
	jmp	.LBB16_581
.LBB16_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB16_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_590:                             # %if.end2976
	jmp	.LBB16_591
.LBB16_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB16_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_599
.LBB16_594:                             # %if.end2994
                                        #   in Loop: Header=BB16_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_596:                             # %if.end3000
                                        #   in Loop: Header=BB16_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB16_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_598:                             # %if.end3027
                                        #   in Loop: Header=BB16_592 Depth=1
	jmp	.LBB16_592
.LBB16_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB16_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_601:                             # %if.end3033
	jmp	.LBB16_602
.LBB16_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB16_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_610
.LBB16_605:                             # %if.end3051
                                        #   in Loop: Header=BB16_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_607:                             # %if.end3057
                                        #   in Loop: Header=BB16_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB16_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_609:                             # %if.end3084
                                        #   in Loop: Header=BB16_603 Depth=1
	jmp	.LBB16_603
.LBB16_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB16_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_612:                             # %if.end3090
	jmp	.LBB16_613
.LBB16_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB16_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_621
.LBB16_616:                             # %if.end3108
                                        #   in Loop: Header=BB16_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_618:                             # %if.end3114
                                        #   in Loop: Header=BB16_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB16_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_620:                             # %if.end3141
                                        #   in Loop: Header=BB16_614 Depth=1
	jmp	.LBB16_614
.LBB16_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB16_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_623:                             # %if.end3147
	jmp	.LBB16_624
.LBB16_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB16_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_632
.LBB16_627:                             # %if.end3165
                                        #   in Loop: Header=BB16_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_629:                             # %if.end3171
                                        #   in Loop: Header=BB16_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB16_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_631:                             # %if.end3198
                                        #   in Loop: Header=BB16_625 Depth=1
	jmp	.LBB16_625
.LBB16_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB16_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB16_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB16_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_643
.LBB16_638:                             # %if.end3222
                                        #   in Loop: Header=BB16_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_640:                             # %if.end3228
                                        #   in Loop: Header=BB16_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB16_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_642:                             # %if.end3255
                                        #   in Loop: Header=BB16_636 Depth=1
	jmp	.LBB16_636
.LBB16_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB16_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB16_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_652
.LBB16_647:                             # %if.end3279
                                        #   in Loop: Header=BB16_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_649:                             # %if.end3285
                                        #   in Loop: Header=BB16_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB16_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_651:                             # %if.end3312
                                        #   in Loop: Header=BB16_645 Depth=1
	jmp	.LBB16_645
.LBB16_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB16_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB16_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_661
.LBB16_656:                             # %if.end3336
                                        #   in Loop: Header=BB16_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_658:                             # %if.end3342
                                        #   in Loop: Header=BB16_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB16_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_660:                             # %if.end3369
                                        #   in Loop: Header=BB16_654 Depth=1
	jmp	.LBB16_654
.LBB16_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB16_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB16_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB16_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB16_670
.LBB16_665:                             # %if.end3393
                                        #   in Loop: Header=BB16_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB16_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB16_673
.LBB16_667:                             # %if.end3399
                                        #   in Loop: Header=BB16_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB16_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB16_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB16_669:                             # %if.end3426
                                        #   in Loop: Header=BB16_663 Depth=1
	jmp	.LBB16_663
.LBB16_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB16_673
.LBB16_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB16_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-184(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-312(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$1278555793, -228(%rbp) # imm = 0x4C353691
	jne	.LBB16_675
.LBB16_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_674
.Lfunc_end16:
	.size	BZ2_decompress.15, .Lfunc_end16-BZ2_decompress.15
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI16_0:
	.quad	.LBB16_4
	.quad	.LBB16_15
	.quad	.LBB16_26
	.quad	.LBB16_37
	.quad	.LBB16_57
	.quad	.LBB16_70
	.quad	.LBB16_81
	.quad	.LBB16_92
	.quad	.LBB16_103
	.quad	.LBB16_114
	.quad	.LBB16_127
	.quad	.LBB16_136
	.quad	.LBB16_145
	.quad	.LBB16_154
	.quad	.LBB16_163
	.quad	.LBB16_172
	.quad	.LBB16_181
	.quad	.LBB16_190
	.quad	.LBB16_205
	.quad	.LBB16_228
	.quad	.LBB16_246
	.quad	.LBB16_258
	.quad	.LBB16_272
	.quad	.LBB16_301
	.quad	.LBB16_316
	.quad	.LBB16_327
	.quad	.LBB16_372
	.quad	.LBB16_386
	.quad	.LBB16_414
	.quad	.LBB16_428
	.quad	.LBB16_493
	.quad	.LBB16_507
	.quad	.LBB16_580
	.quad	.LBB16_591
	.quad	.LBB16_602
	.quad	.LBB16_613
	.quad	.LBB16_624
	.quad	.LBB16_635
	.quad	.LBB16_644
	.quad	.LBB16_653
	.quad	.LBB16_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.16       # -- Begin function BZ2_decompress.16
	.p2align	4, 0x90
	.type	BZ2_decompress.16,@function
BZ2_decompress.16:                      # @BZ2_decompress.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$1310947773, -332(%rbp) # imm = 0x4E2379BD
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB17_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB17_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB17_671
# %bb.3:                                # %if.end
	movq	.LJTI17_0(,%rax,8), %rax
	jmpq	*%rax
.LBB17_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB17_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_12
.LBB17_7:                               # %if.end33
                                        #   in Loop: Header=BB17_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_9:                               # %if.end38
                                        #   in Loop: Header=BB17_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB17_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_11:                              # %if.end56
                                        #   in Loop: Header=BB17_5 Depth=1
	jmp	.LBB17_5
.LBB17_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB17_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB17_673
.LBB17_14:                              # %if.end61
	jmp	.LBB17_15
.LBB17_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB17_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_23
.LBB17_18:                              # %if.end78
                                        #   in Loop: Header=BB17_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_20:                              # %if.end84
                                        #   in Loop: Header=BB17_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB17_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_22:                              # %if.end111
                                        #   in Loop: Header=BB17_16 Depth=1
	jmp	.LBB17_16
.LBB17_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB17_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB17_673
.LBB17_25:                              # %if.end117
	jmp	.LBB17_26
.LBB17_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB17_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_34
.LBB17_29:                              # %if.end134
                                        #   in Loop: Header=BB17_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_31:                              # %if.end140
                                        #   in Loop: Header=BB17_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB17_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_33:                              # %if.end167
                                        #   in Loop: Header=BB17_27 Depth=1
	jmp	.LBB17_27
.LBB17_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB17_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB17_673
.LBB17_36:                              # %if.end173
	jmp	.LBB17_37
.LBB17_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB17_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB17_45
.LBB17_40:                              # %if.end189
                                        #   in Loop: Header=BB17_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_42:                              # %if.end195
                                        #   in Loop: Header=BB17_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB17_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_44:                              # %if.end222
                                        #   in Loop: Header=BB17_38 Depth=1
	jmp	.LBB17_38
.LBB17_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB17_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB17_48
.LBB17_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB17_673
.LBB17_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB17_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB17_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB17_52
.LBB17_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB17_673
.LBB17_52:                              # %if.end257
	jmp	.LBB17_56
.LBB17_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB17_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB17_673
.LBB17_55:                              # %if.end270
	jmp	.LBB17_56
.LBB17_56:                              # %if.end271
	jmp	.LBB17_57
.LBB17_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB17_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_65
.LBB17_60:                              # %if.end288
                                        #   in Loop: Header=BB17_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_62:                              # %if.end294
                                        #   in Loop: Header=BB17_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB17_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_64:                              # %if.end321
                                        #   in Loop: Header=BB17_58 Depth=1
	jmp	.LBB17_58
.LBB17_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB17_67
# %bb.66:                               # %if.then326
	jmp	.LBB17_579
.LBB17_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB17_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_69:                              # %if.end332
	jmp	.LBB17_70
.LBB17_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB17_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_78
.LBB17_73:                              # %if.end349
                                        #   in Loop: Header=BB17_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_75:                              # %if.end355
                                        #   in Loop: Header=BB17_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB17_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_77:                              # %if.end382
                                        #   in Loop: Header=BB17_71 Depth=1
	jmp	.LBB17_71
.LBB17_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB17_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_80:                              # %if.end388
	jmp	.LBB17_81
.LBB17_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB17_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_89
.LBB17_84:                              # %if.end405
                                        #   in Loop: Header=BB17_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_86:                              # %if.end411
                                        #   in Loop: Header=BB17_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB17_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_88:                              # %if.end438
                                        #   in Loop: Header=BB17_82 Depth=1
	jmp	.LBB17_82
.LBB17_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB17_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_91:                              # %if.end444
	jmp	.LBB17_92
.LBB17_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB17_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_100
.LBB17_95:                              # %if.end461
                                        #   in Loop: Header=BB17_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_97:                              # %if.end467
                                        #   in Loop: Header=BB17_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB17_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_99:                              # %if.end494
                                        #   in Loop: Header=BB17_93 Depth=1
	jmp	.LBB17_93
.LBB17_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB17_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_102:                             # %if.end500
	jmp	.LBB17_103
.LBB17_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB17_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_111
.LBB17_106:                             # %if.end517
                                        #   in Loop: Header=BB17_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_108:                             # %if.end523
                                        #   in Loop: Header=BB17_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB17_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_110:                             # %if.end550
                                        #   in Loop: Header=BB17_104 Depth=1
	jmp	.LBB17_104
.LBB17_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB17_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_113:                             # %if.end556
	jmp	.LBB17_114
.LBB17_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB17_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_122
.LBB17_117:                             # %if.end573
                                        #   in Loop: Header=BB17_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_119:                             # %if.end579
                                        #   in Loop: Header=BB17_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB17_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_121:                             # %if.end606
                                        #   in Loop: Header=BB17_115 Depth=1
	jmp	.LBB17_115
.LBB17_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB17_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB17_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB17_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB17_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB17_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_135
.LBB17_130:                             # %if.end636
                                        #   in Loop: Header=BB17_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_132:                             # %if.end642
                                        #   in Loop: Header=BB17_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB17_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_134:                             # %if.end669
                                        #   in Loop: Header=BB17_128 Depth=1
	jmp	.LBB17_128
.LBB17_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB17_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB17_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_144
.LBB17_139:                             # %if.end692
                                        #   in Loop: Header=BB17_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_141:                             # %if.end698
                                        #   in Loop: Header=BB17_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB17_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_143:                             # %if.end725
                                        #   in Loop: Header=BB17_137 Depth=1
	jmp	.LBB17_137
.LBB17_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB17_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB17_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_153
.LBB17_148:                             # %if.end748
                                        #   in Loop: Header=BB17_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_150:                             # %if.end754
                                        #   in Loop: Header=BB17_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB17_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_152:                             # %if.end781
                                        #   in Loop: Header=BB17_146 Depth=1
	jmp	.LBB17_146
.LBB17_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB17_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB17_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_162
.LBB17_157:                             # %if.end804
                                        #   in Loop: Header=BB17_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_159:                             # %if.end810
                                        #   in Loop: Header=BB17_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB17_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_161:                             # %if.end837
                                        #   in Loop: Header=BB17_155 Depth=1
	jmp	.LBB17_155
.LBB17_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB17_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB17_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB17_171
.LBB17_166:                             # %if.end860
                                        #   in Loop: Header=BB17_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_168:                             # %if.end866
                                        #   in Loop: Header=BB17_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB17_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_170:                             # %if.end893
                                        #   in Loop: Header=BB17_164 Depth=1
	jmp	.LBB17_164
.LBB17_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB17_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB17_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_180
.LBB17_175:                             # %if.end911
                                        #   in Loop: Header=BB17_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_177:                             # %if.end917
                                        #   in Loop: Header=BB17_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB17_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_179:                             # %if.end944
                                        #   in Loop: Header=BB17_173 Depth=1
	jmp	.LBB17_173
.LBB17_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB17_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB17_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_189
.LBB17_184:                             # %if.end967
                                        #   in Loop: Header=BB17_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_186:                             # %if.end973
                                        #   in Loop: Header=BB17_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB17_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_188:                             # %if.end1000
                                        #   in Loop: Header=BB17_182 Depth=1
	jmp	.LBB17_182
.LBB17_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB17_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB17_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_198
.LBB17_193:                             # %if.end1023
                                        #   in Loop: Header=BB17_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_195:                             # %if.end1029
                                        #   in Loop: Header=BB17_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB17_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_197:                             # %if.end1056
                                        #   in Loop: Header=BB17_191 Depth=1
	jmp	.LBB17_191
.LBB17_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB17_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB17_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB17_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB17_218
# %bb.204:                              # %for.body
	jmp	.LBB17_205
.LBB17_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB17_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_213
.LBB17_208:                             # %if.end1094
                                        #   in Loop: Header=BB17_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_210:                             # %if.end1100
                                        #   in Loop: Header=BB17_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB17_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_212:                             # %if.end1127
                                        #   in Loop: Header=BB17_206 Depth=1
	jmp	.LBB17_206
.LBB17_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB17_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB17_216
.LBB17_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB17_216:                             # %if.end1137
	jmp	.LBB17_217
.LBB17_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_203
.LBB17_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB17_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB17_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB17_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB17_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_219
.LBB17_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB17_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB17_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB17_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB17_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB17_240
# %bb.227:                              # %for.body1160
	jmp	.LBB17_228
.LBB17_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB17_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_236
.LBB17_231:                             # %if.end1177
                                        #   in Loop: Header=BB17_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_233:                             # %if.end1183
                                        #   in Loop: Header=BB17_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB17_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_235:                             # %if.end1210
                                        #   in Loop: Header=BB17_229 Depth=1
	jmp	.LBB17_229
.LBB17_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB17_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB17_238:                             # %if.end1221
	jmp	.LBB17_239
.LBB17_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB17_226
.LBB17_240:                             # %for.end1224
	jmp	.LBB17_241
.LBB17_241:                             # %if.end1225
	jmp	.LBB17_242
.LBB17_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_223
.LBB17_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB17_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -136(%rbp)
.LBB17_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB17_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB17_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB17_254
.LBB17_249:                             # %if.end1250
                                        #   in Loop: Header=BB17_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_251:                             # %if.end1256
                                        #   in Loop: Header=BB17_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB17_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_253:                             # %if.end1283
                                        #   in Loop: Header=BB17_247 Depth=1
	jmp	.LBB17_247
.LBB17_254:                             # %while.end1284
	cmpl	$2, -96(%rbp)
	jl	.LBB17_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -96(%rbp)
	jle	.LBB17_257
.LBB17_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_257:                             # %if.end1291
	jmp	.LBB17_258
.LBB17_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB17_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB17_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB17_266
.LBB17_261:                             # %if.end1307
                                        #   in Loop: Header=BB17_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_263:                             # %if.end1313
                                        #   in Loop: Header=BB17_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB17_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_265:                             # %if.end1340
                                        #   in Loop: Header=BB17_259 Depth=1
	jmp	.LBB17_259
.LBB17_266:                             # %while.end1341
	cmpl	$1, -100(%rbp)
	jge	.LBB17_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB17_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB17_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB17_271:                             # %while.body1350
	jmp	.LBB17_272
.LBB17_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB17_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_280
.LBB17_275:                             # %if.end1368
                                        #   in Loop: Header=BB17_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_277:                             # %if.end1374
                                        #   in Loop: Header=BB17_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB17_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_279:                             # %if.end1401
                                        #   in Loop: Header=BB17_273 Depth=1
	jmp	.LBB17_273
.LBB17_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB17_282
# %bb.281:                              # %if.then1406
	jmp	.LBB17_285
.LBB17_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB17_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_284:                             # %if.end1412
	jmp	.LBB17_271
.LBB17_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_269
.LBB17_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB17_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB17_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB17_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB17_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB17_288
.LBB17_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB17_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB17_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB17_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB17_294:                             # %while.cond
                                        #   Parent Loop BB17_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB17_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB17_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB17_294
.LBB17_296:                             # %while.end1451
                                        #   in Loop: Header=BB17_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB17_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_292
.LBB17_298:                             # %for.end1457
	movl	$0, -52(%rbp)
.LBB17_299:                             # %for.cond1458
	movl	-52(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB17_343
# %bb.300:                              # %for.body1461
	jmp	.LBB17_301
.LBB17_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB17_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB17_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB17_309
.LBB17_304:                             # %if.end1478
                                        #   in Loop: Header=BB17_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_306:                             # %if.end1484
                                        #   in Loop: Header=BB17_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB17_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_308:                             # %if.end1511
                                        #   in Loop: Header=BB17_302 Depth=1
	jmp	.LBB17_302
.LBB17_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB17_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB17_341
# %bb.311:                              # %for.body1516
	jmp	.LBB17_312
.LBB17_312:                             # %while.body1518
	cmpl	$1, -88(%rbp)
	jl	.LBB17_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -88(%rbp)
	jle	.LBB17_315
.LBB17_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_315:                             # %if.end1525
	jmp	.LBB17_316
.LBB17_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB17_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_324
.LBB17_319:                             # %if.end1543
                                        #   in Loop: Header=BB17_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_321:                             # %if.end1549
                                        #   in Loop: Header=BB17_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB17_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_323:                             # %if.end1576
                                        #   in Loop: Header=BB17_317 Depth=1
	jmp	.LBB17_317
.LBB17_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB17_326
# %bb.325:                              # %if.then1581
	jmp	.LBB17_339
.LBB17_326:                             # %if.end1582
	jmp	.LBB17_327
.LBB17_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB17_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_335
.LBB17_330:                             # %if.end1600
                                        #   in Loop: Header=BB17_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_332:                             # %if.end1606
                                        #   in Loop: Header=BB17_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB17_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_334:                             # %if.end1633
                                        #   in Loop: Header=BB17_328 Depth=1
	jmp	.LBB17_328
.LBB17_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB17_337
# %bb.336:                              # %if.then1638
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB17_338
.LBB17_337:                             # %if.else1640
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
.LBB17_338:                             # %if.end1642
	jmp	.LBB17_312
.LBB17_339:                             # %while.end1643
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_310
.LBB17_341:                             # %for.end1651
	jmp	.LBB17_342
.LBB17_342:                             # %for.inc1652
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB17_299
.LBB17_343:                             # %for.end1654
	movl	$0, -52(%rbp)
.LBB17_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_346 Depth 2
	movl	-52(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB17_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB17_344 Depth=1
	movl	$32, -144(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB17_346:                             # %for.cond1659
                                        #   Parent Loop BB17_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB17_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB17_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-184(%rbp), %eax
	jle	.LBB17_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB17_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -184(%rbp)
.LBB17_349:                             # %if.end1678
                                        #   in Loop: Header=BB17_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB17_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB17_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-52(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -144(%rbp)
.LBB17_351:                             # %if.end1694
                                        #   in Loop: Header=BB17_346 Depth=2
	jmp	.LBB17_352
.LBB17_352:                             # %for.inc1695
                                        #   in Loop: Header=BB17_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_346
.LBB17_353:                             # %for.end1697
                                        #   in Loop: Header=BB17_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-52(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-52(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-144(%rbp), %r8d
	movl	-184(%rbp), %r9d
	movl	-136(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-144(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB17_344 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB17_344
.LBB17_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -140(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB17_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB17_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB17_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB17_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_356
.LBB17_359:                             # %for.end1728
	movl	$4095, -156(%rbp)       # imm = 0xFFF
	movl	$15, -128(%rbp)
.LBB17_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_362 Depth 2
	cmpl	$0, -128(%rbp)
	jl	.LBB17_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB17_360 Depth=1
	movl	$15, -152(%rbp)
.LBB17_362:                             # %for.cond1733
                                        #   Parent Loop BB17_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -152(%rbp)
	jl	.LBB17_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB17_362 Depth=2
	movl	-128(%rbp), %eax
	shll	$4, %eax
	addl	-152(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-156(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB17_362 Depth=2
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB17_362
.LBB17_365:                             # %for.end1745
                                        #   in Loop: Header=BB17_360 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB17_360 Depth=1
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB17_360
.LBB17_367:                             # %for.end1751
	movl	$0, -48(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB17_371
# %bb.368:                              # %if.then1754
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB17_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_370:                             # %if.end1759
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB17_371:                             # %if.end1779
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB17_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB17_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB17_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -304(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-304(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB17_380
.LBB17_375:                             # %if.end1799
                                        #   in Loop: Header=BB17_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_377:                             # %if.end1805
                                        #   in Loop: Header=BB17_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB17_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_379:                             # %if.end1832
                                        #   in Loop: Header=BB17_373 Depth=1
	jmp	.LBB17_373
.LBB17_380:                             # %while.end1833
	jmp	.LBB17_381
.LBB17_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB17_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB17_385
# %bb.384:                              # %if.then1844
	jmp	.LBB17_395
.LBB17_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB17_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB17_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB17_394
.LBB17_389:                             # %if.end1863
                                        #   in Loop: Header=BB17_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_391:                             # %if.end1869
                                        #   in Loop: Header=BB17_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB17_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_393:                             # %if.end1896
                                        #   in Loop: Header=BB17_387 Depth=1
	jmp	.LBB17_387
.LBB17_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB17_381
.LBB17_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB17_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB17_398
.LBB17_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_398:                             # %if.end1913
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
.LBB17_399:                             # %while.body1920
	movl	-80(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jne	.LBB17_401
# %bb.400:                              # %if.then1923
	jmp	.LBB17_520
.LBB17_401:                             # %if.end1924
	cmpl	$0, -80(%rbp)
	je	.LBB17_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -80(%rbp)
	jne	.LBB17_458
.LBB17_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB17_404:                             # %do.body
	cmpl	$0, -80(%rbp)
	jne	.LBB17_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB17_409
.LBB17_406:                             # %if.else1936
	cmpl	$1, -80(%rbp)
	jne	.LBB17_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB17_408:                             # %if.end1942
	jmp	.LBB17_409
.LBB17_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB17_413
# %bb.410:                              # %if.then1947
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB17_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_412:                             # %if.end1952
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB17_413:                             # %if.end1972
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB17_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB17_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB17_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -272(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-272(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB17_422
.LBB17_417:                             # %if.end1992
                                        #   in Loop: Header=BB17_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_419:                             # %if.end1998
                                        #   in Loop: Header=BB17_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB17_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_421:                             # %if.end2025
                                        #   in Loop: Header=BB17_415 Depth=1
	jmp	.LBB17_415
.LBB17_422:                             # %while.end2026
	jmp	.LBB17_423
.LBB17_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB17_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB17_427
# %bb.426:                              # %if.then2037
	jmp	.LBB17_437
.LBB17_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB17_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB17_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB17_436
.LBB17_431:                             # %if.end2056
                                        #   in Loop: Header=BB17_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_433:                             # %if.end2062
                                        #   in Loop: Header=BB17_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB17_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_435:                             # %if.end2089
                                        #   in Loop: Header=BB17_429 Depth=1
	jmp	.LBB17_429
.LBB17_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB17_423
.LBB17_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB17_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB17_440
.LBB17_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_440:                             # %if.end2106
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB17_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -80(%rbp)
	sete	%al
.LBB17_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB17_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB17_451
# %bb.445:                              # %if.then2130
	jmp	.LBB17_446
.LBB17_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB17_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB17_446 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB17_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_449:                             # %if.end2138
                                        #   in Loop: Header=BB17_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB17_446
.LBB17_450:                             # %while.end2145
	jmp	.LBB17_457
.LBB17_451:                             # %if.else2146
	jmp	.LBB17_452
.LBB17_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB17_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB17_452 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB17_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_455:                             # %if.end2154
                                        #   in Loop: Header=BB17_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB17_452
.LBB17_456:                             # %while.end2161
	jmp	.LBB17_457
.LBB17_457:                             # %if.end2162
	jmp	.LBB17_399
.LBB17_458:                             # %if.else2163
	movl	-48(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB17_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_460:                             # %if.end2167
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB17_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB17_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB17_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB17_462 Depth=1
	movl	-76(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB17_462
.LBB17_464:                             # %while.end2218
	jmp	.LBB17_465
.LBB17_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB17_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB17_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-76(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB17_465
.LBB17_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB17_485
.LBB17_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-356(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB17_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB17_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB17_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-76(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB17_469
.LBB17_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB17_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -92(%rbp)
	jle	.LBB17_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB17_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-92(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB17_472
.LBB17_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB17_484
# %bb.475:                              # %if.then2302
	movl	$4095, -160(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB17_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_478 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB17_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB17_476 Depth=1
	movl	$15, -148(%rbp)
.LBB17_478:                             # %for.cond2307
                                        #   Parent Loop BB17_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB17_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB17_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-160(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB17_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB17_478
.LBB17_481:                             # %for.end2324
                                        #   in Loop: Header=BB17_476 Depth=1
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB17_476 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB17_476
.LBB17_483:                             # %for.end2331
	jmp	.LBB17_484
.LBB17_484:                             # %if.end2332
	jmp	.LBB17_485
.LBB17_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB17_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB17_488
.LBB17_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB17_488:                             # %if.end2359
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB17_492
# %bb.489:                              # %if.then2363
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB17_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_491:                             # %if.end2368
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB17_492:                             # %if.end2388
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB17_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB17_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB17_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -264(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-264(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB17_501
.LBB17_496:                             # %if.end2408
                                        #   in Loop: Header=BB17_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_498:                             # %if.end2414
                                        #   in Loop: Header=BB17_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB17_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_500:                             # %if.end2441
                                        #   in Loop: Header=BB17_494 Depth=1
	jmp	.LBB17_494
.LBB17_501:                             # %while.end2442
	jmp	.LBB17_502
.LBB17_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB17_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB17_506
# %bb.505:                              # %if.then2453
	jmp	.LBB17_516
.LBB17_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB17_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB17_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB17_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB17_515
.LBB17_510:                             # %if.end2472
                                        #   in Loop: Header=BB17_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_512:                             # %if.end2478
                                        #   in Loop: Header=BB17_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB17_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_514:                             # %if.end2505
                                        #   in Loop: Header=BB17_508 Depth=1
	jmp	.LBB17_508
.LBB17_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB17_502
.LBB17_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB17_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB17_519
.LBB17_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_519:                             # %if.end2522
	movq	-176(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB17_399
.LBB17_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB17_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-48(%rbp), %eax
	jl	.LBB17_523
.LBB17_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB17_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB17_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB17_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB17_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_524
.LBB17_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB17_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB17_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB17_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB17_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_528
.LBB17_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB17_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB17_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB17_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB17_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB17_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB17_536
.LBB17_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_536:                             # %if.end2584
                                        #   in Loop: Header=BB17_532 Depth=1
	jmp	.LBB17_537
.LBB17_537:                             # %for.inc2585
                                        #   in Loop: Header=BB17_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_532
.LBB17_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB17_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB17_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB17_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB17_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB17_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB17_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB17_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_542
.LBB17_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB17_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB17_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB17_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB17_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB17_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB17_550
.LBB17_549:                             # %if.else2646
                                        #   in Loop: Header=BB17_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB17_550:                             # %if.end2664
                                        #   in Loop: Header=BB17_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB17_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_546
.LBB17_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB17_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -308(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB17_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB17_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB17_556
.LBB17_555:                             # %if.else2727
                                        #   in Loop: Header=BB17_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB17_556:                             # %if.end2742
                                        #   in Loop: Header=BB17_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-308(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB17_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB17_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB17_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB17_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB17_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB17_562:                             # %if.end2791
	jmp	.LBB17_563
.LBB17_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB17_565
.LBB17_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB17_565:                             # %if.end2826
	jmp	.LBB17_578
.LBB17_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB17_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB17_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB17_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB17_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_567
.LBB17_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB17_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB17_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB17_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB17_574:                             # %if.end2893
	jmp	.LBB17_575
.LBB17_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB17_577
.LBB17_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB17_577:                             # %if.end2918
	jmp	.LBB17_578
.LBB17_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_579:                             # %endhdr_2
	jmp	.LBB17_580
.LBB17_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB17_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_588
.LBB17_583:                             # %if.end2937
                                        #   in Loop: Header=BB17_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_585:                             # %if.end2943
                                        #   in Loop: Header=BB17_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB17_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_587:                             # %if.end2970
                                        #   in Loop: Header=BB17_581 Depth=1
	jmp	.LBB17_581
.LBB17_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB17_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_590:                             # %if.end2976
	jmp	.LBB17_591
.LBB17_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB17_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-268(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_599
.LBB17_594:                             # %if.end2994
                                        #   in Loop: Header=BB17_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_596:                             # %if.end3000
                                        #   in Loop: Header=BB17_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB17_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_598:                             # %if.end3027
                                        #   in Loop: Header=BB17_592 Depth=1
	jmp	.LBB17_592
.LBB17_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB17_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_601:                             # %if.end3033
	jmp	.LBB17_602
.LBB17_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB17_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_610
.LBB17_605:                             # %if.end3051
                                        #   in Loop: Header=BB17_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_607:                             # %if.end3057
                                        #   in Loop: Header=BB17_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB17_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_609:                             # %if.end3084
                                        #   in Loop: Header=BB17_603 Depth=1
	jmp	.LBB17_603
.LBB17_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB17_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_612:                             # %if.end3090
	jmp	.LBB17_613
.LBB17_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB17_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_621
.LBB17_616:                             # %if.end3108
                                        #   in Loop: Header=BB17_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_618:                             # %if.end3114
                                        #   in Loop: Header=BB17_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB17_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_620:                             # %if.end3141
                                        #   in Loop: Header=BB17_614 Depth=1
	jmp	.LBB17_614
.LBB17_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB17_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_623:                             # %if.end3147
	jmp	.LBB17_624
.LBB17_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB17_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_632
.LBB17_627:                             # %if.end3165
                                        #   in Loop: Header=BB17_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_629:                             # %if.end3171
                                        #   in Loop: Header=BB17_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB17_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_631:                             # %if.end3198
                                        #   in Loop: Header=BB17_625 Depth=1
	jmp	.LBB17_625
.LBB17_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB17_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB17_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB17_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_643
.LBB17_638:                             # %if.end3222
                                        #   in Loop: Header=BB17_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_640:                             # %if.end3228
                                        #   in Loop: Header=BB17_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB17_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_642:                             # %if.end3255
                                        #   in Loop: Header=BB17_636 Depth=1
	jmp	.LBB17_636
.LBB17_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB17_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB17_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_652
.LBB17_647:                             # %if.end3279
                                        #   in Loop: Header=BB17_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_649:                             # %if.end3285
                                        #   in Loop: Header=BB17_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB17_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_651:                             # %if.end3312
                                        #   in Loop: Header=BB17_645 Depth=1
	jmp	.LBB17_645
.LBB17_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB17_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB17_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_661
.LBB17_656:                             # %if.end3336
                                        #   in Loop: Header=BB17_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_658:                             # %if.end3342
                                        #   in Loop: Header=BB17_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB17_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_660:                             # %if.end3369
                                        #   in Loop: Header=BB17_654 Depth=1
	jmp	.LBB17_654
.LBB17_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB17_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB17_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB17_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB17_670
.LBB17_665:                             # %if.end3393
                                        #   in Loop: Header=BB17_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB17_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB17_673
.LBB17_667:                             # %if.end3399
                                        #   in Loop: Header=BB17_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB17_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB17_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB17_669:                             # %if.end3426
                                        #   in Loop: Header=BB17_663 Depth=1
	jmp	.LBB17_663
.LBB17_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB17_673
.LBB17_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB17_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-136(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-180(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-140(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-368(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$1310947773, -332(%rbp) # imm = 0x4E2379BD
	jne	.LBB17_675
.LBB17_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_674
.Lfunc_end17:
	.size	BZ2_decompress.16, .Lfunc_end17-BZ2_decompress.16
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI17_0:
	.quad	.LBB17_4
	.quad	.LBB17_15
	.quad	.LBB17_26
	.quad	.LBB17_37
	.quad	.LBB17_57
	.quad	.LBB17_70
	.quad	.LBB17_81
	.quad	.LBB17_92
	.quad	.LBB17_103
	.quad	.LBB17_114
	.quad	.LBB17_127
	.quad	.LBB17_136
	.quad	.LBB17_145
	.quad	.LBB17_154
	.quad	.LBB17_163
	.quad	.LBB17_172
	.quad	.LBB17_181
	.quad	.LBB17_190
	.quad	.LBB17_205
	.quad	.LBB17_228
	.quad	.LBB17_246
	.quad	.LBB17_258
	.quad	.LBB17_272
	.quad	.LBB17_301
	.quad	.LBB17_316
	.quad	.LBB17_327
	.quad	.LBB17_372
	.quad	.LBB17_386
	.quad	.LBB17_414
	.quad	.LBB17_428
	.quad	.LBB17_493
	.quad	.LBB17_507
	.quad	.LBB17_580
	.quad	.LBB17_591
	.quad	.LBB17_602
	.quad	.LBB17_613
	.quad	.LBB17_624
	.quad	.LBB17_635
	.quad	.LBB17_644
	.quad	.LBB17_653
	.quad	.LBB17_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.17       # -- Begin function BZ2_decompress.17
	.p2align	4, 0x90
	.type	BZ2_decompress.17,@function
BZ2_decompress.17:                      # @BZ2_decompress.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$39001927, -356(%rbp)   # imm = 0x2531F47
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB18_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB18_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB18_671
# %bb.3:                                # %if.end
	movq	.LJTI18_0(,%rax,8), %rax
	jmpq	*%rax
.LBB18_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB18_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_12
.LBB18_7:                               # %if.end33
                                        #   in Loop: Header=BB18_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_9:                               # %if.end38
                                        #   in Loop: Header=BB18_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB18_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_11:                              # %if.end56
                                        #   in Loop: Header=BB18_5 Depth=1
	jmp	.LBB18_5
.LBB18_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB18_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB18_673
.LBB18_14:                              # %if.end61
	jmp	.LBB18_15
.LBB18_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB18_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -352(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-352(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_23
.LBB18_18:                              # %if.end78
                                        #   in Loop: Header=BB18_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_20:                              # %if.end84
                                        #   in Loop: Header=BB18_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB18_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_22:                              # %if.end111
                                        #   in Loop: Header=BB18_16 Depth=1
	jmp	.LBB18_16
.LBB18_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB18_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB18_673
.LBB18_25:                              # %if.end117
	jmp	.LBB18_26
.LBB18_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB18_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_34
.LBB18_29:                              # %if.end134
                                        #   in Loop: Header=BB18_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_31:                              # %if.end140
                                        #   in Loop: Header=BB18_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB18_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_33:                              # %if.end167
                                        #   in Loop: Header=BB18_27 Depth=1
	jmp	.LBB18_27
.LBB18_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB18_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB18_673
.LBB18_36:                              # %if.end173
	jmp	.LBB18_37
.LBB18_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB18_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -296(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-296(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB18_45
.LBB18_40:                              # %if.end189
                                        #   in Loop: Header=BB18_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_42:                              # %if.end195
                                        #   in Loop: Header=BB18_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB18_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_44:                              # %if.end222
                                        #   in Loop: Header=BB18_38 Depth=1
	jmp	.LBB18_38
.LBB18_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB18_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB18_48
.LBB18_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB18_673
.LBB18_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB18_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB18_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB18_52
.LBB18_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB18_673
.LBB18_52:                              # %if.end257
	jmp	.LBB18_56
.LBB18_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB18_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB18_673
.LBB18_55:                              # %if.end270
	jmp	.LBB18_56
.LBB18_56:                              # %if.end271
	jmp	.LBB18_57
.LBB18_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB18_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_65
.LBB18_60:                              # %if.end288
                                        #   in Loop: Header=BB18_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_62:                              # %if.end294
                                        #   in Loop: Header=BB18_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB18_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_64:                              # %if.end321
                                        #   in Loop: Header=BB18_58 Depth=1
	jmp	.LBB18_58
.LBB18_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB18_67
# %bb.66:                               # %if.then326
	jmp	.LBB18_579
.LBB18_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB18_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_69:                              # %if.end332
	jmp	.LBB18_70
.LBB18_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB18_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_78
.LBB18_73:                              # %if.end349
                                        #   in Loop: Header=BB18_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_75:                              # %if.end355
                                        #   in Loop: Header=BB18_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB18_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_77:                              # %if.end382
                                        #   in Loop: Header=BB18_71 Depth=1
	jmp	.LBB18_71
.LBB18_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB18_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_80:                              # %if.end388
	jmp	.LBB18_81
.LBB18_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB18_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_89
.LBB18_84:                              # %if.end405
                                        #   in Loop: Header=BB18_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_86:                              # %if.end411
                                        #   in Loop: Header=BB18_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB18_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_88:                              # %if.end438
                                        #   in Loop: Header=BB18_82 Depth=1
	jmp	.LBB18_82
.LBB18_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB18_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_91:                              # %if.end444
	jmp	.LBB18_92
.LBB18_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB18_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_100
.LBB18_95:                              # %if.end461
                                        #   in Loop: Header=BB18_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_97:                              # %if.end467
                                        #   in Loop: Header=BB18_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB18_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_99:                              # %if.end494
                                        #   in Loop: Header=BB18_93 Depth=1
	jmp	.LBB18_93
.LBB18_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB18_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_102:                             # %if.end500
	jmp	.LBB18_103
.LBB18_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB18_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -312(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-312(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_111
.LBB18_106:                             # %if.end517
                                        #   in Loop: Header=BB18_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_108:                             # %if.end523
                                        #   in Loop: Header=BB18_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB18_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_110:                             # %if.end550
                                        #   in Loop: Header=BB18_104 Depth=1
	jmp	.LBB18_104
.LBB18_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB18_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_113:                             # %if.end556
	jmp	.LBB18_114
.LBB18_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB18_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -252(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-252(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_122
.LBB18_117:                             # %if.end573
                                        #   in Loop: Header=BB18_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_119:                             # %if.end579
                                        #   in Loop: Header=BB18_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB18_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_121:                             # %if.end606
                                        #   in Loop: Header=BB18_115 Depth=1
	jmp	.LBB18_115
.LBB18_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB18_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB18_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB18_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB18_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB18_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_135
.LBB18_130:                             # %if.end636
                                        #   in Loop: Header=BB18_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_132:                             # %if.end642
                                        #   in Loop: Header=BB18_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB18_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_134:                             # %if.end669
                                        #   in Loop: Header=BB18_128 Depth=1
	jmp	.LBB18_128
.LBB18_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB18_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB18_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_144
.LBB18_139:                             # %if.end692
                                        #   in Loop: Header=BB18_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_141:                             # %if.end698
                                        #   in Loop: Header=BB18_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB18_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_143:                             # %if.end725
                                        #   in Loop: Header=BB18_137 Depth=1
	jmp	.LBB18_137
.LBB18_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB18_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB18_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_153
.LBB18_148:                             # %if.end748
                                        #   in Loop: Header=BB18_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_150:                             # %if.end754
                                        #   in Loop: Header=BB18_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB18_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_152:                             # %if.end781
                                        #   in Loop: Header=BB18_146 Depth=1
	jmp	.LBB18_146
.LBB18_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB18_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB18_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_162
.LBB18_157:                             # %if.end804
                                        #   in Loop: Header=BB18_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_159:                             # %if.end810
                                        #   in Loop: Header=BB18_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB18_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_161:                             # %if.end837
                                        #   in Loop: Header=BB18_155 Depth=1
	jmp	.LBB18_155
.LBB18_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB18_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB18_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB18_171
.LBB18_166:                             # %if.end860
                                        #   in Loop: Header=BB18_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_168:                             # %if.end866
                                        #   in Loop: Header=BB18_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB18_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_170:                             # %if.end893
                                        #   in Loop: Header=BB18_164 Depth=1
	jmp	.LBB18_164
.LBB18_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB18_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB18_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_180
.LBB18_175:                             # %if.end911
                                        #   in Loop: Header=BB18_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_177:                             # %if.end917
                                        #   in Loop: Header=BB18_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB18_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_179:                             # %if.end944
                                        #   in Loop: Header=BB18_173 Depth=1
	jmp	.LBB18_173
.LBB18_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB18_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB18_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_189
.LBB18_184:                             # %if.end967
                                        #   in Loop: Header=BB18_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_186:                             # %if.end973
                                        #   in Loop: Header=BB18_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB18_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_188:                             # %if.end1000
                                        #   in Loop: Header=BB18_182 Depth=1
	jmp	.LBB18_182
.LBB18_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB18_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB18_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_198
.LBB18_193:                             # %if.end1023
                                        #   in Loop: Header=BB18_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_195:                             # %if.end1029
                                        #   in Loop: Header=BB18_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB18_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_197:                             # %if.end1056
                                        #   in Loop: Header=BB18_191 Depth=1
	jmp	.LBB18_191
.LBB18_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB18_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB18_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB18_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB18_218
# %bb.204:                              # %for.body
	jmp	.LBB18_205
.LBB18_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB18_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_213
.LBB18_208:                             # %if.end1094
                                        #   in Loop: Header=BB18_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_210:                             # %if.end1100
                                        #   in Loop: Header=BB18_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB18_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_212:                             # %if.end1127
                                        #   in Loop: Header=BB18_206 Depth=1
	jmp	.LBB18_206
.LBB18_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB18_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB18_216
.LBB18_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB18_216:                             # %if.end1137
	jmp	.LBB18_217
.LBB18_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_203
.LBB18_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB18_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB18_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB18_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB18_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_219
.LBB18_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB18_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB18_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB18_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB18_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB18_240
# %bb.227:                              # %for.body1160
	jmp	.LBB18_228
.LBB18_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB18_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_236
.LBB18_231:                             # %if.end1177
                                        #   in Loop: Header=BB18_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_233:                             # %if.end1183
                                        #   in Loop: Header=BB18_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB18_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_235:                             # %if.end1210
                                        #   in Loop: Header=BB18_229 Depth=1
	jmp	.LBB18_229
.LBB18_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB18_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB18_238:                             # %if.end1221
	jmp	.LBB18_239
.LBB18_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB18_226
.LBB18_240:                             # %for.end1224
	jmp	.LBB18_241
.LBB18_241:                             # %if.end1225
	jmp	.LBB18_242
.LBB18_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_223
.LBB18_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB18_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -128(%rbp)
.LBB18_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB18_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB18_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB18_254
.LBB18_249:                             # %if.end1250
                                        #   in Loop: Header=BB18_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_251:                             # %if.end1256
                                        #   in Loop: Header=BB18_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB18_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_253:                             # %if.end1283
                                        #   in Loop: Header=BB18_247 Depth=1
	jmp	.LBB18_247
.LBB18_254:                             # %while.end1284
	cmpl	$2, -96(%rbp)
	jl	.LBB18_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -96(%rbp)
	jle	.LBB18_257
.LBB18_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_257:                             # %if.end1291
	jmp	.LBB18_258
.LBB18_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB18_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB18_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB18_266
.LBB18_261:                             # %if.end1307
                                        #   in Loop: Header=BB18_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_263:                             # %if.end1313
                                        #   in Loop: Header=BB18_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB18_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_265:                             # %if.end1340
                                        #   in Loop: Header=BB18_259 Depth=1
	jmp	.LBB18_259
.LBB18_266:                             # %while.end1341
	cmpl	$1, -100(%rbp)
	jge	.LBB18_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB18_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB18_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB18_271:                             # %while.body1350
	jmp	.LBB18_272
.LBB18_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB18_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_280
.LBB18_275:                             # %if.end1368
                                        #   in Loop: Header=BB18_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_277:                             # %if.end1374
                                        #   in Loop: Header=BB18_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB18_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_279:                             # %if.end1401
                                        #   in Loop: Header=BB18_273 Depth=1
	jmp	.LBB18_273
.LBB18_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB18_282
# %bb.281:                              # %if.then1406
	jmp	.LBB18_285
.LBB18_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB18_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_284:                             # %if.end1412
	jmp	.LBB18_271
.LBB18_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_269
.LBB18_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB18_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB18_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB18_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB18_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB18_288
.LBB18_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB18_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB18_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB18_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB18_294:                             # %while.cond
                                        #   Parent Loop BB18_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB18_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB18_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB18_294
.LBB18_296:                             # %while.end1451
                                        #   in Loop: Header=BB18_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB18_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_292
.LBB18_298:                             # %for.end1457
	movl	$0, -48(%rbp)
.LBB18_299:                             # %for.cond1458
	movl	-48(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB18_343
# %bb.300:                              # %for.body1461
	jmp	.LBB18_301
.LBB18_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB18_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB18_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB18_309
.LBB18_304:                             # %if.end1478
                                        #   in Loop: Header=BB18_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_306:                             # %if.end1484
                                        #   in Loop: Header=BB18_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB18_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_308:                             # %if.end1511
                                        #   in Loop: Header=BB18_302 Depth=1
	jmp	.LBB18_302
.LBB18_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB18_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB18_341
# %bb.311:                              # %for.body1516
	jmp	.LBB18_312
.LBB18_312:                             # %while.body1518
	cmpl	$1, -92(%rbp)
	jl	.LBB18_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -92(%rbp)
	jle	.LBB18_315
.LBB18_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_315:                             # %if.end1525
	jmp	.LBB18_316
.LBB18_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB18_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_324
.LBB18_319:                             # %if.end1543
                                        #   in Loop: Header=BB18_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_321:                             # %if.end1549
                                        #   in Loop: Header=BB18_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB18_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_323:                             # %if.end1576
                                        #   in Loop: Header=BB18_317 Depth=1
	jmp	.LBB18_317
.LBB18_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB18_326
# %bb.325:                              # %if.then1581
	jmp	.LBB18_339
.LBB18_326:                             # %if.end1582
	jmp	.LBB18_327
.LBB18_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB18_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_335
.LBB18_330:                             # %if.end1600
                                        #   in Loop: Header=BB18_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_332:                             # %if.end1606
                                        #   in Loop: Header=BB18_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB18_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_334:                             # %if.end1633
                                        #   in Loop: Header=BB18_328 Depth=1
	jmp	.LBB18_328
.LBB18_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB18_337
# %bb.336:                              # %if.then1638
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB18_338
.LBB18_337:                             # %if.else1640
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
.LBB18_338:                             # %if.end1642
	jmp	.LBB18_312
.LBB18_339:                             # %while.end1643
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_310
.LBB18_341:                             # %for.end1651
	jmp	.LBB18_342
.LBB18_342:                             # %for.inc1652
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB18_299
.LBB18_343:                             # %for.end1654
	movl	$0, -48(%rbp)
.LBB18_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_346 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB18_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB18_344 Depth=1
	movl	$32, -144(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB18_346:                             # %for.cond1659
                                        #   Parent Loop BB18_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB18_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB18_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-180(%rbp), %eax
	jle	.LBB18_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB18_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -180(%rbp)
.LBB18_349:                             # %if.end1678
                                        #   in Loop: Header=BB18_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB18_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB18_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -144(%rbp)
.LBB18_351:                             # %if.end1694
                                        #   in Loop: Header=BB18_346 Depth=2
	jmp	.LBB18_352
.LBB18_352:                             # %for.inc1695
                                        #   in Loop: Header=BB18_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_346
.LBB18_353:                             # %for.end1697
                                        #   in Loop: Header=BB18_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-144(%rbp), %r8d
	movl	-180(%rbp), %r9d
	movl	-128(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-144(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB18_344 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB18_344
.LBB18_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -136(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
.LBB18_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB18_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB18_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB18_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_356
.LBB18_359:                             # %for.end1728
	movl	$4095, -156(%rbp)       # imm = 0xFFF
	movl	$15, -140(%rbp)
.LBB18_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_362 Depth 2
	cmpl	$0, -140(%rbp)
	jl	.LBB18_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB18_360 Depth=1
	movl	$15, -152(%rbp)
.LBB18_362:                             # %for.cond1733
                                        #   Parent Loop BB18_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -152(%rbp)
	jl	.LBB18_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB18_362 Depth=2
	movl	-140(%rbp), %eax
	shll	$4, %eax
	addl	-152(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-156(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB18_362 Depth=2
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB18_362
.LBB18_365:                             # %for.end1745
                                        #   in Loop: Header=BB18_360 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-140(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB18_360 Depth=1
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB18_360
.LBB18_367:                             # %for.end1751
	movl	$0, -52(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB18_371
# %bb.368:                              # %if.then1754
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB18_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_370:                             # %if.end1759
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB18_371:                             # %if.end1779
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB18_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB18_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB18_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -268(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-268(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB18_380
.LBB18_375:                             # %if.end1799
                                        #   in Loop: Header=BB18_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_377:                             # %if.end1805
                                        #   in Loop: Header=BB18_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB18_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_379:                             # %if.end1832
                                        #   in Loop: Header=BB18_373 Depth=1
	jmp	.LBB18_373
.LBB18_380:                             # %while.end1833
	jmp	.LBB18_381
.LBB18_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB18_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB18_385
# %bb.384:                              # %if.then1844
	jmp	.LBB18_395
.LBB18_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB18_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB18_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB18_394
.LBB18_389:                             # %if.end1863
                                        #   in Loop: Header=BB18_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_391:                             # %if.end1869
                                        #   in Loop: Header=BB18_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB18_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_393:                             # %if.end1896
                                        #   in Loop: Header=BB18_387 Depth=1
	jmp	.LBB18_387
.LBB18_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB18_381
.LBB18_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB18_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB18_398
.LBB18_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_398:                             # %if.end1913
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
.LBB18_399:                             # %while.body1920
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jne	.LBB18_401
# %bb.400:                              # %if.then1923
	jmp	.LBB18_520
.LBB18_401:                             # %if.end1924
	cmpl	$0, -76(%rbp)
	je	.LBB18_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -76(%rbp)
	jne	.LBB18_458
.LBB18_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB18_404:                             # %do.body
	cmpl	$0, -76(%rbp)
	jne	.LBB18_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB18_409
.LBB18_406:                             # %if.else1936
	cmpl	$1, -76(%rbp)
	jne	.LBB18_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB18_408:                             # %if.end1942
	jmp	.LBB18_409
.LBB18_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB18_413
# %bb.410:                              # %if.then1947
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB18_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_412:                             # %if.end1952
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB18_413:                             # %if.end1972
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB18_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB18_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB18_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -360(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-360(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB18_422
.LBB18_417:                             # %if.end1992
                                        #   in Loop: Header=BB18_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_419:                             # %if.end1998
                                        #   in Loop: Header=BB18_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB18_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_421:                             # %if.end2025
                                        #   in Loop: Header=BB18_415 Depth=1
	jmp	.LBB18_415
.LBB18_422:                             # %while.end2026
	jmp	.LBB18_423
.LBB18_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB18_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB18_427
# %bb.426:                              # %if.then2037
	jmp	.LBB18_437
.LBB18_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB18_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB18_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB18_436
.LBB18_431:                             # %if.end2056
                                        #   in Loop: Header=BB18_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_433:                             # %if.end2062
                                        #   in Loop: Header=BB18_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB18_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_435:                             # %if.end2089
                                        #   in Loop: Header=BB18_429 Depth=1
	jmp	.LBB18_429
.LBB18_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB18_423
.LBB18_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB18_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB18_440
.LBB18_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_440:                             # %if.end2106
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -76(%rbp)
	movb	$1, %al
	je	.LBB18_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -76(%rbp)
	sete	%al
.LBB18_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB18_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB18_451
# %bb.445:                              # %if.then2130
	jmp	.LBB18_446
.LBB18_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB18_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB18_446 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB18_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_449:                             # %if.end2138
                                        #   in Loop: Header=BB18_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB18_446
.LBB18_450:                             # %while.end2145
	jmp	.LBB18_457
.LBB18_451:                             # %if.else2146
	jmp	.LBB18_452
.LBB18_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB18_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB18_452 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB18_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_455:                             # %if.end2154
                                        #   in Loop: Header=BB18_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB18_452
.LBB18_456:                             # %while.end2161
	jmp	.LBB18_457
.LBB18_457:                             # %if.end2162
	jmp	.LBB18_399
.LBB18_458:                             # %if.else2163
	movl	-52(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.LBB18_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_460:                             # %if.end2167
	movl	-76(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB18_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB18_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB18_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB18_462 Depth=1
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-104(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB18_462
.LBB18_464:                             # %while.end2218
	jmp	.LBB18_465
.LBB18_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB18_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB18_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-80(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB18_465
.LBB18_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB18_485
.LBB18_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-240(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB18_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB18_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB18_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-80(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB18_469
.LBB18_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB18_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -88(%rbp)
	jle	.LBB18_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB18_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB18_472
.LBB18_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB18_484
# %bb.475:                              # %if.then2302
	movl	$4095, -160(%rbp)       # imm = 0xFFF
	movl	$15, -132(%rbp)
.LBB18_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_478 Depth 2
	cmpl	$0, -132(%rbp)
	jl	.LBB18_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB18_476 Depth=1
	movl	$15, -148(%rbp)
.LBB18_478:                             # %for.cond2307
                                        #   Parent Loop BB18_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB18_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB18_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-160(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB18_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB18_478
.LBB18_481:                             # %for.end2324
                                        #   in Loop: Header=BB18_476 Depth=1
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-132(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB18_476 Depth=1
	movl	-132(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB18_476
.LBB18_483:                             # %for.end2331
	jmp	.LBB18_484
.LBB18_484:                             # %if.end2332
	jmp	.LBB18_485
.LBB18_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB18_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB18_488
.LBB18_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB18_488:                             # %if.end2359
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB18_492
# %bb.489:                              # %if.then2363
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.LBB18_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_491:                             # %if.end2368
	movl	$50, -68(%rbp)
	movq	-16(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB18_492:                             # %if.end2388
	movl	-68(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -68(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB18_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB18_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB18_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -304(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-304(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB18_501
.LBB18_496:                             # %if.end2408
                                        #   in Loop: Header=BB18_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_498:                             # %if.end2414
                                        #   in Loop: Header=BB18_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB18_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_500:                             # %if.end2441
                                        #   in Loop: Header=BB18_494 Depth=1
	jmp	.LBB18_494
.LBB18_501:                             # %while.end2442
	jmp	.LBB18_502
.LBB18_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB18_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB18_506
# %bb.505:                              # %if.then2453
	jmp	.LBB18_516
.LBB18_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB18_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB18_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB18_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB18_515
.LBB18_510:                             # %if.end2472
                                        #   in Loop: Header=BB18_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_512:                             # %if.end2478
                                        #   in Loop: Header=BB18_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB18_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_514:                             # %if.end2505
                                        #   in Loop: Header=BB18_508 Depth=1
	jmp	.LBB18_508
.LBB18_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB18_502
.LBB18_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB18_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB18_519
.LBB18_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_519:                             # %if.end2522
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB18_399
.LBB18_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB18_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB18_523
.LBB18_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB18_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB18_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB18_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB18_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_524
.LBB18_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB18_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB18_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB18_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB18_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_528
.LBB18_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB18_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB18_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB18_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB18_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB18_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB18_536
.LBB18_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_536:                             # %if.end2584
                                        #   in Loop: Header=BB18_532 Depth=1
	jmp	.LBB18_537
.LBB18_537:                             # %for.inc2585
                                        #   in Loop: Header=BB18_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_532
.LBB18_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB18_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB18_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB18_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB18_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB18_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB18_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB18_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_542
.LBB18_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB18_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB18_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB18_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB18_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB18_550
.LBB18_549:                             # %if.else2646
                                        #   in Loop: Header=BB18_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB18_550:                             # %if.end2664
                                        #   in Loop: Header=BB18_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB18_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_546
.LBB18_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB18_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -316(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB18_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB18_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB18_556
.LBB18_555:                             # %if.else2727
                                        #   in Loop: Header=BB18_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB18_556:                             # %if.end2742
                                        #   in Loop: Header=BB18_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-316(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB18_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB18_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB18_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB18_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB18_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB18_562:                             # %if.end2791
	jmp	.LBB18_563
.LBB18_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB18_565
.LBB18_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB18_565:                             # %if.end2826
	jmp	.LBB18_578
.LBB18_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB18_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB18_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB18_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB18_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_567
.LBB18_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB18_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB18_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB18_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB18_574:                             # %if.end2893
	jmp	.LBB18_575
.LBB18_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB18_577
.LBB18_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB18_577:                             # %if.end2918
	jmp	.LBB18_578
.LBB18_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_579:                             # %endhdr_2
	jmp	.LBB18_580
.LBB18_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB18_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -332(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-332(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_588
.LBB18_583:                             # %if.end2937
                                        #   in Loop: Header=BB18_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_585:                             # %if.end2943
                                        #   in Loop: Header=BB18_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB18_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_587:                             # %if.end2970
                                        #   in Loop: Header=BB18_581 Depth=1
	jmp	.LBB18_581
.LBB18_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB18_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_590:                             # %if.end2976
	jmp	.LBB18_591
.LBB18_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB18_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_599
.LBB18_594:                             # %if.end2994
                                        #   in Loop: Header=BB18_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_596:                             # %if.end3000
                                        #   in Loop: Header=BB18_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB18_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_598:                             # %if.end3027
                                        #   in Loop: Header=BB18_592 Depth=1
	jmp	.LBB18_592
.LBB18_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB18_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_601:                             # %if.end3033
	jmp	.LBB18_602
.LBB18_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB18_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-228(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_610
.LBB18_605:                             # %if.end3051
                                        #   in Loop: Header=BB18_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_607:                             # %if.end3057
                                        #   in Loop: Header=BB18_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB18_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_609:                             # %if.end3084
                                        #   in Loop: Header=BB18_603 Depth=1
	jmp	.LBB18_603
.LBB18_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB18_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_612:                             # %if.end3090
	jmp	.LBB18_613
.LBB18_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB18_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_621
.LBB18_616:                             # %if.end3108
                                        #   in Loop: Header=BB18_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_618:                             # %if.end3114
                                        #   in Loop: Header=BB18_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB18_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_620:                             # %if.end3141
                                        #   in Loop: Header=BB18_614 Depth=1
	jmp	.LBB18_614
.LBB18_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB18_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_623:                             # %if.end3147
	jmp	.LBB18_624
.LBB18_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB18_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_632
.LBB18_627:                             # %if.end3165
                                        #   in Loop: Header=BB18_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_629:                             # %if.end3171
                                        #   in Loop: Header=BB18_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB18_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_631:                             # %if.end3198
                                        #   in Loop: Header=BB18_625 Depth=1
	jmp	.LBB18_625
.LBB18_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB18_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB18_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB18_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_643
.LBB18_638:                             # %if.end3222
                                        #   in Loop: Header=BB18_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_640:                             # %if.end3228
                                        #   in Loop: Header=BB18_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB18_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_642:                             # %if.end3255
                                        #   in Loop: Header=BB18_636 Depth=1
	jmp	.LBB18_636
.LBB18_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB18_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB18_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_652
.LBB18_647:                             # %if.end3279
                                        #   in Loop: Header=BB18_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_649:                             # %if.end3285
                                        #   in Loop: Header=BB18_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB18_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_651:                             # %if.end3312
                                        #   in Loop: Header=BB18_645 Depth=1
	jmp	.LBB18_645
.LBB18_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB18_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB18_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_661
.LBB18_656:                             # %if.end3336
                                        #   in Loop: Header=BB18_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_658:                             # %if.end3342
                                        #   in Loop: Header=BB18_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB18_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_660:                             # %if.end3369
                                        #   in Loop: Header=BB18_654 Depth=1
	jmp	.LBB18_654
.LBB18_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB18_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB18_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB18_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB18_670
.LBB18_665:                             # %if.end3393
                                        #   in Loop: Header=BB18_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB18_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB18_673
.LBB18_667:                             # %if.end3399
                                        #   in Loop: Header=BB18_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB18_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB18_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB18_669:                             # %if.end3426
                                        #   in Loop: Header=BB18_663 Depth=1
	jmp	.LBB18_663
.LBB18_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB18_673
.LBB18_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB18_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-128(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-184(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-136(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-380(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$39001927, -356(%rbp)   # imm = 0x2531F47
	jne	.LBB18_675
.LBB18_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_674
.Lfunc_end18:
	.size	BZ2_decompress.17, .Lfunc_end18-BZ2_decompress.17
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI18_0:
	.quad	.LBB18_4
	.quad	.LBB18_15
	.quad	.LBB18_26
	.quad	.LBB18_37
	.quad	.LBB18_57
	.quad	.LBB18_70
	.quad	.LBB18_81
	.quad	.LBB18_92
	.quad	.LBB18_103
	.quad	.LBB18_114
	.quad	.LBB18_127
	.quad	.LBB18_136
	.quad	.LBB18_145
	.quad	.LBB18_154
	.quad	.LBB18_163
	.quad	.LBB18_172
	.quad	.LBB18_181
	.quad	.LBB18_190
	.quad	.LBB18_205
	.quad	.LBB18_228
	.quad	.LBB18_246
	.quad	.LBB18_258
	.quad	.LBB18_272
	.quad	.LBB18_301
	.quad	.LBB18_316
	.quad	.LBB18_327
	.quad	.LBB18_372
	.quad	.LBB18_386
	.quad	.LBB18_414
	.quad	.LBB18_428
	.quad	.LBB18_493
	.quad	.LBB18_507
	.quad	.LBB18_580
	.quad	.LBB18_591
	.quad	.LBB18_602
	.quad	.LBB18_613
	.quad	.LBB18_624
	.quad	.LBB18_635
	.quad	.LBB18_644
	.quad	.LBB18_653
	.quad	.LBB18_662
                                        # -- End function
	.text
	.globl	BZ2_decompress.18       # -- Begin function BZ2_decompress.18
	.p2align	4, 0x90
	.type	BZ2_decompress.18,@function
BZ2_decompress.18:                      # @BZ2_decompress.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	.cfi_offset %rbx, -24
	movl	$2019272078, -312(%rbp) # imm = 0x785BA58E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jne	.LBB19_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, 64036(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64040(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64044(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64048(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64052(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64056(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64060(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64064(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64068(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64072(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64076(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64080(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64084(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64088(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64092(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64096(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64104(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64112(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 64116(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64120(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64128(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 64136(%rax)
.LBB19_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	64036(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64040(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	64044(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	64048(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-16(%rbp), %rax
	movl	64052(%rax), %eax
	movl	%eax, -104(%rbp)
	movq	-16(%rbp), %rax
	movl	64056(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	64060(%rax), %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	movl	64064(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	64068(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	64072(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	64076(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	movl	64080(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	64084(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	64088(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-16(%rbp), %rax
	movl	64092(%rax), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	64096(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-16(%rbp), %rax
	movl	64100(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	64104(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	64108(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rax
	movl	64112(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	64116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	64120(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	movq	64128(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rax
	movq	64136(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$40, %ecx
	ja	.LBB19_671
# %bb.3:                                # %if.end
	movq	.LJTI19_0(,%rax,8), %rax
	jmpq	*%rax
.LBB19_4:                               # %sw.bb
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
.LBB19_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_7
# %bb.6:                                # %if.then29
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -292(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-292(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_12
.LBB19_7:                               # %if.end33
                                        #   in Loop: Header=BB19_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_9
# %bb.8:                                # %if.then37
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_9:                               # %if.end38
                                        #   in Loop: Header=BB19_5 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB19_5 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_11:                              # %if.end56
                                        #   in Loop: Header=BB19_5 Depth=1
	jmp	.LBB19_5
.LBB19_12:                              # %while.end
	movzbl	-17(%rbp), %eax
	cmpl	$66, %eax
	je	.LBB19_14
# %bb.13:                               # %if.then60
	movl	$-5, -28(%rbp)
	jmp	.LBB19_673
.LBB19_14:                              # %if.end61
	jmp	.LBB19_15
.LBB19_15:                              # %sw.bb62
	movq	-16(%rbp), %rax
	movl	$11, 8(%rax)
.LBB19_16:                              # %while.body64
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_18
# %bb.17:                               # %if.then68
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -288(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-288(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_23
.LBB19_18:                              # %if.end78
                                        #   in Loop: Header=BB19_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_20
# %bb.19:                               # %if.then83
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_20:                              # %if.end84
                                        #   in Loop: Header=BB19_16 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_22
# %bb.21:                               # %if.then107
                                        #   in Loop: Header=BB19_16 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_22:                              # %if.end111
                                        #   in Loop: Header=BB19_16 Depth=1
	jmp	.LBB19_16
.LBB19_23:                              # %while.end112
	movzbl	-17(%rbp), %eax
	cmpl	$90, %eax
	je	.LBB19_25
# %bb.24:                               # %if.then116
	movl	$-5, -28(%rbp)
	jmp	.LBB19_673
.LBB19_25:                              # %if.end117
	jmp	.LBB19_26
.LBB19_26:                              # %sw.bb118
	movq	-16(%rbp), %rax
	movl	$12, 8(%rax)
.LBB19_27:                              # %while.body120
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_29
# %bb.28:                               # %if.then124
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -236(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-236(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_34
.LBB19_29:                              # %if.end134
                                        #   in Loop: Header=BB19_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_31
# %bb.30:                               # %if.then139
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_31:                              # %if.end140
                                        #   in Loop: Header=BB19_27 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_33
# %bb.32:                               # %if.then163
                                        #   in Loop: Header=BB19_27 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_33:                              # %if.end167
                                        #   in Loop: Header=BB19_27 Depth=1
	jmp	.LBB19_27
.LBB19_34:                              # %while.end168
	movzbl	-17(%rbp), %eax
	cmpl	$104, %eax
	je	.LBB19_36
# %bb.35:                               # %if.then172
	movl	$-5, -28(%rbp)
	jmp	.LBB19_673
.LBB19_36:                              # %if.end173
	jmp	.LBB19_37
.LBB19_37:                              # %sw.bb174
	movq	-16(%rbp), %rax
	movl	$13, 8(%rax)
.LBB19_38:                              # %while.body176
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_40
# %bb.39:                               # %if.then180
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -336(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-336(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB19_45
.LBB19_40:                              # %if.end189
                                        #   in Loop: Header=BB19_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_42
# %bb.41:                               # %if.then194
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_42:                              # %if.end195
                                        #   in Loop: Header=BB19_38 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_44
# %bb.43:                               # %if.then218
                                        #   in Loop: Header=BB19_38 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_44:                              # %if.end222
                                        #   in Loop: Header=BB19_38 Depth=1
	jmp	.LBB19_38
.LBB19_45:                              # %while.end223
	movq	-16(%rbp), %rax
	cmpl	$49, 40(%rax)
	jl	.LBB19_47
# %bb.46:                               # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$57, 40(%rax)
	jle	.LBB19_48
.LBB19_47:                              # %if.then230
	movl	$-5, -28(%rbp)
	jmp	.LBB19_673
.LBB19_48:                              # %if.end231
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB19_53
# %bb.49:                               # %if.then234
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$1, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3160(%rcx)
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$1, %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rsi
	shlq	$0, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3168(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB19_51
# %bb.50:                               # %lor.lhs.false252
	movq	-16(%rbp), %rax
	cmpq	$0, 3168(%rax)
	jne	.LBB19_52
.LBB19_51:                              # %if.then256
	movl	$-3, -28(%rbp)
	jmp	.LBB19_673
.LBB19_52:                              # %if.end257
	jmp	.LBB19_56
.LBB19_53:                              # %if.else
	movq	-192(%rbp), %rax
	movq	56(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 3152(%rax)
	jne	.LBB19_55
# %bb.54:                               # %if.then269
	movl	$-3, -28(%rbp)
	jmp	.LBB19_673
.LBB19_55:                              # %if.end270
	jmp	.LBB19_56
.LBB19_56:                              # %if.end271
	jmp	.LBB19_57
.LBB19_57:                              # %sw.bb272
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
.LBB19_58:                              # %while.body274
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_60
# %bb.59:                               # %if.then278
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -224(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-224(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_65
.LBB19_60:                              # %if.end288
                                        #   in Loop: Header=BB19_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_62
# %bb.61:                               # %if.then293
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_62:                              # %if.end294
                                        #   in Loop: Header=BB19_58 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_64
# %bb.63:                               # %if.then317
                                        #   in Loop: Header=BB19_58 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_64:                              # %if.end321
                                        #   in Loop: Header=BB19_58 Depth=1
	jmp	.LBB19_58
.LBB19_65:                              # %while.end322
	movzbl	-17(%rbp), %eax
	cmpl	$23, %eax
	jne	.LBB19_67
# %bb.66:                               # %if.then326
	jmp	.LBB19_579
.LBB19_67:                              # %if.end327
	movzbl	-17(%rbp), %eax
	cmpl	$49, %eax
	je	.LBB19_69
# %bb.68:                               # %if.then331
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_69:                              # %if.end332
	jmp	.LBB19_70
.LBB19_70:                              # %sw.bb333
	movq	-16(%rbp), %rax
	movl	$15, 8(%rax)
.LBB19_71:                              # %while.body335
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_73
# %bb.72:                               # %if.then339
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -368(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-368(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_78
.LBB19_73:                              # %if.end349
                                        #   in Loop: Header=BB19_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_75
# %bb.74:                               # %if.then354
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_75:                              # %if.end355
                                        #   in Loop: Header=BB19_71 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_77
# %bb.76:                               # %if.then378
                                        #   in Loop: Header=BB19_71 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_77:                              # %if.end382
                                        #   in Loop: Header=BB19_71 Depth=1
	jmp	.LBB19_71
.LBB19_78:                              # %while.end383
	movzbl	-17(%rbp), %eax
	cmpl	$65, %eax
	je	.LBB19_80
# %bb.79:                               # %if.then387
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_80:                              # %if.end388
	jmp	.LBB19_81
.LBB19_81:                              # %sw.bb389
	movq	-16(%rbp), %rax
	movl	$16, 8(%rax)
.LBB19_82:                              # %while.body391
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_84
# %bb.83:                               # %if.then395
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-316(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_89
.LBB19_84:                              # %if.end405
                                        #   in Loop: Header=BB19_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_86
# %bb.85:                               # %if.then410
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_86:                              # %if.end411
                                        #   in Loop: Header=BB19_82 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_88
# %bb.87:                               # %if.then434
                                        #   in Loop: Header=BB19_82 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_88:                              # %if.end438
                                        #   in Loop: Header=BB19_82 Depth=1
	jmp	.LBB19_82
.LBB19_89:                              # %while.end439
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB19_91
# %bb.90:                               # %if.then443
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_91:                              # %if.end444
	jmp	.LBB19_92
.LBB19_92:                              # %sw.bb445
	movq	-16(%rbp), %rax
	movl	$17, 8(%rax)
.LBB19_93:                              # %while.body447
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_95
# %bb.94:                               # %if.then451
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -356(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-356(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_100
.LBB19_95:                              # %if.end461
                                        #   in Loop: Header=BB19_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_97
# %bb.96:                               # %if.then466
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_97:                              # %if.end467
                                        #   in Loop: Header=BB19_93 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_99
# %bb.98:                               # %if.then490
                                        #   in Loop: Header=BB19_93 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_99:                              # %if.end494
                                        #   in Loop: Header=BB19_93 Depth=1
	jmp	.LBB19_93
.LBB19_100:                             # %while.end495
	movzbl	-17(%rbp), %eax
	cmpl	$38, %eax
	je	.LBB19_102
# %bb.101:                              # %if.then499
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_102:                             # %if.end500
	jmp	.LBB19_103
.LBB19_103:                             # %sw.bb501
	movq	-16(%rbp), %rax
	movl	$18, 8(%rax)
.LBB19_104:                             # %while.body503
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_106
# %bb.105:                              # %if.then507
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-204(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_111
.LBB19_106:                             # %if.end517
                                        #   in Loop: Header=BB19_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_108
# %bb.107:                              # %if.then522
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_108:                             # %if.end523
                                        #   in Loop: Header=BB19_104 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_110
# %bb.109:                              # %if.then546
                                        #   in Loop: Header=BB19_104 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_110:                             # %if.end550
                                        #   in Loop: Header=BB19_104 Depth=1
	jmp	.LBB19_104
.LBB19_111:                             # %while.end551
	movzbl	-17(%rbp), %eax
	cmpl	$83, %eax
	je	.LBB19_113
# %bb.112:                              # %if.then555
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_113:                             # %if.end556
	jmp	.LBB19_114
.LBB19_114:                             # %sw.bb557
	movq	-16(%rbp), %rax
	movl	$19, 8(%rax)
.LBB19_115:                             # %while.body559
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_117
# %bb.116:                              # %if.then563
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -348(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-348(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_122
.LBB19_117:                             # %if.end573
                                        #   in Loop: Header=BB19_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_119
# %bb.118:                              # %if.then578
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_119:                             # %if.end579
                                        #   in Loop: Header=BB19_115 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_121
# %bb.120:                              # %if.then602
                                        #   in Loop: Header=BB19_115 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_121:                             # %if.end606
                                        #   in Loop: Header=BB19_115 Depth=1
	jmp	.LBB19_115
.LBB19_122:                             # %while.end607
	movzbl	-17(%rbp), %eax
	cmpl	$89, %eax
	je	.LBB19_124
# %bb.123:                              # %if.then611
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_124:                             # %if.end612
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB19_126
# %bb.125:                              # %if.then616
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %edx
	movabsq	$.L.str, %rsi
	movb	$0, %al
	callq	fprintf
.LBB19_126:                             # %if.end619
	movq	-16(%rbp), %rax
	movl	$0, 3176(%rax)
.LBB19_127:                             # %sw.bb620
	movq	-16(%rbp), %rax
	movl	$20, 8(%rax)
.LBB19_128:                             # %while.body622
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_130
# %bb.129:                              # %if.then626
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -212(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-212(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_135
.LBB19_130:                             # %if.end636
                                        #   in Loop: Header=BB19_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_132
# %bb.131:                              # %if.then641
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_132:                             # %if.end642
                                        #   in Loop: Header=BB19_128 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_134
# %bb.133:                              # %if.then665
                                        #   in Loop: Header=BB19_128 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_134:                             # %if.end669
                                        #   in Loop: Header=BB19_128 Depth=1
	jmp	.LBB19_128
.LBB19_135:                             # %while.end670
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB19_136:                             # %sw.bb676
	movq	-16(%rbp), %rax
	movl	$21, 8(%rax)
.LBB19_137:                             # %while.body678
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_139
# %bb.138:                              # %if.then682
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -240(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-240(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_144
.LBB19_139:                             # %if.end692
                                        #   in Loop: Header=BB19_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_141
# %bb.140:                              # %if.then697
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_141:                             # %if.end698
                                        #   in Loop: Header=BB19_137 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_143
# %bb.142:                              # %if.then721
                                        #   in Loop: Header=BB19_137 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_143:                             # %if.end725
                                        #   in Loop: Header=BB19_137 Depth=1
	jmp	.LBB19_137
.LBB19_144:                             # %while.end726
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB19_145:                             # %sw.bb732
	movq	-16(%rbp), %rax
	movl	$22, 8(%rax)
.LBB19_146:                             # %while.body734
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_148
# %bb.147:                              # %if.then738
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -324(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-324(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_153
.LBB19_148:                             # %if.end748
                                        #   in Loop: Header=BB19_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_150
# %bb.149:                              # %if.then753
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_150:                             # %if.end754
                                        #   in Loop: Header=BB19_146 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_152
# %bb.151:                              # %if.then777
                                        #   in Loop: Header=BB19_146 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_152:                             # %if.end781
                                        #   in Loop: Header=BB19_146 Depth=1
	jmp	.LBB19_146
.LBB19_153:                             # %while.end782
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB19_154:                             # %sw.bb788
	movq	-16(%rbp), %rax
	movl	$23, 8(%rax)
.LBB19_155:                             # %while.body790
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_157
# %bb.156:                              # %if.then794
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-260(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_162
.LBB19_157:                             # %if.end804
                                        #   in Loop: Header=BB19_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_159
# %bb.158:                              # %if.then809
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_159:                             # %if.end810
                                        #   in Loop: Header=BB19_155 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_161
# %bb.160:                              # %if.then833
                                        #   in Loop: Header=BB19_155 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_161:                             # %if.end837
                                        #   in Loop: Header=BB19_155 Depth=1
	jmp	.LBB19_155
.LBB19_162:                             # %while.end838
	movq	-16(%rbp), %rax
	movl	3176(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3176(%rcx)
.LBB19_163:                             # %sw.bb844
	movq	-16(%rbp), %rax
	movl	$24, 8(%rax)
.LBB19_164:                             # %while.body846
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_166
# %bb.165:                              # %if.then850
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -308(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-308(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 20(%rcx)
	jmp	.LBB19_171
.LBB19_166:                             # %if.end860
                                        #   in Loop: Header=BB19_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_168
# %bb.167:                              # %if.then865
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_168:                             # %if.end866
                                        #   in Loop: Header=BB19_164 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_170
# %bb.169:                              # %if.then889
                                        #   in Loop: Header=BB19_164 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_170:                             # %if.end893
                                        #   in Loop: Header=BB19_164 Depth=1
	jmp	.LBB19_164
.LBB19_171:                             # %while.end894
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
.LBB19_172:                             # %sw.bb895
	movq	-16(%rbp), %rax
	movl	$25, 8(%rax)
.LBB19_173:                             # %while.body897
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_175
# %bb.174:                              # %if.then901
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -232(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-232(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_180
.LBB19_175:                             # %if.end911
                                        #   in Loop: Header=BB19_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_177
# %bb.176:                              # %if.then916
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_177:                             # %if.end917
                                        #   in Loop: Header=BB19_173 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_179
# %bb.178:                              # %if.then940
                                        #   in Loop: Header=BB19_173 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_179:                             # %if.end944
                                        #   in Loop: Header=BB19_173 Depth=1
	jmp	.LBB19_173
.LBB19_180:                             # %while.end945
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB19_181:                             # %sw.bb951
	movq	-16(%rbp), %rax
	movl	$26, 8(%rax)
.LBB19_182:                             # %while.body953
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_184
# %bb.183:                              # %if.then957
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -280(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-280(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_189
.LBB19_184:                             # %if.end967
                                        #   in Loop: Header=BB19_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_186
# %bb.185:                              # %if.then972
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_186:                             # %if.end973
                                        #   in Loop: Header=BB19_182 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_188
# %bb.187:                              # %if.then996
                                        #   in Loop: Header=BB19_182 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_188:                             # %if.end1000
                                        #   in Loop: Header=BB19_182 Depth=1
	jmp	.LBB19_182
.LBB19_189:                             # %while.end1001
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
.LBB19_190:                             # %sw.bb1007
	movq	-16(%rbp), %rax
	movl	$27, 8(%rax)
.LBB19_191:                             # %while.body1009
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_193
# %bb.192:                              # %if.then1013
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -276(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-276(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_198
.LBB19_193:                             # %if.end1023
                                        #   in Loop: Header=BB19_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_195
# %bb.194:                              # %if.then1028
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_195:                             # %if.end1029
                                        #   in Loop: Header=BB19_191 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_197
# %bb.196:                              # %if.then1052
                                        #   in Loop: Header=BB19_191 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_197:                             # %if.end1056
                                        #   in Loop: Header=BB19_191 Depth=1
	jmp	.LBB19_191
.LBB19_198:                             # %while.end1057
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jge	.LBB19_200
# %bb.199:                              # %if.then1066
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_200:                             # %if.end1067
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	imull	$100000, 40(%rcx), %ecx # imm = 0x186A0
	addl	$10, %ecx
	cmpl	%ecx, %eax
	jle	.LBB19_202
# %bb.201:                              # %if.then1074
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_202:                             # %if.end1075
	movl	$0, -24(%rbp)
.LBB19_203:                             # %for.cond
	cmpl	$16, -24(%rbp)
	jge	.LBB19_218
# %bb.204:                              # %for.body
	jmp	.LBB19_205
.LBB19_205:                             # %sw.bb1078
	movq	-16(%rbp), %rax
	movl	$28, 8(%rax)
.LBB19_206:                             # %while.body1080
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_208
# %bb.207:                              # %if.then1084
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -284(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-284(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_213
.LBB19_208:                             # %if.end1094
                                        #   in Loop: Header=BB19_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_210
# %bb.209:                              # %if.then1099
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_210:                             # %if.end1100
                                        #   in Loop: Header=BB19_206 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_212
# %bb.211:                              # %if.then1123
                                        #   in Loop: Header=BB19_206 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_212:                             # %if.end1127
                                        #   in Loop: Header=BB19_206 Depth=1
	jmp	.LBB19_206
.LBB19_213:                             # %while.end1128
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB19_215
# %bb.214:                              # %if.then1132
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$1, 3452(%rax,%rcx)
	jmp	.LBB19_216
.LBB19_215:                             # %if.else1133
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3452(%rax,%rcx)
.LBB19_216:                             # %if.end1137
	jmp	.LBB19_217
.LBB19_217:                             # %for.inc
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_203
.LBB19_218:                             # %for.end
	movl	$0, -24(%rbp)
.LBB19_219:                             # %for.cond1139
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jge	.LBB19_222
# %bb.220:                              # %for.body1142
                                        #   in Loop: Header=BB19_219 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, 3196(%rax,%rcx)
# %bb.221:                              # %for.inc1145
                                        #   in Loop: Header=BB19_219 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_219
.LBB19_222:                             # %for.end1147
	movl	$0, -24(%rbp)
.LBB19_223:                             # %for.cond1148
	cmpl	$16, -24(%rbp)
	jge	.LBB19_243
# %bb.224:                              # %for.body1151
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpb	$0, 3452(%rax,%rcx)
	je	.LBB19_241
# %bb.225:                              # %if.then1156
	movl	$0, -40(%rbp)
.LBB19_226:                             # %for.cond1157
	cmpl	$16, -40(%rbp)
	jge	.LBB19_240
# %bb.227:                              # %for.body1160
	jmp	.LBB19_228
.LBB19_228:                             # %sw.bb1161
	movq	-16(%rbp), %rax
	movl	$29, 8(%rax)
.LBB19_229:                             # %while.body1163
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_231
# %bb.230:                              # %if.then1167
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -300(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-300(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_236
.LBB19_231:                             # %if.end1177
                                        #   in Loop: Header=BB19_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_233
# %bb.232:                              # %if.then1182
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_233:                             # %if.end1183
                                        #   in Loop: Header=BB19_229 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_235
# %bb.234:                              # %if.then1206
                                        #   in Loop: Header=BB19_229 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_235:                             # %if.end1210
                                        #   in Loop: Header=BB19_229 Depth=1
	jmp	.LBB19_229
.LBB19_236:                             # %while.end1211
	movzbl	-17(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB19_238
# %bb.237:                              # %if.then1215
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$4, %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	$1, 3196(%rax,%rcx)
.LBB19_238:                             # %if.end1221
	jmp	.LBB19_239
.LBB19_239:                             # %for.inc1222
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB19_226
.LBB19_240:                             # %for.end1224
	jmp	.LBB19_241
.LBB19_241:                             # %if.end1225
	jmp	.LBB19_242
.LBB19_242:                             # %for.inc1226
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_223
.LBB19_243:                             # %for.end1228
	movq	-16(%rbp), %rdi
	callq	makeMaps_d
	movq	-16(%rbp), %rax
	cmpl	$0, 3192(%rax)
	jne	.LBB19_245
# %bb.244:                              # %if.then1231
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_245:                             # %if.end1232
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$2, %eax
	movl	%eax, -132(%rbp)
.LBB19_246:                             # %sw.bb1235
	movq	-16(%rbp), %rax
	movl	$30, 8(%rax)
.LBB19_247:                             # %while.body1237
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 36(%rax)
	jl	.LBB19_249
# %bb.248:                              # %if.then1241
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$3, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$7, %eax
	movl	%eax, -372(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$3, %ecx
	movl	%ecx, 36(%rax)
	movl	-372(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB19_254
.LBB19_249:                             # %if.end1250
                                        #   in Loop: Header=BB19_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_251
# %bb.250:                              # %if.then1255
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_251:                             # %if.end1256
                                        #   in Loop: Header=BB19_247 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_253
# %bb.252:                              # %if.then1279
                                        #   in Loop: Header=BB19_247 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_253:                             # %if.end1283
                                        #   in Loop: Header=BB19_247 Depth=1
	jmp	.LBB19_247
.LBB19_254:                             # %while.end1284
	cmpl	$2, -104(%rbp)
	jl	.LBB19_256
# %bb.255:                              # %lor.lhs.false1287
	cmpl	$6, -104(%rbp)
	jle	.LBB19_257
.LBB19_256:                             # %if.then1290
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_257:                             # %if.end1291
	jmp	.LBB19_258
.LBB19_258:                             # %sw.bb1292
	movq	-16(%rbp), %rax
	movl	$31, 8(%rax)
.LBB19_259:                             # %while.body1294
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$15, 36(%rax)
	jl	.LBB19_261
# %bb.260:                              # %if.then1298
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$15, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, -344(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$15, %ecx
	movl	%ecx, 36(%rax)
	movl	-344(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB19_266
.LBB19_261:                             # %if.end1307
                                        #   in Loop: Header=BB19_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_263
# %bb.262:                              # %if.then1312
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_263:                             # %if.end1313
                                        #   in Loop: Header=BB19_259 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_265
# %bb.264:                              # %if.then1336
                                        #   in Loop: Header=BB19_259 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_265:                             # %if.end1340
                                        #   in Loop: Header=BB19_259 Depth=1
	jmp	.LBB19_259
.LBB19_266:                             # %while.end1341
	cmpl	$1, -96(%rbp)
	jge	.LBB19_268
# %bb.267:                              # %if.then1344
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_268:                             # %if.end1345
	movl	$0, -24(%rbp)
.LBB19_269:                             # %for.cond1346
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB19_287
# %bb.270:                              # %for.body1349
	movl	$0, -40(%rbp)
.LBB19_271:                             # %while.body1350
	jmp	.LBB19_272
.LBB19_272:                             # %sw.bb1351
	movq	-16(%rbp), %rax
	movl	$32, 8(%rax)
.LBB19_273:                             # %while.body1354
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_275
# %bb.274:                              # %if.then1358
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -340(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-340(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_280
.LBB19_275:                             # %if.end1368
                                        #   in Loop: Header=BB19_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_277
# %bb.276:                              # %if.then1373
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_277:                             # %if.end1374
                                        #   in Loop: Header=BB19_273 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_279
# %bb.278:                              # %if.then1397
                                        #   in Loop: Header=BB19_273 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_279:                             # %if.end1401
                                        #   in Loop: Header=BB19_273 Depth=1
	jmp	.LBB19_273
.LBB19_280:                             # %while.end1402
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB19_282
# %bb.281:                              # %if.then1406
	jmp	.LBB19_285
.LBB19_282:                             # %if.end1407
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.LBB19_284
# %bb.283:                              # %if.then1411
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_284:                             # %if.end1412
	jmp	.LBB19_271
.LBB19_285:                             # %while.end1413
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 25886(%rcx,%rdx)
# %bb.286:                              # %for.inc1417
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_269
.LBB19_287:                             # %for.end1419
	movb	$0, -29(%rbp)
.LBB19_288:                             # %for.cond1421
                                        # =>This Inner Loop Header: Depth=1
	movzbl	-29(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB19_291
# %bb.289:                              # %for.body1425
                                        #   in Loop: Header=BB19_288 Depth=1
	movb	-29(%rbp), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
# %bb.290:                              # %for.inc1428
                                        #   in Loop: Header=BB19_288 Depth=1
	movb	-29(%rbp), %al
	addb	$1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB19_288
.LBB19_291:                             # %for.end1430
	movl	$0, -24(%rbp)
.LBB19_292:                             # %for.cond1431
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_294 Depth 2
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB19_298
# %bb.293:                              # %for.body1434
                                        #   in Loop: Header=BB19_292 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	25886(%rax,%rcx), %al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	movb	-198(%rbp,%rax), %al
	movb	%al, -81(%rbp)
.LBB19_294:                             # %while.cond
                                        #   Parent Loop BB19_292 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB19_296
# %bb.295:                              # %while.body1443
                                        #   in Loop: Header=BB19_294 Depth=2
	movzbl	-29(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-198(%rbp,%rax), %al
	movzbl	-29(%rbp), %ecx
	movb	%al, -198(%rbp,%rcx)
	movb	-29(%rbp), %al
	addb	$-1, %al
	movb	%al, -29(%rbp)
	jmp	.LBB19_294
.LBB19_296:                             # %while.end1451
                                        #   in Loop: Header=BB19_292 Depth=1
	movb	-81(%rbp), %al
	movb	%al, -198(%rbp)
	movb	-81(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, 7884(%rcx,%rdx)
# %bb.297:                              # %for.inc1455
                                        #   in Loop: Header=BB19_292 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_292
.LBB19_298:                             # %for.end1457
	movl	$0, -48(%rbp)
.LBB19_299:                             # %for.cond1458
	movl	-48(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB19_343
# %bb.300:                              # %for.body1461
	jmp	.LBB19_301
.LBB19_301:                             # %sw.bb1462
	movq	-16(%rbp), %rax
	movl	$33, 8(%rax)
.LBB19_302:                             # %while.body1465
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$5, 36(%rax)
	jl	.LBB19_304
# %bb.303:                              # %if.then1469
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$31, %eax
	movl	%eax, -256(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$5, %ecx
	movl	%ecx, 36(%rax)
	movl	-256(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB19_309
.LBB19_304:                             # %if.end1478
                                        #   in Loop: Header=BB19_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_306
# %bb.305:                              # %if.then1483
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_306:                             # %if.end1484
                                        #   in Loop: Header=BB19_302 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_308
# %bb.307:                              # %if.then1507
                                        #   in Loop: Header=BB19_302 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_308:                             # %if.end1511
                                        #   in Loop: Header=BB19_302 Depth=1
	jmp	.LBB19_302
.LBB19_309:                             # %while.end1512
	movl	$0, -24(%rbp)
.LBB19_310:                             # %for.cond1513
	movl	-24(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB19_341
# %bb.311:                              # %for.body1516
	jmp	.LBB19_312
.LBB19_312:                             # %while.body1518
	cmpl	$1, -88(%rbp)
	jl	.LBB19_314
# %bb.313:                              # %lor.lhs.false1521
	cmpl	$20, -88(%rbp)
	jle	.LBB19_315
.LBB19_314:                             # %if.then1524
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_315:                             # %if.end1525
	jmp	.LBB19_316
.LBB19_316:                             # %sw.bb1526
	movq	-16(%rbp), %rax
	movl	$34, 8(%rax)
.LBB19_317:                             # %while.body1529
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_319
# %bb.318:                              # %if.then1533
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -216(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-216(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_324
.LBB19_319:                             # %if.end1543
                                        #   in Loop: Header=BB19_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_321
# %bb.320:                              # %if.then1548
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_321:                             # %if.end1549
                                        #   in Loop: Header=BB19_317 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_323
# %bb.322:                              # %if.then1572
                                        #   in Loop: Header=BB19_317 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_323:                             # %if.end1576
                                        #   in Loop: Header=BB19_317 Depth=1
	jmp	.LBB19_317
.LBB19_324:                             # %while.end1577
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB19_326
# %bb.325:                              # %if.then1581
	jmp	.LBB19_339
.LBB19_326:                             # %if.end1582
	jmp	.LBB19_327
.LBB19_327:                             # %sw.bb1583
	movq	-16(%rbp), %rax
	movl	$35, 8(%rax)
.LBB19_328:                             # %while.body1586
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_330
# %bb.329:                              # %if.then1590
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -244(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-244(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_335
.LBB19_330:                             # %if.end1600
                                        #   in Loop: Header=BB19_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_332
# %bb.331:                              # %if.then1605
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_332:                             # %if.end1606
                                        #   in Loop: Header=BB19_328 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_334
# %bb.333:                              # %if.then1629
                                        #   in Loop: Header=BB19_328 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_334:                             # %if.end1633
                                        #   in Loop: Header=BB19_328 Depth=1
	jmp	.LBB19_328
.LBB19_335:                             # %while.end1634
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB19_337
# %bb.336:                              # %if.then1638
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB19_338
.LBB19_337:                             # %if.else1640
	movl	-88(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -88(%rbp)
.LBB19_338:                             # %if.end1642
	jmp	.LBB19_312
.LBB19_339:                             # %while.end1643
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rdx
	imulq	$258, %rdx, %rdx        # imm = 0x102
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.340:                              # %for.inc1649
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_310
.LBB19_341:                             # %for.end1651
	jmp	.LBB19_342
.LBB19_342:                             # %for.inc1652
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB19_299
.LBB19_343:                             # %for.end1654
	movl	$0, -48(%rbp)
.LBB19_344:                             # %for.cond1655
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_346 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB19_355
# %bb.345:                              # %for.body1658
                                        #   in Loop: Header=BB19_344 Depth=1
	movl	$32, -144(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB19_346:                             # %for.cond1659
                                        #   Parent Loop BB19_344 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB19_353
# %bb.347:                              # %for.body1662
                                        #   in Loop: Header=BB19_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-180(%rbp), %eax
	jle	.LBB19_349
# %bb.348:                              # %if.then1671
                                        #   in Loop: Header=BB19_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -180(%rbp)
.LBB19_349:                             # %if.end1678
                                        #   in Loop: Header=BB19_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB19_351
# %bb.350:                              # %if.then1687
                                        #   in Loop: Header=BB19_346 Depth=2
	movq	-16(%rbp), %rax
	addq	$43888, %rax            # imm = 0xAB70
	movslq	-48(%rbp), %rcx
	imulq	$258, %rcx, %rcx        # imm = 0x102
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -144(%rbp)
.LBB19_351:                             # %if.end1694
                                        #   in Loop: Header=BB19_346 Depth=2
	jmp	.LBB19_352
.LBB19_352:                             # %for.inc1695
                                        #   in Loop: Header=BB19_346 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_346
.LBB19_353:                             # %for.end1697
                                        #   in Loop: Header=BB19_344 Depth=1
	movq	-16(%rbp), %rdi
	addq	$45436, %rdi            # imm = 0xB17C
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdi
	movq	-16(%rbp), %rsi
	addq	$51628, %rsi            # imm = 0xC9AC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rsi
	movq	-16(%rbp), %rdx
	addq	$57820, %rdx            # imm = 0xE1DC
	movslq	-48(%rbp), %rax
	imulq	$1032, %rax, %rax       # imm = 0x408
	addq	%rax, %rdx
	movq	-16(%rbp), %rcx
	addq	$43888, %rcx            # imm = 0xAB70
	movslq	-48(%rbp), %rax
	imulq	$258, %rax, %rax        # imm = 0x102
	addq	%rax, %rcx
	movl	-144(%rbp), %r8d
	movl	-180(%rbp), %r9d
	movl	-132(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_hbCreateDecodeTables
	movl	-144(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, 64012(%rcx,%rdx,4)
# %bb.354:                              # %for.inc1713
                                        #   in Loop: Header=BB19_344 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB19_344
.LBB19_355:                             # %for.end1715
	movq	-16(%rbp), %rax
	movl	3192(%rax), %eax
	addl	$1, %eax
	movl	%eax, -184(%rbp)
	movq	-16(%rbp), %rax
	imull	$100000, 40(%rax), %eax # imm = 0x186A0
	movl	%eax, -140(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB19_356:                             # %for.cond1720
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -24(%rbp)
	jg	.LBB19_359
# %bb.357:                              # %for.body1723
                                        #   in Loop: Header=BB19_356 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, 68(%rax,%rcx,4)
# %bb.358:                              # %for.inc1726
                                        #   in Loop: Header=BB19_356 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_356
.LBB19_359:                             # %for.end1728
	movl	$4095, -152(%rbp)       # imm = 0xFFF
	movl	$15, -136(%rbp)
.LBB19_360:                             # %for.cond1729
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_362 Depth 2
	cmpl	$0, -136(%rbp)
	jl	.LBB19_367
# %bb.361:                              # %for.body1732
                                        #   in Loop: Header=BB19_360 Depth=1
	movl	$15, -156(%rbp)
.LBB19_362:                             # %for.cond1733
                                        #   Parent Loop BB19_360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -156(%rbp)
	jl	.LBB19_365
# %bb.363:                              # %for.body1736
                                        #   in Loop: Header=BB19_362 Depth=2
	movl	-136(%rbp), %eax
	shll	$4, %eax
	addl	-156(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-152(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-152(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -152(%rbp)
# %bb.364:                              # %for.inc1743
                                        #   in Loop: Header=BB19_362 Depth=2
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB19_362
.LBB19_365:                             # %for.end1745
                                        #   in Loop: Header=BB19_360 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-136(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.366:                              # %for.inc1749
                                        #   in Loop: Header=BB19_360 Depth=1
	movl	-136(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB19_360
.LBB19_367:                             # %for.end1751
	movl	$0, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB19_371
# %bb.368:                              # %if.then1754
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB19_370
# %bb.369:                              # %if.then1758
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_370:                             # %if.end1759
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB19_371:                             # %if.end1779
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB19_372:                             # %sw.bb1781
	movq	-16(%rbp), %rax
	movl	$36, 8(%rax)
.LBB19_373:                             # %while.body1784
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB19_375
# %bb.374:                              # %if.then1788
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -252(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-252(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB19_380
.LBB19_375:                             # %if.end1799
                                        #   in Loop: Header=BB19_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_377
# %bb.376:                              # %if.then1804
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_377:                             # %if.end1805
                                        #   in Loop: Header=BB19_373 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_379
# %bb.378:                              # %if.then1828
                                        #   in Loop: Header=BB19_373 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_379:                             # %if.end1832
                                        #   in Loop: Header=BB19_373 Depth=1
	jmp	.LBB19_373
.LBB19_380:                             # %while.end1833
	jmp	.LBB19_381
.LBB19_381:                             # %while.body1835
	cmpl	$20, -36(%rbp)
	jle	.LBB19_383
# %bb.382:                              # %if.then1838
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_383:                             # %if.end1839
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB19_385
# %bb.384:                              # %if.then1844
	jmp	.LBB19_395
.LBB19_385:                             # %if.end1845
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB19_386:                             # %sw.bb1847
	movq	-16(%rbp), %rax
	movl	$37, 8(%rax)
.LBB19_387:                             # %while.body1850
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_389
# %bb.388:                              # %if.then1854
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -360(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-360(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB19_394
.LBB19_389:                             # %if.end1863
                                        #   in Loop: Header=BB19_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_391
# %bb.390:                              # %if.then1868
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_391:                             # %if.end1869
                                        #   in Loop: Header=BB19_387 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_393
# %bb.392:                              # %if.then1892
                                        #   in Loop: Header=BB19_387 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_393:                             # %if.end1896
                                        #   in Loop: Header=BB19_387 Depth=1
	jmp	.LBB19_387
.LBB19_394:                             # %while.end1897
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB19_381
.LBB19_395:                             # %while.end1900
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB19_397
# %bb.396:                              # %lor.lhs.false1906
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB19_398
.LBB19_397:                             # %if.then1912
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_398:                             # %if.end1913
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
.LBB19_399:                             # %while.body1920
	movl	-80(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jne	.LBB19_401
# %bb.400:                              # %if.then1923
	jmp	.LBB19_520
.LBB19_401:                             # %if.end1924
	cmpl	$0, -80(%rbp)
	je	.LBB19_403
# %bb.402:                              # %lor.lhs.false1927
	cmpl	$1, -80(%rbp)
	jne	.LBB19_458
.LBB19_403:                             # %if.then1930
	movl	$-1, -60(%rbp)
	movl	$1, -124(%rbp)
.LBB19_404:                             # %do.body
	cmpl	$0, -80(%rbp)
	jne	.LBB19_406
# %bb.405:                              # %if.then1933
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$0, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB19_409
.LBB19_406:                             # %if.else1936
	cmpl	$1, -80(%rbp)
	jne	.LBB19_408
# %bb.407:                              # %if.then1939
	movl	-60(%rbp), %eax
	movl	-124(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
.LBB19_408:                             # %if.end1942
	jmp	.LBB19_409
.LBB19_409:                             # %if.end1943
	movl	-124(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB19_413
# %bb.410:                              # %if.then1947
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB19_412
# %bb.411:                              # %if.then1951
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_412:                             # %if.end1952
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB19_413:                             # %if.end1972
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB19_414:                             # %sw.bb1974
	movq	-16(%rbp), %rax
	movl	$38, 8(%rax)
.LBB19_415:                             # %while.body1977
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB19_417
# %bb.416:                              # %if.then1981
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -332(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-332(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB19_422
.LBB19_417:                             # %if.end1992
                                        #   in Loop: Header=BB19_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_419
# %bb.418:                              # %if.then1997
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_419:                             # %if.end1998
                                        #   in Loop: Header=BB19_415 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_421
# %bb.420:                              # %if.then2021
                                        #   in Loop: Header=BB19_415 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_421:                             # %if.end2025
                                        #   in Loop: Header=BB19_415 Depth=1
	jmp	.LBB19_415
.LBB19_422:                             # %while.end2026
	jmp	.LBB19_423
.LBB19_423:                             # %while.body2028
	cmpl	$20, -36(%rbp)
	jle	.LBB19_425
# %bb.424:                              # %if.then2031
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_425:                             # %if.end2032
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB19_427
# %bb.426:                              # %if.then2037
	jmp	.LBB19_437
.LBB19_427:                             # %if.end2038
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB19_428:                             # %sw.bb2040
	movq	-16(%rbp), %rax
	movl	$39, 8(%rax)
.LBB19_429:                             # %while.body2043
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_431
# %bb.430:                              # %if.then2047
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -376(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-376(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB19_436
.LBB19_431:                             # %if.end2056
                                        #   in Loop: Header=BB19_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_433
# %bb.432:                              # %if.then2061
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_433:                             # %if.end2062
                                        #   in Loop: Header=BB19_429 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_435
# %bb.434:                              # %if.then2085
                                        #   in Loop: Header=BB19_429 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_435:                             # %if.end2089
                                        #   in Loop: Header=BB19_429 Depth=1
	jmp	.LBB19_429
.LBB19_436:                             # %while.end2090
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB19_423
.LBB19_437:                             # %while.end2093
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB19_439
# %bb.438:                              # %lor.lhs.false2099
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB19_440
.LBB19_439:                             # %if.then2105
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_440:                             # %if.end2106
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
# %bb.441:                              # %do.cond
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB19_443
# %bb.442:                              # %lor.rhs
	cmpl	$1, -80(%rbp)
	sete	%al
.LBB19_443:                             # %lor.end
	testb	$1, %al
	jne	.LBB19_404
# %bb.444:                              # %do.end
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movzbl	3724(%rcx,%rdx), %ecx
	movb	3468(%rax,%rcx), %al
	movb	%al, -17(%rbp)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	addl	68(%rcx,%rdx,4), %eax
	movl	%eax, 68(%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB19_451
# %bb.445:                              # %if.then2130
	jmp	.LBB19_446
.LBB19_446:                             # %while.cond2131
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB19_450
# %bb.447:                              # %while.body2134
                                        #   in Loop: Header=BB19_446 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB19_449
# %bb.448:                              # %if.then2137
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_449:                             # %if.end2138
                                        #   in Loop: Header=BB19_446 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB19_446
.LBB19_450:                             # %while.end2145
	jmp	.LBB19_457
.LBB19_451:                             # %if.else2146
	jmp	.LBB19_452
.LBB19_452:                             # %while.cond2147
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jle	.LBB19_456
# %bb.453:                              # %while.body2150
                                        #   in Loop: Header=BB19_452 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB19_455
# %bb.454:                              # %if.then2153
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_455:                             # %if.end2154
                                        #   in Loop: Header=BB19_452 Depth=1
	movzbl	-17(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB19_452
.LBB19_456:                             # %while.end2161
	jmp	.LBB19_457
.LBB19_457:                             # %if.end2162
	jmp	.LBB19_399
.LBB19_458:                             # %if.else2163
	movl	-52(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB19_460
# %bb.459:                              # %if.then2166
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_460:                             # %if.end2167
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	cmpl	$16, -72(%rbp)
	jae	.LBB19_468
# %bb.461:                              # %if.then2174
	movq	-16(%rbp), %rax
	movl	7820(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB19_462:                             # %while.cond2181
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -72(%rbp)
	jbe	.LBB19_464
# %bb.463:                              # %while.body2184
                                        #   in Loop: Header=BB19_462 Depth=1
	movl	-76(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -100(%rbp)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$3, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	-100(%rbp), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-100(%rbp), %edx
	subl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB19_462
.LBB19_464:                             # %while.end2218
	jmp	.LBB19_465
.LBB19_465:                             # %while.cond2219
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -72(%rbp)
	jbe	.LBB19_467
# %bb.466:                              # %while.body2222
                                        #   in Loop: Header=BB19_465 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	addl	-72(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %ecx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movl	-76(%rbp), %edx
	addl	-72(%rbp), %edx
	movl	%edx, %edx
	movb	%al, 3724(%rcx,%rdx)
	movl	-72(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB19_465
.LBB19_467:                             # %while.end2233
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	jmp	.LBB19_485
.LBB19_468:                             # %if.else2237
	movl	-72(%rbp), %eax
	shrl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -268(%rbp)
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %eax
	addl	-268(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movb	3724(%rax,%rcx), %al
	movb	%al, -17(%rbp)
.LBB19_469:                             # %while.cond2245
                                        # =>This Inner Loop Header: Depth=1
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	cmpl	7820(%rcx,%rdx,4), %eax
	jle	.LBB19_471
# %bb.470:                              # %while.body2251
                                        #   in Loop: Header=BB19_469 Depth=1
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-76(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB19_469
.LBB19_471:                             # %while.end2260
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
.LBB19_472:                             # %while.cond2265
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -92(%rbp)
	jle	.LBB19_474
# %bb.473:                              # %while.body2268
                                        #   in Loop: Header=BB19_472 Depth=1
	movq	-16(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	7820(%rax,%rcx,4), %edx
	addl	$-1, %edx
	movl	%edx, 7820(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-92(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	$16, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movslq	7820(%rdx,%rsi,4), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB19_472
.LBB19_474:                             # %while.end2289
	movq	-16(%rbp), %rax
	movl	7820(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 7820(%rax)
	movb	-17(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	7820(%rdx), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movq	-16(%rbp), %rax
	cmpl	$0, 7820(%rax)
	jne	.LBB19_484
# %bb.475:                              # %if.then2302
	movl	$4095, -160(%rbp)       # imm = 0xFFF
	movl	$15, -128(%rbp)
.LBB19_476:                             # %for.cond2303
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_478 Depth 2
	cmpl	$0, -128(%rbp)
	jl	.LBB19_483
# %bb.477:                              # %for.body2306
                                        #   in Loop: Header=BB19_476 Depth=1
	movl	$15, -148(%rbp)
.LBB19_478:                             # %for.cond2307
                                        #   Parent Loop BB19_476 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -148(%rbp)
	jl	.LBB19_481
# %bb.479:                              # %for.body2310
                                        #   in Loop: Header=BB19_478 Depth=2
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	7820(%rcx,%rdx,4), %ecx
	addl	-148(%rbp), %ecx
	movslq	%ecx, %rcx
	movb	3724(%rax,%rcx), %al
	movq	-16(%rbp), %rcx
	movslq	-160(%rbp), %rdx
	movb	%al, 3724(%rcx,%rdx)
	movl	-160(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -160(%rbp)
# %bb.480:                              # %for.inc2322
                                        #   in Loop: Header=BB19_478 Depth=2
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB19_478
.LBB19_481:                             # %for.end2324
                                        #   in Loop: Header=BB19_476 Depth=1
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movl	%eax, 7820(%rcx,%rdx,4)
# %bb.482:                              # %for.inc2329
                                        #   in Loop: Header=BB19_476 Depth=1
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB19_476
.LBB19_483:                             # %for.end2331
	jmp	.LBB19_484
.LBB19_484:                             # %if.end2332
	jmp	.LBB19_485
.LBB19_485:                             # %if.end2333
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movzbl	3468(%rcx,%rdx), %ecx
	movl	68(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 68(%rax,%rcx,4)
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB19_487
# %bb.486:                              # %if.then2343
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB19_488
.LBB19_487:                             # %if.else2351
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movzbl	3468(%rax,%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB19_488:                             # %if.end2359
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB19_492
# %bb.489:                              # %if.then2363
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB19_491
# %bb.490:                              # %if.then2367
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_491:                             # %if.end2368
	movl	$50, -64(%rbp)
	movq	-16(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	7884(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	64012(%rax,%rcx,4), %eax
	movl	%eax, -112(%rbp)
	movq	-16(%rbp), %rax
	addq	$45436, %rax            # imm = 0xB17C
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-16(%rbp), %rax
	addq	$57820, %rax            # imm = 0xE1DC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	addq	$51628, %rax            # imm = 0xC9AC
	movslq	-56(%rbp), %rcx
	imulq	$1032, %rcx, %rcx       # imm = 0x408
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
.LBB19_492:                             # %if.end2388
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	movl	-112(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB19_493:                             # %sw.bb2390
	movq	-16(%rbp), %rax
	movl	$40, 8(%rax)
.LBB19_494:                             # %while.body2393
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	cmpl	-36(%rbp), %eax
	jl	.LBB19_496
# %bb.495:                              # %if.then2397
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	subl	$1, %edx
	andl	%edx, %eax
	movl	%eax, -352(%rbp)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 36(%rcx)
	movl	-352(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB19_501
.LBB19_496:                             # %if.end2408
                                        #   in Loop: Header=BB19_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_498
# %bb.497:                              # %if.then2413
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_498:                             # %if.end2414
                                        #   in Loop: Header=BB19_494 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_500
# %bb.499:                              # %if.then2437
                                        #   in Loop: Header=BB19_494 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_500:                             # %if.end2441
                                        #   in Loop: Header=BB19_494 Depth=1
	jmp	.LBB19_494
.LBB19_501:                             # %while.end2442
	jmp	.LBB19_502
.LBB19_502:                             # %while.body2444
	cmpl	$20, -36(%rbp)
	jle	.LBB19_504
# %bb.503:                              # %if.then2447
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_504:                             # %if.end2448
	movl	-44(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jg	.LBB19_506
# %bb.505:                              # %if.then2453
	jmp	.LBB19_516
.LBB19_506:                             # %if.end2454
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB19_507:                             # %sw.bb2456
	movq	-16(%rbp), %rax
	movl	$41, 8(%rax)
.LBB19_508:                             # %while.body2459
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 36(%rax)
	jl	.LBB19_510
# %bb.509:                              # %if.then2463
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$1, %eax
	movl	%eax, -220(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 36(%rax)
	movl	-220(%rbp), %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB19_515
.LBB19_510:                             # %if.end2472
                                        #   in Loop: Header=BB19_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_512
# %bb.511:                              # %if.then2477
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_512:                             # %if.end2478
                                        #   in Loop: Header=BB19_508 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_514
# %bb.513:                              # %if.then2501
                                        #   in Loop: Header=BB19_508 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_514:                             # %if.end2505
                                        #   in Loop: Header=BB19_508 Depth=1
	jmp	.LBB19_508
.LBB19_515:                             # %while.end2506
	movl	-44(%rbp), %eax
	shll	$1, %eax
	orl	-108(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB19_502
.LBB19_516:                             # %while.end2509
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$0, %eax
	jl	.LBB19_518
# %bb.517:                              # %lor.lhs.false2515
	movl	-44(%rbp), %eax
	movq	-120(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	cmpl	$258, %eax              # imm = 0x102
	jl	.LBB19_519
.LBB19_518:                             # %if.then2521
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_519:                             # %if.end2522
	movq	-168(%rbp), %rax
	movl	-44(%rbp), %ecx
	movq	-120(%rbp), %rdx
	movslq	-36(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB19_399
.LBB19_520:                             # %while.end2528
	movq	-16(%rbp), %rax
	cmpl	$0, 56(%rax)
	jl	.LBB19_522
# %bb.521:                              # %lor.lhs.false2532
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	cmpl	-52(%rbp), %eax
	jl	.LBB19_523
.LBB19_522:                             # %if.then2536
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_523:                             # %if.end2537
	movq	-16(%rbp), %rax
	movl	$0, 1096(%rax)
	movl	$1, -24(%rbp)
.LBB19_524:                             # %for.cond2539
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB19_527
# %bb.525:                              # %for.body2542
                                        #   in Loop: Header=BB19_524 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	68(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.526:                              # %for.inc2550
                                        #   in Loop: Header=BB19_524 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_524
.LBB19_527:                             # %for.end2552
	movl	$1, -24(%rbp)
.LBB19_528:                             # %for.cond2553
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB19_531
# %bb.529:                              # %for.body2556
                                        #   in Loop: Header=BB19_528 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	addl	1096(%rcx,%rdx,4), %eax
	movl	%eax, 1096(%rcx,%rdx,4)
# %bb.530:                              # %for.inc2565
                                        #   in Loop: Header=BB19_528 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_528
.LBB19_531:                             # %for.end2567
	movl	$0, -24(%rbp)
.LBB19_532:                             # %for.cond2568
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB19_538
# %bb.533:                              # %for.body2571
                                        #   in Loop: Header=BB19_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	cmpl	$0, 1096(%rax,%rcx,4)
	jl	.LBB19_535
# %bb.534:                              # %lor.lhs.false2577
                                        #   in Loop: Header=BB19_532 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB19_536
.LBB19_535:                             # %if.then2583
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_536:                             # %if.end2584
                                        #   in Loop: Header=BB19_532 Depth=1
	jmp	.LBB19_537
.LBB19_537:                             # %for.inc2585
                                        #   in Loop: Header=BB19_532 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_532
.LBB19_538:                             # %for.end2587
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 3184(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB19_540
# %bb.539:                              # %if.then2592
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB19_540:                             # %if.end2594
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB19_566
# %bb.541:                              # %if.then2597
	movl	$0, -24(%rbp)
.LBB19_542:                             # %for.cond2598
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -24(%rbp)         # imm = 0x100
	jg	.LBB19_545
# %bb.543:                              # %for.body2601
                                        #   in Loop: Header=BB19_542 Depth=1
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	1096(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, 2124(%rcx,%rdx,4)
# %bb.544:                              # %for.inc2607
                                        #   in Loop: Header=BB19_542 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_542
.LBB19_545:                             # %for.end2609
	movl	$0, -24(%rbp)
.LBB19_546:                             # %for.cond2610
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB19_552
# %bb.547:                              # %for.body2613
                                        #   in Loop: Header=BB19_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB19_549
# %bb.548:                              # %if.then2629
                                        #   in Loop: Header=BB19_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB19_550
.LBB19_549:                             # %if.else2646
                                        #   in Loop: Header=BB19_546 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-24(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movq	-16(%rbp), %rcx
	movzbl	-17(%rbp), %edx
	movl	2124(%rcx,%rdx,4), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB19_550:                             # %if.end2664
                                        #   in Loop: Header=BB19_546 Depth=1
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	2124(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 2124(%rax,%rcx,4)
# %bb.551:                              # %for.inc2669
                                        #   in Loop: Header=BB19_546 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_546
.LBB19_552:                             # %for.end2671
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-24(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -40(%rbp)
.LBB19_553:                             # %do.body2688
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movzbl	(%rcx,%rdx), %edx
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movl	%eax, -296(%rbp)
	movl	-24(%rbp), %eax
	andl	$65535, %eax            # imm = 0xFFFF
	movq	-16(%rbp), %rcx
	movq	3160(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-40(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB19_555
# %bb.554:                              # %if.then2713
                                        #   in Loop: Header=BB19_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$240, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB19_556
.LBB19_555:                             # %if.else2727
                                        #   in Loop: Header=BB19_553 Depth=1
	movq	-16(%rbp), %rax
	movq	3168(%rax), %rax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	andl	$15, %eax
	movl	-24(%rbp), %ecx
	sarl	$16, %ecx
	shll	$4, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movl	-40(%rbp), %edx
	sarl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB19_556:                             # %if.end2742
                                        #   in Loop: Header=BB19_553 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-296(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.557:                              # %do.cond2743
                                        #   in Loop: Header=BB19_553 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	56(%rcx), %eax
	jne	.LBB19_553
# %bb.558:                              # %do.end2747
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB19_564
# %bb.559:                              # %if.then2751
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB19_563
# %bb.560:                              # %if.then2779
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB19_562
# %bb.561:                              # %if.then2789
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB19_562:                             # %if.end2791
	jmp	.LBB19_563
.LBB19_563:                             # %if.end2792
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB19_565
.LBB19_564:                             # %if.else2799
	movq	-16(%rbp), %rax
	movl	60(%rax), %edi
	movq	-16(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-16(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB19_565:                             # %if.end2826
	jmp	.LBB19_578
.LBB19_566:                             # %if.else2827
	movl	$0, -24(%rbp)
.LBB19_567:                             # %for.cond2828
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB19_570
# %bb.568:                              # %for.body2831
                                        #   in Loop: Header=BB19_567 Depth=1
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	$255, %eax
	movb	%al, -17(%rbp)
	movl	-24(%rbp), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	3152(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movzbl	-17(%rbp), %esi
	movslq	1096(%rdx,%rsi,4), %rdx
	orl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movzbl	-17(%rbp), %ecx
	movl	1096(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 1096(%rax,%rcx,4)
# %bb.569:                              # %for.inc2849
                                        #   in Loop: Header=BB19_567 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_567
.LBB19_570:                             # %for.end2851
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	56(%rcx), %rcx
	movl	(%rax,%rcx,4), %eax
	shrl	$8, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB19_576
# %bb.571:                              # %if.then2861
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB19_575
# %bb.572:                              # %if.then2881
	movq	-16(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-16(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB19_574
# %bb.573:                              # %if.then2891
	movq	-16(%rbp), %rax
	movl	$0, 28(%rax)
.LBB19_574:                             # %if.end2893
	jmp	.LBB19_575
.LBB19_575:                             # %if.end2894
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-16(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	jmp	.LBB19_577
.LBB19_576:                             # %if.else2903
	movq	-16(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
.LBB19_577:                             # %if.end2918
	jmp	.LBB19_578
.LBB19_578:                             # %if.end2919
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_579:                             # %endhdr_2
	jmp	.LBB19_580
.LBB19_580:                             # %sw.bb2920
	movq	-16(%rbp), %rax
	movl	$42, 8(%rax)
.LBB19_581:                             # %while.body2923
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_583
# %bb.582:                              # %if.then2927
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -248(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-248(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_588
.LBB19_583:                             # %if.end2937
                                        #   in Loop: Header=BB19_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_585
# %bb.584:                              # %if.then2942
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_585:                             # %if.end2943
                                        #   in Loop: Header=BB19_581 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_587
# %bb.586:                              # %if.then2966
                                        #   in Loop: Header=BB19_581 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_587:                             # %if.end2970
                                        #   in Loop: Header=BB19_581 Depth=1
	jmp	.LBB19_581
.LBB19_588:                             # %while.end2971
	movzbl	-17(%rbp), %eax
	cmpl	$114, %eax
	je	.LBB19_590
# %bb.589:                              # %if.then2975
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_590:                             # %if.end2976
	jmp	.LBB19_591
.LBB19_591:                             # %sw.bb2977
	movq	-16(%rbp), %rax
	movl	$43, 8(%rax)
.LBB19_592:                             # %while.body2980
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_594
# %bb.593:                              # %if.then2984
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -304(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-304(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_599
.LBB19_594:                             # %if.end2994
                                        #   in Loop: Header=BB19_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_596
# %bb.595:                              # %if.then2999
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_596:                             # %if.end3000
                                        #   in Loop: Header=BB19_592 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_598
# %bb.597:                              # %if.then3023
                                        #   in Loop: Header=BB19_592 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_598:                             # %if.end3027
                                        #   in Loop: Header=BB19_592 Depth=1
	jmp	.LBB19_592
.LBB19_599:                             # %while.end3028
	movzbl	-17(%rbp), %eax
	cmpl	$69, %eax
	je	.LBB19_601
# %bb.600:                              # %if.then3032
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_601:                             # %if.end3033
	jmp	.LBB19_602
.LBB19_602:                             # %sw.bb3034
	movq	-16(%rbp), %rax
	movl	$44, 8(%rax)
.LBB19_603:                             # %while.body3037
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_605
# %bb.604:                              # %if.then3041
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -272(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-272(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_610
.LBB19_605:                             # %if.end3051
                                        #   in Loop: Header=BB19_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_607
# %bb.606:                              # %if.then3056
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_607:                             # %if.end3057
                                        #   in Loop: Header=BB19_603 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_609
# %bb.608:                              # %if.then3080
                                        #   in Loop: Header=BB19_603 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_609:                             # %if.end3084
                                        #   in Loop: Header=BB19_603 Depth=1
	jmp	.LBB19_603
.LBB19_610:                             # %while.end3085
	movzbl	-17(%rbp), %eax
	cmpl	$56, %eax
	je	.LBB19_612
# %bb.611:                              # %if.then3089
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_612:                             # %if.end3090
	jmp	.LBB19_613
.LBB19_613:                             # %sw.bb3091
	movq	-16(%rbp), %rax
	movl	$45, 8(%rax)
.LBB19_614:                             # %while.body3094
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_616
# %bb.615:                              # %if.then3098
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -264(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-264(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_621
.LBB19_616:                             # %if.end3108
                                        #   in Loop: Header=BB19_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_618
# %bb.617:                              # %if.then3113
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_618:                             # %if.end3114
                                        #   in Loop: Header=BB19_614 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_620
# %bb.619:                              # %if.then3137
                                        #   in Loop: Header=BB19_614 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_620:                             # %if.end3141
                                        #   in Loop: Header=BB19_614 Depth=1
	jmp	.LBB19_614
.LBB19_621:                             # %while.end3142
	movzbl	-17(%rbp), %eax
	cmpl	$80, %eax
	je	.LBB19_623
# %bb.622:                              # %if.then3146
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_623:                             # %if.end3147
	jmp	.LBB19_624
.LBB19_624:                             # %sw.bb3148
	movq	-16(%rbp), %rax
	movl	$46, 8(%rax)
.LBB19_625:                             # %while.body3151
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_627
# %bb.626:                              # %if.then3155
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -328(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-328(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_632
.LBB19_627:                             # %if.end3165
                                        #   in Loop: Header=BB19_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_629
# %bb.628:                              # %if.then3170
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_629:                             # %if.end3171
                                        #   in Loop: Header=BB19_625 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_631
# %bb.630:                              # %if.then3194
                                        #   in Loop: Header=BB19_625 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_631:                             # %if.end3198
                                        #   in Loop: Header=BB19_625 Depth=1
	jmp	.LBB19_625
.LBB19_632:                             # %while.end3199
	movzbl	-17(%rbp), %eax
	cmpl	$144, %eax
	je	.LBB19_634
# %bb.633:                              # %if.then3203
	movl	$-4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_634:                             # %if.end3204
	movq	-16(%rbp), %rax
	movl	$0, 3180(%rax)
.LBB19_635:                             # %sw.bb3205
	movq	-16(%rbp), %rax
	movl	$47, 8(%rax)
.LBB19_636:                             # %while.body3208
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_638
# %bb.637:                              # %if.then3212
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-208(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_643
.LBB19_638:                             # %if.end3222
                                        #   in Loop: Header=BB19_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_640
# %bb.639:                              # %if.then3227
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_640:                             # %if.end3228
                                        #   in Loop: Header=BB19_636 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_642
# %bb.641:                              # %if.then3251
                                        #   in Loop: Header=BB19_636 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_642:                             # %if.end3255
                                        #   in Loop: Header=BB19_636 Depth=1
	jmp	.LBB19_636
.LBB19_643:                             # %while.end3256
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB19_644:                             # %sw.bb3262
	movq	-16(%rbp), %rax
	movl	$48, 8(%rax)
.LBB19_645:                             # %while.body3265
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_647
# %bb.646:                              # %if.then3269
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-364(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_652
.LBB19_647:                             # %if.end3279
                                        #   in Loop: Header=BB19_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_649
# %bb.648:                              # %if.then3284
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_649:                             # %if.end3285
                                        #   in Loop: Header=BB19_645 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_651
# %bb.650:                              # %if.then3308
                                        #   in Loop: Header=BB19_645 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_651:                             # %if.end3312
                                        #   in Loop: Header=BB19_645 Depth=1
	jmp	.LBB19_645
.LBB19_652:                             # %while.end3313
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB19_653:                             # %sw.bb3319
	movq	-16(%rbp), %rax
	movl	$49, 8(%rax)
.LBB19_654:                             # %while.body3322
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_656
# %bb.655:                              # %if.then3326
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -380(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-380(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_661
.LBB19_656:                             # %if.end3336
                                        #   in Loop: Header=BB19_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_658
# %bb.657:                              # %if.then3341
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_658:                             # %if.end3342
                                        #   in Loop: Header=BB19_654 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_660
# %bb.659:                              # %if.then3365
                                        #   in Loop: Header=BB19_654 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_660:                             # %if.end3369
                                        #   in Loop: Header=BB19_654 Depth=1
	jmp	.LBB19_654
.LBB19_661:                             # %while.end3370
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
.LBB19_662:                             # %sw.bb3376
	movq	-16(%rbp), %rax
	movl	$50, 8(%rax)
.LBB19_663:                             # %while.body3379
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$8, 36(%rax)
	jl	.LBB19_665
# %bb.664:                              # %if.then3383
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	36(%rcx), %ecx
	subl	$8, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %eax
	andl	$255, %eax
	movl	%eax, -320(%rbp)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	subl	$8, %ecx
	movl	%ecx, 36(%rax)
	movl	-320(%rbp), %eax
	movb	%al, -17(%rbp)
	jmp	.LBB19_670
.LBB19_665:                             # %if.end3393
                                        #   in Loop: Header=BB19_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB19_667
# %bb.666:                              # %if.then3398
	movl	$0, -28(%rbp)
	jmp	.LBB19_673
.LBB19_667:                             # %if.end3399
                                        #   in Loop: Header=BB19_663 Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	(%rcx), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB19_669
# %bb.668:                              # %if.then3422
                                        #   in Loop: Header=BB19_663 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB19_669:                             # %if.end3426
                                        #   in Loop: Header=BB19_663 Depth=1
	jmp	.LBB19_663
.LBB19_670:                             # %while.end3427
	movq	-16(%rbp), %rax
	movl	3180(%rax), %eax
	shll	$8, %eax
	movzbl	-17(%rbp), %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3180(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -28(%rbp)
	jmp	.LBB19_673
.LBB19_671:                             # %sw.default
	movl	$4001, %edi             # imm = 0xFA1
	callq	BZ2_bz__AssertH__fail
# %bb.672:                              # %sw.epilog
	movl	$4002, %edi             # imm = 0xFA2
	callq	BZ2_bz__AssertH__fail
.LBB19_673:                             # %save_state_and_return
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64036(%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64040(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64044(%rcx)
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64048(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64052(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64056(%rcx)
	movl	-184(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64060(%rcx)
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64064(%rcx)
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64068(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64072(%rcx)
	movl	-140(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64076(%rcx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64080(%rcx)
	movl	-60(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64084(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64088(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64092(%rcx)
	movl	-228(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64096(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64100(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64104(%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64108(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64112(%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 64116(%rcx)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64120(%rcx)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64128(%rcx)
	movq	-168(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64136(%rcx)
	movl	-28(%rbp), %ebx
	cmpl	$2019272078, -312(%rbp) # imm = 0x785BA58E
	jne	.LBB19_675
.LBB19_674:
	movl	%ebx, %eax
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_675:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_674
.Lfunc_end19:
	.size	BZ2_decompress.18, .Lfunc_end19-BZ2_decompress.18
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI19_0:
	.quad	.LBB19_4
	.quad	.LBB19_15
	.quad	.LBB19_26
	.quad	.LBB19_37
	.quad	.LBB19_57
	.quad	.LBB19_70
	.quad	.LBB19_81
	.quad	.LBB19_92
	.quad	.LBB19_103
	.quad	.LBB19_114
	.quad	.LBB19_127
	.quad	.LBB19_136
	.quad	.LBB19_145
	.quad	.LBB19_154
	.quad	.LBB19_163
	.quad	.LBB19_172
	.quad	.LBB19_181
	.quad	.LBB19_190
	.quad	.LBB19_205
	.quad	.LBB19_228
	.quad	.LBB19_246
	.quad	.LBB19_258
	.quad	.LBB19_272
	.quad	.LBB19_301
	.quad	.LBB19_316
	.quad	.LBB19_327
	.quad	.LBB19_372
	.quad	.LBB19_386
	.quad	.LBB19_414
	.quad	.LBB19_428
	.quad	.LBB19_493
	.quad	.LBB19_507
	.quad	.LBB19_580
	.quad	.LBB19_591
	.quad	.LBB19_602
	.quad	.LBB19_613
	.quad	.LBB19_624
	.quad	.LBB19_635
	.quad	.LBB19_644
	.quad	.LBB19_653
	.quad	.LBB19_662
                                        # -- End function
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"\n    [%d: huff+mtf "
	.size	.L.str, 20

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"rt+rld"
	.size	.L.str.1, 7


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
