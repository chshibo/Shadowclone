	.text
	.file	"bzlib.c"
	.globl	BZ2_bz__AssertH__fail   # -- Begin function BZ2_bz__AssertH__fail
	.p2align	4, 0x90
	.type	BZ2_bz__AssertH__fail,@function
BZ2_bz__AssertH__fail:                  # @BZ2_bz__AssertH__fail
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%edi, -20(%rbp)
	movq	stderr, %rbx
	movl	-20(%rbp), %r14d
	callq	BZ2_bzlibVersion
	movq	%rbx, %rdi
	movabsq	$.L.str, %rsi
	movl	%r14d, %edx
	movq	%rax, %rcx
	movb	$0, %al
	callq	fprintf
	cmpl	$1007, -20(%rbp)        # imm = 0x3EF
	jne	.LBB0_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movabsq	$.L.str.1, %rsi
	movb	$0, %al
	callq	fprintf
.LBB0_2:                                # %if.end
	movl	$3, %edi
	callq	exit
.Lfunc_end0:
	.size	BZ2_bz__AssertH__fail, .Lfunc_end0-BZ2_bz__AssertH__fail
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzlibVersion        # -- Begin function BZ2_bzlibVersion
	.p2align	4, 0x90
	.type	BZ2_bzlibVersion,@function
BZ2_bzlibVersion:                       # @BZ2_bzlibVersion
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$.L.str.5, %rax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	BZ2_bzlibVersion, .Lfunc_end1-BZ2_bzlibVersion
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit      # -- Begin function BZ2_bzCompressInit
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit,@function
BZ2_bzCompressInit:                     # @BZ2_bzCompressInit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_17
# %bb.1:                                # %func_BZ2_bzCompressInit.300
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.300
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_BZ2_bzCompressInit.318
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.318
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_BZ2_bzCompressInit.335
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.335
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_BZ2_bzCompressInit.339
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.339
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_BZ2_bzCompressInit.358
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.358
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_BZ2_bzCompressInit.361
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.361
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_BZ2_bzCompressInit.365
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.365
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_BZ2_bzCompressInit.369
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.369
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %func_BZ2_bzCompressInit.379
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.379
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_10:                               # %func_BZ2_bzCompressInit.383
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.383
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_11:                               # %func_BZ2_bzCompressInit.387
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.387
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_12:                               # %func_BZ2_bzCompressInit.390
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.390
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_13:                               # %func_BZ2_bzCompressInit.391
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.391
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_14:                               # %func_BZ2_bzCompressInit.394
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.394
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_15:                               # %func_BZ2_bzCompressInit.395
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.395
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_16:                               # %func_BZ2_bzCompressInit.396
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	BZ2_bzCompressInit.396
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB2_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB2_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB2_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB2_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB2_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB2_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB2_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB2_15
	jmp	.LBB2_16
.Lfunc_end2:
	.size	BZ2_bzCompressInit, .Lfunc_end2-BZ2_bzCompressInit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bz_config_ok
	.type	bz_config_ok,@function
bz_config_ok:                           # @bz_config_ok
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$1, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end3:
	.size	bz_config_ok, .Lfunc_end3-bz_config_ok
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc
	.type	default_bzalloc,@function
default_bzalloc:                        # @default_bzalloc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_default_bzalloc.13
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_default_bzalloc.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_default_bzalloc.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_default_bzalloc.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_default_bzalloc.139
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.139
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_default_bzalloc.150
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.150
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_default_bzalloc.241
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.241
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_default_bzalloc.252
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.252
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_default_bzalloc.270
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.270
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_default_bzalloc.288
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.288
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_default_bzalloc.313
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.313
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_default_bzalloc.338
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.338
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_default_bzalloc.359
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.359
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_default_bzalloc.362
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.362
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_default_bzalloc.364
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.364
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_default_bzalloc.385
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	default_bzalloc.385
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	default_bzalloc, .Lfunc_end4-default_bzalloc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzfree
	.type	default_bzfree,@function
default_bzfree:                         # @default_bzfree
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_2
# %bb.1:                                # %func_default_bzfree.32
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	default_bzfree.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_default_bzfree.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	default_bzfree.38
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end5:
	.size	default_bzfree, .Lfunc_end5-default_bzfree
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_RL
	.type	init_RL,@function
init_RL:                                # @init_RL
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$256, 92(%rax)          # imm = 0x100
	movq	-8(%rbp), %rax
	movl	$0, 96(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end6:
	.size	init_RL, .Lfunc_end6-init_RL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function prepare_new_block
	.type	prepare_new_block,@function
prepare_new_block:                      # @prepare_new_block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_2
# %bb.1:                                # %func_prepare_new_block.20
	movq	%rbx, %rdi
	callq	prepare_new_block.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_prepare_new_block.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	prepare_new_block.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	prepare_new_block, .Lfunc_end7-prepare_new_block
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress          # -- Begin function BZ2_bzCompress
	.p2align	4, 0x90
	.type	BZ2_bzCompress,@function
BZ2_bzCompress:                         # @BZ2_bzCompress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_17
# %bb.1:                                # %func_BZ2_bzCompress.8
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_BZ2_bzCompress.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_BZ2_bzCompress.188
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.188
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_BZ2_bzCompress.199
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.199
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_BZ2_bzCompress.205
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.205
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_BZ2_bzCompress.250
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.250
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_BZ2_bzCompress.281
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.281
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_BZ2_bzCompress.284
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.284
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %func_BZ2_bzCompress.291
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.291
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_BZ2_bzCompress.302
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.302
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_11:                               # %func_BZ2_bzCompress.324
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.324
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_12:                               # %func_BZ2_bzCompress.337
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.337
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_BZ2_bzCompress.341
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.341
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_14:                               # %func_BZ2_bzCompress.360
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.360
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_15:                               # %func_BZ2_bzCompress.378
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.378
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_16:                               # %func_BZ2_bzCompress.389
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	BZ2_bzCompress.389
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB8_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB8_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB8_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB8_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB8_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB8_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB8_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB8_15
	jmp	.LBB8_16
.Lfunc_end8:
	.size	BZ2_bzCompress, .Lfunc_end8-BZ2_bzCompress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress
	.type	handle_compress,@function
handle_compress:                        # @handle_compress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_17
# %bb.1:                                # %func_handle_compress.51
	movq	%rbx, %rdi
	callq	handle_compress.51
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_handle_compress.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.129
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_handle_compress.160
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.160
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_handle_compress.162
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.162
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_handle_compress.174
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.174
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_handle_compress.195
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.195
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_handle_compress.201
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.201
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_handle_compress.203
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.203
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %func_handle_compress.210
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.210
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_10:                               # %func_handle_compress.273
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.273
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_11:                               # %func_handle_compress.286
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.286
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_12:                               # %func_handle_compress.296
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.296
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_13:                               # %func_handle_compress.297
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.297
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_14:                               # %func_handle_compress.340
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.340
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_15:                               # %func_handle_compress.373
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.373
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_16:                               # %func_handle_compress.388
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	handle_compress.388
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB9_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB9_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB9_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB9_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB9_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB9_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB9_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB9_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB9_15
	jmp	.LBB9_16
.Lfunc_end9:
	.size	handle_compress, .Lfunc_end9-handle_compress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function isempty_RL
	.type	isempty_RL,@function
isempty_RL:                             # @isempty_RL
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_2
# %bb.1:                                # %func_isempty_RL.23
	movq	%rbx, %rdi
	callq	isempty_RL.23
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_isempty_RL.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	isempty_RL.61
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end10:
	.size	isempty_RL, .Lfunc_end10-isempty_RL
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd       # -- Begin function BZ2_bzCompressEnd
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd,@function
BZ2_bzCompressEnd:                      # @BZ2_bzCompressEnd
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_7
# %bb.1:                                # %func_BZ2_bzCompressEnd.3
	movq	%rbx, %rdi
	callq	BZ2_bzCompressEnd.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_BZ2_bzCompressEnd.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzCompressEnd.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_BZ2_bzCompressEnd.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzCompressEnd.128
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_BZ2_bzCompressEnd.170
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzCompressEnd.170
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_BZ2_bzCompressEnd.173
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzCompressEnd.173
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_BZ2_bzCompressEnd.194
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzCompressEnd.194
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
	jmp	.LBB11_6
.Lfunc_end11:
	.size	BZ2_bzCompressEnd, .Lfunc_end11-BZ2_bzCompressEnd
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit    # -- Begin function BZ2_bzDecompressInit
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit,@function
BZ2_bzDecompressInit:                   # @BZ2_bzDecompressInit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_17
# %bb.1:                                # %func_BZ2_bzDecompressInit.5
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_BZ2_bzDecompressInit.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_BZ2_bzDecompressInit.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_BZ2_bzDecompressInit.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_BZ2_bzDecompressInit.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_BZ2_bzDecompressInit.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.85
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %func_BZ2_bzDecompressInit.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.115
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_8:                               # %func_BZ2_bzDecompressInit.197
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.197
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_9:                               # %func_BZ2_bzDecompressInit.200
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.200
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_10:                              # %func_BZ2_bzDecompressInit.206
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.206
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_11:                              # %func_BZ2_bzDecompressInit.219
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.219
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_12:                              # %func_BZ2_bzDecompressInit.222
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.222
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_13:                              # %func_BZ2_bzDecompressInit.243
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.243
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_14:                              # %func_BZ2_bzDecompressInit.268
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.268
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_15:                              # %func_BZ2_bzDecompressInit.299
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.299
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_16:                              # %func_BZ2_bzDecompressInit.315
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	BZ2_bzDecompressInit.315
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB12_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB12_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB12_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB12_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB12_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB12_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB12_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB12_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB12_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB12_15
	jmp	.LBB12_16
.Lfunc_end12:
	.size	BZ2_bzDecompressInit, .Lfunc_end12-BZ2_bzDecompressInit
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF          # -- Begin function BZ2_indexIntoF
	.p2align	4, 0x90
	.type	BZ2_indexIntoF,@function
BZ2_indexIntoF:                         # @BZ2_indexIntoF
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_17
# %bb.1:                                # %func_BZ2_indexIntoF.64
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_BZ2_indexIntoF.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.70
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_BZ2_indexIntoF.103
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.103
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_BZ2_indexIntoF.123
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.123
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_BZ2_indexIntoF.149
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.149
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_BZ2_indexIntoF.159
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.159
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %func_BZ2_indexIntoF.196
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.196
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_8:                               # %func_BZ2_indexIntoF.216
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.216
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_9:                               # %func_BZ2_indexIntoF.218
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.218
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_10:                              # %func_BZ2_indexIntoF.242
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.242
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_11:                              # %func_BZ2_indexIntoF.263
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.263
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_12:                              # %func_BZ2_indexIntoF.295
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.295
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_13:                              # %func_BZ2_indexIntoF.304
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.304
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_14:                              # %func_BZ2_indexIntoF.312
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.312
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_15:                              # %func_BZ2_indexIntoF.319
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.319
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_16:                              # %func_BZ2_indexIntoF.320
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_indexIntoF.320
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB13_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB13_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB13_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB13_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB13_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB13_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB13_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB13_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB13_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB13_15
	jmp	.LBB13_16
.Lfunc_end13:
	.size	BZ2_indexIntoF, .Lfunc_end13-BZ2_indexIntoF
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress        # -- Begin function BZ2_bzDecompress
	.p2align	4, 0x90
	.type	BZ2_bzDecompress,@function
BZ2_bzDecompress:                       # @BZ2_bzDecompress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_17
# %bb.1:                                # %func_BZ2_bzDecompress.9
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_BZ2_bzDecompress.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.39
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_BZ2_bzDecompress.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.42
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_BZ2_bzDecompress.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.58
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_BZ2_bzDecompress.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.107
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_BZ2_bzDecompress.187
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.187
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_BZ2_bzDecompress.229
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.229
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_BZ2_bzDecompress.231
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.231
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %func_BZ2_bzDecompress.254
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.254
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_10:                              # %func_BZ2_bzDecompress.309
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.309
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_11:                              # %func_BZ2_bzDecompress.331
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.331
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_12:                              # %func_BZ2_bzDecompress.344
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.344
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_13:                              # %func_BZ2_bzDecompress.351
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.351
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_14:                              # %func_BZ2_bzDecompress.367
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.367
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_15:                              # %func_BZ2_bzDecompress.377
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.377
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_16:                              # %func_BZ2_bzDecompress.381
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompress.381
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB14_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB14_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB14_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB14_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB14_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB14_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB14_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB14_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB14_15
	jmp	.LBB14_16
.Lfunc_end14:
	.size	BZ2_bzDecompress, .Lfunc_end14-BZ2_bzDecompress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_SMALL
	.type	unRLE_obuf_to_output_SMALL,@function
unRLE_obuf_to_output_SMALL:             # @unRLE_obuf_to_output_SMALL
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_7
# %bb.1:                                # %func_unRLE_obuf_to_output_SMALL.57
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_SMALL.57
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_unRLE_obuf_to_output_SMALL.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_SMALL.59
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_unRLE_obuf_to_output_SMALL.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_SMALL.97
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_unRLE_obuf_to_output_SMALL.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_SMALL.117
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_unRLE_obuf_to_output_SMALL.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_SMALL.131
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_unRLE_obuf_to_output_SMALL.137
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_SMALL.137
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
	jmp	.LBB15_6
.Lfunc_end15:
	.size	unRLE_obuf_to_output_SMALL, .Lfunc_end15-unRLE_obuf_to_output_SMALL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST
	.type	unRLE_obuf_to_output_FAST,@function
unRLE_obuf_to_output_FAST:              # @unRLE_obuf_to_output_FAST
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_17
# %bb.1:                                # %func_unRLE_obuf_to_output_FAST.31
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.31
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_unRLE_obuf_to_output_FAST.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.62
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_unRLE_obuf_to_output_FAST.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.72
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_unRLE_obuf_to_output_FAST.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.87
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_unRLE_obuf_to_output_FAST.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.89
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_unRLE_obuf_to_output_FAST.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.100
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %func_unRLE_obuf_to_output_FAST.168
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.168
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_8:                               # %func_unRLE_obuf_to_output_FAST.181
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.181
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_9:                               # %func_unRLE_obuf_to_output_FAST.190
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.190
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_10:                              # %func_unRLE_obuf_to_output_FAST.198
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.198
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_11:                              # %func_unRLE_obuf_to_output_FAST.212
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.212
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_12:                              # %func_unRLE_obuf_to_output_FAST.306
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.306
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_13:                              # %func_unRLE_obuf_to_output_FAST.308
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.308
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_14:                              # %func_unRLE_obuf_to_output_FAST.332
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.332
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_15:                              # %func_unRLE_obuf_to_output_FAST.355
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.355
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_16:                              # %func_unRLE_obuf_to_output_FAST.380
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	unRLE_obuf_to_output_FAST.380
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB16_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB16_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB16_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB16_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB16_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB16_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB16_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB16_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB16_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB16_15
	jmp	.LBB16_16
.Lfunc_end16:
	.size	unRLE_obuf_to_output_FAST, .Lfunc_end16-unRLE_obuf_to_output_FAST
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd     # -- Begin function BZ2_bzDecompressEnd
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd,@function
BZ2_bzDecompressEnd:                    # @BZ2_bzDecompressEnd
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_7
# %bb.1:                                # %func_BZ2_bzDecompressEnd.30
	movq	%rbx, %rdi
	callq	BZ2_bzDecompressEnd.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_BZ2_bzDecompressEnd.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompressEnd.40
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_BZ2_bzDecompressEnd.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompressEnd.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_BZ2_bzDecompressEnd.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompressEnd.68
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_BZ2_bzDecompressEnd.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompressEnd.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_BZ2_bzDecompressEnd.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzDecompressEnd.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
	jmp	.LBB17_6
.Lfunc_end17:
	.size	BZ2_bzDecompressEnd, .Lfunc_end17-BZ2_bzDecompressEnd
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen         # -- Begin function BZ2_bzWriteOpen
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen,@function
BZ2_bzWriteOpen:                        # @BZ2_bzWriteOpen
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_17
# %bb.1:                                # %func_BZ2_bzWriteOpen.63
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_BZ2_bzWriteOpen.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_BZ2_bzWriteOpen.161
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.161
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_BZ2_bzWriteOpen.185
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.185
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_BZ2_bzWriteOpen.193
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.193
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_BZ2_bzWriteOpen.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.215
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %func_BZ2_bzWriteOpen.220
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.220
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_8:                               # %func_BZ2_bzWriteOpen.234
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.234
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_9:                               # %func_BZ2_bzWriteOpen.275
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.275
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_10:                              # %func_BZ2_bzWriteOpen.280
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.280
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_11:                              # %func_BZ2_bzWriteOpen.303
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.303
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_12:                              # %func_BZ2_bzWriteOpen.307
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.307
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_13:                              # %func_BZ2_bzWriteOpen.328
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.328
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_14:                              # %func_BZ2_bzWriteOpen.348
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.348
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_15:                              # %func_BZ2_bzWriteOpen.350
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.350
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_16:                              # %func_BZ2_bzWriteOpen.356
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	BZ2_bzWriteOpen.356
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB18_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB18_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB18_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB18_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB18_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB18_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB18_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB18_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB18_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB18_15
	jmp	.LBB18_16
.Lfunc_end18:
	.size	BZ2_bzWriteOpen, .Lfunc_end18-BZ2_bzWriteOpen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite             # -- Begin function BZ2_bzWrite
	.p2align	4, 0x90
	.type	BZ2_bzWrite,@function
BZ2_bzWrite:                            # @BZ2_bzWrite
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_17
# %bb.1:                                # %func_BZ2_bzWrite.15
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.15
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_BZ2_bzWrite.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.44
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_BZ2_bzWrite.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.50
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_BZ2_bzWrite.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.65
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_BZ2_bzWrite.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.96
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_BZ2_bzWrite.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.124
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %func_BZ2_bzWrite.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.127
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_8:                               # %func_BZ2_bzWrite.157
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.157
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_9:                               # %func_BZ2_bzWrite.164
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.164
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_10:                              # %func_BZ2_bzWrite.186
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.186
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_11:                              # %func_BZ2_bzWrite.208
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.208
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_12:                              # %func_BZ2_bzWrite.240
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.240
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_13:                              # %func_BZ2_bzWrite.253
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.253
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_14:                              # %func_BZ2_bzWrite.269
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.269
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_15:                              # %func_BZ2_bzWrite.278
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.278
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_16:                              # %func_BZ2_bzWrite.292
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzWrite.292
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB19_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB19_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB19_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB19_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB19_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB19_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB19_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB19_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB19_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB19_15
	jmp	.LBB19_16
.Lfunc_end19:
	.size	BZ2_bzWrite, .Lfunc_end19-BZ2_bzWrite
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose        # -- Begin function BZ2_bzWriteClose
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose,@function
BZ2_bzWriteClose:                       # @BZ2_bzWriteClose
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_17
# %bb.1:                                # %func_BZ2_bzWriteClose.19
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_BZ2_bzWriteClose.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_BZ2_bzWriteClose.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.110
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_BZ2_bzWriteClose.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.120
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %func_BZ2_bzWriteClose.132
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.132
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_6:                               # %func_BZ2_bzWriteClose.141
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.141
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_7:                               # %func_BZ2_bzWriteClose.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.147
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_8:                               # %func_BZ2_bzWriteClose.184
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.184
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_9:                               # %func_BZ2_bzWriteClose.233
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.233
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_10:                              # %func_BZ2_bzWriteClose.251
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.251
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_11:                              # %func_BZ2_bzWriteClose.260
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.260
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_12:                              # %func_BZ2_bzWriteClose.271
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.271
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_13:                              # %func_BZ2_bzWriteClose.274
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.274
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_14:                              # %func_BZ2_bzWriteClose.310
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.310
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_15:                              # %func_BZ2_bzWriteClose.314
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.314
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_16:                              # %func_BZ2_bzWriteClose.323
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	BZ2_bzWriteClose.323
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB20_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB20_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB20_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB20_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB20_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB20_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB20_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB20_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB20_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB20_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB20_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB20_15
	jmp	.LBB20_16
.Lfunc_end20:
	.size	BZ2_bzWriteClose, .Lfunc_end20-BZ2_bzWriteClose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64      # -- Begin function BZ2_bzWriteClose64
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64,@function
BZ2_bzWriteClose64:                     # @BZ2_bzWriteClose64
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r13
	movq	%rcx, %rbx
	movl	%edx, %r14d
	movq	%rsi, %r15
	movq	%rdi, %r12
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_17
# %bb.1:                                # %func_BZ2_bzWriteClose64.98
	movq	%r12, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	movq	%rbx, %rcx
	movq	%r13, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64.98
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_BZ2_bzWriteClose64.151
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	movq	%r12, %r9
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64.151
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_BZ2_bzWriteClose64.153
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movl	%ebx, %edx
	movq	%r14, %rcx
	movq	%r13, %r8
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.153
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_BZ2_bzWriteClose64.163
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	%ebx, %edx
	movq	%r14, %rcx
	movq	%r13, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.163
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_BZ2_bzWriteClose64.166
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	%ebx, %edx
	movq	%r14, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.166
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_BZ2_bzWriteClose64.167
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.167
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_BZ2_bzWriteClose64.202
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movl	%r14d, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.202
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_BZ2_bzWriteClose64.235
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movl	%r14d, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.235
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %func_BZ2_bzWriteClose64.236
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movl	%r14d, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.236
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_10:                              # %func_BZ2_bzWriteClose64.255
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movl	%r14d, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.255
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_11:                              # %func_BZ2_bzWriteClose64.265
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movl	%r14d, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.265
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_12:                              # %func_BZ2_bzWriteClose64.293
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movl	%r14d, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.293
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_13:                              # %func_BZ2_bzWriteClose64.329
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movl	%r14d, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.329
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_14:                              # %func_BZ2_bzWriteClose64.342
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movl	%r14d, %edx
	movq	%r13, %rcx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%r11, (%rsp)
	callq	BZ2_bzWriteClose64.342
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_15:                              # %func_BZ2_bzWriteClose64.345
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	movq	%r12, %r9
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64.345
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_16:                              # %func_BZ2_bzWriteClose64.371
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	movq	%r12, %r9
	movq	16(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64.371
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movl	%r14d, %edx
	movq	%rbx, %rcx
	movq	%r13, %r8
	movq	-48(%rbp), %r12         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movq	16(%rbp), %r11
	movq	%r12, %r9
	movq	%r8, %r13
	movq	%rcx, %r14
	movl	%edx, %ebx
	movq	%r15, %rsi
	movq	%rdi, %r10
	je	.LBB21_3
# %bb.19:                               # %ctrl2
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	movq	%r13, %r9
	je	.LBB21_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	movq	%r14, %r13
	je	.LBB21_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	movl	%ebx, %r14d
	je	.LBB21_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	je	.LBB21_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB21_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB21_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB21_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB21_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB21_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB21_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB21_15
	jmp	.LBB21_16
.Lfunc_end21:
	.size	BZ2_bzWriteClose64, .Lfunc_end21-BZ2_bzWriteClose64
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen          # -- Begin function BZ2_bzReadOpen
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen,@function
BZ2_bzReadOpen:                         # @BZ2_bzReadOpen
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movq	%r8, %r12
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_17
# %bb.1:                                # %func_BZ2_bzReadOpen.10
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movq	%r12, %r8
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	BZ2_bzReadOpen.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_BZ2_bzReadOpen.14
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movq	%r11, %r8
	movl	%r10d, %r9d
	callq	BZ2_bzReadOpen.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_BZ2_bzReadOpen.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_BZ2_bzReadOpen.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.92
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_BZ2_bzReadOpen.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.105
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_BZ2_bzReadOpen.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_BZ2_bzReadOpen.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_BZ2_bzReadOpen.143
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.143
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %func_BZ2_bzReadOpen.152
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.152
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_10:                              # %func_BZ2_bzReadOpen.176
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.176
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_11:                              # %func_BZ2_bzReadOpen.209
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.209
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_12:                              # %func_BZ2_bzReadOpen.277
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.277
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_13:                              # %func_BZ2_bzReadOpen.287
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.287
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_14:                              # %func_BZ2_bzReadOpen.294
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	BZ2_bzReadOpen.294
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_15:                              # %func_BZ2_bzReadOpen.334
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movq	%r11, %r8
	movl	%r10d, %r9d
	callq	BZ2_bzReadOpen.334
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_16:                              # %func_BZ2_bzReadOpen.353
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movq	%r11, %r8
	movl	%r10d, %r9d
	callq	BZ2_bzReadOpen.353
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r12, %r11
	movl	-44(%rbp), %r10d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %r9d
	movq	%r11, %r8
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r14
	movq	%rdi, %rbx
	je	.LBB22_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB22_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB22_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB22_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB22_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB22_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB22_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB22_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB22_15
	jmp	.LBB22_16
.Lfunc_end22:
	.size	BZ2_bzReadOpen, .Lfunc_end22-BZ2_bzReadOpen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose         # -- Begin function BZ2_bzReadClose
	.p2align	4, 0x90
	.type	BZ2_bzReadClose,@function
BZ2_bzReadClose:                        # @BZ2_bzReadClose
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_7
# %bb.1:                                # %func_BZ2_bzReadClose.34
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzReadClose.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_BZ2_bzReadClose.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzReadClose.104
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_BZ2_bzReadClose.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzReadClose.148
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_BZ2_bzReadClose.154
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzReadClose.154
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_BZ2_bzReadClose.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzReadClose.169
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_BZ2_bzReadClose.179
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzReadClose.179
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
	jmp	.LBB23_6
.Lfunc_end23:
	.size	BZ2_bzReadClose, .Lfunc_end23-BZ2_bzReadClose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead              # -- Begin function BZ2_bzRead
	.p2align	4, 0x90
	.type	BZ2_bzRead,@function
BZ2_bzRead:                             # @BZ2_bzRead
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_17
# %bb.1:                                # %func_BZ2_bzRead.1
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.1
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_BZ2_bzRead.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.33
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_BZ2_bzRead.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.55
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_BZ2_bzRead.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.73
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_BZ2_bzRead.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.74
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_BZ2_bzRead.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.99
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_BZ2_bzRead.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.126
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_BZ2_bzRead.207
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.207
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %func_BZ2_bzRead.228
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.228
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_10:                              # %func_BZ2_bzRead.247
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.247
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_11:                              # %func_BZ2_bzRead.249
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.249
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_12:                              # %func_BZ2_bzRead.261
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.261
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_13:                              # %func_BZ2_bzRead.289
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.289
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_14:                              # %func_BZ2_bzRead.298
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.298
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_15:                              # %func_BZ2_bzRead.326
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.326
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_16:                              # %func_BZ2_bzRead.336
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	BZ2_bzRead.336
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB24_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB24_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB24_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB24_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB24_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB24_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB24_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB24_15
	jmp	.LBB24_16
.Lfunc_end24:
	.size	BZ2_bzRead, .Lfunc_end24-BZ2_bzRead
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof
	.type	myfeof,@function
myfeof:                                 # @myfeof
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_7
# %bb.1:                                # %func_myfeof.17
	movq	%rbx, %rdi
	callq	myfeof.17
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_myfeof.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.41
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_myfeof.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.113
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_myfeof.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.114
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_myfeof.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.125
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_myfeof.211
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.211
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
	jmp	.LBB25_6
.Lfunc_end25:
	.size	myfeof, .Lfunc_end25-myfeof
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused     # -- Begin function BZ2_bzReadGetUnused
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused,@function
BZ2_bzReadGetUnused:                    # @BZ2_bzReadGetUnused
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_17
# %bb.1:                                # %func_BZ2_bzReadGetUnused.4
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.4
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_BZ2_bzReadGetUnused.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.11
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_BZ2_bzReadGetUnused.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.67
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_BZ2_bzReadGetUnused.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.75
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %func_BZ2_bzReadGetUnused.140
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.140
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_6:                               # %func_BZ2_bzReadGetUnused.177
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.177
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_7:                               # %func_BZ2_bzReadGetUnused.192
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.192
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_8:                               # %func_BZ2_bzReadGetUnused.225
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.225
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_9:                               # %func_BZ2_bzReadGetUnused.232
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.232
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_10:                              # %func_BZ2_bzReadGetUnused.258
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.258
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_11:                              # %func_BZ2_bzReadGetUnused.276
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.276
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_12:                              # %func_BZ2_bzReadGetUnused.279
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.279
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_13:                              # %func_BZ2_bzReadGetUnused.301
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.301
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_14:                              # %func_BZ2_bzReadGetUnused.316
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.316
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_15:                              # %func_BZ2_bzReadGetUnused.317
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.317
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_16:                              # %func_BZ2_bzReadGetUnused.347
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	BZ2_bzReadGetUnused.347
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB26_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB26_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB26_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB26_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB26_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB26_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB26_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB26_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB26_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB26_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB26_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB26_15
	jmp	.LBB26_16
.Lfunc_end26:
	.size	BZ2_bzReadGetUnused, .Lfunc_end26-BZ2_bzReadGetUnused
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress # -- Begin function BZ2_bzBuffToBuffCompress
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress,@function
BZ2_bzBuffToBuffCompress:               # @BZ2_bzBuffToBuffCompress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %ebx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %r12
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB27_17
# %bb.1:                                # %func_BZ2_bzBuffToBuffCompress.54
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.54
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_BZ2_bzBuffToBuffCompress.81
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	movl	%r12d, %r9d
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.81
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_3:                               # %func_BZ2_bzBuffToBuffCompress.94
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rdx
	movl	%r14d, %ecx
	movl	%r13d, %r8d
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.94
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_4:                               # %func_BZ2_bzBuffToBuffCompress.102
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rbx, %rdx
	movl	%r14d, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.102
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %func_BZ2_bzBuffToBuffCompress.158
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rbx, %rdx
	movl	%r14d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.158
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_6:                               # %func_BZ2_bzBuffToBuffCompress.180
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.180
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_7:                               # %func_BZ2_bzBuffToBuffCompress.182
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.182
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_8:                               # %func_BZ2_bzBuffToBuffCompress.213
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.213
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_9:                               # %func_BZ2_bzBuffToBuffCompress.256
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.256
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_10:                              # %func_BZ2_bzBuffToBuffCompress.285
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.285
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_11:                              # %func_BZ2_bzBuffToBuffCompress.325
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.325
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_12:                              # %func_BZ2_bzBuffToBuffCompress.349
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.349
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_13:                              # %func_BZ2_bzBuffToBuffCompress.366
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.366
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_14:                              # %func_BZ2_bzBuffToBuffCompress.382
	.cfi_def_cfa %rbp, 16
	movq	%r10, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	%r13d, %ecx
	movl	%r9d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	%r11d, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.382
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_15:                              # %func_BZ2_bzBuffToBuffCompress.384
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	movl	%r12d, %r9d
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.384
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_16:                              # %func_BZ2_bzBuffToBuffCompress.386
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	movl	%r12d, %r9d
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	BZ2_bzBuffToBuffCompress.386
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r12d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB27_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	16(%rbp), %r11d
	movl	%r12d, %r9d
	movl	%r8d, %r13d
	movl	%ecx, %r14d
	movq	%rdx, %rbx
	movq	%r15, %rsi
	movq	%rdi, %r10
	je	.LBB27_3
# %bb.19:                               # %ctrl2
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	cmpl	$3, %eax
	je	.LBB27_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	movl	%r13d, %r9d
	je	.LBB27_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	movl	%r14d, %r13d
	je	.LBB27_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	movq	%rbx, %r14
	je	.LBB27_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	movq	-56(%rbp), %rbx         # 8-byte Reload
	je	.LBB27_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB27_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB27_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB27_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB27_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB27_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB27_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB27_15
	jmp	.LBB27_16
.Lfunc_end27:
	.size	BZ2_bzBuffToBuffCompress, .Lfunc_end27-BZ2_bzBuffToBuffCompress
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress # -- Begin function BZ2_bzBuffToBuffDecompress
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress,@function
BZ2_bzBuffToBuffDecompress:             # @BZ2_bzBuffToBuffDecompress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_17
# %bb.1:                                # %func_BZ2_bzBuffToBuffDecompress.7
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	BZ2_bzBuffToBuffDecompress.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_BZ2_bzBuffToBuffDecompress.48
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	BZ2_bzBuffToBuffDecompress.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_BZ2_bzBuffToBuffDecompress.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_BZ2_bzBuffToBuffDecompress.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_BZ2_bzBuffToBuffDecompress.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_BZ2_bzBuffToBuffDecompress.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %func_BZ2_bzBuffToBuffDecompress.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_8:                               # %func_BZ2_bzBuffToBuffDecompress.165
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.165
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_9:                               # %func_BZ2_bzBuffToBuffDecompress.259
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.259
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_10:                              # %func_BZ2_bzBuffToBuffDecompress.266
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.266
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_11:                              # %func_BZ2_bzBuffToBuffDecompress.267
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.267
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_12:                              # %func_BZ2_bzBuffToBuffDecompress.290
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.290
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_13:                              # %func_BZ2_bzBuffToBuffDecompress.311
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.311
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_14:                              # %func_BZ2_bzBuffToBuffDecompress.322
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	movl	%r15d, %ecx
	callq	BZ2_bzBuffToBuffDecompress.322
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_15:                              # %func_BZ2_bzBuffToBuffDecompress.343
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	BZ2_bzBuffToBuffDecompress.343
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_16:                              # %func_BZ2_bzBuffToBuffDecompress.346
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movl	%r10d, %r9d
	callq	BZ2_bzBuffToBuffDecompress.346
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movl	%r12d, %r11d
	movl	-44(%rbp), %r10d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %r9d
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movq	%rdx, %r12
	movq	%rsi, %r14
	movq	%rdi, %rbx
	je	.LBB28_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB28_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB28_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB28_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB28_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB28_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB28_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB28_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB28_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB28_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB28_15
	jmp	.LBB28_16
.Lfunc_end28:
	.size	BZ2_bzBuffToBuffDecompress, .Lfunc_end28-BZ2_bzBuffToBuffDecompress
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzopen              # -- Begin function BZ2_bzopen
	.p2align	4, 0x90
	.type	BZ2_bzopen,@function
BZ2_bzopen:                             # @BZ2_bzopen
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB29_2
# %bb.1:                                # %func_BZ2_bzopen.37
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzopen.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_BZ2_bzopen.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzopen.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	BZ2_bzopen, .Lfunc_end29-BZ2_bzopen
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen
	.type	bzopen_or_bzdopen,@function
bzopen_or_bzdopen:                      # @bzopen_or_bzdopen
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_17
# %bb.1:                                # %func_bzopen_or_bzdopen.90
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.90
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_bzopen_or_bzdopen.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.95
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_bzopen_or_bzdopen.145
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.145
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_bzopen_or_bzdopen.146
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.146
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_bzopen_or_bzdopen.217
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.217
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_bzopen_or_bzdopen.226
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.226
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_bzopen_or_bzdopen.257
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.257
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_bzopen_or_bzdopen.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.264
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %func_bzopen_or_bzdopen.283
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.283
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_10:                              # %func_bzopen_or_bzdopen.305
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.305
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_11:                              # %func_bzopen_or_bzdopen.354
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.354
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_12:                              # %func_bzopen_or_bzdopen.363
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.363
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_13:                              # %func_bzopen_or_bzdopen.368
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.368
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_14:                              # %func_bzopen_or_bzdopen.372
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.372
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_15:                              # %func_bzopen_or_bzdopen.392
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.392
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_16:                              # %func_bzopen_or_bzdopen.393
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	bzopen_or_bzdopen.393
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB30_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB30_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB30_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB30_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB30_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB30_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB30_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB30_15
	jmp	.LBB30_16
.Lfunc_end30:
	.size	bzopen_or_bzdopen, .Lfunc_end30-bzopen_or_bzdopen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzdopen             # -- Begin function BZ2_bzdopen
	.p2align	4, 0x90
	.type	BZ2_bzdopen,@function
BZ2_bzdopen:                            # @BZ2_bzdopen
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_2
# %bb.1:                                # %func_BZ2_bzdopen.78
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_bzdopen.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_BZ2_bzdopen.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	BZ2_bzdopen.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end31:
	.size	BZ2_bzdopen, .Lfunc_end31-BZ2_bzdopen
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread              # -- Begin function BZ2_bzread
	.p2align	4, 0x90
	.type	BZ2_bzread,@function
BZ2_bzread:                             # @BZ2_bzread
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB32_17
# %bb.1:                                # %func_BZ2_bzread.49
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_BZ2_bzread.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.88
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_BZ2_bzread.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.108
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_BZ2_bzread.142
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.142
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %func_BZ2_bzread.178
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.178
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_BZ2_bzread.189
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.189
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_7:                               # %func_BZ2_bzread.214
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.214
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_8:                               # %func_BZ2_bzread.221
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.221
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_9:                               # %func_BZ2_bzread.224
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.224
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_10:                              # %func_BZ2_bzread.230
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.230
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_11:                              # %func_BZ2_bzread.245
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.245
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_12:                              # %func_BZ2_bzread.248
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.248
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_13:                              # %func_BZ2_bzread.282
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.282
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_14:                              # %func_BZ2_bzread.352
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.352
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_15:                              # %func_BZ2_bzread.357
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.357
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_16:                              # %func_BZ2_bzread.370
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzread.370
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB32_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB32_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB32_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB32_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB32_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB32_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB32_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB32_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB32_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB32_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB32_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB32_15
	jmp	.LBB32_16
.Lfunc_end32:
	.size	BZ2_bzread, .Lfunc_end32-BZ2_bzread
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite             # -- Begin function BZ2_bzwrite
	.p2align	4, 0x90
	.type	BZ2_bzwrite,@function
BZ2_bzwrite:                            # @BZ2_bzwrite
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB33_17
# %bb.1:                                # %func_BZ2_bzwrite.6
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_BZ2_bzwrite.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_BZ2_bzwrite.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_BZ2_bzwrite.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %func_BZ2_bzwrite.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.119
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_BZ2_bzwrite.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.130
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_7:                               # %func_BZ2_bzwrite.134
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.134
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_BZ2_bzwrite.155
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.155
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_9:                               # %func_BZ2_bzwrite.191
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.191
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_10:                              # %func_BZ2_bzwrite.204
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.204
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_11:                              # %func_BZ2_bzwrite.223
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.223
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_12:                              # %func_BZ2_bzwrite.227
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.227
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_13:                              # %func_BZ2_bzwrite.237
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.237
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_14:                              # %func_BZ2_bzwrite.238
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.238
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_15:                              # %func_BZ2_bzwrite.246
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.246
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_16:                              # %func_BZ2_bzwrite.272
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	BZ2_bzwrite.272
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB33_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB33_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB33_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB33_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB33_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB33_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB33_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB33_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB33_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB33_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB33_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB33_15
	jmp	.LBB33_16
.Lfunc_end33:
	.size	BZ2_bzwrite, .Lfunc_end33-BZ2_bzwrite
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzflush             # -- Begin function BZ2_bzflush
	.p2align	4, 0x90
	.type	BZ2_bzflush,@function
BZ2_bzflush:                            # @BZ2_bzflush
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	xorl	%eax, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	BZ2_bzflush, .Lfunc_end34-BZ2_bzflush
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzclose             # -- Begin function BZ2_bzclose
	.p2align	4, 0x90
	.type	BZ2_bzclose,@function
BZ2_bzclose:                            # @BZ2_bzclose
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB35_7
# %bb.1:                                # %func_BZ2_bzclose.2
	movq	%rbx, %rdi
	callq	BZ2_bzclose.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_BZ2_bzclose.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzclose.27
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_BZ2_bzclose.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzclose.101
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_BZ2_bzclose.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzclose.121
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_BZ2_bzclose.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzclose.122
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_BZ2_bzclose.133
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	BZ2_bzclose.133
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
	jmp	.LBB35_6
.Lfunc_end35:
	.size	BZ2_bzclose, .Lfunc_end35-BZ2_bzclose
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror             # -- Begin function BZ2_bzerror
	.p2align	4, 0x90
	.type	BZ2_bzerror,@function
BZ2_bzerror:                            # @BZ2_bzerror
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_7
# %bb.1:                                # %func_BZ2_bzerror.45
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzerror.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_BZ2_bzerror.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzerror.112
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_BZ2_bzerror.136
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzerror.136
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_BZ2_bzerror.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzerror.144
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_BZ2_bzerror.171
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzerror.171
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_BZ2_bzerror.172
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	BZ2_bzerror.172
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
	jmp	.LBB36_6
.Lfunc_end36:
	.size	BZ2_bzerror, .Lfunc_end36-BZ2_bzerror
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_output_until_stop
	.type	copy_output_until_stop,@function
copy_output_until_stop:                 # @copy_output_until_stop
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB37_2
# %bb.1:                                # %func_copy_output_until_stop.12
	movq	%rbx, %rdi
	callq	copy_output_until_stop.12
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_copy_output_until_stop.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_output_until_stop.16
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end37:
	.size	copy_output_until_stop, .Lfunc_end37-copy_output_until_stop
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop
	.type	copy_input_until_stop,@function
copy_input_until_stop:                  # @copy_input_until_stop
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB38_17
# %bb.1:                                # %func_copy_input_until_stop.24
	movq	%rbx, %rdi
	callq	copy_input_until_stop.24
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_copy_input_until_stop.28
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.28
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_copy_input_until_stop.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.56
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_copy_input_until_stop.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.69
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %func_copy_input_until_stop.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.86
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_copy_input_until_stop.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.135
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_7:                               # %func_copy_input_until_stop.175
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.175
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_copy_input_until_stop.183
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.183
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_9:                               # %func_copy_input_until_stop.244
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.244
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_10:                              # %func_copy_input_until_stop.321
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.321
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_11:                              # %func_copy_input_until_stop.327
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.327
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_12:                              # %func_copy_input_until_stop.330
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.330
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_13:                              # %func_copy_input_until_stop.333
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.333
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_14:                              # %func_copy_input_until_stop.374
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.374
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_15:                              # %func_copy_input_until_stop.375
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.375
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_16:                              # %func_copy_input_until_stop.376
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	copy_input_until_stop.376
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB38_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB38_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB38_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB38_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB38_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB38_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB38_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB38_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB38_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB38_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB38_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB38_15
	jmp	.LBB38_16
.Lfunc_end38:
	.size	copy_input_until_stop, .Lfunc_end38-copy_input_until_stop
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function flush_RL
	.type	flush_RL,@function
flush_RL:                               # @flush_RL
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB39_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	add_pair_to_block
.LBB39_2:                               # %if.end
	movq	-8(%rbp), %rdi
	callq	init_RL
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end39:
	.size	flush_RL, .Lfunc_end39-flush_RL
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block
	.type	add_pair_to_block,@function
add_pair_to_block:                      # @add_pair_to_block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB40_7
# %bb.1:                                # %func_add_pair_to_block.43
	movq	%rbx, %rdi
	callq	add_pair_to_block.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_add_pair_to_block.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	add_pair_to_block.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_add_pair_to_block.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	add_pair_to_block.138
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_add_pair_to_block.156
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	add_pair_to_block.156
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_add_pair_to_block.239
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	add_pair_to_block.239
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_add_pair_to_block.262
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	add_pair_to_block.262
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
	jmp	.LBB40_6
.Lfunc_end40:
	.size	add_pair_to_block, .Lfunc_end40-add_pair_to_block
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.1            # -- Begin function BZ2_bzRead.1
	.p2align	4, 0x90
	.type	BZ2_bzRead.1,@function
BZ2_bzRead.1:                           # @BZ2_bzRead.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2023623011, -40(%rbp)  # imm = 0x789E0963
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB41_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB41_2:                               # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB41_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB41_4:                               # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB41_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB41_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB41_12
.LBB41_7:                               # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB41_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB41_9:                               # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB41_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB41_11:                              # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB41_69
.LBB41_12:                              # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB41_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB41_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB41_15:                              # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB41_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB41_17:                              # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB41_69
.LBB41_18:                              # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB41_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB41_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB41_21:                              # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB41_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB41_23:                              # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB41_69
.LBB41_24:                              # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB41_25:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB41_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB41_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB41_28:                              # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB41_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB41_30:                              # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB41_69
.LBB41_31:                              # %if.end46
                                        #   in Loop: Header=BB41_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB41_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB41_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB41_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB41_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB41_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB41_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB41_36:                              # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB41_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB41_38:                              # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB41_69
.LBB41_39:                              # %if.end69
                                        #   in Loop: Header=BB41_25 Depth=1
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB41_40:                              # %if.end76
                                        #   in Loop: Header=BB41_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB41_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB41_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB41_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB41_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB41_44:                              # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB41_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB41_46:                              # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB41_69
.LBB41_47:                              # %if.end94
                                        #   in Loop: Header=BB41_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB41_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB41_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB41_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB41_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB41_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB41_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB41_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB41_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB41_53:                              # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB41_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB41_55:                              # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB41_69
.LBB41_56:                              # %if.end122
                                        #   in Loop: Header=BB41_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB41_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB41_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB41_59:                              # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB41_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB41_61:                              # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_69
.LBB41_62:                              # %if.end137
                                        #   in Loop: Header=BB41_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB41_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB41_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB41_65:                              # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB41_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB41_67:                              # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_69
.LBB41_68:                              # %if.end152
                                        #   in Loop: Header=BB41_25 Depth=1
	jmp	.LBB41_25
.LBB41_69:                              # %return
	movl	-28(%rbp), %ebx
	cmpl	$2023623011, -40(%rbp)  # imm = 0x789E0963
	jne	.LBB41_71
.LBB41_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_70
.Lfunc_end41:
	.size	BZ2_bzRead.1, .Lfunc_end41-BZ2_bzRead.1
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzclose.2           # -- Begin function BZ2_bzclose.2
	.p2align	4, 0x90
	.type	BZ2_bzclose.2,@function
BZ2_bzclose.2:                          # @BZ2_bzclose.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$924429362, -28(%rbp)   # imm = 0x3719AC32
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB42_2
# %bb.1:                                # %if.then
	jmp	.LBB42_10
.LBB42_2:                               # %if.end
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB42_6
# %bb.3:                                # %if.then1
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
	cmpl	$0, -12(%rbp)
	je	.LBB42_5
# %bb.4:                                # %if.then3
	movq	-8(%rbp), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
.LBB42_5:                               # %if.end4
	jmp	.LBB42_7
.LBB42_6:                               # %if.else
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	callq	BZ2_bzReadClose
.LBB42_7:                               # %if.end5
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB42_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB42_10
# %bb.9:                                # %if.then8
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB42_10:                              # %if.end9
	cmpl	$924429362, -28(%rbp)   # imm = 0x3719AC32
	jne	.LBB42_12
.LBB42_11:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_11
.Lfunc_end42:
	.size	BZ2_bzclose.2, .Lfunc_end42-BZ2_bzclose.2
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd.3     # -- Begin function BZ2_bzCompressEnd.3
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd.3,@function
BZ2_bzCompressEnd.3:                    # @BZ2_bzCompressEnd.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$712811476, -36(%rbp)   # imm = 0x2A7CA3D4
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB43_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB43_13
.LBB43_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB43_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB43_13
.LBB43_4:                               # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB43_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB43_13
.LBB43_6:                               # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB43_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB43_8:                               # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB43_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB43_10:                              # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB43_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB43_12:                              # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB43_13:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$712811476, -36(%rbp)   # imm = 0x2A7CA3D4
	jne	.LBB43_15
.LBB43_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_15:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_14
.Lfunc_end43:
	.size	BZ2_bzCompressEnd.3, .Lfunc_end43-BZ2_bzCompressEnd.3
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.4   # -- Begin function BZ2_bzReadGetUnused.4
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.4,@function
BZ2_bzReadGetUnused.4:                  # @BZ2_bzReadGetUnused.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$42301340, -20(%rbp)    # imm = 0x285779C
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB44_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB44_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB44_3:                               # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB44_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB44_5:                               # %if.end5
	jmp	.LBB44_24
.LBB44_6:                               # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB44_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB44_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB44_9:                               # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB44_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB44_11:                              # %if.end16
	jmp	.LBB44_24
.LBB44_12:                              # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB44_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB44_19
.LBB44_14:                              # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB44_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB44_16:                              # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB44_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB44_18:                              # %if.end27
	jmp	.LBB44_24
.LBB44_19:                              # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB44_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB44_21:                              # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB44_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB44_23:                              # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB44_24:                              # %return
	cmpl	$42301340, -20(%rbp)    # imm = 0x285779C
	jne	.LBB44_26
.LBB44_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_26:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_25
.Lfunc_end44:
	.size	BZ2_bzReadGetUnused.4, .Lfunc_end44-BZ2_bzReadGetUnused.4
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.5  # -- Begin function BZ2_bzDecompressInit.5
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.5,@function
BZ2_bzDecompressInit.5:                 # @BZ2_bzDecompressInit.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$243694657, -40(%rbp)   # imm = 0xE867C41
	movq	%rdi, -16(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB45_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB45_17
.LBB45_2:                               # %if.end
	cmpq	$0, -16(%rbp)
	jne	.LBB45_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB45_17
.LBB45_4:                               # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB45_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB45_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB45_17
.LBB45_7:                               # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB45_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB45_10
.LBB45_9:                               # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB45_17
.LBB45_10:                              # %if.end10
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB45_12
# %bb.11:                               # %if.then12
	movq	-16(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB45_12:                              # %if.end14
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB45_14
# %bb.13:                               # %if.then16
	movq	-16(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB45_14:                              # %if.end18
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB45_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB45_17
.LBB45_16:                              # %if.end23
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-24(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB45_17:                              # %return
	movl	-28(%rbp), %ebx
	cmpl	$243694657, -40(%rbp)   # imm = 0xE867C41
	jne	.LBB45_19
.LBB45_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_19:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_18
.Lfunc_end45:
	.size	BZ2_bzDecompressInit.5, .Lfunc_end45-BZ2_bzDecompressInit.5
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.6           # -- Begin function BZ2_bzwrite.6
	.p2align	4, 0x90
	.type	BZ2_bzwrite.6,@function
BZ2_bzwrite.6:                          # @BZ2_bzwrite.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1693071047, -24(%rbp)  # imm = 0x64EA36C7
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB46_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_3
.LBB46_2:                               # %if.else
	movl	$-1, -16(%rbp)
.LBB46_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1693071047, -24(%rbp)  # imm = 0x64EA36C7
	jne	.LBB46_5
.LBB46_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_4
.Lfunc_end46:
	.size	BZ2_bzwrite.6, .Lfunc_end46-BZ2_bzwrite.6
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.7 # -- Begin function BZ2_bzBuffToBuffDecompress.7
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.7,@function
BZ2_bzBuffToBuffDecompress.7:           # @BZ2_bzBuffToBuffDecompress.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$2054874693, -36(%rbp)  # imm = 0x7A7AE645
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB47_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB47_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB47_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB47_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB47_7
.LBB47_5:                               # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB47_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB47_8
.LBB47_7:                               # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB47_19
.LBB47_8:                               # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB47_10
# %bb.9:                                # %if.then12
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_19
.LBB47_10:                              # %if.end13
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB47_12
# %bb.11:                               # %if.then16
	jmp	.LBB47_15
.LBB47_12:                              # %if.end17
	cmpl	$4, -12(%rbp)
	je	.LBB47_14
# %bb.13:                               # %if.then19
	jmp	.LBB47_18
.LBB47_14:                              # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB47_19
.LBB47_15:                              # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB47_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -16(%rbp)
	jmp	.LBB47_19
.LBB47_17:                              # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB47_19
.LBB47_18:                              # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB47_19:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$2054874693, -36(%rbp)  # imm = 0x7A7AE645
	jne	.LBB47_21
.LBB47_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_20
.Lfunc_end47:
	.size	BZ2_bzBuffToBuffDecompress.7, .Lfunc_end47-BZ2_bzBuffToBuffDecompress.7
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.8        # -- Begin function BZ2_bzCompress.8
	.p2align	4, 0x90
	.type	BZ2_bzCompress.8,@function
BZ2_bzCompress.8:                       # @BZ2_bzCompress.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1624740367, -44(%rbp)  # imm = 0x60D7920F
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB48_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB48_39
.LBB48_2:                               # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB48_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB48_39
.LBB48_4:                               # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB48_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB48_39
.LBB48_6:                               # %if.end7
	jmp	.LBB48_7
.LBB48_7:                               # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB48_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB48_7 Depth=1
	movq	.LJTI48_0(,%rax,8), %rax
	jmpq	*%rax
.LBB48_9:                               # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB48_39
.LBB48_10:                              # %sw.bb8
                                        #   in Loop: Header=BB48_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB48_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB48_39
.LBB48_12:                              # %if.else
                                        #   in Loop: Header=BB48_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB48_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB48_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB48_14:                              # %preswitch.backedge
                                        #   in Loop: Header=BB48_7 Depth=1
	jmp	.LBB48_7
.LBB48_15:                              # %if.else15
                                        #   in Loop: Header=BB48_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB48_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB48_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB48_14
.LBB48_17:                              # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB48_39
.LBB48_18:                              # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB48_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB48_39
.LBB48_20:                              # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB48_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB48_39
.LBB48_22:                              # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB48_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB48_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB48_26
.LBB48_25:                              # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB48_39
.LBB48_26:                              # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB48_39
.LBB48_27:                              # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB48_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB48_39
.LBB48_29:                              # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB48_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB48_39
.LBB48_31:                              # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB48_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB48_39
.LBB48_33:                              # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB48_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB48_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB48_37
.LBB48_36:                              # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB48_39
.LBB48_37:                              # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB48_39
.LBB48_38:                              # %sw.epilog
	movl	$0, -16(%rbp)
.LBB48_39:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1624740367, -44(%rbp)  # imm = 0x60D7920F
	jne	.LBB48_41
.LBB48_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_40
.Lfunc_end48:
	.size	BZ2_bzCompress.8, .Lfunc_end48-BZ2_bzCompress.8
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI48_0:
	.quad	.LBB48_9
	.quad	.LBB48_10
	.quad	.LBB48_18
	.quad	.LBB48_27
                                        # -- End function
	.text
	.globl	BZ2_bzDecompress.9      # -- Begin function BZ2_bzDecompress.9
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.9,@function
BZ2_bzDecompress.9:                     # @BZ2_bzDecompress.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1301659477, -44(%rbp)  # imm = 0x4D95BF55
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB49_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB49_37
.LBB49_2:                               # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB49_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB49_37
.LBB49_4:                               # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB49_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB49_37
.LBB49_6:                               # %if.end7
	jmp	.LBB49_7
.LBB49_7:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB49_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB49_37
.LBB49_9:                               # %if.end11
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB49_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB49_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB49_13
.LBB49_12:                              # %if.else
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB49_13:                              # %if.end17
                                        #   in Loop: Header=BB49_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB49_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB49_37
.LBB49_15:                              # %if.end20
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB49_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB49_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB49_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB49_19:                              # %if.end29
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB49_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB49_21:                              # %if.end34
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB49_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB49_37
.LBB49_23:                              # %if.end39
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB49_25
.LBB49_24:                              # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB49_37
.LBB49_25:                              # %if.end46
                                        #   in Loop: Header=BB49_7 Depth=1
	jmp	.LBB49_26
.LBB49_26:                              # %if.end47
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB49_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB49_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB49_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB49_30:                              # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB49_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB49_37
.LBB49_32:                              # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_37
.LBB49_33:                              # %if.end65
                                        #   in Loop: Header=BB49_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB49_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_37
.LBB49_35:                              # %if.end69
                                        #   in Loop: Header=BB49_7 Depth=1
	jmp	.LBB49_36
.LBB49_36:                              # %if.end70
                                        #   in Loop: Header=BB49_7 Depth=1
	jmp	.LBB49_7
.LBB49_37:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$1301659477, -44(%rbp)  # imm = 0x4D95BF55
	jne	.LBB49_39
.LBB49_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_39:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_38
.Lfunc_end49:
	.size	BZ2_bzDecompress.9, .Lfunc_end49-BZ2_bzDecompress.9
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.10       # -- Begin function BZ2_bzReadOpen.10
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.10,@function
BZ2_bzReadOpen.10:                      # @BZ2_bzReadOpen.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1963078626, -76(%rbp)  # imm = 0x750233E2
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -64(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB50_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB50_2:                               # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB50_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB50_4:                               # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB50_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -36(%rbp)
	je	.LBB50_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	jne	.LBB50_14
.LBB50_7:                               # %lor.lhs.false7
	cmpl	$0, -40(%rbp)
	jl	.LBB50_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -40(%rbp)
	jg	.LBB50_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -64(%rbp)
	jne	.LBB50_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB50_14
.LBB50_11:                              # %lor.lhs.false15
	cmpq	$0, -64(%rbp)
	je	.LBB50_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB50_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB50_19
.LBB50_14:                              # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB50_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB50_16:                              # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB50_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB50_18:                              # %if.end28
	movq	$0, -56(%rbp)
	jmp	.LBB50_45
.LBB50_19:                              # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB50_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB50_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB50_22:                              # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB50_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB50_24:                              # %if.end37
	movq	$0, -56(%rbp)
	jmp	.LBB50_45
.LBB50_25:                              # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB50_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB50_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB50_28:                              # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB50_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB50_30:                              # %if.end48
	movq	$0, -56(%rbp)
	jmp	.LBB50_45
.LBB50_31:                              # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB50_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB50_33:                              # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB50_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB50_35:                              # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB50_36:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB50_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB50_36 Depth=1
	movq	-64(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_36
.LBB50_38:                              # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB50_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB50_41
# %bb.40:                               # %if.then67
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB50_41:                              # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB50_43
# %bb.42:                               # %if.then70
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB50_43:                              # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -56(%rbp)
	jmp	.LBB50_45
.LBB50_44:                              # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB50_45:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1963078626, -76(%rbp)  # imm = 0x750233E2
	jne	.LBB50_47
.LBB50_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_47:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_46
.Lfunc_end50:
	.size	BZ2_bzReadOpen.10, .Lfunc_end50-BZ2_bzReadOpen.10
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.11  # -- Begin function BZ2_bzReadGetUnused.11
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.11,@function
BZ2_bzReadGetUnused.11:                 # @BZ2_bzReadGetUnused.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1739899388, -20(%rbp)  # imm = 0x67B4C1FC
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB51_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB51_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB51_3:                               # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB51_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB51_5:                               # %if.end5
	jmp	.LBB51_24
.LBB51_6:                               # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB51_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB51_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB51_9:                               # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB51_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB51_11:                              # %if.end16
	jmp	.LBB51_24
.LBB51_12:                              # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB51_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB51_19
.LBB51_14:                              # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB51_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB51_16:                              # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB51_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB51_18:                              # %if.end27
	jmp	.LBB51_24
.LBB51_19:                              # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB51_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB51_21:                              # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB51_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB51_23:                              # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB51_24:                              # %return
	cmpl	$1739899388, -20(%rbp)  # imm = 0x67B4C1FC
	jne	.LBB51_26
.LBB51_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_26:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_25
.Lfunc_end51:
	.size	BZ2_bzReadGetUnused.11, .Lfunc_end51-BZ2_bzReadGetUnused.11
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_output_until_stop.12
	.type	copy_output_until_stop.12,@function
copy_output_until_stop.12:              # @copy_output_until_stop.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$805309395, -28(%rbp)   # imm = 0x30000BD3
	movq	%rdi, -24(%rbp)
	movb	$0, -9(%rbp)
.LBB52_1:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB52_3
# %bb.2:                                # %if.then
	jmp	.LBB52_8
.LBB52_3:                               # %if.end
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jl	.LBB52_5
# %bb.4:                                # %if.then2
	jmp	.LBB52_8
.LBB52_5:                               # %if.end3
                                        #   in Loop: Header=BB52_1 Depth=1
	movb	$1, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	120(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB52_7
# %bb.6:                                # %if.then16
                                        #   in Loop: Header=BB52_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB52_7:                               # %if.end19
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_1
.LBB52_8:                               # %while.end
	movb	-9(%rbp), %bl
	cmpl	$805309395, -28(%rbp)   # imm = 0x30000BD3
	jne	.LBB52_10
.LBB52_9:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_9
.Lfunc_end52:
	.size	copy_output_until_stop.12, .Lfunc_end52-copy_output_until_stop.12
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.13
	.type	default_bzalloc.13,@function
default_bzalloc.13:                     # @default_bzalloc.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$168104190, -16(%rbp)   # imm = 0xA0510FE
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	-12(%rbp), %eax
	imull	-20(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$168104190, -16(%rbp)   # imm = 0xA0510FE
	jne	.LBB53_2
.LBB53_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_1
.Lfunc_end53:
	.size	default_bzalloc.13, .Lfunc_end53-default_bzalloc.13
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.14       # -- Begin function BZ2_bzReadOpen.14
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.14,@function
BZ2_bzReadOpen.14:                      # @BZ2_bzReadOpen.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$976590847, -76(%rbp)   # imm = 0x3A3597FF
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -44(%rbp)
	movq	%r8, -64(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB54_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB54_2:                               # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB54_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB54_4:                               # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB54_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -44(%rbp)
	je	.LBB54_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -44(%rbp)
	jne	.LBB54_14
.LBB54_7:                               # %lor.lhs.false7
	cmpl	$0, -36(%rbp)
	jl	.LBB54_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -36(%rbp)
	jg	.LBB54_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -64(%rbp)
	jne	.LBB54_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB54_14
.LBB54_11:                              # %lor.lhs.false15
	cmpq	$0, -64(%rbp)
	je	.LBB54_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB54_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB54_19
.LBB54_14:                              # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB54_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB54_16:                              # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB54_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB54_18:                              # %if.end28
	movq	$0, -56(%rbp)
	jmp	.LBB54_45
.LBB54_19:                              # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB54_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB54_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB54_22:                              # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB54_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB54_24:                              # %if.end37
	movq	$0, -56(%rbp)
	jmp	.LBB54_45
.LBB54_25:                              # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB54_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB54_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB54_28:                              # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB54_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB54_30:                              # %if.end48
	movq	$0, -56(%rbp)
	jmp	.LBB54_45
.LBB54_31:                              # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB54_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB54_33:                              # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB54_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB54_35:                              # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB54_36:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB54_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB54_36 Depth=1
	movq	-64(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_36
.LBB54_38:                              # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB54_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB54_41
# %bb.40:                               # %if.then67
	movl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB54_41:                              # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB54_43
# %bb.42:                               # %if.then70
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB54_43:                              # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -56(%rbp)
	jmp	.LBB54_45
.LBB54_44:                              # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB54_45:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$976590847, -76(%rbp)   # imm = 0x3A3597FF
	jne	.LBB54_47
.LBB54_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_47:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_46
.Lfunc_end54:
	.size	BZ2_bzReadOpen.14, .Lfunc_end54-BZ2_bzReadOpen.14
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.15          # -- Begin function BZ2_bzWrite.15
	.p2align	4, 0x90
	.type	BZ2_bzWrite.15,@function
BZ2_bzWrite.15:                         # @BZ2_bzWrite.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2099777048, -36(%rbp)  # imm = 0x7D280E18
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB55_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB55_2:                               # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB55_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB55_4:                               # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB55_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB55_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -24(%rbp)
	jge	.LBB55_12
.LBB55_7:                               # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB55_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB55_9:                               # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB55_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB55_11:                              # %if.end15
	jmp	.LBB55_53
.LBB55_12:                              # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB55_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB55_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB55_15:                              # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB55_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB55_17:                              # %if.end24
	jmp	.LBB55_53
.LBB55_18:                              # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB55_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB55_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB55_21:                              # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB55_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB55_23:                              # %if.end34
	jmp	.LBB55_53
.LBB55_24:                              # %if.end35
	cmpl	$0, -24(%rbp)
	jne	.LBB55_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB55_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB55_27:                              # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB55_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB55_29:                              # %if.end44
	jmp	.LBB55_53
.LBB55_30:                              # %if.end45
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB55_31:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$1, -20(%rbp)
	je	.LBB55_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB55_34
# %bb.33:                               # %if.then55
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB55_34:                              # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB55_36
# %bb.35:                               # %if.then58
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB55_36:                              # %if.end60
	jmp	.LBB55_53
.LBB55_37:                              # %if.end61
                                        #   in Loop: Header=BB55_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB55_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB55_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB55_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB55_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB55_45
.LBB55_40:                              # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB55_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB55_42:                              # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB55_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB55_44:                              # %if.end88
	jmp	.LBB55_53
.LBB55_45:                              # %if.end89
                                        #   in Loop: Header=BB55_31 Depth=1
	jmp	.LBB55_46
.LBB55_46:                              # %if.end90
                                        #   in Loop: Header=BB55_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB55_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB55_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB55_49:                              # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB55_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB55_51:                              # %if.end104
	jmp	.LBB55_53
.LBB55_52:                              # %if.end105
                                        #   in Loop: Header=BB55_31 Depth=1
	jmp	.LBB55_31
.LBB55_53:                              # %return
	cmpl	$2099777048, -36(%rbp)  # imm = 0x7D280E18
	jne	.LBB55_55
.LBB55_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_55:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_54
.Lfunc_end55:
	.size	BZ2_bzWrite.15, .Lfunc_end55-BZ2_bzWrite.15
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_output_until_stop.16
	.type	copy_output_until_stop.16,@function
copy_output_until_stop.16:              # @copy_output_until_stop.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1624766855, -28(%rbp)  # imm = 0x60D7F987
	movq	%rdi, -24(%rbp)
	movb	$0, -9(%rbp)
.LBB56_1:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB56_3
# %bb.2:                                # %if.then
	jmp	.LBB56_8
.LBB56_3:                               # %if.end
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jl	.LBB56_5
# %bb.4:                                # %if.then2
	jmp	.LBB56_8
.LBB56_5:                               # %if.end3
                                        #   in Loop: Header=BB56_1 Depth=1
	movb	$1, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	120(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB56_7
# %bb.6:                                # %if.then16
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB56_7:                               # %if.end19
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_1
.LBB56_8:                               # %while.end
	movb	-9(%rbp), %bl
	cmpl	$1624766855, -28(%rbp)  # imm = 0x60D7F987
	jne	.LBB56_10
.LBB56_9:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_9
.Lfunc_end56:
	.size	copy_output_until_stop.16, .Lfunc_end56-copy_output_until_stop.16
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.17
	.type	myfeof.17,@function
myfeof.17:                              # @myfeof.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2026409043, -20(%rbp)  # imm = 0x78C88C53
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB57_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB57_3
.LBB57_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB57_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$2026409043, -20(%rbp)  # imm = 0x78C88C53
	jne	.LBB57_5
.LBB57_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_4
.Lfunc_end57:
	.size	myfeof.17, .Lfunc_end57-myfeof.17
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.18          # -- Begin function BZ2_bzwrite.18
	.p2align	4, 0x90
	.type	BZ2_bzwrite.18,@function
BZ2_bzwrite.18:                         # @BZ2_bzwrite.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1183778397, -20(%rbp)  # imm = 0x468F065D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movl	-16(%rbp), %ecx
	leaq	-24(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -24(%rbp)
	jne	.LBB58_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_3
.LBB58_2:                               # %if.else
	movl	$-1, -12(%rbp)
.LBB58_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1183778397, -20(%rbp)  # imm = 0x468F065D
	jne	.LBB58_5
.LBB58_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_4
.Lfunc_end58:
	.size	BZ2_bzwrite.18, .Lfunc_end58-BZ2_bzwrite.18
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.19     # -- Begin function BZ2_bzWriteClose.19
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.19,@function
BZ2_bzWriteClose.19:                    # @BZ2_bzWriteClose.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$782620411, -4(%rbp)    # imm = 0x2EA5D6FB
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -8(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -16(%rbp)
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$782620411, -4(%rbp)    # imm = 0x2EA5D6FB
	jne	.LBB59_2
.LBB59_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_1
.Lfunc_end59:
	.size	BZ2_bzWriteClose.19, .Lfunc_end59-BZ2_bzWriteClose.19
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function prepare_new_block.20
	.type	prepare_new_block.20,@function
prepare_new_block.20:                   # @prepare_new_block.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1041991533, -20(%rbp)  # imm = 0x3E1B876D
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, 108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 116(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 120(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 648(%rax)
	movl	$0, -4(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -4(%rbp)          # imm = 0x100
	jge	.LBB60_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, 128(%rax,%rcx)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_1
.LBB60_4:                               # %for.end
	movq	-16(%rbp), %rax
	movl	660(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 660(%rax)
	cmpl	$1041991533, -20(%rbp)  # imm = 0x3E1B876D
	jne	.LBB60_6
.LBB60_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_5
.Lfunc_end60:
	.size	prepare_new_block.20, .Lfunc_end60-prepare_new_block.20
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd.21    # -- Begin function BZ2_bzCompressEnd.21
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd.21,@function
BZ2_bzCompressEnd.21:                   # @BZ2_bzCompressEnd.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1563481984, -36(%rbp)  # imm = 0x5D30D780
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB61_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB61_13
.LBB61_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB61_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB61_13
.LBB61_4:                               # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB61_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB61_13
.LBB61_6:                               # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB61_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB61_8:                               # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB61_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB61_10:                              # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB61_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB61_12:                              # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB61_13:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1563481984, -36(%rbp)  # imm = 0x5D30D780
	jne	.LBB61_15
.LBB61_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_15:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_14
.Lfunc_end61:
	.size	BZ2_bzCompressEnd.21, .Lfunc_end61-BZ2_bzCompressEnd.21
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function prepare_new_block.22
	.type	prepare_new_block.22,@function
prepare_new_block.22:                   # @prepare_new_block.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1913446666, -20(%rbp)  # imm = 0x720CE10A
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, 108(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 116(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 120(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 648(%rax)
	movl	$0, -4(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -4(%rbp)          # imm = 0x100
	jge	.LBB62_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, 128(%rax,%rcx)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_1
.LBB62_4:                               # %for.end
	movq	-16(%rbp), %rax
	movl	660(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 660(%rax)
	cmpl	$1913446666, -20(%rbp)  # imm = 0x720CE10A
	jne	.LBB62_6
.LBB62_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_5
.Lfunc_end62:
	.size	prepare_new_block.22, .Lfunc_end62-prepare_new_block.22
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function isempty_RL.23
	.type	isempty_RL.23,@function
isempty_RL.23:                          # @isempty_RL.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1887286058, -16(%rbp)  # imm = 0x707DB32A
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB63_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 96(%rax)
	jle	.LBB63_3
# %bb.2:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB63_4
.LBB63_3:                               # %if.else
	movb	$1, -9(%rbp)
.LBB63_4:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1887286058, -16(%rbp)  # imm = 0x707DB32A
	jne	.LBB63_6
.LBB63_5:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_5
.Lfunc_end63:
	.size	isempty_RL.23, .Lfunc_end63-isempty_RL.23
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.24
	.type	copy_input_until_stop.24,@function
copy_input_until_stop.24:               # @copy_input_until_stop.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1227338249, -32(%rbp)  # imm = 0x4927B209
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB64_20
# %bb.1:                                # %if.then
	jmp	.LBB64_2
.LBB64_2:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB64_4
# %bb.3:                                # %if.then2
	jmp	.LBB64_19
.LBB64_4:                               # %if.end
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB64_6
# %bb.5:                                # %if.then4
	jmp	.LBB64_19
.LBB64_6:                               # %if.end5
                                        #   in Loop: Header=BB64_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB64_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB64_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB64_16
.LBB64_9:                               # %if.else
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB64_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB64_14
.LBB64_11:                              # %if.then32
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB64_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB64_13:                              # %if.end37
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB64_15
.LBB64_14:                              # %if.else40
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB64_15:                              # %if.end43
                                        #   in Loop: Header=BB64_2 Depth=1
	jmp	.LBB64_16
.LBB64_16:                              # %if.end44
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB64_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB64_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB64_18:                              # %if.end58
                                        #   in Loop: Header=BB64_2 Depth=1
	jmp	.LBB64_2
.LBB64_19:                              # %while.end
	jmp	.LBB64_41
.LBB64_20:                              # %if.else59
	jmp	.LBB64_21
.LBB64_21:                              # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB64_23
# %bb.22:                               # %if.then65
	jmp	.LBB64_40
.LBB64_23:                              # %if.end66
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB64_25
# %bb.24:                               # %if.then71
	jmp	.LBB64_40
.LBB64_25:                              # %if.end72
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB64_27
# %bb.26:                               # %if.then75
	jmp	.LBB64_40
.LBB64_27:                              # %if.end76
                                        #   in Loop: Header=BB64_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB64_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB64_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB64_37
.LBB64_30:                              # %if.else113
                                        #   in Loop: Header=BB64_21 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB64_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB64_35
.LBB64_32:                              # %if.then121
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB64_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB64_34:                              # %if.end126
                                        #   in Loop: Header=BB64_21 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB64_36
.LBB64_35:                              # %if.else129
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB64_36:                              # %if.end132
                                        #   in Loop: Header=BB64_21 Depth=1
	jmp	.LBB64_37
.LBB64_37:                              # %if.end133
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB64_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB64_39:                              # %if.end151
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB64_21
.LBB64_40:                              # %while.end154
	jmp	.LBB64_41
.LBB64_41:                              # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$1227338249, -32(%rbp)  # imm = 0x4927B209
	jne	.LBB64_43
.LBB64_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_42
.Lfunc_end64:
	.size	copy_input_until_stop.24, .Lfunc_end64-copy_input_until_stop.24
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.25       # -- Begin function BZ2_bzReadOpen.25
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.25,@function
BZ2_bzReadOpen.25:                      # @BZ2_bzReadOpen.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1976867417, -76(%rbp)  # imm = 0x75D49A59
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -40(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB65_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB65_2:                               # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB65_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB65_4:                               # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB65_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -40(%rbp)
	je	.LBB65_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -40(%rbp)
	jne	.LBB65_14
.LBB65_7:                               # %lor.lhs.false7
	cmpl	$0, -44(%rbp)
	jl	.LBB65_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -44(%rbp)
	jg	.LBB65_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -56(%rbp)
	jne	.LBB65_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB65_14
.LBB65_11:                              # %lor.lhs.false15
	cmpq	$0, -56(%rbp)
	je	.LBB65_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB65_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB65_19
.LBB65_14:                              # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB65_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB65_16:                              # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB65_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB65_18:                              # %if.end28
	movq	$0, -64(%rbp)
	jmp	.LBB65_45
.LBB65_19:                              # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB65_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB65_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB65_22:                              # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB65_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB65_24:                              # %if.end37
	movq	$0, -64(%rbp)
	jmp	.LBB65_45
.LBB65_25:                              # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB65_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB65_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB65_28:                              # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB65_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB65_30:                              # %if.end48
	movq	$0, -64(%rbp)
	jmp	.LBB65_45
.LBB65_31:                              # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB65_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB65_33:                              # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB65_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB65_35:                              # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB65_36:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB65_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB65_36 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_36
.LBB65_38:                              # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-44(%rbp), %esi
	movl	-40(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB65_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB65_41
# %bb.40:                               # %if.then67
	movl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB65_41:                              # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB65_43
# %bb.42:                               # %if.then70
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB65_43:                              # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -64(%rbp)
	jmp	.LBB65_45
.LBB65_44:                              # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB65_45:                              # %return
	movq	-64(%rbp), %rbx
	cmpl	$1976867417, -76(%rbp)  # imm = 0x75D49A59
	jne	.LBB65_47
.LBB65_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_47:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_46
.Lfunc_end65:
	.size	BZ2_bzReadOpen.25, .Lfunc_end65-BZ2_bzReadOpen.25
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.26       # -- Begin function BZ2_bzCompress.26
	.p2align	4, 0x90
	.type	BZ2_bzCompress.26,@function
BZ2_bzCompress.26:                      # @BZ2_bzCompress.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2118563838, -44(%rbp)  # imm = 0x7E46B7FE
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB66_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB66_39
.LBB66_2:                               # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB66_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB66_39
.LBB66_4:                               # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB66_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB66_39
.LBB66_6:                               # %if.end7
	jmp	.LBB66_7
.LBB66_7:                               # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB66_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB66_7 Depth=1
	movq	.LJTI66_0(,%rax,8), %rax
	jmpq	*%rax
.LBB66_9:                               # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB66_39
.LBB66_10:                              # %sw.bb8
                                        #   in Loop: Header=BB66_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB66_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB66_39
.LBB66_12:                              # %if.else
                                        #   in Loop: Header=BB66_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB66_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB66_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB66_14:                              # %preswitch.backedge
                                        #   in Loop: Header=BB66_7 Depth=1
	jmp	.LBB66_7
.LBB66_15:                              # %if.else15
                                        #   in Loop: Header=BB66_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB66_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB66_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB66_14
.LBB66_17:                              # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB66_39
.LBB66_18:                              # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB66_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB66_39
.LBB66_20:                              # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB66_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB66_39
.LBB66_22:                              # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB66_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB66_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB66_26
.LBB66_25:                              # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB66_39
.LBB66_26:                              # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB66_39
.LBB66_27:                              # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB66_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB66_39
.LBB66_29:                              # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB66_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB66_39
.LBB66_31:                              # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB66_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB66_39
.LBB66_33:                              # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB66_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB66_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB66_37
.LBB66_36:                              # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB66_39
.LBB66_37:                              # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB66_39
.LBB66_38:                              # %sw.epilog
	movl	$0, -16(%rbp)
.LBB66_39:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$2118563838, -44(%rbp)  # imm = 0x7E46B7FE
	jne	.LBB66_41
.LBB66_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_40
.Lfunc_end66:
	.size	BZ2_bzCompress.26, .Lfunc_end66-BZ2_bzCompress.26
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI66_0:
	.quad	.LBB66_9
	.quad	.LBB66_10
	.quad	.LBB66_18
	.quad	.LBB66_27
                                        # -- End function
	.text
	.globl	BZ2_bzclose.27          # -- Begin function BZ2_bzclose.27
	.p2align	4, 0x90
	.type	BZ2_bzclose.27,@function
BZ2_bzclose.27:                         # @BZ2_bzclose.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1203030951, -28(%rbp)  # imm = 0x47B4CBA7
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB67_2
# %bb.1:                                # %if.then
	jmp	.LBB67_10
.LBB67_2:                               # %if.end
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB67_6
# %bb.3:                                # %if.then1
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
	cmpl	$0, -12(%rbp)
	je	.LBB67_5
# %bb.4:                                # %if.then3
	movq	-8(%rbp), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
.LBB67_5:                               # %if.end4
	jmp	.LBB67_7
.LBB67_6:                               # %if.else
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	callq	BZ2_bzReadClose
.LBB67_7:                               # %if.end5
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB67_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB67_10
# %bb.9:                                # %if.then8
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB67_10:                              # %if.end9
	cmpl	$1203030951, -28(%rbp)  # imm = 0x47B4CBA7
	jne	.LBB67_12
.LBB67_11:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_11
.Lfunc_end67:
	.size	BZ2_bzclose.27, .Lfunc_end67-BZ2_bzclose.27
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.28
	.type	copy_input_until_stop.28,@function
copy_input_until_stop.28:               # @copy_input_until_stop.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$800522912, -32(%rbp)   # imm = 0x2FB702A0
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB68_20
# %bb.1:                                # %if.then
	jmp	.LBB68_2
.LBB68_2:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB68_4
# %bb.3:                                # %if.then2
	jmp	.LBB68_19
.LBB68_4:                               # %if.end
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB68_6
# %bb.5:                                # %if.then4
	jmp	.LBB68_19
.LBB68_6:                               # %if.end5
                                        #   in Loop: Header=BB68_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB68_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB68_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB68_16
.LBB68_9:                               # %if.else
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB68_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB68_14
.LBB68_11:                              # %if.then32
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB68_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB68_13:                              # %if.end37
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB68_15
.LBB68_14:                              # %if.else40
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB68_15:                              # %if.end43
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_16
.LBB68_16:                              # %if.end44
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB68_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB68_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB68_18:                              # %if.end58
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_2
.LBB68_19:                              # %while.end
	jmp	.LBB68_41
.LBB68_20:                              # %if.else59
	jmp	.LBB68_21
.LBB68_21:                              # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB68_23
# %bb.22:                               # %if.then65
	jmp	.LBB68_40
.LBB68_23:                              # %if.end66
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB68_25
# %bb.24:                               # %if.then71
	jmp	.LBB68_40
.LBB68_25:                              # %if.end72
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB68_27
# %bb.26:                               # %if.then75
	jmp	.LBB68_40
.LBB68_27:                              # %if.end76
                                        #   in Loop: Header=BB68_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB68_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB68_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB68_37
.LBB68_30:                              # %if.else113
                                        #   in Loop: Header=BB68_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB68_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB68_35
.LBB68_32:                              # %if.then121
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB68_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB68_34:                              # %if.end126
                                        #   in Loop: Header=BB68_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB68_36
.LBB68_35:                              # %if.else129
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB68_36:                              # %if.end132
                                        #   in Loop: Header=BB68_21 Depth=1
	jmp	.LBB68_37
.LBB68_37:                              # %if.end133
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB68_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB68_39:                              # %if.end151
                                        #   in Loop: Header=BB68_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB68_21
.LBB68_40:                              # %while.end154
	jmp	.LBB68_41
.LBB68_41:                              # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$800522912, -32(%rbp)   # imm = 0x2FB702A0
	jne	.LBB68_43
.LBB68_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_42
.Lfunc_end68:
	.size	copy_input_until_stop.28, .Lfunc_end68-copy_input_until_stop.28
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.29     # -- Begin function BZ2_bzWriteClose.29
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.29,@function
BZ2_bzWriteClose.29:                    # @BZ2_bzWriteClose.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1484942760, -4(%rbp)   # imm = 0x58826DA8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -8(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-24(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1484942760, -4(%rbp)   # imm = 0x58826DA8
	jne	.LBB69_2
.LBB69_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_1
.Lfunc_end69:
	.size	BZ2_bzWriteClose.29, .Lfunc_end69-BZ2_bzWriteClose.29
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd.30  # -- Begin function BZ2_bzDecompressEnd.30
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd.30,@function
BZ2_bzDecompressEnd.30:                 # @BZ2_bzDecompressEnd.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$853393582, -36(%rbp)   # imm = 0x32DDC0AE
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB70_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB70_13
.LBB70_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB70_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB70_13
.LBB70_4:                               # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB70_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB70_13
.LBB70_6:                               # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 3152(%rax)
	je	.LBB70_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3152(%rcx), %rsi
	callq	*%rax
.LBB70_8:                               # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB70_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3160(%rcx), %rsi
	callq	*%rax
.LBB70_10:                              # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 3168(%rax)
	je	.LBB70_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3168(%rcx), %rsi
	callq	*%rax
.LBB70_12:                              # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB70_13:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$853393582, -36(%rbp)   # imm = 0x32DDC0AE
	jne	.LBB70_15
.LBB70_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_15:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_14
.Lfunc_end70:
	.size	BZ2_bzDecompressEnd.30, .Lfunc_end70-BZ2_bzDecompressEnd.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.31
	.type	unRLE_obuf_to_output_FAST.31,@function
unRLE_obuf_to_output_FAST.31:           # @unRLE_obuf_to_output_FAST.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$142253157, -92(%rbp)   # imm = 0x87A9C65
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB71_48
# %bb.1:                                # %if.then
	jmp	.LBB71_2
.LBB71_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	jmp	.LBB71_3
.LBB71_3:                               # %while.body2
                                        #   Parent Loop BB71_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB71_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB71_82
.LBB71_5:                               # %if.end
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB71_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_10
.LBB71_7:                               # %if.end6
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB71_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB71_9:                               # %if.end26
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_3
.LBB71_10:                              # %while.end
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB71_82
.LBB71_12:                              # %if.end30
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB71_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB71_82
.LBB71_14:                              # %if.end37
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB71_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB71_17:                              # %if.end61
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_18
.LBB71_18:                              # %if.end62
                                        #   in Loop: Header=BB71_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_20
.LBB71_20:                              # %while.body.backedge
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_2
.LBB71_21:                              # %if.end79
                                        #   in Loop: Header=BB71_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB71_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB71_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB71_20
.LBB71_23:                              # %if.end87
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB71_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB71_26:                              # %if.end114
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_27
.LBB71_27:                              # %if.end115
                                        #   in Loop: Header=BB71_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_20
.LBB71_29:                              # %if.end133
                                        #   in Loop: Header=BB71_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB71_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB71_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB71_20
.LBB71_31:                              # %if.end141
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB71_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB71_34:                              # %if.end168
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_35
.LBB71_35:                              # %if.end169
                                        #   in Loop: Header=BB71_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_20
.LBB71_37:                              # %if.end187
                                        #   in Loop: Header=BB71_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB71_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB71_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB71_20
.LBB71_39:                              # %if.end195
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB71_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB71_42:                              # %if.end221
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_43
.LBB71_43:                              # %if.end222
                                        #   in Loop: Header=BB71_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB71_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB71_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB71_46:                              # %if.end264
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_47
.LBB71_47:                              # %if.end265
                                        #   in Loop: Header=BB71_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB71_20
.LBB71_48:                              # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB71_49:                              # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB71_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB71_49 Depth=1
	jmp	.LBB71_51
.LBB71_51:                              # %while.body294
                                        #   Parent Loop BB71_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB71_53
# %bb.52:                               # %if.then297
	jmp	.LBB71_78
.LBB71_53:                              # %if.end298
                                        #   in Loop: Header=BB71_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB71_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB71_49 Depth=1
	jmp	.LBB71_56
.LBB71_55:                              # %if.end302
                                        #   in Loop: Header=BB71_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB71_51
.LBB71_56:                              # %while.end313
                                        #   in Loop: Header=BB71_49 Depth=1
	jmp	.LBB71_57
.LBB71_57:                              # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB71_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB71_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB71_78
.LBB71_59:                              # %if.end317
                                        #   in Loop: Header=BB71_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB71_60:                              # %if.end327
                                        #   in Loop: Header=BB71_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB71_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB71_82
.LBB71_62:                              # %if.end331
                                        #   in Loop: Header=BB71_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB71_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB71_78
.LBB71_64:                              # %if.end335
                                        #   in Loop: Header=BB71_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB71_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB71_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB71_57
.LBB71_66:                              # %if.end348
                                        #   in Loop: Header=BB71_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB71_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB71_49 Depth=1
	jmp	.LBB71_57
.LBB71_68:                              # %if.end352
                                        #   in Loop: Header=BB71_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB71_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB71_49 Depth=1
	jmp	.LBB71_70
.LBB71_70:                              # %while.body289.backedge
                                        #   in Loop: Header=BB71_49 Depth=1
	jmp	.LBB71_49
.LBB71_71:                              # %if.end362
                                        #   in Loop: Header=BB71_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB71_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB71_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB71_70
.LBB71_73:                              # %if.end368
                                        #   in Loop: Header=BB71_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB71_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB71_49 Depth=1
	jmp	.LBB71_70
.LBB71_75:                              # %if.end378
                                        #   in Loop: Header=BB71_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB71_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB71_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB71_70
.LBB71_77:                              # %if.end384
                                        #   in Loop: Header=BB71_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB71_70
.LBB71_78:                              # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -84(%rbp)
	movl	-88(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-84(%rbp), %eax
	jae	.LBB71_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB71_80:                              # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB71_82:                              # %return
	movb	-33(%rbp), %bl
	cmpl	$142253157, -92(%rbp)   # imm = 0x87A9C65
	jne	.LBB71_84
.LBB71_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_83
.Lfunc_end71:
	.size	unRLE_obuf_to_output_FAST.31, .Lfunc_end71-unRLE_obuf_to_output_FAST.31
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzfree.32
	.type	default_bzfree.32,@function
default_bzfree.32:                      # @default_bzfree.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$373202228, -4(%rbp)    # imm = 0x163E9D34
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB72_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	free
.LBB72_2:                               # %if.end
	cmpl	$373202228, -4(%rbp)    # imm = 0x163E9D34
	jne	.LBB72_4
.LBB72_3:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_3
.Lfunc_end72:
	.size	default_bzfree.32, .Lfunc_end72-default_bzfree.32
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.33           # -- Begin function BZ2_bzRead.33
	.p2align	4, 0x90
	.type	BZ2_bzRead.33,@function
BZ2_bzRead.33:                          # @BZ2_bzRead.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1195264322, -44(%rbp)  # imm = 0x473E4942
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB73_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB73_2:                               # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB73_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB73_4:                               # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB73_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB73_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB73_12
.LBB73_7:                               # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB73_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB73_9:                               # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB73_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB73_11:                              # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB73_69
.LBB73_12:                              # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB73_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB73_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB73_15:                              # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB73_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB73_17:                              # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB73_69
.LBB73_18:                              # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB73_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB73_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB73_21:                              # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB73_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB73_23:                              # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB73_69
.LBB73_24:                              # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB73_25:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB73_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB73_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB73_28:                              # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB73_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB73_30:                              # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB73_69
.LBB73_31:                              # %if.end46
                                        #   in Loop: Header=BB73_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB73_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB73_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB73_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB73_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB73_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB73_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB73_36:                              # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB73_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB73_38:                              # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB73_69
.LBB73_39:                              # %if.end69
                                        #   in Loop: Header=BB73_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB73_40:                              # %if.end76
                                        #   in Loop: Header=BB73_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB73_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB73_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB73_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB73_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB73_44:                              # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB73_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB73_46:                              # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB73_69
.LBB73_47:                              # %if.end94
                                        #   in Loop: Header=BB73_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB73_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB73_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB73_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB73_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB73_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB73_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB73_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB73_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB73_53:                              # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB73_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB73_55:                              # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB73_69
.LBB73_56:                              # %if.end122
                                        #   in Loop: Header=BB73_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB73_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB73_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB73_59:                              # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB73_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB73_61:                              # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB73_69
.LBB73_62:                              # %if.end137
                                        #   in Loop: Header=BB73_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB73_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB73_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB73_65:                              # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB73_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB73_67:                              # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB73_69
.LBB73_68:                              # %if.end152
                                        #   in Loop: Header=BB73_25 Depth=1
	jmp	.LBB73_25
.LBB73_69:                              # %return
	movl	-28(%rbp), %ebx
	cmpl	$1195264322, -44(%rbp)  # imm = 0x473E4942
	jne	.LBB73_71
.LBB73_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_70
.Lfunc_end73:
	.size	BZ2_bzRead.33, .Lfunc_end73-BZ2_bzRead.33
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose.34      # -- Begin function BZ2_bzReadClose.34
	.p2align	4, 0x90
	.type	BZ2_bzReadClose.34,@function
BZ2_bzReadClose.34:                     # @BZ2_bzReadClose.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1157943145, -20(%rbp)  # imm = 0x4504CF69
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB74_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB74_2:                               # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB74_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB74_4:                               # %if.end3
	cmpq	$0, -8(%rbp)
	jne	.LBB74_10
# %bb.5:                                # %if.then5
	cmpq	$0, -16(%rbp)
	je	.LBB74_7
# %bb.6:                                # %if.then7
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB74_7:                               # %if.end8
	cmpq	$0, -8(%rbp)
	je	.LBB74_9
# %bb.8:                                # %if.then10
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB74_9:                               # %if.end12
	jmp	.LBB74_19
.LBB74_10:                              # %if.end13
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB74_16
# %bb.11:                               # %if.then14
	cmpq	$0, -16(%rbp)
	je	.LBB74_13
# %bb.12:                               # %if.then16
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB74_13:                              # %if.end17
	cmpq	$0, -8(%rbp)
	je	.LBB74_15
# %bb.14:                               # %if.then19
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB74_15:                              # %if.end21
	jmp	.LBB74_19
.LBB74_16:                              # %if.end22
	movq	-8(%rbp), %rax
	cmpb	$0, 5100(%rax)
	je	.LBB74_18
# %bb.17:                               # %if.then24
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompressEnd
.LBB74_18:                              # %if.end25
	movq	-8(%rbp), %rdi
	callq	free
.LBB74_19:                              # %return
	cmpl	$1157943145, -20(%rbp)  # imm = 0x4504CF69
	jne	.LBB74_21
.LBB74_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_20
.Lfunc_end74:
	.size	BZ2_bzReadClose.34, .Lfunc_end74-BZ2_bzReadClose.34
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.35
	.type	default_bzalloc.35,@function
default_bzalloc.35:                     # @default_bzalloc.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2074588443, -20(%rbp)  # imm = 0x7BA7B51B
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	-12(%rbp), %eax
	imull	-16(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$2074588443, -20(%rbp)  # imm = 0x7BA7B51B
	jne	.LBB75_2
.LBB75_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_1
.Lfunc_end75:
	.size	default_bzalloc.35, .Lfunc_end75-default_bzalloc.35
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.36          # -- Begin function BZ2_bzwrite.36
	.p2align	4, 0x90
	.type	BZ2_bzwrite.36,@function
BZ2_bzwrite.36:                         # @BZ2_bzwrite.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$397145979, -24(%rbp)   # imm = 0x17ABF77B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB76_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_3
.LBB76_2:                               # %if.else
	movl	$-1, -12(%rbp)
.LBB76_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$397145979, -24(%rbp)   # imm = 0x17ABF77B
	jne	.LBB76_5
.LBB76_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_4
.Lfunc_end76:
	.size	BZ2_bzwrite.36, .Lfunc_end76-BZ2_bzwrite.36
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzopen.37           # -- Begin function BZ2_bzopen.37
	.p2align	4, 0x90
	.type	BZ2_bzopen.37,@function
BZ2_bzopen.37:                          # @BZ2_bzopen.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1555641352, -12(%rbp)  # imm = 0x5CB93408
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	bzopen_or_bzdopen
	movq	%rax, %rbx
	cmpl	$1555641352, -12(%rbp)  # imm = 0x5CB93408
	jne	.LBB77_2
.LBB77_1:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_1
.Lfunc_end77:
	.size	BZ2_bzopen.37, .Lfunc_end77-BZ2_bzopen.37
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzfree.38
	.type	default_bzfree.38,@function
default_bzfree.38:                      # @default_bzfree.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1766143749, -4(%rbp)   # imm = 0x69453705
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB78_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	free
.LBB78_2:                               # %if.end
	cmpl	$1766143749, -4(%rbp)   # imm = 0x69453705
	jne	.LBB78_4
.LBB78_3:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_3
.Lfunc_end78:
	.size	default_bzfree.38, .Lfunc_end78-default_bzfree.38
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.39     # -- Begin function BZ2_bzDecompress.39
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.39,@function
BZ2_bzDecompress.39:                    # @BZ2_bzDecompress.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2083951730, -44(%rbp)  # imm = 0x7C369472
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB79_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB79_37
.LBB79_2:                               # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB79_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB79_37
.LBB79_4:                               # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB79_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB79_37
.LBB79_6:                               # %if.end7
	jmp	.LBB79_7
.LBB79_7:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB79_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB79_37
.LBB79_9:                               # %if.end11
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB79_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB79_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB79_13
.LBB79_12:                              # %if.else
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB79_13:                              # %if.end17
                                        #   in Loop: Header=BB79_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB79_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB79_37
.LBB79_15:                              # %if.end20
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB79_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB79_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB79_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB79_19:                              # %if.end29
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB79_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB79_21:                              # %if.end34
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB79_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB79_37
.LBB79_23:                              # %if.end39
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB79_25
.LBB79_24:                              # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB79_37
.LBB79_25:                              # %if.end46
                                        #   in Loop: Header=BB79_7 Depth=1
	jmp	.LBB79_26
.LBB79_26:                              # %if.end47
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB79_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB79_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB79_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB79_30:                              # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB79_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB79_37
.LBB79_32:                              # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_37
.LBB79_33:                              # %if.end65
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB79_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_37
.LBB79_35:                              # %if.end69
                                        #   in Loop: Header=BB79_7 Depth=1
	jmp	.LBB79_36
.LBB79_36:                              # %if.end70
                                        #   in Loop: Header=BB79_7 Depth=1
	jmp	.LBB79_7
.LBB79_37:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$2083951730, -44(%rbp)  # imm = 0x7C369472
	jne	.LBB79_39
.LBB79_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_39:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_38
.Lfunc_end79:
	.size	BZ2_bzDecompress.39, .Lfunc_end79-BZ2_bzDecompress.39
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd.40  # -- Begin function BZ2_bzDecompressEnd.40
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd.40,@function
BZ2_bzDecompressEnd.40:                 # @BZ2_bzDecompressEnd.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$7205418, -36(%rbp)     # imm = 0x6DF22A
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB80_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB80_13
.LBB80_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB80_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB80_13
.LBB80_4:                               # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB80_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB80_13
.LBB80_6:                               # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 3152(%rax)
	je	.LBB80_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3152(%rcx), %rsi
	callq	*%rax
.LBB80_8:                               # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB80_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3160(%rcx), %rsi
	callq	*%rax
.LBB80_10:                              # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 3168(%rax)
	je	.LBB80_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3168(%rcx), %rsi
	callq	*%rax
.LBB80_12:                              # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB80_13:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$7205418, -36(%rbp)     # imm = 0x6DF22A
	jne	.LBB80_15
.LBB80_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_15:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_14
.Lfunc_end80:
	.size	BZ2_bzDecompressEnd.40, .Lfunc_end80-BZ2_bzDecompressEnd.40
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.41
	.type	myfeof.41,@function
myfeof.41:                              # @myfeof.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1606693338, -20(%rbp)  # imm = 0x5FC431DA
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB81_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB81_3
.LBB81_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB81_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1606693338, -20(%rbp)  # imm = 0x5FC431DA
	jne	.LBB81_5
.LBB81_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_4
.Lfunc_end81:
	.size	myfeof.41, .Lfunc_end81-myfeof.41
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.42     # -- Begin function BZ2_bzDecompress.42
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.42,@function
BZ2_bzDecompress.42:                    # @BZ2_bzDecompress.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1265132626, -44(%rbp)  # imm = 0x4B686452
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB82_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB82_37
.LBB82_2:                               # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB82_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB82_37
.LBB82_4:                               # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB82_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB82_37
.LBB82_6:                               # %if.end7
	jmp	.LBB82_7
.LBB82_7:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB82_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB82_37
.LBB82_9:                               # %if.end11
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB82_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB82_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB82_13
.LBB82_12:                              # %if.else
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB82_13:                              # %if.end17
                                        #   in Loop: Header=BB82_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB82_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB82_37
.LBB82_15:                              # %if.end20
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB82_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB82_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB82_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB82_19:                              # %if.end29
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB82_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB82_21:                              # %if.end34
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB82_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB82_37
.LBB82_23:                              # %if.end39
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB82_25
.LBB82_24:                              # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB82_37
.LBB82_25:                              # %if.end46
                                        #   in Loop: Header=BB82_7 Depth=1
	jmp	.LBB82_26
.LBB82_26:                              # %if.end47
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB82_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB82_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB82_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB82_30:                              # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB82_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB82_37
.LBB82_32:                              # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_37
.LBB82_33:                              # %if.end65
                                        #   in Loop: Header=BB82_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB82_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_37
.LBB82_35:                              # %if.end69
                                        #   in Loop: Header=BB82_7 Depth=1
	jmp	.LBB82_36
.LBB82_36:                              # %if.end70
                                        #   in Loop: Header=BB82_7 Depth=1
	jmp	.LBB82_7
.LBB82_37:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$1265132626, -44(%rbp)  # imm = 0x4B686452
	jne	.LBB82_39
.LBB82_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_39:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_38
.Lfunc_end82:
	.size	BZ2_bzDecompress.42, .Lfunc_end82-BZ2_bzDecompress.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block.43
	.type	add_pair_to_block.43,@function
add_pair_to_block.43:                   # @add_pair_to_block.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1379160591, -24(%rbp)  # imm = 0x5234520F
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -1(%rbp)
	movl	$0, -20(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	96(%rcx), %eax
	jge	.LBB83_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-1(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_1
.LBB83_4:                               # %for.end
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movb	$1, 128(%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB83_7
	jmp	.LBB83_5
.LBB83_5:                               # %for.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB83_8
	jmp	.LBB83_6
.LBB83_6:                               # %for.end
	subl	$3, %eax
	je	.LBB83_9
	jmp	.LBB83_10
.LBB83_7:                               # %sw.bb
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB83_11
.LBB83_8:                               # %sw.bb14
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB83_11
.LBB83_9:                               # %sw.bb27
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB83_11
.LBB83_10:                              # %sw.default
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	96(%rcx), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	$1, 128(%rax,%rcx)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	subl	$4, %eax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
.LBB83_11:                              # %sw.epilog
	cmpl	$1379160591, -24(%rbp)  # imm = 0x5234520F
	jne	.LBB83_13
.LBB83_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_12
.Lfunc_end83:
	.size	add_pair_to_block.43, .Lfunc_end83-add_pair_to_block.43
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.44          # -- Begin function BZ2_bzWrite.44
	.p2align	4, 0x90
	.type	BZ2_bzWrite.44,@function
BZ2_bzWrite.44:                         # @BZ2_bzWrite.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1074297998, -32(%rbp)  # imm = 0x40087C8E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB84_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB84_2:                               # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB84_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB84_4:                               # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB84_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB84_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -24(%rbp)
	jge	.LBB84_12
.LBB84_7:                               # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB84_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB84_9:                               # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB84_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB84_11:                              # %if.end15
	jmp	.LBB84_53
.LBB84_12:                              # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB84_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB84_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB84_15:                              # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB84_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB84_17:                              # %if.end24
	jmp	.LBB84_53
.LBB84_18:                              # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB84_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB84_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB84_21:                              # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB84_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB84_23:                              # %if.end34
	jmp	.LBB84_53
.LBB84_24:                              # %if.end35
	cmpl	$0, -24(%rbp)
	jne	.LBB84_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB84_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB84_27:                              # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB84_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB84_29:                              # %if.end44
	jmp	.LBB84_53
.LBB84_30:                              # %if.end45
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB84_31:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$1, -20(%rbp)
	je	.LBB84_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB84_34
# %bb.33:                               # %if.then55
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB84_34:                              # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB84_36
# %bb.35:                               # %if.then58
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB84_36:                              # %if.end60
	jmp	.LBB84_53
.LBB84_37:                              # %if.end61
                                        #   in Loop: Header=BB84_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB84_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB84_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB84_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB84_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB84_45
.LBB84_40:                              # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB84_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB84_42:                              # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB84_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB84_44:                              # %if.end88
	jmp	.LBB84_53
.LBB84_45:                              # %if.end89
                                        #   in Loop: Header=BB84_31 Depth=1
	jmp	.LBB84_46
.LBB84_46:                              # %if.end90
                                        #   in Loop: Header=BB84_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB84_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB84_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB84_49:                              # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB84_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB84_51:                              # %if.end104
	jmp	.LBB84_53
.LBB84_52:                              # %if.end105
                                        #   in Loop: Header=BB84_31 Depth=1
	jmp	.LBB84_31
.LBB84_53:                              # %return
	cmpl	$1074297998, -32(%rbp)  # imm = 0x40087C8E
	jne	.LBB84_55
.LBB84_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_55:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_54
.Lfunc_end84:
	.size	BZ2_bzWrite.44, .Lfunc_end84-BZ2_bzWrite.44
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror.45          # -- Begin function BZ2_bzerror.45
	.p2align	4, 0x90
	.type	BZ2_bzerror.45,@function
BZ2_bzerror.45:                         # @BZ2_bzerror.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1466317512, -16(%rbp)  # imm = 0x57663AC8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	5096(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.LBB85_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB85_2:                               # %if.end
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	imull	$-1, -12(%rbp), %eax
	cltq
	movq	bzerrorstrings(,%rax,8), %rbx
	cmpl	$1466317512, -16(%rbp)  # imm = 0x57663AC8
	jne	.LBB85_4
.LBB85_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_3
.Lfunc_end85:
	.size	BZ2_bzerror.45, .Lfunc_end85-BZ2_bzerror.45
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd.46  # -- Begin function BZ2_bzDecompressEnd.46
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd.46,@function
BZ2_bzDecompressEnd.46:                 # @BZ2_bzDecompressEnd.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1908242799, -36(%rbp)  # imm = 0x71BD796F
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB86_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB86_13
.LBB86_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB86_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB86_13
.LBB86_4:                               # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB86_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB86_13
.LBB86_6:                               # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 3152(%rax)
	je	.LBB86_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3152(%rcx), %rsi
	callq	*%rax
.LBB86_8:                               # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB86_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3160(%rcx), %rsi
	callq	*%rax
.LBB86_10:                              # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 3168(%rax)
	je	.LBB86_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3168(%rcx), %rsi
	callq	*%rax
.LBB86_12:                              # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB86_13:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1908242799, -36(%rbp)  # imm = 0x71BD796F
	jne	.LBB86_15
.LBB86_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_15:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_14
.Lfunc_end86:
	.size	BZ2_bzDecompressEnd.46, .Lfunc_end86-BZ2_bzDecompressEnd.46
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.47 # -- Begin function BZ2_bzDecompressInit.47
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.47,@function
BZ2_bzDecompressInit.47:                # @BZ2_bzDecompressInit.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$244548373, -40(%rbp)   # imm = 0xE938315
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB87_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB87_17
.LBB87_2:                               # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB87_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB87_17
.LBB87_4:                               # %if.end2
	cmpl	$0, -32(%rbp)
	je	.LBB87_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -32(%rbp)
	je	.LBB87_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB87_17
.LBB87_7:                               # %if.end6
	cmpl	$0, -36(%rbp)
	jl	.LBB87_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -36(%rbp)
	jle	.LBB87_10
.LBB87_9:                               # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB87_17
.LBB87_10:                              # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB87_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB87_12:                              # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB87_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB87_14:                              # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB87_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB87_17
.LBB87_16:                              # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB87_17:                              # %return
	movl	-28(%rbp), %ebx
	cmpl	$244548373, -40(%rbp)   # imm = 0xE938315
	jne	.LBB87_19
.LBB87_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_19:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_18
.Lfunc_end87:
	.size	BZ2_bzDecompressInit.47, .Lfunc_end87-BZ2_bzDecompressInit.47
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.48 # -- Begin function BZ2_bzBuffToBuffDecompress.48
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.48,@function
BZ2_bzBuffToBuffDecompress.48:          # @BZ2_bzBuffToBuffDecompress.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$775238927, -36(%rbp)   # imm = 0x2E35350F
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -20(%rbp)
	movl	%r9d, -24(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB88_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB88_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB88_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -20(%rbp)
	je	.LBB88_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -20(%rbp)
	jne	.LBB88_7
.LBB88_5:                               # %lor.lhs.false7
	cmpl	$0, -24(%rbp)
	jl	.LBB88_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -24(%rbp)
	jle	.LBB88_8
.LBB88_7:                               # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB88_19
.LBB88_8:                               # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB88_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_19
.LBB88_10:                              # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB88_12
# %bb.11:                               # %if.then16
	jmp	.LBB88_15
.LBB88_12:                              # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB88_14
# %bb.13:                               # %if.then19
	jmp	.LBB88_18
.LBB88_14:                              # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB88_19
.LBB88_15:                              # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB88_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB88_19
.LBB88_17:                              # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB88_19
.LBB88_18:                              # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB88_19:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$775238927, -36(%rbp)   # imm = 0x2E35350F
	jne	.LBB88_21
.LBB88_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_20
.Lfunc_end88:
	.size	BZ2_bzBuffToBuffDecompress.48, .Lfunc_end88-BZ2_bzBuffToBuffDecompress.48
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.49           # -- Begin function BZ2_bzread.49
	.p2align	4, 0x90
	.type	BZ2_bzread.49,@function
BZ2_bzread.49:                          # @BZ2_bzread.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$264027245, -24(%rbp)   # imm = 0xFBCBC6D
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -28(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB89_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB89_6
.LBB89_2:                               # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-28(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -20(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB89_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB89_5
.LBB89_4:                               # %if.then3
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_6
.LBB89_5:                               # %if.else
	movl	$-1, -12(%rbp)
.LBB89_6:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$264027245, -24(%rbp)   # imm = 0xFBCBC6D
	jne	.LBB89_8
.LBB89_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_7
.Lfunc_end89:
	.size	BZ2_bzread.49, .Lfunc_end89-BZ2_bzread.49
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.50          # -- Begin function BZ2_bzWrite.50
	.p2align	4, 0x90
	.type	BZ2_bzWrite.50,@function
BZ2_bzWrite.50:                         # @BZ2_bzWrite.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$700680836, -32(%rbp)   # imm = 0x29C38A84
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB90_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB90_2:                               # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB90_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB90_4:                               # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB90_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB90_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -24(%rbp)
	jge	.LBB90_12
.LBB90_7:                               # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB90_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB90_9:                               # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB90_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB90_11:                              # %if.end15
	jmp	.LBB90_53
.LBB90_12:                              # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB90_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB90_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB90_15:                              # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB90_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB90_17:                              # %if.end24
	jmp	.LBB90_53
.LBB90_18:                              # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB90_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB90_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB90_21:                              # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB90_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB90_23:                              # %if.end34
	jmp	.LBB90_53
.LBB90_24:                              # %if.end35
	cmpl	$0, -24(%rbp)
	jne	.LBB90_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB90_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB90_27:                              # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB90_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB90_29:                              # %if.end44
	jmp	.LBB90_53
.LBB90_30:                              # %if.end45
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB90_31:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$1, -20(%rbp)
	je	.LBB90_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB90_34
# %bb.33:                               # %if.then55
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB90_34:                              # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB90_36
# %bb.35:                               # %if.then58
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB90_36:                              # %if.end60
	jmp	.LBB90_53
.LBB90_37:                              # %if.end61
                                        #   in Loop: Header=BB90_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB90_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB90_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB90_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB90_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB90_45
.LBB90_40:                              # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB90_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB90_42:                              # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB90_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB90_44:                              # %if.end88
	jmp	.LBB90_53
.LBB90_45:                              # %if.end89
                                        #   in Loop: Header=BB90_31 Depth=1
	jmp	.LBB90_46
.LBB90_46:                              # %if.end90
                                        #   in Loop: Header=BB90_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB90_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB90_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB90_49:                              # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB90_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB90_51:                              # %if.end104
	jmp	.LBB90_53
.LBB90_52:                              # %if.end105
                                        #   in Loop: Header=BB90_31 Depth=1
	jmp	.LBB90_31
.LBB90_53:                              # %return
	cmpl	$700680836, -32(%rbp)   # imm = 0x29C38A84
	jne	.LBB90_55
.LBB90_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_55:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_54
.Lfunc_end90:
	.size	BZ2_bzWrite.50, .Lfunc_end90-BZ2_bzWrite.50
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.51
	.type	handle_compress.51,@function
handle_compress.51:                     # @handle_compress.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$877728135, -28(%rbp)   # imm = 0x34511187
	movq	%rdi, -40(%rbp)
	movb	$0, -10(%rbp)
	movb	$0, -9(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB91_1:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB91_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB91_4
# %bb.3:                                # %if.then6
	jmp	.LBB91_25
.LBB91_4:                               # %if.end
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB91_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB91_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB91_8
# %bb.7:                                # %if.then14
	jmp	.LBB91_25
.LBB91_8:                               # %if.end15
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB91_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB91_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB91_12
# %bb.11:                               # %if.then28
	jmp	.LBB91_25
.LBB91_12:                              # %if.end29
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_13
.LBB91_13:                              # %if.end30
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB91_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB91_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB91_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB91_23
.LBB91_17:                              # %if.else
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB91_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB91_22
.LBB91_19:                              # %if.else57
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB91_21
# %bb.20:                               # %if.then61
	jmp	.LBB91_25
.LBB91_21:                              # %if.end62
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_22
.LBB91_22:                              # %if.end63
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_23
.LBB91_23:                              # %if.end64
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_24
.LBB91_24:                              # %if.end65
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_1
.LBB91_25:                              # %while.end
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB91_27
# %bb.26:                               # %lor.rhs
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB91_27:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$877728135, -28(%rbp)   # imm = 0x34511187
	jne	.LBB91_29
.LBB91_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_28
.Lfunc_end91:
	.size	handle_compress.51, .Lfunc_end91-handle_compress.51
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block.52
	.type	add_pair_to_block.52,@function
add_pair_to_block.52:                   # @add_pair_to_block.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1790443065, -24(%rbp)  # imm = 0x6AB7FE39
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -1(%rbp)
	movl	$0, -20(%rbp)
.LBB92_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	96(%rcx), %eax
	jge	.LBB92_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB92_1 Depth=1
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-1(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_1
.LBB92_4:                               # %for.end
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movb	$1, 128(%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB92_7
	jmp	.LBB92_5
.LBB92_5:                               # %for.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB92_8
	jmp	.LBB92_6
.LBB92_6:                               # %for.end
	subl	$3, %eax
	je	.LBB92_9
	jmp	.LBB92_10
.LBB92_7:                               # %sw.bb
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB92_11
.LBB92_8:                               # %sw.bb14
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB92_11
.LBB92_9:                               # %sw.bb27
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB92_11
.LBB92_10:                              # %sw.default
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	96(%rcx), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	$1, 128(%rax,%rcx)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	subl	$4, %eax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
.LBB92_11:                              # %sw.epilog
	cmpl	$1790443065, -24(%rbp)  # imm = 0x6AB7FE39
	jne	.LBB92_13
.LBB92_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_12
.Lfunc_end92:
	.size	add_pair_to_block.52, .Lfunc_end92-add_pair_to_block.52
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzopen.53           # -- Begin function BZ2_bzopen.53
	.p2align	4, 0x90
	.type	BZ2_bzopen.53,@function
BZ2_bzopen.53:                          # @BZ2_bzopen.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1618156759, -12(%rbp)  # imm = 0x60731CD7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rdx
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	bzopen_or_bzdopen
	movq	%rax, %rbx
	cmpl	$1618156759, -12(%rbp)  # imm = 0x60731CD7
	jne	.LBB93_2
.LBB93_1:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_1
.Lfunc_end93:
	.size	BZ2_bzopen.53, .Lfunc_end93-BZ2_bzopen.53
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.54 # -- Begin function BZ2_bzBuffToBuffCompress.54
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.54,@function
BZ2_bzBuffToBuffCompress.54:            # @BZ2_bzBuffToBuffCompress.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$2004840552, -36(%rbp)  # imm = 0x777F7068
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB94_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB94_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB94_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB94_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB94_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB94_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB94_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB94_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB94_10
.LBB94_9:                               # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB94_21
.LBB94_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB94_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB94_12:                              # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB94_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_21
.LBB94_14:                              # %if.end21
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB94_16
# %bb.15:                               # %if.then24
	jmp	.LBB94_19
.LBB94_16:                              # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB94_18
# %bb.17:                               # %if.then27
	jmp	.LBB94_20
.LBB94_18:                              # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB94_21
.LBB94_19:                              # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB94_21
.LBB94_20:                              # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB94_21:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$2004840552, -36(%rbp)  # imm = 0x777F7068
	jne	.LBB94_23
.LBB94_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_22
.Lfunc_end94:
	.size	BZ2_bzBuffToBuffCompress.54, .Lfunc_end94-BZ2_bzBuffToBuffCompress.54
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.55           # -- Begin function BZ2_bzRead.55
	.p2align	4, 0x90
	.type	BZ2_bzRead.55,@function
BZ2_bzRead.55:                          # @BZ2_bzRead.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1047462101, -44(%rbp)  # imm = 0x3E6F00D5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB95_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB95_2:                               # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB95_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB95_4:                               # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB95_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB95_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB95_12
.LBB95_7:                               # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB95_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB95_9:                               # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB95_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB95_11:                              # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB95_69
.LBB95_12:                              # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB95_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB95_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB95_15:                              # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB95_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB95_17:                              # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB95_69
.LBB95_18:                              # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB95_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB95_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB95_21:                              # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB95_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB95_23:                              # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB95_69
.LBB95_24:                              # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB95_25:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB95_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB95_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB95_28:                              # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB95_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB95_30:                              # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB95_69
.LBB95_31:                              # %if.end46
                                        #   in Loop: Header=BB95_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB95_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB95_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB95_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB95_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB95_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB95_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB95_36:                              # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB95_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB95_38:                              # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB95_69
.LBB95_39:                              # %if.end69
                                        #   in Loop: Header=BB95_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB95_40:                              # %if.end76
                                        #   in Loop: Header=BB95_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB95_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB95_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB95_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB95_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB95_44:                              # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB95_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB95_46:                              # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB95_69
.LBB95_47:                              # %if.end94
                                        #   in Loop: Header=BB95_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB95_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB95_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB95_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB95_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB95_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB95_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB95_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB95_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB95_53:                              # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB95_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB95_55:                              # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB95_69
.LBB95_56:                              # %if.end122
                                        #   in Loop: Header=BB95_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB95_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB95_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB95_59:                              # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB95_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB95_61:                              # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB95_69
.LBB95_62:                              # %if.end137
                                        #   in Loop: Header=BB95_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB95_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB95_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB95_65:                              # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB95_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB95_67:                              # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB95_69
.LBB95_68:                              # %if.end152
                                        #   in Loop: Header=BB95_25 Depth=1
	jmp	.LBB95_25
.LBB95_69:                              # %return
	movl	-28(%rbp), %ebx
	cmpl	$1047462101, -44(%rbp)  # imm = 0x3E6F00D5
	jne	.LBB95_71
.LBB95_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_70
.Lfunc_end95:
	.size	BZ2_bzRead.55, .Lfunc_end95-BZ2_bzRead.55
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.56
	.type	copy_input_until_stop.56,@function
copy_input_until_stop.56:               # @copy_input_until_stop.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$403466258, -32(%rbp)   # imm = 0x180C6812
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB96_20
# %bb.1:                                # %if.then
	jmp	.LBB96_2
.LBB96_2:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB96_4
# %bb.3:                                # %if.then2
	jmp	.LBB96_19
.LBB96_4:                               # %if.end
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB96_6
# %bb.5:                                # %if.then4
	jmp	.LBB96_19
.LBB96_6:                               # %if.end5
                                        #   in Loop: Header=BB96_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB96_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB96_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB96_16
.LBB96_9:                               # %if.else
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB96_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB96_14
.LBB96_11:                              # %if.then32
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB96_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB96_13:                              # %if.end37
                                        #   in Loop: Header=BB96_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB96_15
.LBB96_14:                              # %if.else40
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB96_15:                              # %if.end43
                                        #   in Loop: Header=BB96_2 Depth=1
	jmp	.LBB96_16
.LBB96_16:                              # %if.end44
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB96_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB96_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB96_18:                              # %if.end58
                                        #   in Loop: Header=BB96_2 Depth=1
	jmp	.LBB96_2
.LBB96_19:                              # %while.end
	jmp	.LBB96_41
.LBB96_20:                              # %if.else59
	jmp	.LBB96_21
.LBB96_21:                              # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB96_23
# %bb.22:                               # %if.then65
	jmp	.LBB96_40
.LBB96_23:                              # %if.end66
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB96_25
# %bb.24:                               # %if.then71
	jmp	.LBB96_40
.LBB96_25:                              # %if.end72
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB96_27
# %bb.26:                               # %if.then75
	jmp	.LBB96_40
.LBB96_27:                              # %if.end76
                                        #   in Loop: Header=BB96_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB96_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB96_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB96_37
.LBB96_30:                              # %if.else113
                                        #   in Loop: Header=BB96_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB96_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB96_35
.LBB96_32:                              # %if.then121
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB96_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB96_34:                              # %if.end126
                                        #   in Loop: Header=BB96_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB96_36
.LBB96_35:                              # %if.else129
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB96_36:                              # %if.end132
                                        #   in Loop: Header=BB96_21 Depth=1
	jmp	.LBB96_37
.LBB96_37:                              # %if.end133
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB96_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB96_39:                              # %if.end151
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB96_21
.LBB96_40:                              # %while.end154
	jmp	.LBB96_41
.LBB96_41:                              # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$403466258, -32(%rbp)   # imm = 0x180C6812
	jne	.LBB96_43
.LBB96_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_42
.Lfunc_end96:
	.size	copy_input_until_stop.56, .Lfunc_end96-copy_input_until_stop.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_SMALL.57
	.type	unRLE_obuf_to_output_SMALL.57,@function
unRLE_obuf_to_output_SMALL.57:          # @unRLE_obuf_to_output_SMALL.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1306981151, -32(%rbp)  # imm = 0x4DE6F31F
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB97_48
# %bb.1:                                # %if.then
	jmp	.LBB97_2
.LBB97_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_3 Depth 2
	jmp	.LBB97_3
.LBB97_3:                               # %while.body2
                                        #   Parent Loop BB97_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB97_5
# %bb.4:                                # %if.then3
	movb	$0, -25(%rbp)
	jmp	.LBB97_75
.LBB97_5:                               # %if.end
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB97_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_10
.LBB97_7:                               # %if.end6
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB97_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB97_9:                               # %if.end26
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_3
.LBB97_10:                              # %while.end
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_12
# %bb.11:                               # %if.then29
	movb	$0, -25(%rbp)
	jmp	.LBB97_75
.LBB97_12:                              # %if.end30
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB97_14
# %bb.13:                               # %if.then36
	movb	$1, -25(%rbp)
	jmp	.LBB97_75
.LBB97_14:                              # %if.end37
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB97_18
# %bb.15:                               # %if.then59
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB97_17
# %bb.16:                               # %if.then68
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB97_17:                              # %if.end70
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_18
.LBB97_18:                              # %if.end71
                                        #   in Loop: Header=BB97_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_21
# %bb.19:                               # %if.then87
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_20
.LBB97_20:                              # %while.body.backedge
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_2
.LBB97_21:                              # %if.end88
                                        #   in Loop: Header=BB97_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB97_23
# %bb.22:                               # %if.then93
                                        #   in Loop: Header=BB97_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB97_20
.LBB97_23:                              # %if.end96
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB97_27
# %bb.24:                               # %if.then125
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB97_26
# %bb.25:                               # %if.then135
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB97_26:                              # %if.end137
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_27
.LBB97_27:                              # %if.end138
                                        #   in Loop: Header=BB97_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_29
# %bb.28:                               # %if.then155
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_20
.LBB97_29:                              # %if.end156
                                        #   in Loop: Header=BB97_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB97_31
# %bb.30:                               # %if.then161
                                        #   in Loop: Header=BB97_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB97_20
.LBB97_31:                              # %if.end164
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB97_35
# %bb.32:                               # %if.then193
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB97_34
# %bb.33:                               # %if.then203
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB97_34:                              # %if.end205
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_35
.LBB97_35:                              # %if.end206
                                        #   in Loop: Header=BB97_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_37
# %bb.36:                               # %if.then223
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_20
.LBB97_37:                              # %if.end224
                                        #   in Loop: Header=BB97_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB97_39
# %bb.38:                               # %if.then229
                                        #   in Loop: Header=BB97_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB97_20
.LBB97_39:                              # %if.end232
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB97_43
# %bb.40:                               # %if.then260
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB97_42
# %bb.41:                               # %if.then270
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB97_42:                              # %if.end272
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_43
.LBB97_43:                              # %if.end273
                                        #   in Loop: Header=BB97_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB97_47
# %bb.44:                               # %if.then315
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB97_46
# %bb.45:                               # %if.then325
                                        #   in Loop: Header=BB97_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB97_46:                              # %if.end327
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_47
.LBB97_47:                              # %if.end328
                                        #   in Loop: Header=BB97_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB97_20
.LBB97_48:                              # %if.else
	jmp	.LBB97_49
.LBB97_49:                              # %while.body339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_50 Depth 2
	jmp	.LBB97_50
.LBB97_50:                              # %while.body341
                                        #   Parent Loop BB97_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB97_52
# %bb.51:                               # %if.then346
	movb	$0, -25(%rbp)
	jmp	.LBB97_75
.LBB97_52:                              # %if.end347
                                        #   in Loop: Header=BB97_50 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB97_54
# %bb.53:                               # %if.then351
                                        #   in Loop: Header=BB97_49 Depth=1
	jmp	.LBB97_57
.LBB97_54:                              # %if.end352
                                        #   in Loop: Header=BB97_50 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB97_56
# %bb.55:                               # %if.then382
                                        #   in Loop: Header=BB97_50 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB97_56:                              # %if.end386
                                        #   in Loop: Header=BB97_50 Depth=2
	jmp	.LBB97_50
.LBB97_57:                              # %while.end387
                                        #   in Loop: Header=BB97_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_59
# %bb.58:                               # %if.then393
	movb	$0, -25(%rbp)
	jmp	.LBB97_75
.LBB97_59:                              # %if.end394
                                        #   in Loop: Header=BB97_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB97_61
# %bb.60:                               # %if.then400
	movb	$1, -25(%rbp)
	jmp	.LBB97_75
.LBB97_61:                              # %if.end401
                                        #   in Loop: Header=BB97_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_64
# %bb.62:                               # %if.then437
                                        #   in Loop: Header=BB97_49 Depth=1
	jmp	.LBB97_63
.LBB97_63:                              # %while.body339.backedge
                                        #   in Loop: Header=BB97_49 Depth=1
	jmp	.LBB97_49
.LBB97_64:                              # %if.end438
                                        #   in Loop: Header=BB97_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB97_66
# %bb.65:                               # %if.then443
                                        #   in Loop: Header=BB97_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB97_63
.LBB97_66:                              # %if.end446
                                        #   in Loop: Header=BB97_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_68
# %bb.67:                               # %if.then479
                                        #   in Loop: Header=BB97_49 Depth=1
	jmp	.LBB97_63
.LBB97_68:                              # %if.end480
                                        #   in Loop: Header=BB97_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB97_70
# %bb.69:                               # %if.then485
                                        #   in Loop: Header=BB97_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB97_63
.LBB97_70:                              # %if.end488
                                        #   in Loop: Header=BB97_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_72
# %bb.71:                               # %if.then521
                                        #   in Loop: Header=BB97_49 Depth=1
	jmp	.LBB97_63
.LBB97_72:                              # %if.end522
                                        #   in Loop: Header=BB97_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB97_74
# %bb.73:                               # %if.then527
                                        #   in Loop: Header=BB97_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB97_63
.LBB97_74:                              # %if.end530
                                        #   in Loop: Header=BB97_49 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB97_63
.LBB97_75:                              # %return
	movb	-25(%rbp), %bl
	cmpl	$1306981151, -32(%rbp)  # imm = 0x4DE6F31F
	jne	.LBB97_77
.LBB97_76:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_76
.Lfunc_end97:
	.size	unRLE_obuf_to_output_SMALL.57, .Lfunc_end97-unRLE_obuf_to_output_SMALL.57
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.58     # -- Begin function BZ2_bzDecompress.58
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.58,@function
BZ2_bzDecompress.58:                    # @BZ2_bzDecompress.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$281869483, -44(%rbp)   # imm = 0x10CCFCAB
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB98_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB98_37
.LBB98_2:                               # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB98_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB98_37
.LBB98_4:                               # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB98_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB98_37
.LBB98_6:                               # %if.end7
	jmp	.LBB98_7
.LBB98_7:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB98_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB98_37
.LBB98_9:                               # %if.end11
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB98_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB98_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB98_13
.LBB98_12:                              # %if.else
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB98_13:                              # %if.end17
                                        #   in Loop: Header=BB98_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB98_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB98_37
.LBB98_15:                              # %if.end20
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB98_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB98_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB98_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB98_19:                              # %if.end29
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB98_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB98_21:                              # %if.end34
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB98_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB98_37
.LBB98_23:                              # %if.end39
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB98_25
.LBB98_24:                              # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB98_37
.LBB98_25:                              # %if.end46
                                        #   in Loop: Header=BB98_7 Depth=1
	jmp	.LBB98_26
.LBB98_26:                              # %if.end47
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB98_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB98_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB98_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB98_30:                              # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB98_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB98_37
.LBB98_32:                              # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_37
.LBB98_33:                              # %if.end65
                                        #   in Loop: Header=BB98_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB98_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_37
.LBB98_35:                              # %if.end69
                                        #   in Loop: Header=BB98_7 Depth=1
	jmp	.LBB98_36
.LBB98_36:                              # %if.end70
                                        #   in Loop: Header=BB98_7 Depth=1
	jmp	.LBB98_7
.LBB98_37:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$281869483, -44(%rbp)   # imm = 0x10CCFCAB
	jne	.LBB98_39
.LBB98_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_39:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_38
.Lfunc_end98:
	.size	BZ2_bzDecompress.58, .Lfunc_end98-BZ2_bzDecompress.58
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_SMALL.59
	.type	unRLE_obuf_to_output_SMALL.59,@function
unRLE_obuf_to_output_SMALL.59:          # @unRLE_obuf_to_output_SMALL.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1549879390, -32(%rbp)  # imm = 0x5C61485E
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB99_48
# %bb.1:                                # %if.then
	jmp	.LBB99_2
.LBB99_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_3 Depth 2
	jmp	.LBB99_3
.LBB99_3:                               # %while.body2
                                        #   Parent Loop BB99_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB99_5
# %bb.4:                                # %if.then3
	movb	$0, -25(%rbp)
	jmp	.LBB99_75
.LBB99_5:                               # %if.end
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB99_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_10
.LBB99_7:                               # %if.end6
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB99_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB99_9:                               # %if.end26
                                        #   in Loop: Header=BB99_3 Depth=2
	jmp	.LBB99_3
.LBB99_10:                              # %while.end
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB99_12
# %bb.11:                               # %if.then29
	movb	$0, -25(%rbp)
	jmp	.LBB99_75
.LBB99_12:                              # %if.end30
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB99_14
# %bb.13:                               # %if.then36
	movb	$1, -25(%rbp)
	jmp	.LBB99_75
.LBB99_14:                              # %if.end37
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB99_18
# %bb.15:                               # %if.then59
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB99_17
# %bb.16:                               # %if.then68
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB99_17:                              # %if.end70
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_18
.LBB99_18:                              # %if.end71
                                        #   in Loop: Header=BB99_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB99_21
# %bb.19:                               # %if.then87
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_20
.LBB99_20:                              # %while.body.backedge
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_2
.LBB99_21:                              # %if.end88
                                        #   in Loop: Header=BB99_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB99_23
# %bb.22:                               # %if.then93
                                        #   in Loop: Header=BB99_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB99_20
.LBB99_23:                              # %if.end96
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB99_27
# %bb.24:                               # %if.then125
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB99_26
# %bb.25:                               # %if.then135
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB99_26:                              # %if.end137
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_27
.LBB99_27:                              # %if.end138
                                        #   in Loop: Header=BB99_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB99_29
# %bb.28:                               # %if.then155
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_20
.LBB99_29:                              # %if.end156
                                        #   in Loop: Header=BB99_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB99_31
# %bb.30:                               # %if.then161
                                        #   in Loop: Header=BB99_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB99_20
.LBB99_31:                              # %if.end164
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB99_35
# %bb.32:                               # %if.then193
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB99_34
# %bb.33:                               # %if.then203
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB99_34:                              # %if.end205
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_35
.LBB99_35:                              # %if.end206
                                        #   in Loop: Header=BB99_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB99_37
# %bb.36:                               # %if.then223
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_20
.LBB99_37:                              # %if.end224
                                        #   in Loop: Header=BB99_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB99_39
# %bb.38:                               # %if.then229
                                        #   in Loop: Header=BB99_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB99_20
.LBB99_39:                              # %if.end232
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB99_43
# %bb.40:                               # %if.then260
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB99_42
# %bb.41:                               # %if.then270
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB99_42:                              # %if.end272
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_43
.LBB99_43:                              # %if.end273
                                        #   in Loop: Header=BB99_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB99_47
# %bb.44:                               # %if.then315
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB99_46
# %bb.45:                               # %if.then325
                                        #   in Loop: Header=BB99_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB99_46:                              # %if.end327
                                        #   in Loop: Header=BB99_2 Depth=1
	jmp	.LBB99_47
.LBB99_47:                              # %if.end328
                                        #   in Loop: Header=BB99_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB99_20
.LBB99_48:                              # %if.else
	jmp	.LBB99_49
.LBB99_49:                              # %while.body339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_50 Depth 2
	jmp	.LBB99_50
.LBB99_50:                              # %while.body341
                                        #   Parent Loop BB99_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB99_52
# %bb.51:                               # %if.then346
	movb	$0, -25(%rbp)
	jmp	.LBB99_75
.LBB99_52:                              # %if.end347
                                        #   in Loop: Header=BB99_50 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB99_54
# %bb.53:                               # %if.then351
                                        #   in Loop: Header=BB99_49 Depth=1
	jmp	.LBB99_57
.LBB99_54:                              # %if.end352
                                        #   in Loop: Header=BB99_50 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB99_56
# %bb.55:                               # %if.then382
                                        #   in Loop: Header=BB99_50 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB99_56:                              # %if.end386
                                        #   in Loop: Header=BB99_50 Depth=2
	jmp	.LBB99_50
.LBB99_57:                              # %while.end387
                                        #   in Loop: Header=BB99_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB99_59
# %bb.58:                               # %if.then393
	movb	$0, -25(%rbp)
	jmp	.LBB99_75
.LBB99_59:                              # %if.end394
                                        #   in Loop: Header=BB99_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB99_61
# %bb.60:                               # %if.then400
	movb	$1, -25(%rbp)
	jmp	.LBB99_75
.LBB99_61:                              # %if.end401
                                        #   in Loop: Header=BB99_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB99_64
# %bb.62:                               # %if.then437
                                        #   in Loop: Header=BB99_49 Depth=1
	jmp	.LBB99_63
.LBB99_63:                              # %while.body339.backedge
                                        #   in Loop: Header=BB99_49 Depth=1
	jmp	.LBB99_49
.LBB99_64:                              # %if.end438
                                        #   in Loop: Header=BB99_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB99_66
# %bb.65:                               # %if.then443
                                        #   in Loop: Header=BB99_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB99_63
.LBB99_66:                              # %if.end446
                                        #   in Loop: Header=BB99_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB99_68
# %bb.67:                               # %if.then479
                                        #   in Loop: Header=BB99_49 Depth=1
	jmp	.LBB99_63
.LBB99_68:                              # %if.end480
                                        #   in Loop: Header=BB99_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB99_70
# %bb.69:                               # %if.then485
                                        #   in Loop: Header=BB99_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB99_63
.LBB99_70:                              # %if.end488
                                        #   in Loop: Header=BB99_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB99_72
# %bb.71:                               # %if.then521
                                        #   in Loop: Header=BB99_49 Depth=1
	jmp	.LBB99_63
.LBB99_72:                              # %if.end522
                                        #   in Loop: Header=BB99_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB99_74
# %bb.73:                               # %if.then527
                                        #   in Loop: Header=BB99_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB99_63
.LBB99_74:                              # %if.end530
                                        #   in Loop: Header=BB99_49 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB99_63
.LBB99_75:                              # %return
	movb	-25(%rbp), %bl
	cmpl	$1549879390, -32(%rbp)  # imm = 0x5C61485E
	jne	.LBB99_77
.LBB99_76:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_76
.Lfunc_end99:
	.size	unRLE_obuf_to_output_SMALL.59, .Lfunc_end99-unRLE_obuf_to_output_SMALL.59
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.60 # -- Begin function BZ2_bzDecompressInit.60
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.60,@function
BZ2_bzDecompressInit.60:                # @BZ2_bzDecompressInit.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$879331537, -40(%rbp)   # imm = 0x346988D1
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB100_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB100_17
.LBB100_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB100_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB100_17
.LBB100_4:                              # %if.end2
	cmpl	$0, -32(%rbp)
	je	.LBB100_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -32(%rbp)
	je	.LBB100_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB100_17
.LBB100_7:                              # %if.end6
	cmpl	$0, -36(%rbp)
	jl	.LBB100_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -36(%rbp)
	jle	.LBB100_10
.LBB100_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB100_17
.LBB100_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB100_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB100_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB100_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB100_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB100_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB100_17
.LBB100_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB100_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$879331537, -40(%rbp)   # imm = 0x346988D1
	jne	.LBB100_19
.LBB100_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_18
.Lfunc_end100:
	.size	BZ2_bzDecompressInit.60, .Lfunc_end100-BZ2_bzDecompressInit.60
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function isempty_RL.61
	.type	isempty_RL.61,@function
isempty_RL.61:                          # @isempty_RL.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2015313732, -16(%rbp)  # imm = 0x781F3F44
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB101_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 96(%rax)
	jle	.LBB101_3
# %bb.2:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB101_4
.LBB101_3:                              # %if.else
	movb	$1, -9(%rbp)
.LBB101_4:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$2015313732, -16(%rbp)  # imm = 0x781F3F44
	jne	.LBB101_6
.LBB101_5:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_5
.Lfunc_end101:
	.size	isempty_RL.61, .Lfunc_end101-isempty_RL.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.62
	.type	unRLE_obuf_to_output_FAST.62,@function
unRLE_obuf_to_output_FAST.62:           # @unRLE_obuf_to_output_FAST.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$88641078, -92(%rbp)    # imm = 0x5488E36
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB102_48
# %bb.1:                                # %if.then
	jmp	.LBB102_2
.LBB102_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_3 Depth 2
	jmp	.LBB102_3
.LBB102_3:                              # %while.body2
                                        #   Parent Loop BB102_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB102_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB102_82
.LBB102_5:                              # %if.end
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB102_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_10
.LBB102_7:                              # %if.end6
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB102_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB102_9:                              # %if.end26
                                        #   in Loop: Header=BB102_3 Depth=2
	jmp	.LBB102_3
.LBB102_10:                             # %while.end
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB102_82
.LBB102_12:                             # %if.end30
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB102_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB102_82
.LBB102_14:                             # %if.end37
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB102_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB102_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB102_17:                             # %if.end61
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_18
.LBB102_18:                             # %if.end62
                                        #   in Loop: Header=BB102_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_20
.LBB102_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_2
.LBB102_21:                             # %if.end79
                                        #   in Loop: Header=BB102_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB102_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB102_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB102_20
.LBB102_23:                             # %if.end87
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB102_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB102_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB102_26:                             # %if.end114
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_27
.LBB102_27:                             # %if.end115
                                        #   in Loop: Header=BB102_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_20
.LBB102_29:                             # %if.end133
                                        #   in Loop: Header=BB102_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB102_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB102_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB102_20
.LBB102_31:                             # %if.end141
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB102_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB102_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB102_34:                             # %if.end168
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_35
.LBB102_35:                             # %if.end169
                                        #   in Loop: Header=BB102_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_20
.LBB102_37:                             # %if.end187
                                        #   in Loop: Header=BB102_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB102_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB102_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB102_20
.LBB102_39:                             # %if.end195
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB102_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB102_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB102_42:                             # %if.end221
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_43
.LBB102_43:                             # %if.end222
                                        #   in Loop: Header=BB102_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB102_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB102_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB102_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB102_46:                             # %if.end264
                                        #   in Loop: Header=BB102_2 Depth=1
	jmp	.LBB102_47
.LBB102_47:                             # %if.end265
                                        #   in Loop: Header=BB102_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB102_20
.LBB102_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB102_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB102_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB102_49 Depth=1
	jmp	.LBB102_51
.LBB102_51:                             # %while.body294
                                        #   Parent Loop BB102_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB102_53
# %bb.52:                               # %if.then297
	jmp	.LBB102_78
.LBB102_53:                             # %if.end298
                                        #   in Loop: Header=BB102_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB102_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB102_49 Depth=1
	jmp	.LBB102_56
.LBB102_55:                             # %if.end302
                                        #   in Loop: Header=BB102_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB102_51
.LBB102_56:                             # %while.end313
                                        #   in Loop: Header=BB102_49 Depth=1
	jmp	.LBB102_57
.LBB102_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB102_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB102_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB102_78
.LBB102_59:                             # %if.end317
                                        #   in Loop: Header=BB102_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB102_60:                             # %if.end327
                                        #   in Loop: Header=BB102_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB102_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB102_82
.LBB102_62:                             # %if.end331
                                        #   in Loop: Header=BB102_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB102_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB102_78
.LBB102_64:                             # %if.end335
                                        #   in Loop: Header=BB102_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB102_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB102_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB102_57
.LBB102_66:                             # %if.end348
                                        #   in Loop: Header=BB102_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB102_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB102_49 Depth=1
	jmp	.LBB102_57
.LBB102_68:                             # %if.end352
                                        #   in Loop: Header=BB102_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB102_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB102_49 Depth=1
	jmp	.LBB102_70
.LBB102_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB102_49 Depth=1
	jmp	.LBB102_49
.LBB102_71:                             # %if.end362
                                        #   in Loop: Header=BB102_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB102_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB102_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB102_70
.LBB102_73:                             # %if.end368
                                        #   in Loop: Header=BB102_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB102_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB102_49 Depth=1
	jmp	.LBB102_70
.LBB102_75:                             # %if.end378
                                        #   in Loop: Header=BB102_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB102_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB102_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB102_70
.LBB102_77:                             # %if.end384
                                        #   in Loop: Header=BB102_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB102_70
.LBB102_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -84(%rbp)
	movl	-88(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-84(%rbp), %eax
	jae	.LBB102_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB102_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB102_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$88641078, -92(%rbp)    # imm = 0x5488E36
	jne	.LBB102_84
.LBB102_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_83
.Lfunc_end102:
	.size	unRLE_obuf_to_output_FAST.62, .Lfunc_end102-unRLE_obuf_to_output_FAST.62
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.63      # -- Begin function BZ2_bzWriteOpen.63
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.63,@function
BZ2_bzWriteOpen.63:                     # @BZ2_bzWriteOpen.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$49623580, -60(%rbp)    # imm = 0x2F5321C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB103_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB103_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB103_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB103_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB103_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -40(%rbp)
	jl	.LBB103_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -40(%rbp)
	jg	.LBB103_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB103_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB103_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -36(%rbp)
	jl	.LBB103_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -36(%rbp)
	jle	.LBB103_16
.LBB103_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB103_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB103_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB103_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB103_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB103_41
.LBB103_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB103_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB103_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB103_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB103_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB103_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB103_41
.LBB103_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB103_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB103_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB103_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB103_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB103_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB103_41
.LBB103_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB103_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB103_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB103_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB103_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB103_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB103_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB103_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB103_37
# %bb.36:                               # %if.then62
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB103_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB103_39
# %bb.38:                               # %if.then65
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB103_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB103_41
.LBB103_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB103_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$49623580, -60(%rbp)    # imm = 0x2F5321C
	jne	.LBB103_43
.LBB103_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_42
.Lfunc_end103:
	.size	BZ2_bzWriteOpen.63, .Lfunc_end103-BZ2_bzWriteOpen.63
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.64       # -- Begin function BZ2_indexIntoF.64
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.64,@function
BZ2_indexIntoF.64:                      # @BZ2_indexIntoF.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$894092421, -28(%rbp)   # imm = 0x354AC485
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB104_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB104_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_4
.LBB104_3:                              # %if.else
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB104_4:                              # %if.end
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_5
.LBB104_5:                              # %do.cond
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB104_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$894092421, -28(%rbp)   # imm = 0x354AC485
	jne	.LBB104_8
.LBB104_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_7
.Lfunc_end104:
	.size	BZ2_indexIntoF.64, .Lfunc_end104-BZ2_indexIntoF.64
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.65          # -- Begin function BZ2_bzWrite.65
	.p2align	4, 0x90
	.type	BZ2_bzWrite.65,@function
BZ2_bzWrite.65:                         # @BZ2_bzWrite.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1020092250, -36(%rbp)  # imm = 0x3CCD5F5A
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB105_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB105_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB105_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB105_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB105_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB105_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -20(%rbp)
	jge	.LBB105_12
.LBB105_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB105_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB105_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB105_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB105_11:                             # %if.end15
	jmp	.LBB105_53
.LBB105_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB105_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB105_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB105_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB105_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB105_17:                             # %if.end24
	jmp	.LBB105_53
.LBB105_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB105_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB105_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB105_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB105_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB105_23:                             # %if.end34
	jmp	.LBB105_53
.LBB105_24:                             # %if.end35
	cmpl	$0, -20(%rbp)
	jne	.LBB105_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB105_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB105_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB105_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB105_29:                             # %if.end44
	jmp	.LBB105_53
.LBB105_30:                             # %if.end45
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB105_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	je	.LBB105_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB105_34
# %bb.33:                               # %if.then55
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB105_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB105_36
# %bb.35:                               # %if.then58
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB105_36:                             # %if.end60
	jmp	.LBB105_53
.LBB105_37:                             # %if.end61
                                        #   in Loop: Header=BB105_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB105_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB105_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB105_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB105_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB105_45
.LBB105_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB105_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB105_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB105_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB105_44:                             # %if.end88
	jmp	.LBB105_53
.LBB105_45:                             # %if.end89
                                        #   in Loop: Header=BB105_31 Depth=1
	jmp	.LBB105_46
.LBB105_46:                             # %if.end90
                                        #   in Loop: Header=BB105_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB105_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB105_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB105_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB105_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB105_51:                             # %if.end104
	jmp	.LBB105_53
.LBB105_52:                             # %if.end105
                                        #   in Loop: Header=BB105_31 Depth=1
	jmp	.LBB105_31
.LBB105_53:                             # %return
	cmpl	$1020092250, -36(%rbp)  # imm = 0x3CCD5F5A
	jne	.LBB105_55
.LBB105_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_54
.Lfunc_end105:
	.size	BZ2_bzWrite.65, .Lfunc_end105-BZ2_bzWrite.65
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.66 # -- Begin function BZ2_bzBuffToBuffDecompress.66
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.66,@function
BZ2_bzBuffToBuffDecompress.66:          # @BZ2_bzBuffToBuffDecompress.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1691382689, -40(%rbp)  # imm = 0x64D073A1
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB106_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB106_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB106_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB106_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB106_7
.LBB106_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB106_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB106_8
.LBB106_7:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB106_19
.LBB106_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB106_10
# %bb.9:                                # %if.then12
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_19
.LBB106_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB106_12
# %bb.11:                               # %if.then16
	jmp	.LBB106_15
.LBB106_12:                             # %if.end17
	cmpl	$4, -12(%rbp)
	je	.LBB106_14
# %bb.13:                               # %if.then19
	jmp	.LBB106_18
.LBB106_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB106_19
.LBB106_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB106_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -16(%rbp)
	jmp	.LBB106_19
.LBB106_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB106_19
.LBB106_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_19:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1691382689, -40(%rbp)  # imm = 0x64D073A1
	jne	.LBB106_21
.LBB106_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_20
.Lfunc_end106:
	.size	BZ2_bzBuffToBuffDecompress.66, .Lfunc_end106-BZ2_bzBuffToBuffDecompress.66
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.67  # -- Begin function BZ2_bzReadGetUnused.67
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.67,@function
BZ2_bzReadGetUnused.67:                 # @BZ2_bzReadGetUnused.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$314735711, -20(%rbp)   # imm = 0x12C27C5F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB107_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB107_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB107_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB107_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB107_5:                              # %if.end5
	jmp	.LBB107_24
.LBB107_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB107_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB107_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB107_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB107_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB107_11:                             # %if.end16
	jmp	.LBB107_24
.LBB107_12:                             # %if.end17
	cmpq	$0, -32(%rbp)
	je	.LBB107_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -40(%rbp)
	jne	.LBB107_19
.LBB107_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB107_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB107_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB107_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB107_18:                             # %if.end27
	jmp	.LBB107_24
.LBB107_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB107_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB107_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB107_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB107_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB107_24:                             # %return
	cmpl	$314735711, -20(%rbp)   # imm = 0x12C27C5F
	jne	.LBB107_26
.LBB107_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_25
.Lfunc_end107:
	.size	BZ2_bzReadGetUnused.67, .Lfunc_end107-BZ2_bzReadGetUnused.67
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd.68  # -- Begin function BZ2_bzDecompressEnd.68
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd.68,@function
BZ2_bzDecompressEnd.68:                 # @BZ2_bzDecompressEnd.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$884999393, -36(%rbp)   # imm = 0x34C004E1
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB108_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB108_13
.LBB108_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB108_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB108_13
.LBB108_4:                              # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB108_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB108_13
.LBB108_6:                              # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 3152(%rax)
	je	.LBB108_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3152(%rcx), %rsi
	callq	*%rax
.LBB108_8:                              # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB108_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3160(%rcx), %rsi
	callq	*%rax
.LBB108_10:                             # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 3168(%rax)
	je	.LBB108_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3168(%rcx), %rsi
	callq	*%rax
.LBB108_12:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB108_13:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$884999393, -36(%rbp)   # imm = 0x34C004E1
	jne	.LBB108_15
.LBB108_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_14
.Lfunc_end108:
	.size	BZ2_bzDecompressEnd.68, .Lfunc_end108-BZ2_bzDecompressEnd.68
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.69
	.type	copy_input_until_stop.69,@function
copy_input_until_stop.69:               # @copy_input_until_stop.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$251805819, -32(%rbp)   # imm = 0xF02407B
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB109_20
# %bb.1:                                # %if.then
	jmp	.LBB109_2
.LBB109_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB109_4
# %bb.3:                                # %if.then2
	jmp	.LBB109_19
.LBB109_4:                              # %if.end
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB109_6
# %bb.5:                                # %if.then4
	jmp	.LBB109_19
.LBB109_6:                              # %if.end5
                                        #   in Loop: Header=BB109_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB109_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB109_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB109_16
.LBB109_9:                              # %if.else
                                        #   in Loop: Header=BB109_2 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB109_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB109_14
.LBB109_11:                             # %if.then32
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB109_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB109_13:                             # %if.end37
                                        #   in Loop: Header=BB109_2 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB109_15
.LBB109_14:                             # %if.else40
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB109_15:                             # %if.end43
                                        #   in Loop: Header=BB109_2 Depth=1
	jmp	.LBB109_16
.LBB109_16:                             # %if.end44
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB109_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB109_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB109_18:                             # %if.end58
                                        #   in Loop: Header=BB109_2 Depth=1
	jmp	.LBB109_2
.LBB109_19:                             # %while.end
	jmp	.LBB109_41
.LBB109_20:                             # %if.else59
	jmp	.LBB109_21
.LBB109_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB109_23
# %bb.22:                               # %if.then65
	jmp	.LBB109_40
.LBB109_23:                             # %if.end66
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB109_25
# %bb.24:                               # %if.then71
	jmp	.LBB109_40
.LBB109_25:                             # %if.end72
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB109_27
# %bb.26:                               # %if.then75
	jmp	.LBB109_40
.LBB109_27:                             # %if.end76
                                        #   in Loop: Header=BB109_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB109_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB109_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB109_37
.LBB109_30:                             # %if.else113
                                        #   in Loop: Header=BB109_21 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB109_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB109_35
.LBB109_32:                             # %if.then121
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB109_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB109_34:                             # %if.end126
                                        #   in Loop: Header=BB109_21 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB109_36
.LBB109_35:                             # %if.else129
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB109_36:                             # %if.end132
                                        #   in Loop: Header=BB109_21 Depth=1
	jmp	.LBB109_37
.LBB109_37:                             # %if.end133
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB109_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB109_39:                             # %if.end151
                                        #   in Loop: Header=BB109_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB109_21
.LBB109_40:                             # %while.end154
	jmp	.LBB109_41
.LBB109_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$251805819, -32(%rbp)   # imm = 0xF02407B
	jne	.LBB109_43
.LBB109_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_42
.Lfunc_end109:
	.size	copy_input_until_stop.69, .Lfunc_end109-copy_input_until_stop.69
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.70       # -- Begin function BZ2_indexIntoF.70
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.70,@function
BZ2_indexIntoF.70:                      # @BZ2_indexIntoF.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1642780435, -24(%rbp)  # imm = 0x61EAD713
	movl	%edi, -28(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB110_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB110_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_4
.LBB110_3:                              # %if.else
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB110_4:                              # %if.end
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_5
.LBB110_5:                              # %do.cond
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB110_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1642780435, -24(%rbp)  # imm = 0x61EAD713
	jne	.LBB110_8
.LBB110_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_7
.Lfunc_end110:
	.size	BZ2_indexIntoF.70, .Lfunc_end110-BZ2_indexIntoF.70
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.71 # -- Begin function BZ2_bzBuffToBuffDecompress.71
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.71,@function
BZ2_bzBuffToBuffDecompress.71:          # @BZ2_bzBuffToBuffDecompress.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$490936570, -36(%rbp)   # imm = 0x1D4318FA
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB111_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB111_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB111_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB111_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB111_7
.LBB111_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB111_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB111_8
.LBB111_7:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB111_19
.LBB111_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB111_10
# %bb.9:                                # %if.then12
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_19
.LBB111_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB111_12
# %bb.11:                               # %if.then16
	jmp	.LBB111_15
.LBB111_12:                             # %if.end17
	cmpl	$4, -12(%rbp)
	je	.LBB111_14
# %bb.13:                               # %if.then19
	jmp	.LBB111_18
.LBB111_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB111_19
.LBB111_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB111_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -16(%rbp)
	jmp	.LBB111_19
.LBB111_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB111_19
.LBB111_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB111_19:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$490936570, -36(%rbp)   # imm = 0x1D4318FA
	jne	.LBB111_21
.LBB111_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_20
.Lfunc_end111:
	.size	BZ2_bzBuffToBuffDecompress.71, .Lfunc_end111-BZ2_bzBuffToBuffDecompress.71
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.72
	.type	unRLE_obuf_to_output_FAST.72,@function
unRLE_obuf_to_output_FAST.72:           # @unRLE_obuf_to_output_FAST.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$1149981674, -92(%rbp)  # imm = 0x448B53EA
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB112_48
# %bb.1:                                # %if.then
	jmp	.LBB112_2
.LBB112_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_3 Depth 2
	jmp	.LBB112_3
.LBB112_3:                              # %while.body2
                                        #   Parent Loop BB112_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB112_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB112_82
.LBB112_5:                              # %if.end
                                        #   in Loop: Header=BB112_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB112_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_10
.LBB112_7:                              # %if.end6
                                        #   in Loop: Header=BB112_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB112_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB112_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB112_9:                              # %if.end26
                                        #   in Loop: Header=BB112_3 Depth=2
	jmp	.LBB112_3
.LBB112_10:                             # %while.end
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB112_82
.LBB112_12:                             # %if.end30
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB112_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB112_82
.LBB112_14:                             # %if.end37
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB112_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB112_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB112_17:                             # %if.end61
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_18
.LBB112_18:                             # %if.end62
                                        #   in Loop: Header=BB112_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_20
.LBB112_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_2
.LBB112_21:                             # %if.end79
                                        #   in Loop: Header=BB112_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB112_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB112_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB112_20
.LBB112_23:                             # %if.end87
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB112_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB112_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB112_26:                             # %if.end114
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_27
.LBB112_27:                             # %if.end115
                                        #   in Loop: Header=BB112_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_20
.LBB112_29:                             # %if.end133
                                        #   in Loop: Header=BB112_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB112_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB112_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB112_20
.LBB112_31:                             # %if.end141
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB112_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB112_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB112_34:                             # %if.end168
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_35
.LBB112_35:                             # %if.end169
                                        #   in Loop: Header=BB112_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_20
.LBB112_37:                             # %if.end187
                                        #   in Loop: Header=BB112_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB112_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB112_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB112_20
.LBB112_39:                             # %if.end195
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB112_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB112_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB112_42:                             # %if.end221
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_43
.LBB112_43:                             # %if.end222
                                        #   in Loop: Header=BB112_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB112_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB112_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB112_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB112_46:                             # %if.end264
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_47
.LBB112_47:                             # %if.end265
                                        #   in Loop: Header=BB112_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB112_20
.LBB112_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB112_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB112_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_51
.LBB112_51:                             # %while.body294
                                        #   Parent Loop BB112_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB112_53
# %bb.52:                               # %if.then297
	jmp	.LBB112_78
.LBB112_53:                             # %if.end298
                                        #   in Loop: Header=BB112_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB112_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_56
.LBB112_55:                             # %if.end302
                                        #   in Loop: Header=BB112_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB112_51
.LBB112_56:                             # %while.end313
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_57
.LBB112_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB112_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB112_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB112_78
.LBB112_59:                             # %if.end317
                                        #   in Loop: Header=BB112_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB112_60:                             # %if.end327
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB112_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB112_82
.LBB112_62:                             # %if.end331
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB112_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB112_78
.LBB112_64:                             # %if.end335
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB112_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB112_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB112_57
.LBB112_66:                             # %if.end348
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB112_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_57
.LBB112_68:                             # %if.end352
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB112_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_70
.LBB112_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_49
.LBB112_71:                             # %if.end362
                                        #   in Loop: Header=BB112_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB112_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB112_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB112_70
.LBB112_73:                             # %if.end368
                                        #   in Loop: Header=BB112_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB112_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB112_49 Depth=1
	jmp	.LBB112_70
.LBB112_75:                             # %if.end378
                                        #   in Loop: Header=BB112_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB112_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB112_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB112_70
.LBB112_77:                             # %if.end384
                                        #   in Loop: Header=BB112_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB112_70
.LBB112_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -84(%rbp)
	movl	-88(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-84(%rbp), %eax
	jae	.LBB112_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB112_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB112_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$1149981674, -92(%rbp)  # imm = 0x448B53EA
	jne	.LBB112_84
.LBB112_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_83
.Lfunc_end112:
	.size	unRLE_obuf_to_output_FAST.72, .Lfunc_end112-unRLE_obuf_to_output_FAST.72
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.73           # -- Begin function BZ2_bzRead.73
	.p2align	4, 0x90
	.type	BZ2_bzRead.73,@function
BZ2_bzRead.73:                          # @BZ2_bzRead.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1082114474, -40(%rbp)  # imm = 0x407FC1AA
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB113_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB113_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB113_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB113_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB113_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB113_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB113_12
.LBB113_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB113_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB113_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB113_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB113_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB113_69
.LBB113_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB113_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB113_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB113_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB113_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB113_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB113_69
.LBB113_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB113_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB113_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB113_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB113_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB113_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB113_69
.LBB113_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB113_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB113_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB113_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB113_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB113_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB113_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB113_69
.LBB113_31:                             # %if.end46
                                        #   in Loop: Header=BB113_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB113_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB113_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB113_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB113_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB113_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB113_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB113_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB113_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB113_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB113_69
.LBB113_39:                             # %if.end69
                                        #   in Loop: Header=BB113_25 Depth=1
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB113_40:                             # %if.end76
                                        #   in Loop: Header=BB113_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB113_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB113_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB113_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB113_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB113_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB113_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB113_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB113_69
.LBB113_47:                             # %if.end94
                                        #   in Loop: Header=BB113_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB113_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB113_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB113_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB113_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB113_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB113_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB113_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB113_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB113_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB113_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB113_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB113_69
.LBB113_56:                             # %if.end122
                                        #   in Loop: Header=BB113_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB113_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB113_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB113_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB113_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB113_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_69
.LBB113_62:                             # %if.end137
                                        #   in Loop: Header=BB113_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB113_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB113_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB113_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB113_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB113_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_69
.LBB113_68:                             # %if.end152
                                        #   in Loop: Header=BB113_25 Depth=1
	jmp	.LBB113_25
.LBB113_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1082114474, -40(%rbp)  # imm = 0x407FC1AA
	jne	.LBB113_71
.LBB113_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_70
.Lfunc_end113:
	.size	BZ2_bzRead.73, .Lfunc_end113-BZ2_bzRead.73
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.74           # -- Begin function BZ2_bzRead.74
	.p2align	4, 0x90
	.type	BZ2_bzRead.74,@function
BZ2_bzRead.74:                          # @BZ2_bzRead.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1534771314, -44(%rbp)  # imm = 0x5B7AC072
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB114_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB114_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB114_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB114_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB114_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB114_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB114_12
.LBB114_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB114_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB114_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB114_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB114_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB114_69
.LBB114_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB114_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB114_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB114_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB114_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB114_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB114_69
.LBB114_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB114_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB114_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB114_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB114_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB114_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB114_69
.LBB114_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB114_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB114_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB114_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB114_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB114_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB114_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB114_69
.LBB114_31:                             # %if.end46
                                        #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB114_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB114_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB114_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB114_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB114_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB114_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB114_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB114_69
.LBB114_39:                             # %if.end69
                                        #   in Loop: Header=BB114_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB114_40:                             # %if.end76
                                        #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB114_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB114_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB114_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB114_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB114_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB114_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB114_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB114_69
.LBB114_47:                             # %if.end94
                                        #   in Loop: Header=BB114_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB114_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB114_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB114_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB114_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB114_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB114_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB114_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB114_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB114_69
.LBB114_56:                             # %if.end122
                                        #   in Loop: Header=BB114_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB114_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB114_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB114_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB114_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB114_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB114_69
.LBB114_62:                             # %if.end137
                                        #   in Loop: Header=BB114_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB114_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB114_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB114_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB114_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB114_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB114_69
.LBB114_68:                             # %if.end152
                                        #   in Loop: Header=BB114_25 Depth=1
	jmp	.LBB114_25
.LBB114_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1534771314, -44(%rbp)  # imm = 0x5B7AC072
	jne	.LBB114_71
.LBB114_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_70
.Lfunc_end114:
	.size	BZ2_bzRead.74, .Lfunc_end114-BZ2_bzRead.74
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.75  # -- Begin function BZ2_bzReadGetUnused.75
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.75,@function
BZ2_bzReadGetUnused.75:                 # @BZ2_bzReadGetUnused.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$803943549, -20(%rbp)   # imm = 0x2FEB347D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB115_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB115_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB115_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB115_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB115_5:                              # %if.end5
	jmp	.LBB115_24
.LBB115_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB115_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB115_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB115_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB115_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB115_11:                             # %if.end16
	jmp	.LBB115_24
.LBB115_12:                             # %if.end17
	cmpq	$0, -32(%rbp)
	je	.LBB115_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -40(%rbp)
	jne	.LBB115_19
.LBB115_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB115_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB115_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB115_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB115_18:                             # %if.end27
	jmp	.LBB115_24
.LBB115_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB115_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB115_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB115_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB115_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB115_24:                             # %return
	cmpl	$803943549, -20(%rbp)   # imm = 0x2FEB347D
	jne	.LBB115_26
.LBB115_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_25
.Lfunc_end115:
	.size	BZ2_bzReadGetUnused.75, .Lfunc_end115-BZ2_bzReadGetUnused.75
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.76 # -- Begin function BZ2_bzDecompressInit.76
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.76,@function
BZ2_bzDecompressInit.76:                # @BZ2_bzDecompressInit.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$666865004, -40(%rbp)   # imm = 0x27BF8D6C
	movq	%rdi, -16(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB116_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB116_17
.LBB116_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	jne	.LBB116_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB116_17
.LBB116_4:                              # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB116_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB116_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB116_17
.LBB116_7:                              # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB116_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB116_10
.LBB116_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB116_17
.LBB116_10:                             # %if.end10
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB116_12
# %bb.11:                               # %if.then12
	movq	-16(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB116_12:                             # %if.end14
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB116_14
# %bb.13:                               # %if.then16
	movq	-16(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB116_14:                             # %if.end18
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB116_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB116_17
.LBB116_16:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-24(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB116_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$666865004, -40(%rbp)   # imm = 0x27BF8D6C
	jne	.LBB116_19
.LBB116_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_18
.Lfunc_end116:
	.size	BZ2_bzDecompressInit.76, .Lfunc_end116-BZ2_bzDecompressInit.76
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd.77  # -- Begin function BZ2_bzDecompressEnd.77
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd.77,@function
BZ2_bzDecompressEnd.77:                 # @BZ2_bzDecompressEnd.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$852379050, -36(%rbp)   # imm = 0x32CE45AA
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB117_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB117_13
.LBB117_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB117_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB117_13
.LBB117_4:                              # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB117_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB117_13
.LBB117_6:                              # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 3152(%rax)
	je	.LBB117_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3152(%rcx), %rsi
	callq	*%rax
.LBB117_8:                              # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB117_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3160(%rcx), %rsi
	callq	*%rax
.LBB117_10:                             # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 3168(%rax)
	je	.LBB117_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3168(%rcx), %rsi
	callq	*%rax
.LBB117_12:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB117_13:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$852379050, -36(%rbp)   # imm = 0x32CE45AA
	jne	.LBB117_15
.LBB117_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_14
.Lfunc_end117:
	.size	BZ2_bzDecompressEnd.77, .Lfunc_end117-BZ2_bzDecompressEnd.77
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzdopen.78          # -- Begin function BZ2_bzdopen.78
	.p2align	4, 0x90
	.type	BZ2_bzdopen.78,@function
BZ2_bzdopen.78:                         # @BZ2_bzdopen.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1443688718, -16(%rbp)  # imm = 0x560CF10E
	movl	%edi, -12(%rbp)
	movq	%rsi, -24(%rbp)
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	xorl	%edi, %edi
	movl	$1, %ecx
	callq	bzopen_or_bzdopen
	movq	%rax, %rbx
	cmpl	$1443688718, -16(%rbp)  # imm = 0x560CF10E
	jne	.LBB118_2
.LBB118_1:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_1
.Lfunc_end118:
	.size	BZ2_bzdopen.78, .Lfunc_end118-BZ2_bzdopen.78
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.79 # -- Begin function BZ2_bzDecompressInit.79
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.79,@function
BZ2_bzDecompressInit.79:                # @BZ2_bzDecompressInit.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$54104859, -40(%rbp)    # imm = 0x339931B
	movq	%rdi, -16(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB119_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB119_17
.LBB119_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	jne	.LBB119_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB119_17
.LBB119_4:                              # %if.end2
	cmpl	$0, -32(%rbp)
	je	.LBB119_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -32(%rbp)
	je	.LBB119_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB119_17
.LBB119_7:                              # %if.end6
	cmpl	$0, -36(%rbp)
	jl	.LBB119_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -36(%rbp)
	jle	.LBB119_10
.LBB119_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB119_17
.LBB119_10:                             # %if.end10
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB119_12
# %bb.11:                               # %if.then12
	movq	-16(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB119_12:                             # %if.end14
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB119_14
# %bb.13:                               # %if.then16
	movq	-16(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB119_14:                             # %if.end18
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB119_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB119_17
.LBB119_16:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-24(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB119_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$54104859, -40(%rbp)    # imm = 0x339931B
	jne	.LBB119_19
.LBB119_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_18
.Lfunc_end119:
	.size	BZ2_bzDecompressInit.79, .Lfunc_end119-BZ2_bzDecompressInit.79
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzdopen.80          # -- Begin function BZ2_bzdopen.80
	.p2align	4, 0x90
	.type	BZ2_bzdopen.80,@function
BZ2_bzdopen.80:                         # @BZ2_bzdopen.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1244916524, -12(%rbp)  # imm = 0x4A33EB2C
	movl	%edi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	-16(%rbp), %esi
	movq	-24(%rbp), %rdx
	xorl	%edi, %edi
	movl	$1, %ecx
	callq	bzopen_or_bzdopen
	movq	%rax, %rbx
	cmpl	$1244916524, -12(%rbp)  # imm = 0x4A33EB2C
	jne	.LBB120_2
.LBB120_1:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_1
.Lfunc_end120:
	.size	BZ2_bzdopen.80, .Lfunc_end120-BZ2_bzdopen.80
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.81 # -- Begin function BZ2_bzBuffToBuffCompress.81
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.81,@function
BZ2_bzBuffToBuffCompress.81:            # @BZ2_bzBuffToBuffCompress.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$818058925, -36(%rbp)   # imm = 0x30C296AD
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -20(%rbp)
	movl	%r9d, -24(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB121_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB121_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB121_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -20(%rbp)
	jl	.LBB121_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -20(%rbp)
	jg	.LBB121_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -24(%rbp)
	jl	.LBB121_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -24(%rbp)
	jg	.LBB121_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB121_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB121_10
.LBB121_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB121_21
.LBB121_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB121_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB121_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB121_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_21
.LBB121_14:                             # %if.end21
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB121_16
# %bb.15:                               # %if.then24
	jmp	.LBB121_19
.LBB121_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB121_18
# %bb.17:                               # %if.then27
	jmp	.LBB121_20
.LBB121_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB121_21
.LBB121_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB121_21
.LBB121_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$818058925, -36(%rbp)   # imm = 0x30C296AD
	jne	.LBB121_23
.LBB121_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_22
.Lfunc_end121:
	.size	BZ2_bzBuffToBuffCompress.81, .Lfunc_end121-BZ2_bzBuffToBuffCompress.81
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.82
	.type	default_bzalloc.82,@function
default_bzalloc.82:                     # @default_bzalloc.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1781468442, -16(%rbp)  # imm = 0x6A2F0D1A
	movq	%rdi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -12(%rbp)
	movl	-20(%rbp), %eax
	imull	-12(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1781468442, -16(%rbp)  # imm = 0x6A2F0D1A
	jne	.LBB122_2
.LBB122_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_1
.Lfunc_end122:
	.size	default_bzalloc.82, .Lfunc_end122-default_bzalloc.82
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.83 # -- Begin function BZ2_bzBuffToBuffDecompress.83
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.83,@function
BZ2_bzBuffToBuffDecompress.83:          # @BZ2_bzBuffToBuffDecompress.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1789819411, -40(%rbp)  # imm = 0x6AAE7A13
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB123_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB123_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB123_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB123_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB123_7
.LBB123_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB123_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB123_8
.LBB123_7:                              # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB123_19
.LBB123_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB123_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_19
.LBB123_10:                             # %if.end13
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB123_12
# %bb.11:                               # %if.then16
	jmp	.LBB123_15
.LBB123_12:                             # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB123_14
# %bb.13:                               # %if.then19
	jmp	.LBB123_18
.LBB123_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB123_19
.LBB123_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB123_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB123_19
.LBB123_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB123_19
.LBB123_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB123_19:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1789819411, -40(%rbp)  # imm = 0x6AAE7A13
	jne	.LBB123_21
.LBB123_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_20
.Lfunc_end123:
	.size	BZ2_bzBuffToBuffDecompress.83, .Lfunc_end123-BZ2_bzBuffToBuffDecompress.83
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressEnd.84  # -- Begin function BZ2_bzDecompressEnd.84
	.p2align	4, 0x90
	.type	BZ2_bzDecompressEnd.84,@function
BZ2_bzDecompressEnd.84:                 # @BZ2_bzDecompressEnd.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1028924302, -36(%rbp)  # imm = 0x3D54238E
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB124_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB124_13
.LBB124_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB124_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB124_13
.LBB124_4:                              # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB124_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB124_13
.LBB124_6:                              # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 3152(%rax)
	je	.LBB124_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3152(%rcx), %rsi
	callq	*%rax
.LBB124_8:                              # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 3160(%rax)
	je	.LBB124_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3160(%rcx), %rsi
	callq	*%rax
.LBB124_10:                             # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 3168(%rax)
	je	.LBB124_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	3168(%rcx), %rsi
	callq	*%rax
.LBB124_12:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB124_13:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1028924302, -36(%rbp)  # imm = 0x3D54238E
	jne	.LBB124_15
.LBB124_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_14
.Lfunc_end124:
	.size	BZ2_bzDecompressEnd.84, .Lfunc_end124-BZ2_bzDecompressEnd.84
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.85 # -- Begin function BZ2_bzDecompressInit.85
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.85,@function
BZ2_bzDecompressInit.85:                # @BZ2_bzDecompressInit.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1252468586, -40(%rbp)  # imm = 0x4AA7276A
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB125_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB125_17
.LBB125_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB125_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB125_17
.LBB125_4:                              # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB125_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB125_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB125_17
.LBB125_7:                              # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB125_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB125_10
.LBB125_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB125_17
.LBB125_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB125_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB125_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB125_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB125_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB125_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB125_17
.LBB125_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB125_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1252468586, -40(%rbp)  # imm = 0x4AA7276A
	jne	.LBB125_19
.LBB125_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_18
.Lfunc_end125:
	.size	BZ2_bzDecompressInit.85, .Lfunc_end125-BZ2_bzDecompressInit.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.86
	.type	copy_input_until_stop.86,@function
copy_input_until_stop.86:               # @copy_input_until_stop.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1283994749, -32(%rbp)  # imm = 0x4C88347D
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB126_20
# %bb.1:                                # %if.then
	jmp	.LBB126_2
.LBB126_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB126_4
# %bb.3:                                # %if.then2
	jmp	.LBB126_19
.LBB126_4:                              # %if.end
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB126_6
# %bb.5:                                # %if.then4
	jmp	.LBB126_19
.LBB126_6:                              # %if.end5
                                        #   in Loop: Header=BB126_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB126_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB126_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB126_16
.LBB126_9:                              # %if.else
                                        #   in Loop: Header=BB126_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB126_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB126_14
.LBB126_11:                             # %if.then32
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB126_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB126_13:                             # %if.end37
                                        #   in Loop: Header=BB126_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB126_15
.LBB126_14:                             # %if.else40
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB126_15:                             # %if.end43
                                        #   in Loop: Header=BB126_2 Depth=1
	jmp	.LBB126_16
.LBB126_16:                             # %if.end44
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB126_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB126_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB126_18:                             # %if.end58
                                        #   in Loop: Header=BB126_2 Depth=1
	jmp	.LBB126_2
.LBB126_19:                             # %while.end
	jmp	.LBB126_41
.LBB126_20:                             # %if.else59
	jmp	.LBB126_21
.LBB126_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB126_23
# %bb.22:                               # %if.then65
	jmp	.LBB126_40
.LBB126_23:                             # %if.end66
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB126_25
# %bb.24:                               # %if.then71
	jmp	.LBB126_40
.LBB126_25:                             # %if.end72
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB126_27
# %bb.26:                               # %if.then75
	jmp	.LBB126_40
.LBB126_27:                             # %if.end76
                                        #   in Loop: Header=BB126_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB126_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB126_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB126_37
.LBB126_30:                             # %if.else113
                                        #   in Loop: Header=BB126_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB126_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB126_35
.LBB126_32:                             # %if.then121
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB126_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB126_34:                             # %if.end126
                                        #   in Loop: Header=BB126_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB126_36
.LBB126_35:                             # %if.else129
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB126_36:                             # %if.end132
                                        #   in Loop: Header=BB126_21 Depth=1
	jmp	.LBB126_37
.LBB126_37:                             # %if.end133
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB126_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB126_39:                             # %if.end151
                                        #   in Loop: Header=BB126_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB126_21
.LBB126_40:                             # %while.end154
	jmp	.LBB126_41
.LBB126_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$1283994749, -32(%rbp)  # imm = 0x4C88347D
	jne	.LBB126_43
.LBB126_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_42
.Lfunc_end126:
	.size	copy_input_until_stop.86, .Lfunc_end126-copy_input_until_stop.86
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.87
	.type	unRLE_obuf_to_output_FAST.87,@function
unRLE_obuf_to_output_FAST.87:           # @unRLE_obuf_to_output_FAST.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$1605314963, -88(%rbp)  # imm = 0x5FAF2993
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB127_48
# %bb.1:                                # %if.then
	jmp	.LBB127_2
.LBB127_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_3 Depth 2
	jmp	.LBB127_3
.LBB127_3:                              # %while.body2
                                        #   Parent Loop BB127_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB127_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB127_82
.LBB127_5:                              # %if.end
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB127_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_10
.LBB127_7:                              # %if.end6
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB127_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB127_9:                              # %if.end26
                                        #   in Loop: Header=BB127_3 Depth=2
	jmp	.LBB127_3
.LBB127_10:                             # %while.end
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB127_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB127_82
.LBB127_12:                             # %if.end30
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB127_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB127_82
.LBB127_14:                             # %if.end37
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB127_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB127_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB127_17:                             # %if.end61
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_18
.LBB127_18:                             # %if.end62
                                        #   in Loop: Header=BB127_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB127_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_20
.LBB127_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_2
.LBB127_21:                             # %if.end79
                                        #   in Loop: Header=BB127_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB127_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB127_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB127_20
.LBB127_23:                             # %if.end87
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB127_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB127_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB127_26:                             # %if.end114
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_27
.LBB127_27:                             # %if.end115
                                        #   in Loop: Header=BB127_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB127_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_20
.LBB127_29:                             # %if.end133
                                        #   in Loop: Header=BB127_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB127_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB127_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB127_20
.LBB127_31:                             # %if.end141
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB127_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB127_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB127_34:                             # %if.end168
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_35
.LBB127_35:                             # %if.end169
                                        #   in Loop: Header=BB127_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB127_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_20
.LBB127_37:                             # %if.end187
                                        #   in Loop: Header=BB127_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB127_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB127_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB127_20
.LBB127_39:                             # %if.end195
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB127_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB127_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB127_42:                             # %if.end221
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_43
.LBB127_43:                             # %if.end222
                                        #   in Loop: Header=BB127_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB127_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB127_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB127_46:                             # %if.end264
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_47
.LBB127_47:                             # %if.end265
                                        #   in Loop: Header=BB127_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB127_20
.LBB127_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB127_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB127_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB127_49 Depth=1
	jmp	.LBB127_51
.LBB127_51:                             # %while.body294
                                        #   Parent Loop BB127_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB127_53
# %bb.52:                               # %if.then297
	jmp	.LBB127_78
.LBB127_53:                             # %if.end298
                                        #   in Loop: Header=BB127_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB127_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB127_49 Depth=1
	jmp	.LBB127_56
.LBB127_55:                             # %if.end302
                                        #   in Loop: Header=BB127_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB127_51
.LBB127_56:                             # %while.end313
                                        #   in Loop: Header=BB127_49 Depth=1
	jmp	.LBB127_57
.LBB127_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB127_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB127_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB127_78
.LBB127_59:                             # %if.end317
                                        #   in Loop: Header=BB127_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB127_60:                             # %if.end327
                                        #   in Loop: Header=BB127_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB127_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB127_82
.LBB127_62:                             # %if.end331
                                        #   in Loop: Header=BB127_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB127_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB127_78
.LBB127_64:                             # %if.end335
                                        #   in Loop: Header=BB127_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB127_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB127_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB127_57
.LBB127_66:                             # %if.end348
                                        #   in Loop: Header=BB127_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB127_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB127_49 Depth=1
	jmp	.LBB127_57
.LBB127_68:                             # %if.end352
                                        #   in Loop: Header=BB127_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB127_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB127_49 Depth=1
	jmp	.LBB127_70
.LBB127_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB127_49 Depth=1
	jmp	.LBB127_49
.LBB127_71:                             # %if.end362
                                        #   in Loop: Header=BB127_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB127_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB127_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB127_70
.LBB127_73:                             # %if.end368
                                        #   in Loop: Header=BB127_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB127_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB127_49 Depth=1
	jmp	.LBB127_70
.LBB127_75:                             # %if.end378
                                        #   in Loop: Header=BB127_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB127_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB127_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB127_70
.LBB127_77:                             # %if.end384
                                        #   in Loop: Header=BB127_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB127_70
.LBB127_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	-84(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-92(%rbp), %eax
	jae	.LBB127_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB127_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB127_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$1605314963, -88(%rbp)  # imm = 0x5FAF2993
	jne	.LBB127_84
.LBB127_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_83
.Lfunc_end127:
	.size	unRLE_obuf_to_output_FAST.87, .Lfunc_end127-unRLE_obuf_to_output_FAST.87
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.88           # -- Begin function BZ2_bzread.88
	.p2align	4, 0x90
	.type	BZ2_bzread.88,@function
BZ2_bzread.88:                          # @BZ2_bzread.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$946471374, -24(%rbp)   # imm = 0x386A01CE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB128_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB128_6
.LBB128_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -28(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB128_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB128_5
.LBB128_4:                              # %if.then3
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_6
.LBB128_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB128_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$946471374, -24(%rbp)   # imm = 0x386A01CE
	jne	.LBB128_8
.LBB128_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_7
.Lfunc_end128:
	.size	BZ2_bzread.88, .Lfunc_end128-BZ2_bzread.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.89
	.type	unRLE_obuf_to_output_FAST.89,@function
unRLE_obuf_to_output_FAST.89:           # @unRLE_obuf_to_output_FAST.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$2093910384, -84(%rbp)  # imm = 0x7CCE8970
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB129_48
# %bb.1:                                # %if.then
	jmp	.LBB129_2
.LBB129_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_3 Depth 2
	jmp	.LBB129_3
.LBB129_3:                              # %while.body2
                                        #   Parent Loop BB129_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB129_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB129_82
.LBB129_5:                              # %if.end
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB129_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_10
.LBB129_7:                              # %if.end6
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB129_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB129_9:                              # %if.end26
                                        #   in Loop: Header=BB129_3 Depth=2
	jmp	.LBB129_3
.LBB129_10:                             # %while.end
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB129_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB129_82
.LBB129_12:                             # %if.end30
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB129_82
.LBB129_14:                             # %if.end37
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB129_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB129_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB129_17:                             # %if.end61
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_18
.LBB129_18:                             # %if.end62
                                        #   in Loop: Header=BB129_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB129_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_20
.LBB129_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_2
.LBB129_21:                             # %if.end79
                                        #   in Loop: Header=BB129_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB129_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB129_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB129_20
.LBB129_23:                             # %if.end87
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB129_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB129_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB129_26:                             # %if.end114
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_27
.LBB129_27:                             # %if.end115
                                        #   in Loop: Header=BB129_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB129_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_20
.LBB129_29:                             # %if.end133
                                        #   in Loop: Header=BB129_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB129_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB129_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB129_20
.LBB129_31:                             # %if.end141
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB129_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB129_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB129_34:                             # %if.end168
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_35
.LBB129_35:                             # %if.end169
                                        #   in Loop: Header=BB129_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB129_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_20
.LBB129_37:                             # %if.end187
                                        #   in Loop: Header=BB129_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB129_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB129_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB129_20
.LBB129_39:                             # %if.end195
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB129_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB129_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB129_42:                             # %if.end221
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_43
.LBB129_43:                             # %if.end222
                                        #   in Loop: Header=BB129_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB129_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB129_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB129_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB129_46:                             # %if.end264
                                        #   in Loop: Header=BB129_2 Depth=1
	jmp	.LBB129_47
.LBB129_47:                             # %if.end265
                                        #   in Loop: Header=BB129_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB129_20
.LBB129_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB129_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB129_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB129_49 Depth=1
	jmp	.LBB129_51
.LBB129_51:                             # %while.body294
                                        #   Parent Loop BB129_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB129_53
# %bb.52:                               # %if.then297
	jmp	.LBB129_78
.LBB129_53:                             # %if.end298
                                        #   in Loop: Header=BB129_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB129_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB129_49 Depth=1
	jmp	.LBB129_56
.LBB129_55:                             # %if.end302
                                        #   in Loop: Header=BB129_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB129_51
.LBB129_56:                             # %while.end313
                                        #   in Loop: Header=BB129_49 Depth=1
	jmp	.LBB129_57
.LBB129_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB129_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB129_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB129_78
.LBB129_59:                             # %if.end317
                                        #   in Loop: Header=BB129_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB129_60:                             # %if.end327
                                        #   in Loop: Header=BB129_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB129_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB129_82
.LBB129_62:                             # %if.end331
                                        #   in Loop: Header=BB129_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB129_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB129_78
.LBB129_64:                             # %if.end335
                                        #   in Loop: Header=BB129_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB129_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB129_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB129_57
.LBB129_66:                             # %if.end348
                                        #   in Loop: Header=BB129_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB129_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB129_49 Depth=1
	jmp	.LBB129_57
.LBB129_68:                             # %if.end352
                                        #   in Loop: Header=BB129_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB129_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB129_49 Depth=1
	jmp	.LBB129_70
.LBB129_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB129_49 Depth=1
	jmp	.LBB129_49
.LBB129_71:                             # %if.end362
                                        #   in Loop: Header=BB129_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB129_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB129_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB129_70
.LBB129_73:                             # %if.end368
                                        #   in Loop: Header=BB129_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB129_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB129_49 Depth=1
	jmp	.LBB129_70
.LBB129_75:                             # %if.end378
                                        #   in Loop: Header=BB129_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB129_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB129_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB129_70
.LBB129_77:                             # %if.end384
                                        #   in Loop: Header=BB129_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB129_70
.LBB129_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-92(%rbp), %eax
	jae	.LBB129_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB129_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB129_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$2093910384, -84(%rbp)  # imm = 0x7CCE8970
	jne	.LBB129_84
.LBB129_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_83
.Lfunc_end129:
	.size	unRLE_obuf_to_output_FAST.89, .Lfunc_end129-unRLE_obuf_to_output_FAST.89
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.90
	.type	bzopen_or_bzdopen.90,@function
bzopen_or_bzdopen.90:                   # @bzopen_or_bzdopen.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$1965448066, -76(%rbp)  # imm = 0x75265B82
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -80(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$30, -72(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -84(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB130_2
# %bb.1:                                # %if.then
	movq	$0, -56(%rbp)
	jmp	.LBB130_39
.LBB130_2:                              # %if.end
	jmp	.LBB130_3
.LBB130_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB130_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB130_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB130_7
	jmp	.LBB130_5
.LBB130_5:                              # %while.body
                                        #   in Loop: Header=BB130_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB130_9
	jmp	.LBB130_6
.LBB130_6:                              # %while.body
                                        #   in Loop: Header=BB130_3 Depth=1
	subl	$119, %eax
	je	.LBB130_8
	jmp	.LBB130_10
.LBB130_7:                              # %sw.bb
                                        #   in Loop: Header=BB130_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB130_13
.LBB130_8:                              # %sw.bb1
                                        #   in Loop: Header=BB130_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB130_13
.LBB130_9:                              # %sw.bb2
                                        #   in Loop: Header=BB130_3 Depth=1
	movl	$1, -40(%rbp)
	jmp	.LBB130_13
.LBB130_10:                             # %sw.default
                                        #   in Loop: Header=BB130_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB130_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB130_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB130_12:                             # %if.end8
                                        #   in Loop: Header=BB130_3 Depth=1
	jmp	.LBB130_13
.LBB130_13:                             # %sw.epilog
                                        #   in Loop: Header=BB130_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB130_3
.LBB130_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -80(%rbp)
	jne	.LBB130_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB130_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB130_21
.LBB130_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB130_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB130_20
.LBB130_19:                             # %cond.false
	movq	stdin, %rax
.LBB130_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB130_22
.LBB130_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB130_22:                             # %if.end26
	jmp	.LBB130_24
.LBB130_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-68(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB130_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB130_26
# %bb.25:                               # %if.then33
	movq	$0, -56(%rbp)
	jmp	.LBB130_39
.LBB130_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB130_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB130_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB130_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB130_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB130_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-72(%rbp), %r8d
	leaq	-88(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -48(%rbp)
	jmp	.LBB130_33
.LBB130_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-84(%rbp), %r9d
	leaq	-88(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
.LBB130_33:                             # %if.end49
	cmpq	$0, -48(%rbp)
	jne	.LBB130_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB130_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB130_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB130_37:                             # %if.end59
	movq	$0, -56(%rbp)
	jmp	.LBB130_39
.LBB130_38:                             # %if.end60
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB130_39:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$1965448066, -76(%rbp)  # imm = 0x75265B82
	jne	.LBB130_41
.LBB130_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_40
.Lfunc_end130:
	.size	bzopen_or_bzdopen.90, .Lfunc_end130-bzopen_or_bzdopen.90
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.91 # -- Begin function BZ2_bzBuffToBuffDecompress.91
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.91,@function
BZ2_bzBuffToBuffDecompress.91:          # @BZ2_bzBuffToBuffDecompress.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1824482945, -36(%rbp)  # imm = 0x6CBF6681
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB131_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB131_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB131_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB131_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB131_7
.LBB131_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB131_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB131_8
.LBB131_7:                              # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB131_19
.LBB131_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB131_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_19
.LBB131_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB131_12
# %bb.11:                               # %if.then16
	jmp	.LBB131_15
.LBB131_12:                             # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB131_14
# %bb.13:                               # %if.then19
	jmp	.LBB131_18
.LBB131_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB131_19
.LBB131_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB131_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB131_19
.LBB131_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB131_19
.LBB131_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB131_19:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1824482945, -36(%rbp)  # imm = 0x6CBF6681
	jne	.LBB131_21
.LBB131_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_20
.Lfunc_end131:
	.size	BZ2_bzBuffToBuffDecompress.91, .Lfunc_end131-BZ2_bzBuffToBuffDecompress.91
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.92       # -- Begin function BZ2_bzReadOpen.92
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.92,@function
BZ2_bzReadOpen.92:                      # @BZ2_bzReadOpen.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$204543835, -76(%rbp)   # imm = 0xC31175B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB132_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB132_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB132_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB132_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB132_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -44(%rbp)
	je	.LBB132_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -44(%rbp)
	jne	.LBB132_14
.LBB132_7:                              # %lor.lhs.false7
	cmpl	$0, -40(%rbp)
	jl	.LBB132_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -40(%rbp)
	jg	.LBB132_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -56(%rbp)
	jne	.LBB132_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB132_14
.LBB132_11:                             # %lor.lhs.false15
	cmpq	$0, -56(%rbp)
	je	.LBB132_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB132_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB132_19
.LBB132_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB132_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB132_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB132_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB132_18:                             # %if.end28
	movq	$0, -64(%rbp)
	jmp	.LBB132_45
.LBB132_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB132_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB132_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB132_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB132_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB132_24:                             # %if.end37
	movq	$0, -64(%rbp)
	jmp	.LBB132_45
.LBB132_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB132_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB132_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB132_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB132_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB132_30:                             # %if.end48
	movq	$0, -64(%rbp)
	jmp	.LBB132_45
.LBB132_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB132_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB132_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB132_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB132_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB132_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB132_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB132_36 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB132_36
.LBB132_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-44(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB132_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB132_41
# %bb.40:                               # %if.then67
	movl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB132_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB132_43
# %bb.42:                               # %if.then70
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB132_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -64(%rbp)
	jmp	.LBB132_45
.LBB132_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB132_45:                             # %return
	movq	-64(%rbp), %rbx
	cmpl	$204543835, -76(%rbp)   # imm = 0xC31175B
	jne	.LBB132_47
.LBB132_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_46
.Lfunc_end132:
	.size	BZ2_bzReadOpen.92, .Lfunc_end132-BZ2_bzReadOpen.92
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.93 # -- Begin function BZ2_bzBuffToBuffDecompress.93
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.93,@function
BZ2_bzBuffToBuffDecompress.93:          # @BZ2_bzBuffToBuffDecompress.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1221738151, -40(%rbp)  # imm = 0x48D23EA7
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -20(%rbp)
	movl	%r9d, -24(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB133_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB133_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB133_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -20(%rbp)
	je	.LBB133_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -20(%rbp)
	jne	.LBB133_7
.LBB133_5:                              # %lor.lhs.false7
	cmpl	$0, -24(%rbp)
	jl	.LBB133_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -24(%rbp)
	jle	.LBB133_8
.LBB133_7:                              # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB133_19
.LBB133_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB133_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB133_19
.LBB133_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB133_12
# %bb.11:                               # %if.then16
	jmp	.LBB133_15
.LBB133_12:                             # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB133_14
# %bb.13:                               # %if.then19
	jmp	.LBB133_18
.LBB133_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB133_19
.LBB133_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB133_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB133_19
.LBB133_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB133_19
.LBB133_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB133_19:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1221738151, -40(%rbp)  # imm = 0x48D23EA7
	jne	.LBB133_21
.LBB133_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_20
.Lfunc_end133:
	.size	BZ2_bzBuffToBuffDecompress.93, .Lfunc_end133-BZ2_bzBuffToBuffDecompress.93
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.94 # -- Begin function BZ2_bzBuffToBuffCompress.94
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.94,@function
BZ2_bzBuffToBuffCompress.94:            # @BZ2_bzBuffToBuffCompress.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1641120349, -40(%rbp)  # imm = 0x61D1825D
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB134_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB134_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB134_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB134_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB134_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB134_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB134_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB134_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB134_10
.LBB134_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB134_21
.LBB134_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB134_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB134_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB134_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_21
.LBB134_14:                             # %if.end21
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB134_16
# %bb.15:                               # %if.then24
	jmp	.LBB134_19
.LBB134_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB134_18
# %bb.17:                               # %if.then27
	jmp	.LBB134_20
.LBB134_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB134_21
.LBB134_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB134_21
.LBB134_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB134_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1641120349, -40(%rbp)  # imm = 0x61D1825D
	jne	.LBB134_23
.LBB134_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_22
.Lfunc_end134:
	.size	BZ2_bzBuffToBuffCompress.94, .Lfunc_end134-BZ2_bzBuffToBuffCompress.94
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.95
	.type	bzopen_or_bzdopen.95,@function
bzopen_or_bzdopen.95:                   # @bzopen_or_bzdopen.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$760206579, -84(%rbp)   # imm = 0x2D4FD4F3
	movq	%rdi, -64(%rbp)
	movl	%esi, -80(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -88(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -72(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -68(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB135_2
# %bb.1:                                # %if.then
	movq	$0, -56(%rbp)
	jmp	.LBB135_39
.LBB135_2:                              # %if.end
	jmp	.LBB135_3
.LBB135_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB135_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB135_7
	jmp	.LBB135_5
.LBB135_5:                              # %while.body
                                        #   in Loop: Header=BB135_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB135_9
	jmp	.LBB135_6
.LBB135_6:                              # %while.body
                                        #   in Loop: Header=BB135_3 Depth=1
	subl	$119, %eax
	je	.LBB135_8
	jmp	.LBB135_10
.LBB135_7:                              # %sw.bb
                                        #   in Loop: Header=BB135_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB135_13
.LBB135_8:                              # %sw.bb1
                                        #   in Loop: Header=BB135_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB135_13
.LBB135_9:                              # %sw.bb2
                                        #   in Loop: Header=BB135_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB135_13
.LBB135_10:                             # %sw.default
                                        #   in Loop: Header=BB135_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB135_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB135_12:                             # %if.end8
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_13
.LBB135_13:                             # %sw.epilog
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB135_3
.LBB135_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -88(%rbp)
	jne	.LBB135_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB135_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB135_21
.LBB135_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB135_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB135_20
.LBB135_19:                             # %cond.false
	movq	stdin, %rax
.LBB135_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB135_22
.LBB135_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB135_22:                             # %if.end26
	jmp	.LBB135_24
.LBB135_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-80(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB135_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB135_26
# %bb.25:                               # %if.then33
	movq	$0, -56(%rbp)
	jmp	.LBB135_39
.LBB135_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB135_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB135_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB135_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB135_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB135_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-72(%rbp), %r8d
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -48(%rbp)
	jmp	.LBB135_33
.LBB135_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-68(%rbp), %r9d
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
.LBB135_33:                             # %if.end49
	cmpq	$0, -48(%rbp)
	jne	.LBB135_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB135_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB135_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB135_37:                             # %if.end59
	movq	$0, -56(%rbp)
	jmp	.LBB135_39
.LBB135_38:                             # %if.end60
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB135_39:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$760206579, -84(%rbp)   # imm = 0x2D4FD4F3
	jne	.LBB135_41
.LBB135_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_40
.Lfunc_end135:
	.size	bzopen_or_bzdopen.95, .Lfunc_end135-bzopen_or_bzdopen.95
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.96          # -- Begin function BZ2_bzWrite.96
	.p2align	4, 0x90
	.type	BZ2_bzWrite.96,@function
BZ2_bzWrite.96:                         # @BZ2_bzWrite.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1894750426, -36(%rbp)  # imm = 0x70EF98DA
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB136_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB136_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB136_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB136_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB136_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB136_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -24(%rbp)
	jge	.LBB136_12
.LBB136_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB136_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB136_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB136_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB136_11:                             # %if.end15
	jmp	.LBB136_53
.LBB136_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB136_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB136_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB136_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB136_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB136_17:                             # %if.end24
	jmp	.LBB136_53
.LBB136_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB136_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB136_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB136_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB136_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB136_23:                             # %if.end34
	jmp	.LBB136_53
.LBB136_24:                             # %if.end35
	cmpl	$0, -24(%rbp)
	jne	.LBB136_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB136_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB136_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB136_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB136_29:                             # %if.end44
	jmp	.LBB136_53
.LBB136_30:                             # %if.end45
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB136_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$1, -20(%rbp)
	je	.LBB136_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB136_34
# %bb.33:                               # %if.then55
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB136_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB136_36
# %bb.35:                               # %if.then58
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB136_36:                             # %if.end60
	jmp	.LBB136_53
.LBB136_37:                             # %if.end61
                                        #   in Loop: Header=BB136_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB136_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB136_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB136_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB136_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB136_45
.LBB136_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB136_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB136_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB136_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB136_44:                             # %if.end88
	jmp	.LBB136_53
.LBB136_45:                             # %if.end89
                                        #   in Loop: Header=BB136_31 Depth=1
	jmp	.LBB136_46
.LBB136_46:                             # %if.end90
                                        #   in Loop: Header=BB136_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB136_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB136_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB136_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB136_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB136_51:                             # %if.end104
	jmp	.LBB136_53
.LBB136_52:                             # %if.end105
                                        #   in Loop: Header=BB136_31 Depth=1
	jmp	.LBB136_31
.LBB136_53:                             # %return
	cmpl	$1894750426, -36(%rbp)  # imm = 0x70EF98DA
	jne	.LBB136_55
.LBB136_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_54
.Lfunc_end136:
	.size	BZ2_bzWrite.96, .Lfunc_end136-BZ2_bzWrite.96
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_SMALL.97
	.type	unRLE_obuf_to_output_SMALL.97,@function
unRLE_obuf_to_output_SMALL.97:          # @unRLE_obuf_to_output_SMALL.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1703539838, -32(%rbp)  # imm = 0x6589F47E
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB137_48
# %bb.1:                                # %if.then
	jmp	.LBB137_2
.LBB137_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_3 Depth 2
	jmp	.LBB137_3
.LBB137_3:                              # %while.body2
                                        #   Parent Loop BB137_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB137_5
# %bb.4:                                # %if.then3
	movb	$0, -25(%rbp)
	jmp	.LBB137_75
.LBB137_5:                              # %if.end
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB137_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_10
.LBB137_7:                              # %if.end6
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB137_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB137_9:                              # %if.end26
                                        #   in Loop: Header=BB137_3 Depth=2
	jmp	.LBB137_3
.LBB137_10:                             # %while.end
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB137_12
# %bb.11:                               # %if.then29
	movb	$0, -25(%rbp)
	jmp	.LBB137_75
.LBB137_12:                             # %if.end30
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB137_14
# %bb.13:                               # %if.then36
	movb	$1, -25(%rbp)
	jmp	.LBB137_75
.LBB137_14:                             # %if.end37
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB137_18
# %bb.15:                               # %if.then59
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB137_17
# %bb.16:                               # %if.then68
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB137_17:                             # %if.end70
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_18
.LBB137_18:                             # %if.end71
                                        #   in Loop: Header=BB137_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB137_21
# %bb.19:                               # %if.then87
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_20
.LBB137_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_2
.LBB137_21:                             # %if.end88
                                        #   in Loop: Header=BB137_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB137_23
# %bb.22:                               # %if.then93
                                        #   in Loop: Header=BB137_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB137_20
.LBB137_23:                             # %if.end96
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB137_27
# %bb.24:                               # %if.then125
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB137_26
# %bb.25:                               # %if.then135
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB137_26:                             # %if.end137
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_27
.LBB137_27:                             # %if.end138
                                        #   in Loop: Header=BB137_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB137_29
# %bb.28:                               # %if.then155
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_20
.LBB137_29:                             # %if.end156
                                        #   in Loop: Header=BB137_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB137_31
# %bb.30:                               # %if.then161
                                        #   in Loop: Header=BB137_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB137_20
.LBB137_31:                             # %if.end164
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB137_35
# %bb.32:                               # %if.then193
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB137_34
# %bb.33:                               # %if.then203
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB137_34:                             # %if.end205
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_35
.LBB137_35:                             # %if.end206
                                        #   in Loop: Header=BB137_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB137_37
# %bb.36:                               # %if.then223
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_20
.LBB137_37:                             # %if.end224
                                        #   in Loop: Header=BB137_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB137_39
# %bb.38:                               # %if.then229
                                        #   in Loop: Header=BB137_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB137_20
.LBB137_39:                             # %if.end232
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB137_43
# %bb.40:                               # %if.then260
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB137_42
# %bb.41:                               # %if.then270
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB137_42:                             # %if.end272
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_43
.LBB137_43:                             # %if.end273
                                        #   in Loop: Header=BB137_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB137_47
# %bb.44:                               # %if.then315
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB137_46
# %bb.45:                               # %if.then325
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB137_46:                             # %if.end327
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_47
.LBB137_47:                             # %if.end328
                                        #   in Loop: Header=BB137_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB137_20
.LBB137_48:                             # %if.else
	jmp	.LBB137_49
.LBB137_49:                             # %while.body339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_50 Depth 2
	jmp	.LBB137_50
.LBB137_50:                             # %while.body341
                                        #   Parent Loop BB137_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB137_52
# %bb.51:                               # %if.then346
	movb	$0, -25(%rbp)
	jmp	.LBB137_75
.LBB137_52:                             # %if.end347
                                        #   in Loop: Header=BB137_50 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB137_54
# %bb.53:                               # %if.then351
                                        #   in Loop: Header=BB137_49 Depth=1
	jmp	.LBB137_57
.LBB137_54:                             # %if.end352
                                        #   in Loop: Header=BB137_50 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB137_56
# %bb.55:                               # %if.then382
                                        #   in Loop: Header=BB137_50 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB137_56:                             # %if.end386
                                        #   in Loop: Header=BB137_50 Depth=2
	jmp	.LBB137_50
.LBB137_57:                             # %while.end387
                                        #   in Loop: Header=BB137_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB137_59
# %bb.58:                               # %if.then393
	movb	$0, -25(%rbp)
	jmp	.LBB137_75
.LBB137_59:                             # %if.end394
                                        #   in Loop: Header=BB137_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB137_61
# %bb.60:                               # %if.then400
	movb	$1, -25(%rbp)
	jmp	.LBB137_75
.LBB137_61:                             # %if.end401
                                        #   in Loop: Header=BB137_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB137_64
# %bb.62:                               # %if.then437
                                        #   in Loop: Header=BB137_49 Depth=1
	jmp	.LBB137_63
.LBB137_63:                             # %while.body339.backedge
                                        #   in Loop: Header=BB137_49 Depth=1
	jmp	.LBB137_49
.LBB137_64:                             # %if.end438
                                        #   in Loop: Header=BB137_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB137_66
# %bb.65:                               # %if.then443
                                        #   in Loop: Header=BB137_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB137_63
.LBB137_66:                             # %if.end446
                                        #   in Loop: Header=BB137_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB137_68
# %bb.67:                               # %if.then479
                                        #   in Loop: Header=BB137_49 Depth=1
	jmp	.LBB137_63
.LBB137_68:                             # %if.end480
                                        #   in Loop: Header=BB137_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB137_70
# %bb.69:                               # %if.then485
                                        #   in Loop: Header=BB137_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB137_63
.LBB137_70:                             # %if.end488
                                        #   in Loop: Header=BB137_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB137_72
# %bb.71:                               # %if.then521
                                        #   in Loop: Header=BB137_49 Depth=1
	jmp	.LBB137_63
.LBB137_72:                             # %if.end522
                                        #   in Loop: Header=BB137_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB137_74
# %bb.73:                               # %if.then527
                                        #   in Loop: Header=BB137_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB137_63
.LBB137_74:                             # %if.end530
                                        #   in Loop: Header=BB137_49 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB137_63
.LBB137_75:                             # %return
	movb	-25(%rbp), %bl
	cmpl	$1703539838, -32(%rbp)  # imm = 0x6589F47E
	jne	.LBB137_77
.LBB137_76:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_76
.Lfunc_end137:
	.size	unRLE_obuf_to_output_SMALL.97, .Lfunc_end137-unRLE_obuf_to_output_SMALL.97
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.98   # -- Begin function BZ2_bzWriteClose64.98
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.98,@function
BZ2_bzWriteClose64.98:                  # @BZ2_bzWriteClose64.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$348954185, -64(%rbp)   # imm = 0x14CC9E49
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -56(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB138_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB138_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB138_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB138_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB138_5:                              # %if.end5
	jmp	.LBB138_71
.LBB138_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB138_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB138_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB138_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB138_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB138_11:                             # %if.end14
	jmp	.LBB138_71
.LBB138_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB138_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB138_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB138_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB138_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB138_17:                             # %if.end24
	jmp	.LBB138_71
.LBB138_18:                             # %if.end25
	cmpq	$0, -48(%rbp)
	je	.LBB138_20
# %bb.19:                               # %if.then27
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB138_20:                             # %if.end28
	cmpq	$0, -40(%rbp)
	je	.LBB138_22
# %bb.21:                               # %if.then30
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB138_22:                             # %if.end31
	cmpq	$0, -56(%rbp)
	je	.LBB138_24
# %bb.23:                               # %if.then33
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB138_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB138_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB138_26:                             # %if.end37
	cmpl	$0, -24(%rbp)
	jne	.LBB138_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB138_49
# %bb.28:                               # %if.then41
	jmp	.LBB138_29
.LBB138_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB138_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB138_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB138_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB138_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB138_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB138_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB138_35:                             # %if.end55
	jmp	.LBB138_71
.LBB138_36:                             # %if.end56
                                        #   in Loop: Header=BB138_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB138_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB138_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB138_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB138_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB138_44
.LBB138_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB138_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB138_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB138_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB138_43:                             # %if.end82
	jmp	.LBB138_71
.LBB138_44:                             # %if.end83
                                        #   in Loop: Header=BB138_29 Depth=1
	jmp	.LBB138_45
.LBB138_45:                             # %if.end84
                                        #   in Loop: Header=BB138_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB138_47
# %bb.46:                               # %if.then87
	jmp	.LBB138_48
.LBB138_47:                             # %if.end88
                                        #   in Loop: Header=BB138_29 Depth=1
	jmp	.LBB138_29
.LBB138_48:                             # %while.end
	jmp	.LBB138_49
.LBB138_49:                             # %if.end89
	cmpl	$0, -24(%rbp)
	jne	.LBB138_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB138_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB138_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB138_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB138_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB138_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB138_56:                             # %if.end110
	jmp	.LBB138_71
.LBB138_57:                             # %if.end111
	jmp	.LBB138_58
.LBB138_58:                             # %if.end112
	cmpq	$0, -48(%rbp)
	je	.LBB138_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB138_60:                             # %if.end117
	cmpq	$0, -40(%rbp)
	je	.LBB138_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB138_62:                             # %if.end122
	cmpq	$0, -56(%rbp)
	je	.LBB138_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB138_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB138_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB138_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB138_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB138_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB138_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB138_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB138_71:                             # %return
	cmpl	$348954185, -64(%rbp)   # imm = 0x14CC9E49
	jne	.LBB138_73
.LBB138_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_72
.Lfunc_end138:
	.size	BZ2_bzWriteClose64.98, .Lfunc_end138-BZ2_bzWriteClose64.98
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.99           # -- Begin function BZ2_bzRead.99
	.p2align	4, 0x90
	.type	BZ2_bzRead.99,@function
BZ2_bzRead.99:                          # @BZ2_bzRead.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$783757179, -44(%rbp)   # imm = 0x2EB72F7B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB139_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB139_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB139_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB139_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB139_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB139_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB139_12
.LBB139_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB139_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB139_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB139_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB139_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB139_69
.LBB139_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB139_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB139_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB139_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB139_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB139_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB139_69
.LBB139_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB139_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB139_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB139_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB139_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB139_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB139_69
.LBB139_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB139_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB139_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB139_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB139_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB139_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB139_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB139_69
.LBB139_31:                             # %if.end46
                                        #   in Loop: Header=BB139_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB139_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB139_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB139_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB139_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB139_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB139_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB139_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB139_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB139_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB139_69
.LBB139_39:                             # %if.end69
                                        #   in Loop: Header=BB139_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB139_40:                             # %if.end76
                                        #   in Loop: Header=BB139_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB139_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB139_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB139_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB139_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB139_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB139_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB139_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB139_69
.LBB139_47:                             # %if.end94
                                        #   in Loop: Header=BB139_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB139_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB139_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB139_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB139_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB139_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB139_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB139_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB139_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB139_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB139_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB139_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB139_69
.LBB139_56:                             # %if.end122
                                        #   in Loop: Header=BB139_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB139_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB139_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB139_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB139_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB139_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB139_69
.LBB139_62:                             # %if.end137
                                        #   in Loop: Header=BB139_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB139_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB139_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB139_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB139_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB139_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB139_69
.LBB139_68:                             # %if.end152
                                        #   in Loop: Header=BB139_25 Depth=1
	jmp	.LBB139_25
.LBB139_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$783757179, -44(%rbp)   # imm = 0x2EB72F7B
	jne	.LBB139_71
.LBB139_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_70
.Lfunc_end139:
	.size	BZ2_bzRead.99, .Lfunc_end139-BZ2_bzRead.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.100
	.type	unRLE_obuf_to_output_FAST.100,@function
unRLE_obuf_to_output_FAST.100:          # @unRLE_obuf_to_output_FAST.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$1779753483, -88(%rbp)  # imm = 0x6A14E20B
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB140_48
# %bb.1:                                # %if.then
	jmp	.LBB140_2
.LBB140_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_3 Depth 2
	jmp	.LBB140_3
.LBB140_3:                              # %while.body2
                                        #   Parent Loop BB140_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB140_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB140_82
.LBB140_5:                              # %if.end
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB140_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_10
.LBB140_7:                              # %if.end6
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB140_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB140_9:                              # %if.end26
                                        #   in Loop: Header=BB140_3 Depth=2
	jmp	.LBB140_3
.LBB140_10:                             # %while.end
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB140_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB140_82
.LBB140_12:                             # %if.end30
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB140_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB140_82
.LBB140_14:                             # %if.end37
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB140_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB140_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB140_17:                             # %if.end61
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_18
.LBB140_18:                             # %if.end62
                                        #   in Loop: Header=BB140_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB140_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_20
.LBB140_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_2
.LBB140_21:                             # %if.end79
                                        #   in Loop: Header=BB140_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB140_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB140_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB140_20
.LBB140_23:                             # %if.end87
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB140_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB140_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB140_26:                             # %if.end114
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_27
.LBB140_27:                             # %if.end115
                                        #   in Loop: Header=BB140_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB140_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_20
.LBB140_29:                             # %if.end133
                                        #   in Loop: Header=BB140_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB140_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB140_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB140_20
.LBB140_31:                             # %if.end141
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB140_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB140_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB140_34:                             # %if.end168
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_35
.LBB140_35:                             # %if.end169
                                        #   in Loop: Header=BB140_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB140_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_20
.LBB140_37:                             # %if.end187
                                        #   in Loop: Header=BB140_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB140_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB140_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB140_20
.LBB140_39:                             # %if.end195
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB140_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB140_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB140_42:                             # %if.end221
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_43
.LBB140_43:                             # %if.end222
                                        #   in Loop: Header=BB140_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB140_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB140_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB140_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB140_46:                             # %if.end264
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_47
.LBB140_47:                             # %if.end265
                                        #   in Loop: Header=BB140_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB140_20
.LBB140_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB140_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB140_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB140_49 Depth=1
	jmp	.LBB140_51
.LBB140_51:                             # %while.body294
                                        #   Parent Loop BB140_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB140_53
# %bb.52:                               # %if.then297
	jmp	.LBB140_78
.LBB140_53:                             # %if.end298
                                        #   in Loop: Header=BB140_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB140_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB140_49 Depth=1
	jmp	.LBB140_56
.LBB140_55:                             # %if.end302
                                        #   in Loop: Header=BB140_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB140_51
.LBB140_56:                             # %while.end313
                                        #   in Loop: Header=BB140_49 Depth=1
	jmp	.LBB140_57
.LBB140_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB140_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB140_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB140_78
.LBB140_59:                             # %if.end317
                                        #   in Loop: Header=BB140_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB140_60:                             # %if.end327
                                        #   in Loop: Header=BB140_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB140_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB140_82
.LBB140_62:                             # %if.end331
                                        #   in Loop: Header=BB140_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB140_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB140_78
.LBB140_64:                             # %if.end335
                                        #   in Loop: Header=BB140_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB140_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB140_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB140_57
.LBB140_66:                             # %if.end348
                                        #   in Loop: Header=BB140_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB140_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB140_49 Depth=1
	jmp	.LBB140_57
.LBB140_68:                             # %if.end352
                                        #   in Loop: Header=BB140_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB140_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB140_49 Depth=1
	jmp	.LBB140_70
.LBB140_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB140_49 Depth=1
	jmp	.LBB140_49
.LBB140_71:                             # %if.end362
                                        #   in Loop: Header=BB140_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB140_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB140_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB140_70
.LBB140_73:                             # %if.end368
                                        #   in Loop: Header=BB140_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB140_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB140_49 Depth=1
	jmp	.LBB140_70
.LBB140_75:                             # %if.end378
                                        #   in Loop: Header=BB140_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB140_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB140_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB140_70
.LBB140_77:                             # %if.end384
                                        #   in Loop: Header=BB140_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB140_70
.LBB140_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	-84(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-92(%rbp), %eax
	jae	.LBB140_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB140_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB140_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$1779753483, -88(%rbp)  # imm = 0x6A14E20B
	jne	.LBB140_84
.LBB140_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_83
.Lfunc_end140:
	.size	unRLE_obuf_to_output_FAST.100, .Lfunc_end140-unRLE_obuf_to_output_FAST.100
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzclose.101         # -- Begin function BZ2_bzclose.101
	.p2align	4, 0x90
	.type	BZ2_bzclose.101,@function
BZ2_bzclose.101:                        # @BZ2_bzclose.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$289234552, -28(%rbp)   # imm = 0x113D5E78
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB141_2
# %bb.1:                                # %if.then
	jmp	.LBB141_10
.LBB141_2:                              # %if.end
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB141_6
# %bb.3:                                # %if.then1
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
	cmpl	$0, -12(%rbp)
	je	.LBB141_5
# %bb.4:                                # %if.then3
	movq	-8(%rbp), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
.LBB141_5:                              # %if.end4
	jmp	.LBB141_7
.LBB141_6:                              # %if.else
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	callq	BZ2_bzReadClose
.LBB141_7:                              # %if.end5
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB141_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB141_10
# %bb.9:                                # %if.then8
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB141_10:                             # %if.end9
	cmpl	$289234552, -28(%rbp)   # imm = 0x113D5E78
	jne	.LBB141_12
.LBB141_11:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_11
.Lfunc_end141:
	.size	BZ2_bzclose.101, .Lfunc_end141-BZ2_bzclose.101
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.102 # -- Begin function BZ2_bzBuffToBuffCompress.102
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.102,@function
BZ2_bzBuffToBuffCompress.102:           # @BZ2_bzBuffToBuffCompress.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1834741961, -40(%rbp)  # imm = 0x6D5BF0C9
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB142_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB142_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB142_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB142_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB142_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB142_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB142_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB142_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB142_10
.LBB142_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB142_21
.LBB142_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB142_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB142_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB142_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB142_21
.LBB142_14:                             # %if.end21
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB142_16
# %bb.15:                               # %if.then24
	jmp	.LBB142_19
.LBB142_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB142_18
# %bb.17:                               # %if.then27
	jmp	.LBB142_20
.LBB142_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB142_21
.LBB142_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB142_21
.LBB142_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB142_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1834741961, -40(%rbp)  # imm = 0x6D5BF0C9
	jne	.LBB142_23
.LBB142_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_22
.Lfunc_end142:
	.size	BZ2_bzBuffToBuffCompress.102, .Lfunc_end142-BZ2_bzBuffToBuffCompress.102
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.103      # -- Begin function BZ2_indexIntoF.103
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.103,@function
BZ2_indexIntoF.103:                     # @BZ2_indexIntoF.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$292476019, -28(%rbp)   # imm = 0x116ED473
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -20(%rbp)         # imm = 0x100
.LBB143_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB143_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB143_4
.LBB143_3:                              # %if.else
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB143_4:                              # %if.end
                                        #   in Loop: Header=BB143_1 Depth=1
	jmp	.LBB143_5
.LBB143_5:                              # %do.cond
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-20(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB143_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$292476019, -28(%rbp)   # imm = 0x116ED473
	jne	.LBB143_8
.LBB143_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_7
.Lfunc_end143:
	.size	BZ2_indexIntoF.103, .Lfunc_end143-BZ2_indexIntoF.103
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose.104     # -- Begin function BZ2_bzReadClose.104
	.p2align	4, 0x90
	.type	BZ2_bzReadClose.104,@function
BZ2_bzReadClose.104:                    # @BZ2_bzReadClose.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$676834933, -20(%rbp)   # imm = 0x2857AE75
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB144_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB144_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB144_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB144_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	jne	.LBB144_10
# %bb.5:                                # %if.then5
	cmpq	$0, -16(%rbp)
	je	.LBB144_7
# %bb.6:                                # %if.then7
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB144_7:                              # %if.end8
	cmpq	$0, -8(%rbp)
	je	.LBB144_9
# %bb.8:                                # %if.then10
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB144_9:                              # %if.end12
	jmp	.LBB144_19
.LBB144_10:                             # %if.end13
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB144_16
# %bb.11:                               # %if.then14
	cmpq	$0, -16(%rbp)
	je	.LBB144_13
# %bb.12:                               # %if.then16
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB144_13:                             # %if.end17
	cmpq	$0, -8(%rbp)
	je	.LBB144_15
# %bb.14:                               # %if.then19
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB144_15:                             # %if.end21
	jmp	.LBB144_19
.LBB144_16:                             # %if.end22
	movq	-8(%rbp), %rax
	cmpb	$0, 5100(%rax)
	je	.LBB144_18
# %bb.17:                               # %if.then24
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompressEnd
.LBB144_18:                             # %if.end25
	movq	-8(%rbp), %rdi
	callq	free
.LBB144_19:                             # %return
	cmpl	$676834933, -20(%rbp)   # imm = 0x2857AE75
	jne	.LBB144_21
.LBB144_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_20
.Lfunc_end144:
	.size	BZ2_bzReadClose.104, .Lfunc_end144-BZ2_bzReadClose.104
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.105      # -- Begin function BZ2_bzReadOpen.105
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.105,@function
BZ2_bzReadOpen.105:                     # @BZ2_bzReadOpen.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1830332271, -76(%rbp)  # imm = 0x6D18A76F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -44(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB145_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB145_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB145_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB145_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB145_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -44(%rbp)
	je	.LBB145_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -44(%rbp)
	jne	.LBB145_14
.LBB145_7:                              # %lor.lhs.false7
	cmpl	$0, -36(%rbp)
	jl	.LBB145_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -36(%rbp)
	jg	.LBB145_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -56(%rbp)
	jne	.LBB145_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB145_14
.LBB145_11:                             # %lor.lhs.false15
	cmpq	$0, -56(%rbp)
	je	.LBB145_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB145_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB145_19
.LBB145_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB145_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB145_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB145_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB145_18:                             # %if.end28
	movq	$0, -64(%rbp)
	jmp	.LBB145_45
.LBB145_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB145_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB145_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB145_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB145_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB145_24:                             # %if.end37
	movq	$0, -64(%rbp)
	jmp	.LBB145_45
.LBB145_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB145_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB145_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB145_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB145_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB145_30:                             # %if.end48
	movq	$0, -64(%rbp)
	jmp	.LBB145_45
.LBB145_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB145_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB145_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB145_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB145_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB145_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB145_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB145_36 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_36
.LBB145_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB145_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB145_41
# %bb.40:                               # %if.then67
	movl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB145_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB145_43
# %bb.42:                               # %if.then70
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB145_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -64(%rbp)
	jmp	.LBB145_45
.LBB145_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB145_45:                             # %return
	movq	-64(%rbp), %rbx
	cmpl	$1830332271, -76(%rbp)  # imm = 0x6D18A76F
	jne	.LBB145_47
.LBB145_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_46
.Lfunc_end145:
	.size	BZ2_bzReadOpen.105, .Lfunc_end145-BZ2_bzReadOpen.105
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.106         # -- Begin function BZ2_bzwrite.106
	.p2align	4, 0x90
	.type	BZ2_bzwrite.106,@function
BZ2_bzwrite.106:                        # @BZ2_bzwrite.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2066978927, -24(%rbp)  # imm = 0x7B33986F
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB146_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB146_3
.LBB146_2:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB146_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2066978927, -24(%rbp)  # imm = 0x7B33986F
	jne	.LBB146_5
.LBB146_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_4
.Lfunc_end146:
	.size	BZ2_bzwrite.106, .Lfunc_end146-BZ2_bzwrite.106
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.107    # -- Begin function BZ2_bzDecompress.107
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.107,@function
BZ2_bzDecompress.107:                   # @BZ2_bzDecompress.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1599072236, -44(%rbp)  # imm = 0x5F4FE7EC
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB147_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB147_37
.LBB147_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB147_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB147_37
.LBB147_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB147_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB147_37
.LBB147_6:                              # %if.end7
	jmp	.LBB147_7
.LBB147_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB147_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB147_37
.LBB147_9:                              # %if.end11
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB147_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB147_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB147_13
.LBB147_12:                             # %if.else
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB147_13:                             # %if.end17
                                        #   in Loop: Header=BB147_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB147_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB147_37
.LBB147_15:                             # %if.end20
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB147_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB147_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB147_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB147_19:                             # %if.end29
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB147_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB147_21:                             # %if.end34
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB147_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB147_37
.LBB147_23:                             # %if.end39
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB147_25
.LBB147_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB147_37
.LBB147_25:                             # %if.end46
                                        #   in Loop: Header=BB147_7 Depth=1
	jmp	.LBB147_26
.LBB147_26:                             # %if.end47
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB147_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB147_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB147_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB147_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB147_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB147_37
.LBB147_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB147_37
.LBB147_33:                             # %if.end65
                                        #   in Loop: Header=BB147_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB147_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB147_37
.LBB147_35:                             # %if.end69
                                        #   in Loop: Header=BB147_7 Depth=1
	jmp	.LBB147_36
.LBB147_36:                             # %if.end70
                                        #   in Loop: Header=BB147_7 Depth=1
	jmp	.LBB147_7
.LBB147_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1599072236, -44(%rbp)  # imm = 0x5F4FE7EC
	jne	.LBB147_39
.LBB147_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_38
.Lfunc_end147:
	.size	BZ2_bzDecompress.107, .Lfunc_end147-BZ2_bzDecompress.107
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.108          # -- Begin function BZ2_bzread.108
	.p2align	4, 0x90
	.type	BZ2_bzread.108,@function
BZ2_bzread.108:                         # @BZ2_bzread.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$804378891, -24(%rbp)   # imm = 0x2FF1D90B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -28(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB148_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB148_6
.LBB148_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-28(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -20(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB148_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB148_5
.LBB148_4:                              # %if.then3
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_6
.LBB148_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB148_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$804378891, -24(%rbp)   # imm = 0x2FF1D90B
	jne	.LBB148_8
.LBB148_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_7
.Lfunc_end148:
	.size	BZ2_bzread.108, .Lfunc_end148-BZ2_bzread.108
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.109      # -- Begin function BZ2_bzReadOpen.109
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.109,@function
BZ2_bzReadOpen.109:                     # @BZ2_bzReadOpen.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$861561424, -76(%rbp)   # imm = 0x335A6250
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB149_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB149_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB149_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB149_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB149_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -44(%rbp)
	je	.LBB149_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -44(%rbp)
	jne	.LBB149_14
.LBB149_7:                              # %lor.lhs.false7
	cmpl	$0, -40(%rbp)
	jl	.LBB149_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -40(%rbp)
	jg	.LBB149_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -56(%rbp)
	jne	.LBB149_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB149_14
.LBB149_11:                             # %lor.lhs.false15
	cmpq	$0, -56(%rbp)
	je	.LBB149_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB149_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB149_19
.LBB149_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB149_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB149_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB149_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB149_18:                             # %if.end28
	movq	$0, -64(%rbp)
	jmp	.LBB149_45
.LBB149_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB149_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB149_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB149_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB149_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB149_24:                             # %if.end37
	movq	$0, -64(%rbp)
	jmp	.LBB149_45
.LBB149_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB149_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB149_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB149_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB149_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB149_30:                             # %if.end48
	movq	$0, -64(%rbp)
	jmp	.LBB149_45
.LBB149_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB149_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB149_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB149_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB149_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB149_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB149_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB149_36 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB149_36
.LBB149_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-44(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB149_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB149_41
# %bb.40:                               # %if.then67
	movl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB149_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB149_43
# %bb.42:                               # %if.then70
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB149_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -64(%rbp)
	jmp	.LBB149_45
.LBB149_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB149_45:                             # %return
	movq	-64(%rbp), %rbx
	cmpl	$861561424, -76(%rbp)   # imm = 0x335A6250
	jne	.LBB149_47
.LBB149_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_46
.Lfunc_end149:
	.size	BZ2_bzReadOpen.109, .Lfunc_end149-BZ2_bzReadOpen.109
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.110    # -- Begin function BZ2_bzWriteClose.110
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.110,@function
BZ2_bzWriteClose.110:                   # @BZ2_bzWriteClose.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$474133285, -4(%rbp)    # imm = 0x1C42B325
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	%r8, -32(%rbp)
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	-16(%rbp), %rcx
	movq	-32(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$474133285, -4(%rbp)    # imm = 0x1C42B325
	jne	.LBB150_2
.LBB150_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_1
.Lfunc_end150:
	.size	BZ2_bzWriteClose.110, .Lfunc_end150-BZ2_bzWriteClose.110
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.111      # -- Begin function BZ2_bzReadOpen.111
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.111,@function
BZ2_bzReadOpen.111:                     # @BZ2_bzReadOpen.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1294210819, -76(%rbp)  # imm = 0x4D241703
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB151_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB151_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB151_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB151_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB151_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -36(%rbp)
	je	.LBB151_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	jne	.LBB151_14
.LBB151_7:                              # %lor.lhs.false7
	cmpl	$0, -40(%rbp)
	jl	.LBB151_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -40(%rbp)
	jg	.LBB151_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -56(%rbp)
	jne	.LBB151_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB151_14
.LBB151_11:                             # %lor.lhs.false15
	cmpq	$0, -56(%rbp)
	je	.LBB151_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB151_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB151_19
.LBB151_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB151_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB151_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB151_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB151_18:                             # %if.end28
	movq	$0, -64(%rbp)
	jmp	.LBB151_45
.LBB151_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB151_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB151_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB151_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB151_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB151_24:                             # %if.end37
	movq	$0, -64(%rbp)
	jmp	.LBB151_45
.LBB151_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB151_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB151_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB151_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB151_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB151_30:                             # %if.end48
	movq	$0, -64(%rbp)
	jmp	.LBB151_45
.LBB151_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB151_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB151_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB151_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB151_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB151_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB151_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB151_36 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB151_36
.LBB151_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB151_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB151_41
# %bb.40:                               # %if.then67
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB151_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB151_43
# %bb.42:                               # %if.then70
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB151_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -64(%rbp)
	jmp	.LBB151_45
.LBB151_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB151_45:                             # %return
	movq	-64(%rbp), %rbx
	cmpl	$1294210819, -76(%rbp)  # imm = 0x4D241703
	jne	.LBB151_47
.LBB151_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_46
.Lfunc_end151:
	.size	BZ2_bzReadOpen.111, .Lfunc_end151-BZ2_bzReadOpen.111
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror.112         # -- Begin function BZ2_bzerror.112
	.p2align	4, 0x90
	.type	BZ2_bzerror.112,@function
BZ2_bzerror.112:                        # @BZ2_bzerror.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1956313645, -16(%rbp)  # imm = 0x749AFA2D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movl	5096(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.LBB152_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB152_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	imull	$-1, -12(%rbp), %eax
	cltq
	movq	bzerrorstrings(,%rax,8), %rbx
	cmpl	$1956313645, -16(%rbp)  # imm = 0x749AFA2D
	jne	.LBB152_4
.LBB152_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_3
.Lfunc_end152:
	.size	BZ2_bzerror.112, .Lfunc_end152-BZ2_bzerror.112
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.113
	.type	myfeof.113,@function
myfeof.113:                             # @myfeof.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1355841084, -20(%rbp)  # imm = 0x50D07E3C
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB153_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB153_3
.LBB153_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB153_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1355841084, -20(%rbp)  # imm = 0x50D07E3C
	jne	.LBB153_5
.LBB153_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_4
.Lfunc_end153:
	.size	myfeof.113, .Lfunc_end153-myfeof.113
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.114
	.type	myfeof.114,@function
myfeof.114:                             # @myfeof.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1783841349, -20(%rbp)  # imm = 0x6A534245
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB154_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB154_3
.LBB154_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB154_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1783841349, -20(%rbp)  # imm = 0x6A534245
	jne	.LBB154_5
.LBB154_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_4
.Lfunc_end154:
	.size	myfeof.114, .Lfunc_end154-myfeof.114
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.115 # -- Begin function BZ2_bzDecompressInit.115
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.115,@function
BZ2_bzDecompressInit.115:               # @BZ2_bzDecompressInit.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1697376835, -40(%rbp)  # imm = 0x652BEA43
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB155_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB155_17
.LBB155_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB155_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB155_17
.LBB155_4:                              # %if.end2
	cmpl	$0, -32(%rbp)
	je	.LBB155_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -32(%rbp)
	je	.LBB155_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB155_17
.LBB155_7:                              # %if.end6
	cmpl	$0, -36(%rbp)
	jl	.LBB155_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -36(%rbp)
	jle	.LBB155_10
.LBB155_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB155_17
.LBB155_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB155_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB155_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB155_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB155_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB155_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB155_17
.LBB155_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB155_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1697376835, -40(%rbp)  # imm = 0x652BEA43
	jne	.LBB155_19
.LBB155_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_18
.Lfunc_end155:
	.size	BZ2_bzDecompressInit.115, .Lfunc_end155-BZ2_bzDecompressInit.115
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.116
	.type	default_bzalloc.116,@function
default_bzalloc.116:                    # @default_bzalloc.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1489827413, -20(%rbp)  # imm = 0x58CCF655
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	-12(%rbp), %eax
	imull	-16(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1489827413, -20(%rbp)  # imm = 0x58CCF655
	jne	.LBB156_2
.LBB156_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_1
.Lfunc_end156:
	.size	default_bzalloc.116, .Lfunc_end156-default_bzalloc.116
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_SMALL.117
	.type	unRLE_obuf_to_output_SMALL.117,@function
unRLE_obuf_to_output_SMALL.117:         # @unRLE_obuf_to_output_SMALL.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$996129048, -32(%rbp)   # imm = 0x3B5FB918
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB157_48
# %bb.1:                                # %if.then
	jmp	.LBB157_2
.LBB157_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_3 Depth 2
	jmp	.LBB157_3
.LBB157_3:                              # %while.body2
                                        #   Parent Loop BB157_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB157_5
# %bb.4:                                # %if.then3
	movb	$0, -25(%rbp)
	jmp	.LBB157_75
.LBB157_5:                              # %if.end
                                        #   in Loop: Header=BB157_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB157_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_10
.LBB157_7:                              # %if.end6
                                        #   in Loop: Header=BB157_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB157_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB157_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB157_9:                              # %if.end26
                                        #   in Loop: Header=BB157_3 Depth=2
	jmp	.LBB157_3
.LBB157_10:                             # %while.end
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_12
# %bb.11:                               # %if.then29
	movb	$0, -25(%rbp)
	jmp	.LBB157_75
.LBB157_12:                             # %if.end30
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB157_14
# %bb.13:                               # %if.then36
	movb	$1, -25(%rbp)
	jmp	.LBB157_75
.LBB157_14:                             # %if.end37
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB157_18
# %bb.15:                               # %if.then59
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB157_17
# %bb.16:                               # %if.then68
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB157_17:                             # %if.end70
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_18
.LBB157_18:                             # %if.end71
                                        #   in Loop: Header=BB157_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_21
# %bb.19:                               # %if.then87
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_20
.LBB157_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_2
.LBB157_21:                             # %if.end88
                                        #   in Loop: Header=BB157_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB157_23
# %bb.22:                               # %if.then93
                                        #   in Loop: Header=BB157_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB157_20
.LBB157_23:                             # %if.end96
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB157_27
# %bb.24:                               # %if.then125
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB157_26
# %bb.25:                               # %if.then135
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB157_26:                             # %if.end137
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_27
.LBB157_27:                             # %if.end138
                                        #   in Loop: Header=BB157_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_29
# %bb.28:                               # %if.then155
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_20
.LBB157_29:                             # %if.end156
                                        #   in Loop: Header=BB157_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB157_31
# %bb.30:                               # %if.then161
                                        #   in Loop: Header=BB157_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB157_20
.LBB157_31:                             # %if.end164
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB157_35
# %bb.32:                               # %if.then193
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB157_34
# %bb.33:                               # %if.then203
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB157_34:                             # %if.end205
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_35
.LBB157_35:                             # %if.end206
                                        #   in Loop: Header=BB157_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_37
# %bb.36:                               # %if.then223
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_20
.LBB157_37:                             # %if.end224
                                        #   in Loop: Header=BB157_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB157_39
# %bb.38:                               # %if.then229
                                        #   in Loop: Header=BB157_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB157_20
.LBB157_39:                             # %if.end232
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB157_43
# %bb.40:                               # %if.then260
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB157_42
# %bb.41:                               # %if.then270
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB157_42:                             # %if.end272
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_43
.LBB157_43:                             # %if.end273
                                        #   in Loop: Header=BB157_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB157_47
# %bb.44:                               # %if.then315
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB157_46
# %bb.45:                               # %if.then325
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB157_46:                             # %if.end327
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_47
.LBB157_47:                             # %if.end328
                                        #   in Loop: Header=BB157_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB157_20
.LBB157_48:                             # %if.else
	jmp	.LBB157_49
.LBB157_49:                             # %while.body339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_50 Depth 2
	jmp	.LBB157_50
.LBB157_50:                             # %while.body341
                                        #   Parent Loop BB157_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB157_52
# %bb.51:                               # %if.then346
	movb	$0, -25(%rbp)
	jmp	.LBB157_75
.LBB157_52:                             # %if.end347
                                        #   in Loop: Header=BB157_50 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB157_54
# %bb.53:                               # %if.then351
                                        #   in Loop: Header=BB157_49 Depth=1
	jmp	.LBB157_57
.LBB157_54:                             # %if.end352
                                        #   in Loop: Header=BB157_50 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB157_56
# %bb.55:                               # %if.then382
                                        #   in Loop: Header=BB157_50 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB157_56:                             # %if.end386
                                        #   in Loop: Header=BB157_50 Depth=2
	jmp	.LBB157_50
.LBB157_57:                             # %while.end387
                                        #   in Loop: Header=BB157_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_59
# %bb.58:                               # %if.then393
	movb	$0, -25(%rbp)
	jmp	.LBB157_75
.LBB157_59:                             # %if.end394
                                        #   in Loop: Header=BB157_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB157_61
# %bb.60:                               # %if.then400
	movb	$1, -25(%rbp)
	jmp	.LBB157_75
.LBB157_61:                             # %if.end401
                                        #   in Loop: Header=BB157_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_64
# %bb.62:                               # %if.then437
                                        #   in Loop: Header=BB157_49 Depth=1
	jmp	.LBB157_63
.LBB157_63:                             # %while.body339.backedge
                                        #   in Loop: Header=BB157_49 Depth=1
	jmp	.LBB157_49
.LBB157_64:                             # %if.end438
                                        #   in Loop: Header=BB157_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB157_66
# %bb.65:                               # %if.then443
                                        #   in Loop: Header=BB157_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB157_63
.LBB157_66:                             # %if.end446
                                        #   in Loop: Header=BB157_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_68
# %bb.67:                               # %if.then479
                                        #   in Loop: Header=BB157_49 Depth=1
	jmp	.LBB157_63
.LBB157_68:                             # %if.end480
                                        #   in Loop: Header=BB157_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB157_70
# %bb.69:                               # %if.then485
                                        #   in Loop: Header=BB157_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB157_63
.LBB157_70:                             # %if.end488
                                        #   in Loop: Header=BB157_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_72
# %bb.71:                               # %if.then521
                                        #   in Loop: Header=BB157_49 Depth=1
	jmp	.LBB157_63
.LBB157_72:                             # %if.end522
                                        #   in Loop: Header=BB157_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB157_74
# %bb.73:                               # %if.then527
                                        #   in Loop: Header=BB157_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB157_63
.LBB157_74:                             # %if.end530
                                        #   in Loop: Header=BB157_49 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB157_63
.LBB157_75:                             # %return
	movb	-25(%rbp), %bl
	cmpl	$996129048, -32(%rbp)   # imm = 0x3B5FB918
	jne	.LBB157_77
.LBB157_76:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_76
.Lfunc_end157:
	.size	unRLE_obuf_to_output_SMALL.117, .Lfunc_end157-unRLE_obuf_to_output_SMALL.117
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.118     # -- Begin function BZ2_bzWriteOpen.118
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.118,@function
BZ2_bzWriteOpen.118:                    # @BZ2_bzWriteOpen.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1808716999, -60(%rbp)  # imm = 0x6BCED4C7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB158_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB158_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB158_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB158_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB158_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -40(%rbp)
	jl	.LBB158_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -40(%rbp)
	jg	.LBB158_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB158_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB158_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -36(%rbp)
	jl	.LBB158_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -36(%rbp)
	jle	.LBB158_16
.LBB158_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB158_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB158_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB158_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB158_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB158_41
.LBB158_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB158_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB158_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB158_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB158_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB158_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB158_41
.LBB158_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB158_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB158_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB158_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB158_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB158_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB158_41
.LBB158_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB158_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB158_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB158_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB158_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB158_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB158_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB158_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB158_37
# %bb.36:                               # %if.then62
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB158_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB158_39
# %bb.38:                               # %if.then65
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB158_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB158_41
.LBB158_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB158_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1808716999, -60(%rbp)  # imm = 0x6BCED4C7
	jne	.LBB158_43
.LBB158_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_42
.Lfunc_end158:
	.size	BZ2_bzWriteOpen.118, .Lfunc_end158-BZ2_bzWriteOpen.118
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.119         # -- Begin function BZ2_bzwrite.119
	.p2align	4, 0x90
	.type	BZ2_bzwrite.119,@function
BZ2_bzwrite.119:                        # @BZ2_bzwrite.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1310916559, -24(%rbp)  # imm = 0x4E22FFCF
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB159_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_3
.LBB159_2:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB159_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1310916559, -24(%rbp)  # imm = 0x4E22FFCF
	jne	.LBB159_5
.LBB159_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_4
.Lfunc_end159:
	.size	BZ2_bzwrite.119, .Lfunc_end159-BZ2_bzwrite.119
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.120    # -- Begin function BZ2_bzWriteClose.120
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.120,@function
BZ2_bzWriteClose.120:                   # @BZ2_bzWriteClose.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1377751063, -8(%rbp)   # imm = 0x521ED017
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -16(%rbp)
	movq	%r8, -32(%rbp)
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-16(%rbp), %rcx
	movq	-32(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1377751063, -8(%rbp)   # imm = 0x521ED017
	jne	.LBB160_2
.LBB160_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_1
.Lfunc_end160:
	.size	BZ2_bzWriteClose.120, .Lfunc_end160-BZ2_bzWriteClose.120
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzclose.121         # -- Begin function BZ2_bzclose.121
	.p2align	4, 0x90
	.type	BZ2_bzclose.121,@function
BZ2_bzclose.121:                        # @BZ2_bzclose.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1243888860, -28(%rbp)  # imm = 0x4A243CDC
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB161_2
# %bb.1:                                # %if.then
	jmp	.LBB161_10
.LBB161_2:                              # %if.end
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB161_6
# %bb.3:                                # %if.then1
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
	cmpl	$0, -12(%rbp)
	je	.LBB161_5
# %bb.4:                                # %if.then3
	movq	-8(%rbp), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
.LBB161_5:                              # %if.end4
	jmp	.LBB161_7
.LBB161_6:                              # %if.else
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	callq	BZ2_bzReadClose
.LBB161_7:                              # %if.end5
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB161_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB161_10
# %bb.9:                                # %if.then8
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB161_10:                             # %if.end9
	cmpl	$1243888860, -28(%rbp)  # imm = 0x4A243CDC
	jne	.LBB161_12
.LBB161_11:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_11
.Lfunc_end161:
	.size	BZ2_bzclose.121, .Lfunc_end161-BZ2_bzclose.121
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzclose.122         # -- Begin function BZ2_bzclose.122
	.p2align	4, 0x90
	.type	BZ2_bzclose.122,@function
BZ2_bzclose.122:                        # @BZ2_bzclose.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1667959118, -28(%rbp)  # imm = 0x636B094E
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB162_2
# %bb.1:                                # %if.then
	jmp	.LBB162_10
.LBB162_2:                              # %if.end
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB162_6
# %bb.3:                                # %if.then1
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
	cmpl	$0, -12(%rbp)
	je	.LBB162_5
# %bb.4:                                # %if.then3
	movq	-8(%rbp), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
.LBB162_5:                              # %if.end4
	jmp	.LBB162_7
.LBB162_6:                              # %if.else
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	callq	BZ2_bzReadClose
.LBB162_7:                              # %if.end5
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB162_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB162_10
# %bb.9:                                # %if.then8
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB162_10:                             # %if.end9
	cmpl	$1667959118, -28(%rbp)  # imm = 0x636B094E
	jne	.LBB162_12
.LBB162_11:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_11
.Lfunc_end162:
	.size	BZ2_bzclose.122, .Lfunc_end162-BZ2_bzclose.122
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.123      # -- Begin function BZ2_indexIntoF.123
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.123,@function
BZ2_indexIntoF.123:                     # @BZ2_indexIntoF.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$586145274, -28(%rbp)   # imm = 0x22EFDDFA
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -20(%rbp)         # imm = 0x100
.LBB163_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB163_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_4
.LBB163_3:                              # %if.else
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB163_4:                              # %if.end
                                        #   in Loop: Header=BB163_1 Depth=1
	jmp	.LBB163_5
.LBB163_5:                              # %do.cond
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-20(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB163_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$586145274, -28(%rbp)   # imm = 0x22EFDDFA
	jne	.LBB163_8
.LBB163_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_7
.Lfunc_end163:
	.size	BZ2_indexIntoF.123, .Lfunc_end163-BZ2_indexIntoF.123
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.124         # -- Begin function BZ2_bzWrite.124
	.p2align	4, 0x90
	.type	BZ2_bzWrite.124,@function
BZ2_bzWrite.124:                        # @BZ2_bzWrite.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$996121660, -36(%rbp)   # imm = 0x3B5F9C3C
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB164_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB164_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB164_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB164_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB164_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB164_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -20(%rbp)
	jge	.LBB164_12
.LBB164_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB164_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB164_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB164_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB164_11:                             # %if.end15
	jmp	.LBB164_53
.LBB164_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB164_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB164_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB164_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB164_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB164_17:                             # %if.end24
	jmp	.LBB164_53
.LBB164_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB164_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB164_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB164_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB164_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB164_23:                             # %if.end34
	jmp	.LBB164_53
.LBB164_24:                             # %if.end35
	cmpl	$0, -20(%rbp)
	jne	.LBB164_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB164_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB164_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB164_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB164_29:                             # %if.end44
	jmp	.LBB164_53
.LBB164_30:                             # %if.end45
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB164_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	je	.LBB164_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB164_34
# %bb.33:                               # %if.then55
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB164_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB164_36
# %bb.35:                               # %if.then58
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB164_36:                             # %if.end60
	jmp	.LBB164_53
.LBB164_37:                             # %if.end61
                                        #   in Loop: Header=BB164_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB164_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB164_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB164_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB164_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB164_45
.LBB164_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB164_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB164_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB164_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB164_44:                             # %if.end88
	jmp	.LBB164_53
.LBB164_45:                             # %if.end89
                                        #   in Loop: Header=BB164_31 Depth=1
	jmp	.LBB164_46
.LBB164_46:                             # %if.end90
                                        #   in Loop: Header=BB164_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB164_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB164_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB164_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB164_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB164_51:                             # %if.end104
	jmp	.LBB164_53
.LBB164_52:                             # %if.end105
                                        #   in Loop: Header=BB164_31 Depth=1
	jmp	.LBB164_31
.LBB164_53:                             # %return
	cmpl	$996121660, -36(%rbp)   # imm = 0x3B5F9C3C
	jne	.LBB164_55
.LBB164_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_54
.Lfunc_end164:
	.size	BZ2_bzWrite.124, .Lfunc_end164-BZ2_bzWrite.124
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.125
	.type	myfeof.125,@function
myfeof.125:                             # @myfeof.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1525427833, -20(%rbp)  # imm = 0x5AEC2E79
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB165_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB165_3
.LBB165_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB165_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1525427833, -20(%rbp)  # imm = 0x5AEC2E79
	jne	.LBB165_5
.LBB165_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_4
.Lfunc_end165:
	.size	myfeof.125, .Lfunc_end165-myfeof.125
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.126          # -- Begin function BZ2_bzRead.126
	.p2align	4, 0x90
	.type	BZ2_bzRead.126,@function
BZ2_bzRead.126:                         # @BZ2_bzRead.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$995516266, -44(%rbp)   # imm = 0x3B565F6A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB166_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB166_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB166_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB166_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB166_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB166_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB166_12
.LBB166_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB166_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB166_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB166_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB166_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB166_69
.LBB166_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB166_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB166_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB166_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB166_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB166_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB166_69
.LBB166_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB166_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB166_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB166_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB166_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB166_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB166_69
.LBB166_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB166_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB166_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB166_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB166_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB166_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB166_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB166_69
.LBB166_31:                             # %if.end46
                                        #   in Loop: Header=BB166_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB166_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB166_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB166_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB166_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB166_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB166_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB166_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB166_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB166_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB166_69
.LBB166_39:                             # %if.end69
                                        #   in Loop: Header=BB166_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB166_40:                             # %if.end76
                                        #   in Loop: Header=BB166_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB166_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB166_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB166_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB166_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB166_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB166_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB166_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB166_69
.LBB166_47:                             # %if.end94
                                        #   in Loop: Header=BB166_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB166_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB166_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB166_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB166_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB166_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB166_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB166_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB166_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB166_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB166_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB166_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB166_69
.LBB166_56:                             # %if.end122
                                        #   in Loop: Header=BB166_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB166_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB166_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB166_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB166_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB166_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB166_69
.LBB166_62:                             # %if.end137
                                        #   in Loop: Header=BB166_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB166_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB166_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB166_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB166_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB166_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB166_69
.LBB166_68:                             # %if.end152
                                        #   in Loop: Header=BB166_25 Depth=1
	jmp	.LBB166_25
.LBB166_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$995516266, -44(%rbp)   # imm = 0x3B565F6A
	jne	.LBB166_71
.LBB166_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_70
.Lfunc_end166:
	.size	BZ2_bzRead.126, .Lfunc_end166-BZ2_bzRead.126
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.127         # -- Begin function BZ2_bzWrite.127
	.p2align	4, 0x90
	.type	BZ2_bzWrite.127,@function
BZ2_bzWrite.127:                        # @BZ2_bzWrite.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$273554377, -32(%rbp)   # imm = 0x104E1BC9
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB167_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB167_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB167_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB167_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB167_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB167_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -20(%rbp)
	jge	.LBB167_12
.LBB167_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB167_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB167_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB167_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB167_11:                             # %if.end15
	jmp	.LBB167_53
.LBB167_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB167_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB167_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB167_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB167_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB167_17:                             # %if.end24
	jmp	.LBB167_53
.LBB167_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB167_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB167_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB167_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB167_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB167_23:                             # %if.end34
	jmp	.LBB167_53
.LBB167_24:                             # %if.end35
	cmpl	$0, -20(%rbp)
	jne	.LBB167_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB167_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB167_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB167_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB167_29:                             # %if.end44
	jmp	.LBB167_53
.LBB167_30:                             # %if.end45
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB167_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	je	.LBB167_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB167_34
# %bb.33:                               # %if.then55
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB167_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB167_36
# %bb.35:                               # %if.then58
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB167_36:                             # %if.end60
	jmp	.LBB167_53
.LBB167_37:                             # %if.end61
                                        #   in Loop: Header=BB167_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB167_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB167_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB167_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB167_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB167_45
.LBB167_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB167_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB167_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB167_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB167_44:                             # %if.end88
	jmp	.LBB167_53
.LBB167_45:                             # %if.end89
                                        #   in Loop: Header=BB167_31 Depth=1
	jmp	.LBB167_46
.LBB167_46:                             # %if.end90
                                        #   in Loop: Header=BB167_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB167_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB167_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB167_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB167_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB167_51:                             # %if.end104
	jmp	.LBB167_53
.LBB167_52:                             # %if.end105
                                        #   in Loop: Header=BB167_31 Depth=1
	jmp	.LBB167_31
.LBB167_53:                             # %return
	cmpl	$273554377, -32(%rbp)   # imm = 0x104E1BC9
	jne	.LBB167_55
.LBB167_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_54
.Lfunc_end167:
	.size	BZ2_bzWrite.127, .Lfunc_end167-BZ2_bzWrite.127
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd.128   # -- Begin function BZ2_bzCompressEnd.128
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd.128,@function
BZ2_bzCompressEnd.128:                  # @BZ2_bzCompressEnd.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2011135332, -36(%rbp)  # imm = 0x77DF7D64
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB168_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB168_13
.LBB168_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB168_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB168_13
.LBB168_4:                              # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB168_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB168_13
.LBB168_6:                              # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB168_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB168_8:                              # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB168_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB168_10:                             # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB168_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB168_12:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB168_13:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$2011135332, -36(%rbp)  # imm = 0x77DF7D64
	jne	.LBB168_15
.LBB168_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_14
.Lfunc_end168:
	.size	BZ2_bzCompressEnd.128, .Lfunc_end168-BZ2_bzCompressEnd.128
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.129
	.type	handle_compress.129,@function
handle_compress.129:                    # @handle_compress.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1527620363, -28(%rbp)  # imm = 0x5B0DA30B
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB169_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB169_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB169_4
# %bb.3:                                # %if.then6
	jmp	.LBB169_25
.LBB169_4:                              # %if.end
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB169_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB169_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB169_8
# %bb.7:                                # %if.then14
	jmp	.LBB169_25
.LBB169_8:                              # %if.end15
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB169_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB169_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB169_12
# %bb.11:                               # %if.then28
	jmp	.LBB169_25
.LBB169_12:                             # %if.end29
                                        #   in Loop: Header=BB169_1 Depth=1
	jmp	.LBB169_13
.LBB169_13:                             # %if.end30
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB169_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB169_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB169_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB169_23
.LBB169_17:                             # %if.else
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB169_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB169_22
.LBB169_19:                             # %if.else57
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB169_21
# %bb.20:                               # %if.then61
	jmp	.LBB169_25
.LBB169_21:                             # %if.end62
                                        #   in Loop: Header=BB169_1 Depth=1
	jmp	.LBB169_22
.LBB169_22:                             # %if.end63
                                        #   in Loop: Header=BB169_1 Depth=1
	jmp	.LBB169_23
.LBB169_23:                             # %if.end64
                                        #   in Loop: Header=BB169_1 Depth=1
	jmp	.LBB169_24
.LBB169_24:                             # %if.end65
                                        #   in Loop: Header=BB169_1 Depth=1
	jmp	.LBB169_1
.LBB169_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB169_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB169_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1527620363, -28(%rbp)  # imm = 0x5B0DA30B
	jne	.LBB169_29
.LBB169_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_28
.Lfunc_end169:
	.size	handle_compress.129, .Lfunc_end169-handle_compress.129
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.130         # -- Begin function BZ2_bzwrite.130
	.p2align	4, 0x90
	.type	BZ2_bzwrite.130,@function
BZ2_bzwrite.130:                        # @BZ2_bzwrite.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$196197442, -20(%rbp)   # imm = 0xBB1BC42
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %ecx
	leaq	-24(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -24(%rbp)
	jne	.LBB170_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB170_3
.LBB170_2:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB170_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$196197442, -20(%rbp)   # imm = 0xBB1BC42
	jne	.LBB170_5
.LBB170_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_4
.Lfunc_end170:
	.size	BZ2_bzwrite.130, .Lfunc_end170-BZ2_bzwrite.130
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_SMALL.131
	.type	unRLE_obuf_to_output_SMALL.131,@function
unRLE_obuf_to_output_SMALL.131:         # @unRLE_obuf_to_output_SMALL.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1723294883, -32(%rbp)  # imm = 0x66B764A3
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB171_48
# %bb.1:                                # %if.then
	jmp	.LBB171_2
.LBB171_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_3 Depth 2
	jmp	.LBB171_3
.LBB171_3:                              # %while.body2
                                        #   Parent Loop BB171_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB171_5
# %bb.4:                                # %if.then3
	movb	$0, -25(%rbp)
	jmp	.LBB171_75
.LBB171_5:                              # %if.end
                                        #   in Loop: Header=BB171_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB171_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_10
.LBB171_7:                              # %if.end6
                                        #   in Loop: Header=BB171_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB171_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB171_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB171_9:                              # %if.end26
                                        #   in Loop: Header=BB171_3 Depth=2
	jmp	.LBB171_3
.LBB171_10:                             # %while.end
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB171_12
# %bb.11:                               # %if.then29
	movb	$0, -25(%rbp)
	jmp	.LBB171_75
.LBB171_12:                             # %if.end30
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB171_14
# %bb.13:                               # %if.then36
	movb	$1, -25(%rbp)
	jmp	.LBB171_75
.LBB171_14:                             # %if.end37
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB171_18
# %bb.15:                               # %if.then59
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB171_17
# %bb.16:                               # %if.then68
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB171_17:                             # %if.end70
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_18
.LBB171_18:                             # %if.end71
                                        #   in Loop: Header=BB171_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB171_21
# %bb.19:                               # %if.then87
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_20
.LBB171_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_2
.LBB171_21:                             # %if.end88
                                        #   in Loop: Header=BB171_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB171_23
# %bb.22:                               # %if.then93
                                        #   in Loop: Header=BB171_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB171_20
.LBB171_23:                             # %if.end96
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB171_27
# %bb.24:                               # %if.then125
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB171_26
# %bb.25:                               # %if.then135
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB171_26:                             # %if.end137
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_27
.LBB171_27:                             # %if.end138
                                        #   in Loop: Header=BB171_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB171_29
# %bb.28:                               # %if.then155
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_20
.LBB171_29:                             # %if.end156
                                        #   in Loop: Header=BB171_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB171_31
# %bb.30:                               # %if.then161
                                        #   in Loop: Header=BB171_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB171_20
.LBB171_31:                             # %if.end164
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB171_35
# %bb.32:                               # %if.then193
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB171_34
# %bb.33:                               # %if.then203
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB171_34:                             # %if.end205
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_35
.LBB171_35:                             # %if.end206
                                        #   in Loop: Header=BB171_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB171_37
# %bb.36:                               # %if.then223
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_20
.LBB171_37:                             # %if.end224
                                        #   in Loop: Header=BB171_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB171_39
# %bb.38:                               # %if.then229
                                        #   in Loop: Header=BB171_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB171_20
.LBB171_39:                             # %if.end232
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB171_43
# %bb.40:                               # %if.then260
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB171_42
# %bb.41:                               # %if.then270
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB171_42:                             # %if.end272
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_43
.LBB171_43:                             # %if.end273
                                        #   in Loop: Header=BB171_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB171_47
# %bb.44:                               # %if.then315
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB171_46
# %bb.45:                               # %if.then325
                                        #   in Loop: Header=BB171_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB171_46:                             # %if.end327
                                        #   in Loop: Header=BB171_2 Depth=1
	jmp	.LBB171_47
.LBB171_47:                             # %if.end328
                                        #   in Loop: Header=BB171_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB171_20
.LBB171_48:                             # %if.else
	jmp	.LBB171_49
.LBB171_49:                             # %while.body339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_50 Depth 2
	jmp	.LBB171_50
.LBB171_50:                             # %while.body341
                                        #   Parent Loop BB171_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB171_52
# %bb.51:                               # %if.then346
	movb	$0, -25(%rbp)
	jmp	.LBB171_75
.LBB171_52:                             # %if.end347
                                        #   in Loop: Header=BB171_50 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB171_54
# %bb.53:                               # %if.then351
                                        #   in Loop: Header=BB171_49 Depth=1
	jmp	.LBB171_57
.LBB171_54:                             # %if.end352
                                        #   in Loop: Header=BB171_50 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB171_56
# %bb.55:                               # %if.then382
                                        #   in Loop: Header=BB171_50 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB171_56:                             # %if.end386
                                        #   in Loop: Header=BB171_50 Depth=2
	jmp	.LBB171_50
.LBB171_57:                             # %while.end387
                                        #   in Loop: Header=BB171_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB171_59
# %bb.58:                               # %if.then393
	movb	$0, -25(%rbp)
	jmp	.LBB171_75
.LBB171_59:                             # %if.end394
                                        #   in Loop: Header=BB171_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB171_61
# %bb.60:                               # %if.then400
	movb	$1, -25(%rbp)
	jmp	.LBB171_75
.LBB171_61:                             # %if.end401
                                        #   in Loop: Header=BB171_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB171_64
# %bb.62:                               # %if.then437
                                        #   in Loop: Header=BB171_49 Depth=1
	jmp	.LBB171_63
.LBB171_63:                             # %while.body339.backedge
                                        #   in Loop: Header=BB171_49 Depth=1
	jmp	.LBB171_49
.LBB171_64:                             # %if.end438
                                        #   in Loop: Header=BB171_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB171_66
# %bb.65:                               # %if.then443
                                        #   in Loop: Header=BB171_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB171_63
.LBB171_66:                             # %if.end446
                                        #   in Loop: Header=BB171_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB171_68
# %bb.67:                               # %if.then479
                                        #   in Loop: Header=BB171_49 Depth=1
	jmp	.LBB171_63
.LBB171_68:                             # %if.end480
                                        #   in Loop: Header=BB171_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB171_70
# %bb.69:                               # %if.then485
                                        #   in Loop: Header=BB171_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB171_63
.LBB171_70:                             # %if.end488
                                        #   in Loop: Header=BB171_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB171_72
# %bb.71:                               # %if.then521
                                        #   in Loop: Header=BB171_49 Depth=1
	jmp	.LBB171_63
.LBB171_72:                             # %if.end522
                                        #   in Loop: Header=BB171_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB171_74
# %bb.73:                               # %if.then527
                                        #   in Loop: Header=BB171_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB171_63
.LBB171_74:                             # %if.end530
                                        #   in Loop: Header=BB171_49 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB171_63
.LBB171_75:                             # %return
	movb	-25(%rbp), %bl
	cmpl	$1723294883, -32(%rbp)  # imm = 0x66B764A3
	jne	.LBB171_77
.LBB171_76:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_76
.Lfunc_end171:
	.size	unRLE_obuf_to_output_SMALL.131, .Lfunc_end171-unRLE_obuf_to_output_SMALL.131
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.132    # -- Begin function BZ2_bzWriteClose.132
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.132,@function
BZ2_bzWriteClose.132:                   # @BZ2_bzWriteClose.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$496665588, -8(%rbp)    # imm = 0x1D9A83F4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -24(%rbp)
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-24(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$496665588, -8(%rbp)    # imm = 0x1D9A83F4
	jne	.LBB172_2
.LBB172_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_1
.Lfunc_end172:
	.size	BZ2_bzWriteClose.132, .Lfunc_end172-BZ2_bzWriteClose.132
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzclose.133         # -- Begin function BZ2_bzclose.133
	.p2align	4, 0x90
	.type	BZ2_bzclose.133,@function
BZ2_bzclose.133:                        # @BZ2_bzclose.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$703170424, -28(%rbp)   # imm = 0x29E98778
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB173_2
# %bb.1:                                # %if.then
	jmp	.LBB173_10
.LBB173_2:                              # %if.end
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB173_6
# %bb.3:                                # %if.then1
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
	cmpl	$0, -12(%rbp)
	je	.LBB173_5
# %bb.4:                                # %if.then3
	movq	-8(%rbp), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	BZ2_bzWriteClose
.LBB173_5:                              # %if.end4
	jmp	.LBB173_7
.LBB173_6:                              # %if.else
	movq	-8(%rbp), %rsi
	leaq	-12(%rbp), %rdi
	callq	BZ2_bzReadClose
.LBB173_7:                              # %if.end5
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB173_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB173_10
# %bb.9:                                # %if.then8
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB173_10:                             # %if.end9
	cmpl	$703170424, -28(%rbp)   # imm = 0x29E98778
	jne	.LBB173_12
.LBB173_11:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_11
.Lfunc_end173:
	.size	BZ2_bzclose.133, .Lfunc_end173-BZ2_bzclose.133
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.134         # -- Begin function BZ2_bzwrite.134
	.p2align	4, 0x90
	.type	BZ2_bzwrite.134,@function
BZ2_bzwrite.134:                        # @BZ2_bzwrite.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1679641978, -24(%rbp)  # imm = 0x641D4D7A
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB174_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_3
.LBB174_2:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB174_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1679641978, -24(%rbp)  # imm = 0x641D4D7A
	jne	.LBB174_5
.LBB174_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_4
.Lfunc_end174:
	.size	BZ2_bzwrite.134, .Lfunc_end174-BZ2_bzwrite.134
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.135
	.type	copy_input_until_stop.135,@function
copy_input_until_stop.135:              # @copy_input_until_stop.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$704160089, -32(%rbp)   # imm = 0x29F8A159
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB175_20
# %bb.1:                                # %if.then
	jmp	.LBB175_2
.LBB175_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB175_4
# %bb.3:                                # %if.then2
	jmp	.LBB175_19
.LBB175_4:                              # %if.end
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB175_6
# %bb.5:                                # %if.then4
	jmp	.LBB175_19
.LBB175_6:                              # %if.end5
                                        #   in Loop: Header=BB175_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB175_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB175_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB175_16
.LBB175_9:                              # %if.else
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB175_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB175_14
.LBB175_11:                             # %if.then32
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB175_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB175_13:                             # %if.end37
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB175_15
.LBB175_14:                             # %if.else40
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB175_15:                             # %if.end43
                                        #   in Loop: Header=BB175_2 Depth=1
	jmp	.LBB175_16
.LBB175_16:                             # %if.end44
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB175_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB175_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB175_18:                             # %if.end58
                                        #   in Loop: Header=BB175_2 Depth=1
	jmp	.LBB175_2
.LBB175_19:                             # %while.end
	jmp	.LBB175_41
.LBB175_20:                             # %if.else59
	jmp	.LBB175_21
.LBB175_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB175_23
# %bb.22:                               # %if.then65
	jmp	.LBB175_40
.LBB175_23:                             # %if.end66
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB175_25
# %bb.24:                               # %if.then71
	jmp	.LBB175_40
.LBB175_25:                             # %if.end72
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB175_27
# %bb.26:                               # %if.then75
	jmp	.LBB175_40
.LBB175_27:                             # %if.end76
                                        #   in Loop: Header=BB175_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB175_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB175_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB175_37
.LBB175_30:                             # %if.else113
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB175_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB175_35
.LBB175_32:                             # %if.then121
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB175_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB175_34:                             # %if.end126
                                        #   in Loop: Header=BB175_21 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB175_36
.LBB175_35:                             # %if.else129
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB175_36:                             # %if.end132
                                        #   in Loop: Header=BB175_21 Depth=1
	jmp	.LBB175_37
.LBB175_37:                             # %if.end133
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB175_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB175_39:                             # %if.end151
                                        #   in Loop: Header=BB175_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB175_21
.LBB175_40:                             # %while.end154
	jmp	.LBB175_41
.LBB175_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$704160089, -32(%rbp)   # imm = 0x29F8A159
	jne	.LBB175_43
.LBB175_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_42
.Lfunc_end175:
	.size	copy_input_until_stop.135, .Lfunc_end175-copy_input_until_stop.135
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror.136         # -- Begin function BZ2_bzerror.136
	.p2align	4, 0x90
	.type	BZ2_bzerror.136,@function
BZ2_bzerror.136:                        # @BZ2_bzerror.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1298971794, -16(%rbp)  # imm = 0x4D6CBC92
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	5096(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.LBB176_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB176_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	imull	$-1, -12(%rbp), %eax
	cltq
	movq	bzerrorstrings(,%rax,8), %rbx
	cmpl	$1298971794, -16(%rbp)  # imm = 0x4D6CBC92
	jne	.LBB176_4
.LBB176_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_3
.Lfunc_end176:
	.size	BZ2_bzerror.136, .Lfunc_end176-BZ2_bzerror.136
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_SMALL.137
	.type	unRLE_obuf_to_output_SMALL.137,@function
unRLE_obuf_to_output_SMALL.137:         # @unRLE_obuf_to_output_SMALL.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1781359927, -32(%rbp)  # imm = 0x6A2D6537
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB177_48
# %bb.1:                                # %if.then
	jmp	.LBB177_2
.LBB177_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_3 Depth 2
	jmp	.LBB177_3
.LBB177_3:                              # %while.body2
                                        #   Parent Loop BB177_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB177_5
# %bb.4:                                # %if.then3
	movb	$0, -25(%rbp)
	jmp	.LBB177_75
.LBB177_5:                              # %if.end
                                        #   in Loop: Header=BB177_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB177_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_10
.LBB177_7:                              # %if.end6
                                        #   in Loop: Header=BB177_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB177_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB177_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB177_9:                              # %if.end26
                                        #   in Loop: Header=BB177_3 Depth=2
	jmp	.LBB177_3
.LBB177_10:                             # %while.end
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB177_12
# %bb.11:                               # %if.then29
	movb	$0, -25(%rbp)
	jmp	.LBB177_75
.LBB177_12:                             # %if.end30
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB177_14
# %bb.13:                               # %if.then36
	movb	$1, -25(%rbp)
	jmp	.LBB177_75
.LBB177_14:                             # %if.end37
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB177_18
# %bb.15:                               # %if.then59
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB177_17
# %bb.16:                               # %if.then68
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB177_17:                             # %if.end70
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_18
.LBB177_18:                             # %if.end71
                                        #   in Loop: Header=BB177_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB177_21
# %bb.19:                               # %if.then87
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_20
.LBB177_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_2
.LBB177_21:                             # %if.end88
                                        #   in Loop: Header=BB177_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB177_23
# %bb.22:                               # %if.then93
                                        #   in Loop: Header=BB177_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB177_20
.LBB177_23:                             # %if.end96
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB177_27
# %bb.24:                               # %if.then125
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB177_26
# %bb.25:                               # %if.then135
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB177_26:                             # %if.end137
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_27
.LBB177_27:                             # %if.end138
                                        #   in Loop: Header=BB177_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB177_29
# %bb.28:                               # %if.then155
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_20
.LBB177_29:                             # %if.end156
                                        #   in Loop: Header=BB177_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB177_31
# %bb.30:                               # %if.then161
                                        #   in Loop: Header=BB177_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB177_20
.LBB177_31:                             # %if.end164
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB177_35
# %bb.32:                               # %if.then193
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB177_34
# %bb.33:                               # %if.then203
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB177_34:                             # %if.end205
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_35
.LBB177_35:                             # %if.end206
                                        #   in Loop: Header=BB177_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB177_37
# %bb.36:                               # %if.then223
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_20
.LBB177_37:                             # %if.end224
                                        #   in Loop: Header=BB177_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB177_39
# %bb.38:                               # %if.then229
                                        #   in Loop: Header=BB177_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB177_20
.LBB177_39:                             # %if.end232
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB177_43
# %bb.40:                               # %if.then260
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB177_42
# %bb.41:                               # %if.then270
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB177_42:                             # %if.end272
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_43
.LBB177_43:                             # %if.end273
                                        #   in Loop: Header=BB177_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB177_47
# %bb.44:                               # %if.then315
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB177_46
# %bb.45:                               # %if.then325
                                        #   in Loop: Header=BB177_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB177_46:                             # %if.end327
                                        #   in Loop: Header=BB177_2 Depth=1
	jmp	.LBB177_47
.LBB177_47:                             # %if.end328
                                        #   in Loop: Header=BB177_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB177_20
.LBB177_48:                             # %if.else
	jmp	.LBB177_49
.LBB177_49:                             # %while.body339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_50 Depth 2
	jmp	.LBB177_50
.LBB177_50:                             # %while.body341
                                        #   Parent Loop BB177_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB177_52
# %bb.51:                               # %if.then346
	movb	$0, -25(%rbp)
	jmp	.LBB177_75
.LBB177_52:                             # %if.end347
                                        #   in Loop: Header=BB177_50 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB177_54
# %bb.53:                               # %if.then351
                                        #   in Loop: Header=BB177_49 Depth=1
	jmp	.LBB177_57
.LBB177_54:                             # %if.end352
                                        #   in Loop: Header=BB177_50 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB177_56
# %bb.55:                               # %if.then382
                                        #   in Loop: Header=BB177_50 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB177_56:                             # %if.end386
                                        #   in Loop: Header=BB177_50 Depth=2
	jmp	.LBB177_50
.LBB177_57:                             # %while.end387
                                        #   in Loop: Header=BB177_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB177_59
# %bb.58:                               # %if.then393
	movb	$0, -25(%rbp)
	jmp	.LBB177_75
.LBB177_59:                             # %if.end394
                                        #   in Loop: Header=BB177_49 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB177_61
# %bb.60:                               # %if.then400
	movb	$1, -25(%rbp)
	jmp	.LBB177_75
.LBB177_61:                             # %if.end401
                                        #   in Loop: Header=BB177_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB177_64
# %bb.62:                               # %if.then437
                                        #   in Loop: Header=BB177_49 Depth=1
	jmp	.LBB177_63
.LBB177_63:                             # %while.body339.backedge
                                        #   in Loop: Header=BB177_49 Depth=1
	jmp	.LBB177_49
.LBB177_64:                             # %if.end438
                                        #   in Loop: Header=BB177_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB177_66
# %bb.65:                               # %if.then443
                                        #   in Loop: Header=BB177_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB177_63
.LBB177_66:                             # %if.end446
                                        #   in Loop: Header=BB177_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB177_68
# %bb.67:                               # %if.then479
                                        #   in Loop: Header=BB177_49 Depth=1
	jmp	.LBB177_63
.LBB177_68:                             # %if.end480
                                        #   in Loop: Header=BB177_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB177_70
# %bb.69:                               # %if.then485
                                        #   in Loop: Header=BB177_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB177_63
.LBB177_70:                             # %if.end488
                                        #   in Loop: Header=BB177_49 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB177_72
# %bb.71:                               # %if.then521
                                        #   in Loop: Header=BB177_49 Depth=1
	jmp	.LBB177_63
.LBB177_72:                             # %if.end522
                                        #   in Loop: Header=BB177_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB177_74
# %bb.73:                               # %if.then527
                                        #   in Loop: Header=BB177_49 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB177_63
.LBB177_74:                             # %if.end530
                                        #   in Loop: Header=BB177_49 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %edi
	movq	-24(%rbp), %rsi
	addq	$1096, %rsi             # imm = 0x448
	callq	BZ2_indexIntoF
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movq	3160(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movq	3168(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movl	60(%rdx), %edx
	shrl	$1, %edx
	movl	%edx, %edx
	movzbl	(%rcx,%rdx), %edx
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	shll	$2, %ecx
	andl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shrl	%cl, %edx
	andl	$15, %edx
	shll	$16, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB177_63
.LBB177_75:                             # %return
	movb	-25(%rbp), %bl
	cmpl	$1781359927, -32(%rbp)  # imm = 0x6A2D6537
	jne	.LBB177_77
.LBB177_76:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_76
.Lfunc_end177:
	.size	unRLE_obuf_to_output_SMALL.137, .Lfunc_end177-unRLE_obuf_to_output_SMALL.137
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block.138
	.type	add_pair_to_block.138,@function
add_pair_to_block.138:                  # @add_pair_to_block.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$271183844, -24(%rbp)   # imm = 0x1029EFE4
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -1(%rbp)
	movl	$0, -20(%rbp)
.LBB178_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	96(%rcx), %eax
	jge	.LBB178_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-1(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB178_1
.LBB178_4:                              # %for.end
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movb	$1, 128(%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB178_7
	jmp	.LBB178_5
.LBB178_5:                              # %for.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB178_8
	jmp	.LBB178_6
.LBB178_6:                              # %for.end
	subl	$3, %eax
	je	.LBB178_9
	jmp	.LBB178_10
.LBB178_7:                              # %sw.bb
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB178_11
.LBB178_8:                              # %sw.bb14
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB178_11
.LBB178_9:                              # %sw.bb27
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB178_11
.LBB178_10:                             # %sw.default
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	96(%rcx), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	$1, 128(%rax,%rcx)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	subl	$4, %eax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
.LBB178_11:                             # %sw.epilog
	cmpl	$271183844, -24(%rbp)   # imm = 0x1029EFE4
	jne	.LBB178_13
.LBB178_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_12
.Lfunc_end178:
	.size	add_pair_to_block.138, .Lfunc_end178-add_pair_to_block.138
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.139
	.type	default_bzalloc.139,@function
default_bzalloc.139:                    # @default_bzalloc.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1668440129, -20(%rbp)  # imm = 0x63726041
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	-12(%rbp), %eax
	imull	-16(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1668440129, -20(%rbp)  # imm = 0x63726041
	jne	.LBB179_2
.LBB179_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_1
.Lfunc_end179:
	.size	default_bzalloc.139, .Lfunc_end179-default_bzalloc.139
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.140 # -- Begin function BZ2_bzReadGetUnused.140
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.140,@function
BZ2_bzReadGetUnused.140:                # @BZ2_bzReadGetUnused.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1265878548, -20(%rbp)  # imm = 0x4B73C614
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB180_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB180_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB180_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB180_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB180_5:                              # %if.end5
	jmp	.LBB180_24
.LBB180_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB180_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB180_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB180_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB180_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB180_11:                             # %if.end16
	jmp	.LBB180_24
.LBB180_12:                             # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB180_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB180_19
.LBB180_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB180_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB180_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB180_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB180_18:                             # %if.end27
	jmp	.LBB180_24
.LBB180_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB180_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB180_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB180_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB180_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB180_24:                             # %return
	cmpl	$1265878548, -20(%rbp)  # imm = 0x4B73C614
	jne	.LBB180_26
.LBB180_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_25
.Lfunc_end180:
	.size	BZ2_bzReadGetUnused.140, .Lfunc_end180-BZ2_bzReadGetUnused.140
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.141    # -- Begin function BZ2_bzWriteClose.141
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.141,@function
BZ2_bzWriteClose.141:                   # @BZ2_bzWriteClose.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1399136074, -4(%rbp)   # imm = 0x53651F4A
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -8(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%r8, -40(%rbp)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	-24(%rbp), %rcx
	movq	-40(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1399136074, -4(%rbp)   # imm = 0x53651F4A
	jne	.LBB181_2
.LBB181_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_1
.Lfunc_end181:
	.size	BZ2_bzWriteClose.141, .Lfunc_end181-BZ2_bzWriteClose.141
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.142          # -- Begin function BZ2_bzread.142
	.p2align	4, 0x90
	.type	BZ2_bzread.142,@function
BZ2_bzread.142:                         # @BZ2_bzread.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1868512891, -20(%rbp)  # imm = 0x6F5F3E7B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -28(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB182_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB182_6
.LBB182_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-28(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -24(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB182_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB182_5
.LBB182_4:                              # %if.then3
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB182_6
.LBB182_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB182_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1868512891, -20(%rbp)  # imm = 0x6F5F3E7B
	jne	.LBB182_8
.LBB182_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_7
.Lfunc_end182:
	.size	BZ2_bzread.142, .Lfunc_end182-BZ2_bzread.142
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.143      # -- Begin function BZ2_bzReadOpen.143
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.143,@function
BZ2_bzReadOpen.143:                     # @BZ2_bzReadOpen.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1386570319, -76(%rbp)  # imm = 0x52A5624F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -64(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB183_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB183_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB183_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB183_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB183_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -36(%rbp)
	je	.LBB183_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	jne	.LBB183_14
.LBB183_7:                              # %lor.lhs.false7
	cmpl	$0, -40(%rbp)
	jl	.LBB183_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -40(%rbp)
	jg	.LBB183_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -64(%rbp)
	jne	.LBB183_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB183_14
.LBB183_11:                             # %lor.lhs.false15
	cmpq	$0, -64(%rbp)
	je	.LBB183_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB183_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB183_19
.LBB183_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB183_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB183_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB183_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB183_18:                             # %if.end28
	movq	$0, -56(%rbp)
	jmp	.LBB183_45
.LBB183_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB183_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB183_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB183_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB183_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB183_24:                             # %if.end37
	movq	$0, -56(%rbp)
	jmp	.LBB183_45
.LBB183_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB183_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB183_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB183_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB183_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB183_30:                             # %if.end48
	movq	$0, -56(%rbp)
	jmp	.LBB183_45
.LBB183_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB183_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB183_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB183_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB183_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB183_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB183_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB183_36 Depth=1
	movq	-64(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_36
.LBB183_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB183_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB183_41
# %bb.40:                               # %if.then67
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB183_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB183_43
# %bb.42:                               # %if.then70
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB183_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -56(%rbp)
	jmp	.LBB183_45
.LBB183_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB183_45:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$1386570319, -76(%rbp)  # imm = 0x52A5624F
	jne	.LBB183_47
.LBB183_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_46
.Lfunc_end183:
	.size	BZ2_bzReadOpen.143, .Lfunc_end183-BZ2_bzReadOpen.143
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror.144         # -- Begin function BZ2_bzerror.144
	.p2align	4, 0x90
	.type	BZ2_bzerror.144,@function
BZ2_bzerror.144:                        # @BZ2_bzerror.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1307717489, -16(%rbp)  # imm = 0x4DF22F71
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movl	5096(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.LBB184_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB184_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	imull	$-1, -12(%rbp), %eax
	cltq
	movq	bzerrorstrings(,%rax,8), %rbx
	cmpl	$1307717489, -16(%rbp)  # imm = 0x4DF22F71
	jne	.LBB184_4
.LBB184_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_3
.Lfunc_end184:
	.size	BZ2_bzerror.144, .Lfunc_end184-BZ2_bzerror.144
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.145
	.type	bzopen_or_bzdopen.145,@function
bzopen_or_bzdopen.145:                  # @bzopen_or_bzdopen.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$999660145, -72(%rbp)   # imm = 0x3B959A71
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -84(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -76(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB185_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB185_39
.LBB185_2:                              # %if.end
	jmp	.LBB185_3
.LBB185_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB185_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB185_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB185_7
	jmp	.LBB185_5
.LBB185_5:                              # %while.body
                                        #   in Loop: Header=BB185_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB185_9
	jmp	.LBB185_6
.LBB185_6:                              # %while.body
                                        #   in Loop: Header=BB185_3 Depth=1
	subl	$119, %eax
	je	.LBB185_8
	jmp	.LBB185_10
.LBB185_7:                              # %sw.bb
                                        #   in Loop: Header=BB185_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB185_13
.LBB185_8:                              # %sw.bb1
                                        #   in Loop: Header=BB185_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB185_13
.LBB185_9:                              # %sw.bb2
                                        #   in Loop: Header=BB185_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB185_13
.LBB185_10:                             # %sw.default
                                        #   in Loop: Header=BB185_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB185_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB185_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB185_12:                             # %if.end8
                                        #   in Loop: Header=BB185_3 Depth=1
	jmp	.LBB185_13
.LBB185_13:                             # %sw.epilog
                                        #   in Loop: Header=BB185_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB185_3
.LBB185_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -84(%rbp)
	jne	.LBB185_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB185_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB185_21
.LBB185_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB185_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB185_20
.LBB185_19:                             # %cond.false
	movq	stdin, %rax
.LBB185_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB185_22
.LBB185_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB185_22:                             # %if.end26
	jmp	.LBB185_24
.LBB185_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-68(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB185_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB185_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB185_39
.LBB185_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB185_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB185_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB185_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB185_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB185_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-80(%rbp), %r8d
	leaq	-88(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB185_33
.LBB185_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-76(%rbp), %r9d
	leaq	-88(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB185_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB185_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB185_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB185_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB185_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB185_39
.LBB185_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB185_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$999660145, -72(%rbp)   # imm = 0x3B959A71
	jne	.LBB185_41
.LBB185_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_40
.Lfunc_end185:
	.size	bzopen_or_bzdopen.145, .Lfunc_end185-bzopen_or_bzdopen.145
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.146
	.type	bzopen_or_bzdopen.146,@function
bzopen_or_bzdopen.146:                  # @bzopen_or_bzdopen.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$421946202, -88(%rbp)   # imm = 0x1926635A
	movq	%rdi, -64(%rbp)
	movl	%esi, -84(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -76(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -72(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB186_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB186_39
.LBB186_2:                              # %if.end
	jmp	.LBB186_3
.LBB186_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB186_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB186_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB186_7
	jmp	.LBB186_5
.LBB186_5:                              # %while.body
                                        #   in Loop: Header=BB186_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB186_9
	jmp	.LBB186_6
.LBB186_6:                              # %while.body
                                        #   in Loop: Header=BB186_3 Depth=1
	subl	$119, %eax
	je	.LBB186_8
	jmp	.LBB186_10
.LBB186_7:                              # %sw.bb
                                        #   in Loop: Header=BB186_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB186_13
.LBB186_8:                              # %sw.bb1
                                        #   in Loop: Header=BB186_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB186_13
.LBB186_9:                              # %sw.bb2
                                        #   in Loop: Header=BB186_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB186_13
.LBB186_10:                             # %sw.default
                                        #   in Loop: Header=BB186_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB186_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB186_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB186_12:                             # %if.end8
                                        #   in Loop: Header=BB186_3 Depth=1
	jmp	.LBB186_13
.LBB186_13:                             # %sw.epilog
                                        #   in Loop: Header=BB186_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB186_3
.LBB186_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -68(%rbp)
	jne	.LBB186_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB186_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB186_21
.LBB186_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB186_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB186_20
.LBB186_19:                             # %cond.false
	movq	stdin, %rax
.LBB186_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB186_22
.LBB186_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB186_22:                             # %if.end26
	jmp	.LBB186_24
.LBB186_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-84(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB186_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB186_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB186_39
.LBB186_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB186_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB186_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB186_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB186_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB186_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-76(%rbp), %r8d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB186_33
.LBB186_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-72(%rbp), %r9d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB186_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB186_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB186_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB186_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB186_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB186_39
.LBB186_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB186_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$421946202, -88(%rbp)   # imm = 0x1926635A
	jne	.LBB186_41
.LBB186_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_40
.Lfunc_end186:
	.size	bzopen_or_bzdopen.146, .Lfunc_end186-bzopen_or_bzdopen.146
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.147    # -- Begin function BZ2_bzWriteClose.147
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.147,@function
BZ2_bzWriteClose.147:                   # @BZ2_bzWriteClose.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$962509303, -4(%rbp)    # imm = 0x395EB9F7
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	%r8, -24(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$962509303, -4(%rbp)    # imm = 0x395EB9F7
	jne	.LBB187_2
.LBB187_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_1
.Lfunc_end187:
	.size	BZ2_bzWriteClose.147, .Lfunc_end187-BZ2_bzWriteClose.147
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose.148     # -- Begin function BZ2_bzReadClose.148
	.p2align	4, 0x90
	.type	BZ2_bzReadClose.148,@function
BZ2_bzReadClose.148:                    # @BZ2_bzReadClose.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1401852831, -20(%rbp)  # imm = 0x538E939F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB188_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB188_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB188_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB188_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	jne	.LBB188_10
# %bb.5:                                # %if.then5
	cmpq	$0, -16(%rbp)
	je	.LBB188_7
# %bb.6:                                # %if.then7
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB188_7:                              # %if.end8
	cmpq	$0, -8(%rbp)
	je	.LBB188_9
# %bb.8:                                # %if.then10
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB188_9:                              # %if.end12
	jmp	.LBB188_19
.LBB188_10:                             # %if.end13
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB188_16
# %bb.11:                               # %if.then14
	cmpq	$0, -16(%rbp)
	je	.LBB188_13
# %bb.12:                               # %if.then16
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB188_13:                             # %if.end17
	cmpq	$0, -8(%rbp)
	je	.LBB188_15
# %bb.14:                               # %if.then19
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB188_15:                             # %if.end21
	jmp	.LBB188_19
.LBB188_16:                             # %if.end22
	movq	-8(%rbp), %rax
	cmpb	$0, 5100(%rax)
	je	.LBB188_18
# %bb.17:                               # %if.then24
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompressEnd
.LBB188_18:                             # %if.end25
	movq	-8(%rbp), %rdi
	callq	free
.LBB188_19:                             # %return
	cmpl	$1401852831, -20(%rbp)  # imm = 0x538E939F
	jne	.LBB188_21
.LBB188_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_20
.Lfunc_end188:
	.size	BZ2_bzReadClose.148, .Lfunc_end188-BZ2_bzReadClose.148
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.149      # -- Begin function BZ2_indexIntoF.149
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.149,@function
BZ2_indexIntoF.149:                     # @BZ2_indexIntoF.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1744529437, -24(%rbp)  # imm = 0x67FB681D
	movl	%edi, -28(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB189_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB189_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_4
.LBB189_3:                              # %if.else
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB189_4:                              # %if.end
                                        #   in Loop: Header=BB189_1 Depth=1
	jmp	.LBB189_5
.LBB189_5:                              # %do.cond
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB189_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1744529437, -24(%rbp)  # imm = 0x67FB681D
	jne	.LBB189_8
.LBB189_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_7
.Lfunc_end189:
	.size	BZ2_indexIntoF.149, .Lfunc_end189-BZ2_indexIntoF.149
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.150
	.type	default_bzalloc.150,@function
default_bzalloc.150:                    # @default_bzalloc.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1894147289, -20(%rbp)  # imm = 0x70E664D9
	movq	%rdi, -40(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	-16(%rbp), %eax
	imull	-12(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1894147289, -20(%rbp)  # imm = 0x70E664D9
	jne	.LBB190_2
.LBB190_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_1
.Lfunc_end190:
	.size	default_bzalloc.150, .Lfunc_end190-default_bzalloc.150
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.151  # -- Begin function BZ2_bzWriteClose64.151
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.151,@function
BZ2_bzWriteClose64.151:                 # @BZ2_bzWriteClose64.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$183182866, -64(%rbp)   # imm = 0xAEB2612
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -48(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB191_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB191_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB191_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB191_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB191_5:                              # %if.end5
	jmp	.LBB191_71
.LBB191_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB191_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB191_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB191_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB191_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB191_11:                             # %if.end14
	jmp	.LBB191_71
.LBB191_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB191_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB191_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB191_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB191_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB191_17:                             # %if.end24
	jmp	.LBB191_71
.LBB191_18:                             # %if.end25
	cmpq	$0, -40(%rbp)
	je	.LBB191_20
# %bb.19:                               # %if.then27
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB191_20:                             # %if.end28
	cmpq	$0, -56(%rbp)
	je	.LBB191_22
# %bb.21:                               # %if.then30
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB191_22:                             # %if.end31
	cmpq	$0, -48(%rbp)
	je	.LBB191_24
# %bb.23:                               # %if.then33
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB191_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB191_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB191_26:                             # %if.end37
	cmpl	$0, -24(%rbp)
	jne	.LBB191_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB191_49
# %bb.28:                               # %if.then41
	jmp	.LBB191_29
.LBB191_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB191_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB191_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB191_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB191_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB191_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB191_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB191_35:                             # %if.end55
	jmp	.LBB191_71
.LBB191_36:                             # %if.end56
                                        #   in Loop: Header=BB191_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB191_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB191_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB191_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB191_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB191_44
.LBB191_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB191_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB191_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB191_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB191_43:                             # %if.end82
	jmp	.LBB191_71
.LBB191_44:                             # %if.end83
                                        #   in Loop: Header=BB191_29 Depth=1
	jmp	.LBB191_45
.LBB191_45:                             # %if.end84
                                        #   in Loop: Header=BB191_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB191_47
# %bb.46:                               # %if.then87
	jmp	.LBB191_48
.LBB191_47:                             # %if.end88
                                        #   in Loop: Header=BB191_29 Depth=1
	jmp	.LBB191_29
.LBB191_48:                             # %while.end
	jmp	.LBB191_49
.LBB191_49:                             # %if.end89
	cmpl	$0, -24(%rbp)
	jne	.LBB191_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB191_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB191_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB191_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB191_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB191_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB191_56:                             # %if.end110
	jmp	.LBB191_71
.LBB191_57:                             # %if.end111
	jmp	.LBB191_58
.LBB191_58:                             # %if.end112
	cmpq	$0, -40(%rbp)
	je	.LBB191_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB191_60:                             # %if.end117
	cmpq	$0, -56(%rbp)
	je	.LBB191_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB191_62:                             # %if.end122
	cmpq	$0, -48(%rbp)
	je	.LBB191_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB191_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB191_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB191_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB191_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB191_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB191_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB191_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB191_71:                             # %return
	cmpl	$183182866, -64(%rbp)   # imm = 0xAEB2612
	jne	.LBB191_73
.LBB191_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_72
.Lfunc_end191:
	.size	BZ2_bzWriteClose64.151, .Lfunc_end191-BZ2_bzWriteClose64.151
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.152      # -- Begin function BZ2_bzReadOpen.152
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.152,@function
BZ2_bzReadOpen.152:                     # @BZ2_bzReadOpen.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$725294212, -76(%rbp)   # imm = 0x2B3B1C84
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -44(%rbp)
	movq	%r8, -64(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB192_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB192_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB192_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB192_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB192_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -44(%rbp)
	je	.LBB192_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -44(%rbp)
	jne	.LBB192_14
.LBB192_7:                              # %lor.lhs.false7
	cmpl	$0, -36(%rbp)
	jl	.LBB192_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -36(%rbp)
	jg	.LBB192_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -64(%rbp)
	jne	.LBB192_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB192_14
.LBB192_11:                             # %lor.lhs.false15
	cmpq	$0, -64(%rbp)
	je	.LBB192_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB192_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB192_19
.LBB192_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB192_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB192_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB192_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB192_18:                             # %if.end28
	movq	$0, -56(%rbp)
	jmp	.LBB192_45
.LBB192_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB192_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB192_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB192_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB192_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB192_24:                             # %if.end37
	movq	$0, -56(%rbp)
	jmp	.LBB192_45
.LBB192_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB192_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB192_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB192_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB192_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB192_30:                             # %if.end48
	movq	$0, -56(%rbp)
	jmp	.LBB192_45
.LBB192_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB192_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB192_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB192_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB192_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB192_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB192_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB192_36 Depth=1
	movq	-64(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB192_36
.LBB192_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB192_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB192_41
# %bb.40:                               # %if.then67
	movl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB192_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB192_43
# %bb.42:                               # %if.then70
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB192_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -56(%rbp)
	jmp	.LBB192_45
.LBB192_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB192_45:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$725294212, -76(%rbp)   # imm = 0x2B3B1C84
	jne	.LBB192_47
.LBB192_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_46
.Lfunc_end192:
	.size	BZ2_bzReadOpen.152, .Lfunc_end192-BZ2_bzReadOpen.152
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.153  # -- Begin function BZ2_bzWriteClose64.153
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.153,@function
BZ2_bzWriteClose64.153:                 # @BZ2_bzWriteClose64.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$683193396, -64(%rbp)   # imm = 0x28B8B434
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB193_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB193_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB193_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB193_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB193_5:                              # %if.end5
	jmp	.LBB193_71
.LBB193_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB193_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB193_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB193_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB193_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB193_11:                             # %if.end14
	jmp	.LBB193_71
.LBB193_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB193_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB193_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB193_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB193_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB193_17:                             # %if.end24
	jmp	.LBB193_71
.LBB193_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB193_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB193_20:                             # %if.end28
	cmpq	$0, -40(%rbp)
	je	.LBB193_22
# %bb.21:                               # %if.then30
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB193_22:                             # %if.end31
	cmpq	$0, -48(%rbp)
	je	.LBB193_24
# %bb.23:                               # %if.then33
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB193_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB193_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB193_26:                             # %if.end37
	cmpl	$0, -24(%rbp)
	jne	.LBB193_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB193_49
# %bb.28:                               # %if.then41
	jmp	.LBB193_29
.LBB193_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB193_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB193_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB193_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB193_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB193_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB193_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB193_35:                             # %if.end55
	jmp	.LBB193_71
.LBB193_36:                             # %if.end56
                                        #   in Loop: Header=BB193_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB193_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB193_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB193_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB193_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB193_44
.LBB193_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB193_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB193_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB193_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB193_43:                             # %if.end82
	jmp	.LBB193_71
.LBB193_44:                             # %if.end83
                                        #   in Loop: Header=BB193_29 Depth=1
	jmp	.LBB193_45
.LBB193_45:                             # %if.end84
                                        #   in Loop: Header=BB193_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB193_47
# %bb.46:                               # %if.then87
	jmp	.LBB193_48
.LBB193_47:                             # %if.end88
                                        #   in Loop: Header=BB193_29 Depth=1
	jmp	.LBB193_29
.LBB193_48:                             # %while.end
	jmp	.LBB193_49
.LBB193_49:                             # %if.end89
	cmpl	$0, -24(%rbp)
	jne	.LBB193_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB193_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB193_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB193_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB193_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB193_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB193_56:                             # %if.end110
	jmp	.LBB193_71
.LBB193_57:                             # %if.end111
	jmp	.LBB193_58
.LBB193_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB193_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB193_60:                             # %if.end117
	cmpq	$0, -40(%rbp)
	je	.LBB193_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB193_62:                             # %if.end122
	cmpq	$0, -48(%rbp)
	je	.LBB193_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB193_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB193_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB193_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB193_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB193_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB193_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB193_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB193_71:                             # %return
	cmpl	$683193396, -64(%rbp)   # imm = 0x28B8B434
	jne	.LBB193_73
.LBB193_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_72
.Lfunc_end193:
	.size	BZ2_bzWriteClose64.153, .Lfunc_end193-BZ2_bzWriteClose64.153
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose.154     # -- Begin function BZ2_bzReadClose.154
	.p2align	4, 0x90
	.type	BZ2_bzReadClose.154,@function
BZ2_bzReadClose.154:                    # @BZ2_bzReadClose.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1230654675, -20(%rbp)  # imm = 0x495A4CD3
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB194_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB194_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB194_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB194_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	jne	.LBB194_10
# %bb.5:                                # %if.then5
	cmpq	$0, -16(%rbp)
	je	.LBB194_7
# %bb.6:                                # %if.then7
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB194_7:                              # %if.end8
	cmpq	$0, -8(%rbp)
	je	.LBB194_9
# %bb.8:                                # %if.then10
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB194_9:                              # %if.end12
	jmp	.LBB194_19
.LBB194_10:                             # %if.end13
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB194_16
# %bb.11:                               # %if.then14
	cmpq	$0, -16(%rbp)
	je	.LBB194_13
# %bb.12:                               # %if.then16
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB194_13:                             # %if.end17
	cmpq	$0, -8(%rbp)
	je	.LBB194_15
# %bb.14:                               # %if.then19
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB194_15:                             # %if.end21
	jmp	.LBB194_19
.LBB194_16:                             # %if.end22
	movq	-8(%rbp), %rax
	cmpb	$0, 5100(%rax)
	je	.LBB194_18
# %bb.17:                               # %if.then24
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompressEnd
.LBB194_18:                             # %if.end25
	movq	-8(%rbp), %rdi
	callq	free
.LBB194_19:                             # %return
	cmpl	$1230654675, -20(%rbp)  # imm = 0x495A4CD3
	jne	.LBB194_21
.LBB194_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_20
.Lfunc_end194:
	.size	BZ2_bzReadClose.154, .Lfunc_end194-BZ2_bzReadClose.154
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.155         # -- Begin function BZ2_bzwrite.155
	.p2align	4, 0x90
	.type	BZ2_bzwrite.155,@function
BZ2_bzwrite.155:                        # @BZ2_bzwrite.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$132452373, -24(%rbp)   # imm = 0x7E51015
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB195_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB195_3
.LBB195_2:                              # %if.else
	movl	$-1, -16(%rbp)
.LBB195_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$132452373, -24(%rbp)   # imm = 0x7E51015
	jne	.LBB195_5
.LBB195_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_4
.Lfunc_end195:
	.size	BZ2_bzwrite.155, .Lfunc_end195-BZ2_bzwrite.155
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block.156
	.type	add_pair_to_block.156,@function
add_pair_to_block.156:                  # @add_pair_to_block.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1335164430, -24(%rbp)  # imm = 0x4F94FE0E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -1(%rbp)
	movl	$0, -20(%rbp)
.LBB196_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	96(%rcx), %eax
	jge	.LBB196_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB196_1 Depth=1
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-1(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB196_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB196_1
.LBB196_4:                              # %for.end
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movb	$1, 128(%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB196_7
	jmp	.LBB196_5
.LBB196_5:                              # %for.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB196_8
	jmp	.LBB196_6
.LBB196_6:                              # %for.end
	subl	$3, %eax
	je	.LBB196_9
	jmp	.LBB196_10
.LBB196_7:                              # %sw.bb
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB196_11
.LBB196_8:                              # %sw.bb14
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB196_11
.LBB196_9:                              # %sw.bb27
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB196_11
.LBB196_10:                             # %sw.default
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	96(%rcx), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	$1, 128(%rax,%rcx)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	subl	$4, %eax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
.LBB196_11:                             # %sw.epilog
	cmpl	$1335164430, -24(%rbp)  # imm = 0x4F94FE0E
	jne	.LBB196_13
.LBB196_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_12
.Lfunc_end196:
	.size	add_pair_to_block.156, .Lfunc_end196-add_pair_to_block.156
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.157         # -- Begin function BZ2_bzWrite.157
	.p2align	4, 0x90
	.type	BZ2_bzWrite.157,@function
BZ2_bzWrite.157:                        # @BZ2_bzWrite.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1192159307, -36(%rbp)  # imm = 0x470EE84B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB197_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB197_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB197_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB197_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB197_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB197_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -20(%rbp)
	jge	.LBB197_12
.LBB197_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB197_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB197_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB197_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB197_11:                             # %if.end15
	jmp	.LBB197_53
.LBB197_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB197_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB197_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB197_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB197_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB197_17:                             # %if.end24
	jmp	.LBB197_53
.LBB197_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB197_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB197_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB197_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB197_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB197_23:                             # %if.end34
	jmp	.LBB197_53
.LBB197_24:                             # %if.end35
	cmpl	$0, -20(%rbp)
	jne	.LBB197_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB197_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB197_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB197_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB197_29:                             # %if.end44
	jmp	.LBB197_53
.LBB197_30:                             # %if.end45
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB197_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	je	.LBB197_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB197_34
# %bb.33:                               # %if.then55
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB197_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB197_36
# %bb.35:                               # %if.then58
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB197_36:                             # %if.end60
	jmp	.LBB197_53
.LBB197_37:                             # %if.end61
                                        #   in Loop: Header=BB197_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB197_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB197_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB197_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB197_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB197_45
.LBB197_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB197_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB197_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB197_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB197_44:                             # %if.end88
	jmp	.LBB197_53
.LBB197_45:                             # %if.end89
                                        #   in Loop: Header=BB197_31 Depth=1
	jmp	.LBB197_46
.LBB197_46:                             # %if.end90
                                        #   in Loop: Header=BB197_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB197_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB197_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB197_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB197_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB197_51:                             # %if.end104
	jmp	.LBB197_53
.LBB197_52:                             # %if.end105
                                        #   in Loop: Header=BB197_31 Depth=1
	jmp	.LBB197_31
.LBB197_53:                             # %return
	cmpl	$1192159307, -36(%rbp)  # imm = 0x470EE84B
	jne	.LBB197_55
.LBB197_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_54
.Lfunc_end197:
	.size	BZ2_bzWrite.157, .Lfunc_end197-BZ2_bzWrite.157
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.158 # -- Begin function BZ2_bzBuffToBuffCompress.158
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.158,@function
BZ2_bzBuffToBuffCompress.158:           # @BZ2_bzBuffToBuffCompress.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$304347438, -36(%rbp)   # imm = 0x1223F92E
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB198_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB198_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB198_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB198_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB198_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB198_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB198_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB198_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB198_10
.LBB198_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB198_21
.LBB198_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB198_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB198_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB198_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_21
.LBB198_14:                             # %if.end21
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB198_16
# %bb.15:                               # %if.then24
	jmp	.LBB198_19
.LBB198_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB198_18
# %bb.17:                               # %if.then27
	jmp	.LBB198_20
.LBB198_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB198_21
.LBB198_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB198_21
.LBB198_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB198_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$304347438, -36(%rbp)   # imm = 0x1223F92E
	jne	.LBB198_23
.LBB198_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_22
.Lfunc_end198:
	.size	BZ2_bzBuffToBuffCompress.158, .Lfunc_end198-BZ2_bzBuffToBuffCompress.158
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.159      # -- Begin function BZ2_indexIntoF.159
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.159,@function
BZ2_indexIntoF.159:                     # @BZ2_indexIntoF.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$364320106, -28(%rbp)   # imm = 0x15B7156A
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB199_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB199_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB199_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB199_4
.LBB199_3:                              # %if.else
                                        #   in Loop: Header=BB199_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB199_4:                              # %if.end
                                        #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_5
.LBB199_5:                              # %do.cond
                                        #   in Loop: Header=BB199_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB199_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$364320106, -28(%rbp)   # imm = 0x15B7156A
	jne	.LBB199_8
.LBB199_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_7
.Lfunc_end199:
	.size	BZ2_indexIntoF.159, .Lfunc_end199-BZ2_indexIntoF.159
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.160
	.type	handle_compress.160,@function
handle_compress.160:                    # @handle_compress.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$559086944, -28(%rbp)   # imm = 0x2152FD60
	movq	%rdi, -40(%rbp)
	movb	$0, -10(%rbp)
	movb	$0, -9(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB200_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB200_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB200_4
# %bb.3:                                # %if.then6
	jmp	.LBB200_25
.LBB200_4:                              # %if.end
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB200_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB200_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB200_8
# %bb.7:                                # %if.then14
	jmp	.LBB200_25
.LBB200_8:                              # %if.end15
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB200_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB200_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB200_12
# %bb.11:                               # %if.then28
	jmp	.LBB200_25
.LBB200_12:                             # %if.end29
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_13
.LBB200_13:                             # %if.end30
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB200_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB200_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB200_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB200_23
.LBB200_17:                             # %if.else
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB200_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB200_22
.LBB200_19:                             # %if.else57
                                        #   in Loop: Header=BB200_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB200_21
# %bb.20:                               # %if.then61
	jmp	.LBB200_25
.LBB200_21:                             # %if.end62
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_22
.LBB200_22:                             # %if.end63
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_23
.LBB200_23:                             # %if.end64
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_24
.LBB200_24:                             # %if.end65
                                        #   in Loop: Header=BB200_1 Depth=1
	jmp	.LBB200_1
.LBB200_25:                             # %while.end
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB200_27
# %bb.26:                               # %lor.rhs
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB200_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$559086944, -28(%rbp)   # imm = 0x2152FD60
	jne	.LBB200_29
.LBB200_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_28
.Lfunc_end200:
	.size	handle_compress.160, .Lfunc_end200-handle_compress.160
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.161     # -- Begin function BZ2_bzWriteOpen.161
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.161,@function
BZ2_bzWriteOpen.161:                    # @BZ2_bzWriteOpen.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2142513338, -60(%rbp)  # imm = 0x7FB428BA
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB201_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB201_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB201_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB201_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB201_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -32(%rbp)
	jl	.LBB201_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -32(%rbp)
	jg	.LBB201_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB201_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB201_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -40(%rbp)
	jl	.LBB201_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -40(%rbp)
	jle	.LBB201_16
.LBB201_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB201_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB201_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB201_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB201_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB201_41
.LBB201_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB201_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB201_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB201_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB201_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB201_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB201_41
.LBB201_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB201_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB201_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB201_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB201_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB201_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB201_41
.LBB201_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB201_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB201_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB201_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB201_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB201_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB201_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-32(%rbp), %esi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB201_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB201_37
# %bb.36:                               # %if.then62
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB201_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB201_39
# %bb.38:                               # %if.then65
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB201_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB201_41
.LBB201_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB201_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$2142513338, -60(%rbp)  # imm = 0x7FB428BA
	jne	.LBB201_43
.LBB201_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_42
.Lfunc_end201:
	.size	BZ2_bzWriteOpen.161, .Lfunc_end201-BZ2_bzWriteOpen.161
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.162
	.type	handle_compress.162,@function
handle_compress.162:                    # @handle_compress.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1322060789, -28(%rbp)  # imm = 0x4ECD0BF5
	movq	%rdi, -40(%rbp)
	movb	$0, -10(%rbp)
	movb	$0, -9(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB202_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB202_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB202_4
# %bb.3:                                # %if.then6
	jmp	.LBB202_25
.LBB202_4:                              # %if.end
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB202_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB202_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB202_8
# %bb.7:                                # %if.then14
	jmp	.LBB202_25
.LBB202_8:                              # %if.end15
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB202_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB202_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB202_12
# %bb.11:                               # %if.then28
	jmp	.LBB202_25
.LBB202_12:                             # %if.end29
                                        #   in Loop: Header=BB202_1 Depth=1
	jmp	.LBB202_13
.LBB202_13:                             # %if.end30
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB202_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB202_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB202_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB202_23
.LBB202_17:                             # %if.else
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB202_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB202_22
.LBB202_19:                             # %if.else57
                                        #   in Loop: Header=BB202_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB202_21
# %bb.20:                               # %if.then61
	jmp	.LBB202_25
.LBB202_21:                             # %if.end62
                                        #   in Loop: Header=BB202_1 Depth=1
	jmp	.LBB202_22
.LBB202_22:                             # %if.end63
                                        #   in Loop: Header=BB202_1 Depth=1
	jmp	.LBB202_23
.LBB202_23:                             # %if.end64
                                        #   in Loop: Header=BB202_1 Depth=1
	jmp	.LBB202_24
.LBB202_24:                             # %if.end65
                                        #   in Loop: Header=BB202_1 Depth=1
	jmp	.LBB202_1
.LBB202_25:                             # %while.end
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB202_27
# %bb.26:                               # %lor.rhs
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB202_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1322060789, -28(%rbp)  # imm = 0x4ECD0BF5
	jne	.LBB202_29
.LBB202_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_28
.Lfunc_end202:
	.size	handle_compress.162, .Lfunc_end202-handle_compress.162
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.163  # -- Begin function BZ2_bzWriteClose64.163
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.163,@function
BZ2_bzWriteClose64.163:                 # @BZ2_bzWriteClose64.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$200690106, -60(%rbp)   # imm = 0xBF649BA
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB203_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB203_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB203_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB203_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB203_5:                              # %if.end5
	jmp	.LBB203_71
.LBB203_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB203_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB203_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB203_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB203_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB203_11:                             # %if.end14
	jmp	.LBB203_71
.LBB203_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB203_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB203_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB203_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB203_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB203_17:                             # %if.end24
	jmp	.LBB203_71
.LBB203_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB203_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB203_20:                             # %if.end28
	cmpq	$0, -48(%rbp)
	je	.LBB203_22
# %bb.21:                               # %if.then30
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB203_22:                             # %if.end31
	cmpq	$0, -40(%rbp)
	je	.LBB203_24
# %bb.23:                               # %if.then33
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB203_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB203_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB203_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB203_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB203_49
# %bb.28:                               # %if.then41
	jmp	.LBB203_29
.LBB203_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB203_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB203_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB203_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB203_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB203_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB203_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB203_35:                             # %if.end55
	jmp	.LBB203_71
.LBB203_36:                             # %if.end56
                                        #   in Loop: Header=BB203_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB203_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB203_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB203_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB203_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB203_44
.LBB203_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB203_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB203_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB203_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB203_43:                             # %if.end82
	jmp	.LBB203_71
.LBB203_44:                             # %if.end83
                                        #   in Loop: Header=BB203_29 Depth=1
	jmp	.LBB203_45
.LBB203_45:                             # %if.end84
                                        #   in Loop: Header=BB203_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB203_47
# %bb.46:                               # %if.then87
	jmp	.LBB203_48
.LBB203_47:                             # %if.end88
                                        #   in Loop: Header=BB203_29 Depth=1
	jmp	.LBB203_29
.LBB203_48:                             # %while.end
	jmp	.LBB203_49
.LBB203_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB203_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB203_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB203_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB203_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB203_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB203_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB203_56:                             # %if.end110
	jmp	.LBB203_71
.LBB203_57:                             # %if.end111
	jmp	.LBB203_58
.LBB203_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB203_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB203_60:                             # %if.end117
	cmpq	$0, -48(%rbp)
	je	.LBB203_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB203_62:                             # %if.end122
	cmpq	$0, -40(%rbp)
	je	.LBB203_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB203_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB203_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB203_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB203_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB203_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB203_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB203_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB203_71:                             # %return
	cmpl	$200690106, -60(%rbp)   # imm = 0xBF649BA
	jne	.LBB203_73
.LBB203_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_72
.Lfunc_end203:
	.size	BZ2_bzWriteClose64.163, .Lfunc_end203-BZ2_bzWriteClose64.163
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.164         # -- Begin function BZ2_bzWrite.164
	.p2align	4, 0x90
	.type	BZ2_bzWrite.164,@function
BZ2_bzWrite.164:                        # @BZ2_bzWrite.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$462681351, -36(%rbp)   # imm = 0x1B93F507
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB204_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB204_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB204_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB204_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB204_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB204_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -24(%rbp)
	jge	.LBB204_12
.LBB204_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB204_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB204_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB204_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB204_11:                             # %if.end15
	jmp	.LBB204_53
.LBB204_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB204_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB204_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB204_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB204_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB204_17:                             # %if.end24
	jmp	.LBB204_53
.LBB204_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB204_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB204_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB204_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB204_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB204_23:                             # %if.end34
	jmp	.LBB204_53
.LBB204_24:                             # %if.end35
	cmpl	$0, -24(%rbp)
	jne	.LBB204_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB204_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB204_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB204_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB204_29:                             # %if.end44
	jmp	.LBB204_53
.LBB204_30:                             # %if.end45
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB204_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$1, -20(%rbp)
	je	.LBB204_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB204_34
# %bb.33:                               # %if.then55
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB204_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB204_36
# %bb.35:                               # %if.then58
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB204_36:                             # %if.end60
	jmp	.LBB204_53
.LBB204_37:                             # %if.end61
                                        #   in Loop: Header=BB204_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB204_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB204_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB204_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB204_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB204_45
.LBB204_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB204_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB204_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB204_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB204_44:                             # %if.end88
	jmp	.LBB204_53
.LBB204_45:                             # %if.end89
                                        #   in Loop: Header=BB204_31 Depth=1
	jmp	.LBB204_46
.LBB204_46:                             # %if.end90
                                        #   in Loop: Header=BB204_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB204_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB204_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB204_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB204_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB204_51:                             # %if.end104
	jmp	.LBB204_53
.LBB204_52:                             # %if.end105
                                        #   in Loop: Header=BB204_31 Depth=1
	jmp	.LBB204_31
.LBB204_53:                             # %return
	cmpl	$462681351, -36(%rbp)   # imm = 0x1B93F507
	jne	.LBB204_55
.LBB204_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_54
.Lfunc_end204:
	.size	BZ2_bzWrite.164, .Lfunc_end204-BZ2_bzWrite.164
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.165 # -- Begin function BZ2_bzBuffToBuffDecompress.165
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.165,@function
BZ2_bzBuffToBuffDecompress.165:         # @BZ2_bzBuffToBuffDecompress.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$503446118, -36(%rbp)   # imm = 0x1E01FA66
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -20(%rbp)
	movl	%r9d, -24(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB205_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB205_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB205_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -20(%rbp)
	je	.LBB205_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -20(%rbp)
	jne	.LBB205_7
.LBB205_5:                              # %lor.lhs.false7
	cmpl	$0, -24(%rbp)
	jl	.LBB205_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -24(%rbp)
	jle	.LBB205_8
.LBB205_7:                              # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB205_19
.LBB205_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB205_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_19
.LBB205_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB205_12
# %bb.11:                               # %if.then16
	jmp	.LBB205_15
.LBB205_12:                             # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB205_14
# %bb.13:                               # %if.then19
	jmp	.LBB205_18
.LBB205_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB205_19
.LBB205_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB205_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB205_19
.LBB205_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB205_19
.LBB205_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB205_19:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$503446118, -36(%rbp)   # imm = 0x1E01FA66
	jne	.LBB205_21
.LBB205_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_20
.Lfunc_end205:
	.size	BZ2_bzBuffToBuffDecompress.165, .Lfunc_end205-BZ2_bzBuffToBuffDecompress.165
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.166  # -- Begin function BZ2_bzWriteClose64.166
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.166,@function
BZ2_bzWriteClose64.166:                 # @BZ2_bzWriteClose64.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$347779336, -64(%rbp)   # imm = 0x14BAB108
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB206_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB206_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB206_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB206_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB206_5:                              # %if.end5
	jmp	.LBB206_71
.LBB206_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB206_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB206_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB206_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB206_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB206_11:                             # %if.end14
	jmp	.LBB206_71
.LBB206_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB206_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB206_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB206_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB206_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB206_17:                             # %if.end24
	jmp	.LBB206_71
.LBB206_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB206_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB206_20:                             # %if.end28
	cmpq	$0, -40(%rbp)
	je	.LBB206_22
# %bb.21:                               # %if.then30
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB206_22:                             # %if.end31
	cmpq	$0, -48(%rbp)
	je	.LBB206_24
# %bb.23:                               # %if.then33
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB206_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB206_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB206_26:                             # %if.end37
	cmpl	$0, -24(%rbp)
	jne	.LBB206_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB206_49
# %bb.28:                               # %if.then41
	jmp	.LBB206_29
.LBB206_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB206_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB206_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB206_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB206_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB206_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB206_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB206_35:                             # %if.end55
	jmp	.LBB206_71
.LBB206_36:                             # %if.end56
                                        #   in Loop: Header=BB206_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB206_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB206_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB206_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB206_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB206_44
.LBB206_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB206_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB206_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB206_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB206_43:                             # %if.end82
	jmp	.LBB206_71
.LBB206_44:                             # %if.end83
                                        #   in Loop: Header=BB206_29 Depth=1
	jmp	.LBB206_45
.LBB206_45:                             # %if.end84
                                        #   in Loop: Header=BB206_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB206_47
# %bb.46:                               # %if.then87
	jmp	.LBB206_48
.LBB206_47:                             # %if.end88
                                        #   in Loop: Header=BB206_29 Depth=1
	jmp	.LBB206_29
.LBB206_48:                             # %while.end
	jmp	.LBB206_49
.LBB206_49:                             # %if.end89
	cmpl	$0, -24(%rbp)
	jne	.LBB206_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB206_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB206_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB206_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB206_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB206_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB206_56:                             # %if.end110
	jmp	.LBB206_71
.LBB206_57:                             # %if.end111
	jmp	.LBB206_58
.LBB206_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB206_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB206_60:                             # %if.end117
	cmpq	$0, -40(%rbp)
	je	.LBB206_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB206_62:                             # %if.end122
	cmpq	$0, -48(%rbp)
	je	.LBB206_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB206_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB206_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB206_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB206_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB206_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB206_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB206_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB206_71:                             # %return
	cmpl	$347779336, -64(%rbp)   # imm = 0x14BAB108
	jne	.LBB206_73
.LBB206_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_72
.Lfunc_end206:
	.size	BZ2_bzWriteClose64.166, .Lfunc_end206-BZ2_bzWriteClose64.166
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.167  # -- Begin function BZ2_bzWriteClose64.167
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.167,@function
BZ2_bzWriteClose64.167:                 # @BZ2_bzWriteClose64.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$373691497, -60(%rbp)   # imm = 0x16461469
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB207_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB207_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB207_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB207_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB207_5:                              # %if.end5
	jmp	.LBB207_71
.LBB207_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB207_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB207_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB207_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB207_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB207_11:                             # %if.end14
	jmp	.LBB207_71
.LBB207_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB207_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB207_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB207_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB207_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB207_17:                             # %if.end24
	jmp	.LBB207_71
.LBB207_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB207_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB207_20:                             # %if.end28
	cmpq	$0, -40(%rbp)
	je	.LBB207_22
# %bb.21:                               # %if.then30
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB207_22:                             # %if.end31
	cmpq	$0, -48(%rbp)
	je	.LBB207_24
# %bb.23:                               # %if.then33
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB207_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB207_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB207_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB207_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB207_49
# %bb.28:                               # %if.then41
	jmp	.LBB207_29
.LBB207_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB207_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB207_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB207_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB207_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB207_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB207_35:                             # %if.end55
	jmp	.LBB207_71
.LBB207_36:                             # %if.end56
                                        #   in Loop: Header=BB207_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB207_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB207_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB207_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB207_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB207_44
.LBB207_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB207_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB207_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB207_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB207_43:                             # %if.end82
	jmp	.LBB207_71
.LBB207_44:                             # %if.end83
                                        #   in Loop: Header=BB207_29 Depth=1
	jmp	.LBB207_45
.LBB207_45:                             # %if.end84
                                        #   in Loop: Header=BB207_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB207_47
# %bb.46:                               # %if.then87
	jmp	.LBB207_48
.LBB207_47:                             # %if.end88
                                        #   in Loop: Header=BB207_29 Depth=1
	jmp	.LBB207_29
.LBB207_48:                             # %while.end
	jmp	.LBB207_49
.LBB207_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB207_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB207_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB207_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB207_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB207_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB207_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB207_56:                             # %if.end110
	jmp	.LBB207_71
.LBB207_57:                             # %if.end111
	jmp	.LBB207_58
.LBB207_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB207_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_60:                             # %if.end117
	cmpq	$0, -40(%rbp)
	je	.LBB207_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_62:                             # %if.end122
	cmpq	$0, -48(%rbp)
	je	.LBB207_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB207_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB207_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB207_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB207_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB207_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB207_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB207_71:                             # %return
	cmpl	$373691497, -60(%rbp)   # imm = 0x16461469
	jne	.LBB207_73
.LBB207_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_72
.Lfunc_end207:
	.size	BZ2_bzWriteClose64.167, .Lfunc_end207-BZ2_bzWriteClose64.167
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.168
	.type	unRLE_obuf_to_output_FAST.168,@function
unRLE_obuf_to_output_FAST.168:          # @unRLE_obuf_to_output_FAST.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$591282592, -92(%rbp)   # imm = 0x233E41A0
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB208_48
# %bb.1:                                # %if.then
	jmp	.LBB208_2
.LBB208_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_3 Depth 2
	jmp	.LBB208_3
.LBB208_3:                              # %while.body2
                                        #   Parent Loop BB208_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB208_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB208_82
.LBB208_5:                              # %if.end
                                        #   in Loop: Header=BB208_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB208_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_10
.LBB208_7:                              # %if.end6
                                        #   in Loop: Header=BB208_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB208_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB208_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB208_9:                              # %if.end26
                                        #   in Loop: Header=BB208_3 Depth=2
	jmp	.LBB208_3
.LBB208_10:                             # %while.end
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB208_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB208_82
.LBB208_12:                             # %if.end30
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB208_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB208_82
.LBB208_14:                             # %if.end37
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB208_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB208_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB208_17:                             # %if.end61
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_18
.LBB208_18:                             # %if.end62
                                        #   in Loop: Header=BB208_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB208_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_20
.LBB208_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_2
.LBB208_21:                             # %if.end79
                                        #   in Loop: Header=BB208_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB208_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB208_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB208_20
.LBB208_23:                             # %if.end87
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB208_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB208_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB208_26:                             # %if.end114
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_27
.LBB208_27:                             # %if.end115
                                        #   in Loop: Header=BB208_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB208_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_20
.LBB208_29:                             # %if.end133
                                        #   in Loop: Header=BB208_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB208_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB208_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB208_20
.LBB208_31:                             # %if.end141
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB208_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB208_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB208_34:                             # %if.end168
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_35
.LBB208_35:                             # %if.end169
                                        #   in Loop: Header=BB208_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB208_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_20
.LBB208_37:                             # %if.end187
                                        #   in Loop: Header=BB208_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB208_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB208_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB208_20
.LBB208_39:                             # %if.end195
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB208_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB208_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB208_42:                             # %if.end221
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_43
.LBB208_43:                             # %if.end222
                                        #   in Loop: Header=BB208_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB208_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB208_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB208_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB208_46:                             # %if.end264
                                        #   in Loop: Header=BB208_2 Depth=1
	jmp	.LBB208_47
.LBB208_47:                             # %if.end265
                                        #   in Loop: Header=BB208_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB208_20
.LBB208_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB208_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB208_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB208_49 Depth=1
	jmp	.LBB208_51
.LBB208_51:                             # %while.body294
                                        #   Parent Loop BB208_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB208_53
# %bb.52:                               # %if.then297
	jmp	.LBB208_78
.LBB208_53:                             # %if.end298
                                        #   in Loop: Header=BB208_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB208_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB208_49 Depth=1
	jmp	.LBB208_56
.LBB208_55:                             # %if.end302
                                        #   in Loop: Header=BB208_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB208_51
.LBB208_56:                             # %while.end313
                                        #   in Loop: Header=BB208_49 Depth=1
	jmp	.LBB208_57
.LBB208_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB208_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB208_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB208_78
.LBB208_59:                             # %if.end317
                                        #   in Loop: Header=BB208_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB208_60:                             # %if.end327
                                        #   in Loop: Header=BB208_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB208_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB208_82
.LBB208_62:                             # %if.end331
                                        #   in Loop: Header=BB208_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB208_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB208_78
.LBB208_64:                             # %if.end335
                                        #   in Loop: Header=BB208_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB208_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB208_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB208_57
.LBB208_66:                             # %if.end348
                                        #   in Loop: Header=BB208_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB208_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB208_49 Depth=1
	jmp	.LBB208_57
.LBB208_68:                             # %if.end352
                                        #   in Loop: Header=BB208_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB208_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB208_49 Depth=1
	jmp	.LBB208_70
.LBB208_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB208_49 Depth=1
	jmp	.LBB208_49
.LBB208_71:                             # %if.end362
                                        #   in Loop: Header=BB208_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB208_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB208_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB208_70
.LBB208_73:                             # %if.end368
                                        #   in Loop: Header=BB208_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB208_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB208_49 Depth=1
	jmp	.LBB208_70
.LBB208_75:                             # %if.end378
                                        #   in Loop: Header=BB208_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB208_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB208_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB208_70
.LBB208_77:                             # %if.end384
                                        #   in Loop: Header=BB208_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB208_70
.LBB208_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -88(%rbp)
	movl	-84(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-88(%rbp), %eax
	jae	.LBB208_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB208_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB208_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$591282592, -92(%rbp)   # imm = 0x233E41A0
	jne	.LBB208_84
.LBB208_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_83
.Lfunc_end208:
	.size	unRLE_obuf_to_output_FAST.168, .Lfunc_end208-unRLE_obuf_to_output_FAST.168
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose.169     # -- Begin function BZ2_bzReadClose.169
	.p2align	4, 0x90
	.type	BZ2_bzReadClose.169,@function
BZ2_bzReadClose.169:                    # @BZ2_bzReadClose.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1596806507, -20(%rbp)  # imm = 0x5F2D556B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB209_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB209_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB209_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB209_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	jne	.LBB209_10
# %bb.5:                                # %if.then5
	cmpq	$0, -16(%rbp)
	je	.LBB209_7
# %bb.6:                                # %if.then7
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB209_7:                              # %if.end8
	cmpq	$0, -8(%rbp)
	je	.LBB209_9
# %bb.8:                                # %if.then10
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB209_9:                              # %if.end12
	jmp	.LBB209_19
.LBB209_10:                             # %if.end13
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB209_16
# %bb.11:                               # %if.then14
	cmpq	$0, -16(%rbp)
	je	.LBB209_13
# %bb.12:                               # %if.then16
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB209_13:                             # %if.end17
	cmpq	$0, -8(%rbp)
	je	.LBB209_15
# %bb.14:                               # %if.then19
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB209_15:                             # %if.end21
	jmp	.LBB209_19
.LBB209_16:                             # %if.end22
	movq	-8(%rbp), %rax
	cmpb	$0, 5100(%rax)
	je	.LBB209_18
# %bb.17:                               # %if.then24
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompressEnd
.LBB209_18:                             # %if.end25
	movq	-8(%rbp), %rdi
	callq	free
.LBB209_19:                             # %return
	cmpl	$1596806507, -20(%rbp)  # imm = 0x5F2D556B
	jne	.LBB209_21
.LBB209_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_20
.Lfunc_end209:
	.size	BZ2_bzReadClose.169, .Lfunc_end209-BZ2_bzReadClose.169
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd.170   # -- Begin function BZ2_bzCompressEnd.170
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd.170,@function
BZ2_bzCompressEnd.170:                  # @BZ2_bzCompressEnd.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$427787705, -36(%rbp)   # imm = 0x197F85B9
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB210_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB210_13
.LBB210_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB210_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB210_13
.LBB210_4:                              # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB210_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB210_13
.LBB210_6:                              # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB210_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB210_8:                              # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB210_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB210_10:                             # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB210_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB210_12:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB210_13:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$427787705, -36(%rbp)   # imm = 0x197F85B9
	jne	.LBB210_15
.LBB210_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_14
.Lfunc_end210:
	.size	BZ2_bzCompressEnd.170, .Lfunc_end210-BZ2_bzCompressEnd.170
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror.171         # -- Begin function BZ2_bzerror.171
	.p2align	4, 0x90
	.type	BZ2_bzerror.171,@function
BZ2_bzerror.171:                        # @BZ2_bzerror.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$490351622, -16(%rbp)   # imm = 0x1D3A2C06
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	5096(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.LBB211_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB211_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	imull	$-1, -12(%rbp), %eax
	cltq
	movq	bzerrorstrings(,%rax,8), %rbx
	cmpl	$490351622, -16(%rbp)   # imm = 0x1D3A2C06
	jne	.LBB211_4
.LBB211_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_3
.Lfunc_end211:
	.size	BZ2_bzerror.171, .Lfunc_end211-BZ2_bzerror.171
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzerror.172         # -- Begin function BZ2_bzerror.172
	.p2align	4, 0x90
	.type	BZ2_bzerror.172,@function
BZ2_bzerror.172:                        # @BZ2_bzerror.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$134378873, -16(%rbp)   # imm = 0x8027579
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movl	5096(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.LBB212_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB212_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	imull	$-1, -12(%rbp), %eax
	cltq
	movq	bzerrorstrings(,%rax,8), %rbx
	cmpl	$134378873, -16(%rbp)   # imm = 0x8027579
	jne	.LBB212_4
.LBB212_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_3
.Lfunc_end212:
	.size	BZ2_bzerror.172, .Lfunc_end212-BZ2_bzerror.172
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd.173   # -- Begin function BZ2_bzCompressEnd.173
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd.173,@function
BZ2_bzCompressEnd.173:                  # @BZ2_bzCompressEnd.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1164552600, -36(%rbp)  # imm = 0x4569A998
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB213_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB213_13
.LBB213_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB213_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB213_13
.LBB213_4:                              # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB213_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB213_13
.LBB213_6:                              # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB213_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB213_8:                              # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB213_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB213_10:                             # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB213_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB213_12:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB213_13:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1164552600, -36(%rbp)  # imm = 0x4569A998
	jne	.LBB213_15
.LBB213_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_14
.Lfunc_end213:
	.size	BZ2_bzCompressEnd.173, .Lfunc_end213-BZ2_bzCompressEnd.173
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.174
	.type	handle_compress.174,@function
handle_compress.174:                    # @handle_compress.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1610348092, -28(%rbp)  # imm = 0x5FFBF63C
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB214_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB214_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB214_4
# %bb.3:                                # %if.then6
	jmp	.LBB214_25
.LBB214_4:                              # %if.end
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB214_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB214_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB214_8
# %bb.7:                                # %if.then14
	jmp	.LBB214_25
.LBB214_8:                              # %if.end15
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB214_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB214_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB214_12
# %bb.11:                               # %if.then28
	jmp	.LBB214_25
.LBB214_12:                             # %if.end29
                                        #   in Loop: Header=BB214_1 Depth=1
	jmp	.LBB214_13
.LBB214_13:                             # %if.end30
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB214_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB214_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB214_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB214_23
.LBB214_17:                             # %if.else
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB214_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB214_22
.LBB214_19:                             # %if.else57
                                        #   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB214_21
# %bb.20:                               # %if.then61
	jmp	.LBB214_25
.LBB214_21:                             # %if.end62
                                        #   in Loop: Header=BB214_1 Depth=1
	jmp	.LBB214_22
.LBB214_22:                             # %if.end63
                                        #   in Loop: Header=BB214_1 Depth=1
	jmp	.LBB214_23
.LBB214_23:                             # %if.end64
                                        #   in Loop: Header=BB214_1 Depth=1
	jmp	.LBB214_24
.LBB214_24:                             # %if.end65
                                        #   in Loop: Header=BB214_1 Depth=1
	jmp	.LBB214_1
.LBB214_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB214_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB214_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1610348092, -28(%rbp)  # imm = 0x5FFBF63C
	jne	.LBB214_29
.LBB214_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_28
.Lfunc_end214:
	.size	handle_compress.174, .Lfunc_end214-handle_compress.174
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.175
	.type	copy_input_until_stop.175,@function
copy_input_until_stop.175:              # @copy_input_until_stop.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$935156270, -32(%rbp)   # imm = 0x37BD5A2E
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB215_20
# %bb.1:                                # %if.then
	jmp	.LBB215_2
.LBB215_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB215_4
# %bb.3:                                # %if.then2
	jmp	.LBB215_19
.LBB215_4:                              # %if.end
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB215_6
# %bb.5:                                # %if.then4
	jmp	.LBB215_19
.LBB215_6:                              # %if.end5
                                        #   in Loop: Header=BB215_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB215_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB215_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB215_16
.LBB215_9:                              # %if.else
                                        #   in Loop: Header=BB215_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB215_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB215_14
.LBB215_11:                             # %if.then32
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB215_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB215_13:                             # %if.end37
                                        #   in Loop: Header=BB215_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB215_15
.LBB215_14:                             # %if.else40
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB215_15:                             # %if.end43
                                        #   in Loop: Header=BB215_2 Depth=1
	jmp	.LBB215_16
.LBB215_16:                             # %if.end44
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB215_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB215_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB215_18:                             # %if.end58
                                        #   in Loop: Header=BB215_2 Depth=1
	jmp	.LBB215_2
.LBB215_19:                             # %while.end
	jmp	.LBB215_41
.LBB215_20:                             # %if.else59
	jmp	.LBB215_21
.LBB215_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB215_23
# %bb.22:                               # %if.then65
	jmp	.LBB215_40
.LBB215_23:                             # %if.end66
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB215_25
# %bb.24:                               # %if.then71
	jmp	.LBB215_40
.LBB215_25:                             # %if.end72
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB215_27
# %bb.26:                               # %if.then75
	jmp	.LBB215_40
.LBB215_27:                             # %if.end76
                                        #   in Loop: Header=BB215_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB215_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB215_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB215_37
.LBB215_30:                             # %if.else113
                                        #   in Loop: Header=BB215_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB215_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB215_35
.LBB215_32:                             # %if.then121
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB215_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB215_34:                             # %if.end126
                                        #   in Loop: Header=BB215_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB215_36
.LBB215_35:                             # %if.else129
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB215_36:                             # %if.end132
                                        #   in Loop: Header=BB215_21 Depth=1
	jmp	.LBB215_37
.LBB215_37:                             # %if.end133
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB215_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB215_39:                             # %if.end151
                                        #   in Loop: Header=BB215_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB215_21
.LBB215_40:                             # %while.end154
	jmp	.LBB215_41
.LBB215_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$935156270, -32(%rbp)   # imm = 0x37BD5A2E
	jne	.LBB215_43
.LBB215_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_42
.Lfunc_end215:
	.size	copy_input_until_stop.175, .Lfunc_end215-copy_input_until_stop.175
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.176      # -- Begin function BZ2_bzReadOpen.176
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.176,@function
BZ2_bzReadOpen.176:                     # @BZ2_bzReadOpen.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1889910880, -76(%rbp)  # imm = 0x70A5C060
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB216_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB216_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB216_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB216_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB216_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -36(%rbp)
	je	.LBB216_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	jne	.LBB216_14
.LBB216_7:                              # %lor.lhs.false7
	cmpl	$0, -40(%rbp)
	jl	.LBB216_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -40(%rbp)
	jg	.LBB216_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -56(%rbp)
	jne	.LBB216_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB216_14
.LBB216_11:                             # %lor.lhs.false15
	cmpq	$0, -56(%rbp)
	je	.LBB216_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB216_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB216_19
.LBB216_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB216_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB216_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB216_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB216_18:                             # %if.end28
	movq	$0, -64(%rbp)
	jmp	.LBB216_45
.LBB216_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB216_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB216_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB216_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB216_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB216_24:                             # %if.end37
	movq	$0, -64(%rbp)
	jmp	.LBB216_45
.LBB216_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB216_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB216_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB216_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB216_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB216_30:                             # %if.end48
	movq	$0, -64(%rbp)
	jmp	.LBB216_45
.LBB216_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB216_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB216_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB216_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB216_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB216_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB216_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB216_36 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB216_36
.LBB216_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB216_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB216_41
# %bb.40:                               # %if.then67
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB216_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB216_43
# %bb.42:                               # %if.then70
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB216_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -64(%rbp)
	jmp	.LBB216_45
.LBB216_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB216_45:                             # %return
	movq	-64(%rbp), %rbx
	cmpl	$1889910880, -76(%rbp)  # imm = 0x70A5C060
	jne	.LBB216_47
.LBB216_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_46
.Lfunc_end216:
	.size	BZ2_bzReadOpen.176, .Lfunc_end216-BZ2_bzReadOpen.176
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.177 # -- Begin function BZ2_bzReadGetUnused.177
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.177,@function
BZ2_bzReadGetUnused.177:                # @BZ2_bzReadGetUnused.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2127493068, -20(%rbp)  # imm = 0x7ECEF7CC
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB217_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB217_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB217_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB217_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB217_5:                              # %if.end5
	jmp	.LBB217_24
.LBB217_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB217_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB217_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB217_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB217_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB217_11:                             # %if.end16
	jmp	.LBB217_24
.LBB217_12:                             # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB217_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB217_19
.LBB217_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB217_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB217_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB217_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB217_18:                             # %if.end27
	jmp	.LBB217_24
.LBB217_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB217_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB217_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB217_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB217_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB217_24:                             # %return
	cmpl	$2127493068, -20(%rbp)  # imm = 0x7ECEF7CC
	jne	.LBB217_26
.LBB217_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_25
.Lfunc_end217:
	.size	BZ2_bzReadGetUnused.177, .Lfunc_end217-BZ2_bzReadGetUnused.177
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.178          # -- Begin function BZ2_bzread.178
	.p2align	4, 0x90
	.type	BZ2_bzread.178,@function
BZ2_bzread.178:                         # @BZ2_bzread.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$435146933, -28(%rbp)   # imm = 0x19EFD0B5
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -24(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB218_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB218_6
.LBB218_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-24(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -20(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB218_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB218_5
.LBB218_4:                              # %if.then3
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB218_6
.LBB218_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB218_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$435146933, -28(%rbp)   # imm = 0x19EFD0B5
	jne	.LBB218_8
.LBB218_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_7
.Lfunc_end218:
	.size	BZ2_bzread.178, .Lfunc_end218-BZ2_bzread.178
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadClose.179     # -- Begin function BZ2_bzReadClose.179
	.p2align	4, 0x90
	.type	BZ2_bzReadClose.179,@function
BZ2_bzReadClose.179:                    # @BZ2_bzReadClose.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$552695860, -20(%rbp)   # imm = 0x20F17834
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB219_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB219_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB219_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB219_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	jne	.LBB219_10
# %bb.5:                                # %if.then5
	cmpq	$0, -16(%rbp)
	je	.LBB219_7
# %bb.6:                                # %if.then7
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB219_7:                              # %if.end8
	cmpq	$0, -8(%rbp)
	je	.LBB219_9
# %bb.8:                                # %if.then10
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB219_9:                              # %if.end12
	jmp	.LBB219_19
.LBB219_10:                             # %if.end13
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB219_16
# %bb.11:                               # %if.then14
	cmpq	$0, -16(%rbp)
	je	.LBB219_13
# %bb.12:                               # %if.then16
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB219_13:                             # %if.end17
	cmpq	$0, -8(%rbp)
	je	.LBB219_15
# %bb.14:                               # %if.then19
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB219_15:                             # %if.end21
	jmp	.LBB219_19
.LBB219_16:                             # %if.end22
	movq	-8(%rbp), %rax
	cmpb	$0, 5100(%rax)
	je	.LBB219_18
# %bb.17:                               # %if.then24
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompressEnd
.LBB219_18:                             # %if.end25
	movq	-8(%rbp), %rdi
	callq	free
.LBB219_19:                             # %return
	cmpl	$552695860, -20(%rbp)   # imm = 0x20F17834
	jne	.LBB219_21
.LBB219_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_20
.Lfunc_end219:
	.size	BZ2_bzReadClose.179, .Lfunc_end219-BZ2_bzReadClose.179
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.180 # -- Begin function BZ2_bzBuffToBuffCompress.180
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.180,@function
BZ2_bzBuffToBuffCompress.180:           # @BZ2_bzBuffToBuffCompress.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1384304659, -40(%rbp)  # imm = 0x5282D013
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB220_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB220_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB220_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB220_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB220_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB220_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB220_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB220_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB220_10
.LBB220_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB220_21
.LBB220_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB220_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB220_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB220_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB220_21
.LBB220_14:                             # %if.end21
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB220_16
# %bb.15:                               # %if.then24
	jmp	.LBB220_19
.LBB220_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB220_18
# %bb.17:                               # %if.then27
	jmp	.LBB220_20
.LBB220_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB220_21
.LBB220_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB220_21
.LBB220_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB220_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1384304659, -40(%rbp)  # imm = 0x5282D013
	jne	.LBB220_23
.LBB220_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_22
.Lfunc_end220:
	.size	BZ2_bzBuffToBuffCompress.180, .Lfunc_end220-BZ2_bzBuffToBuffCompress.180
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.181
	.type	unRLE_obuf_to_output_FAST.181,@function
unRLE_obuf_to_output_FAST.181:          # @unRLE_obuf_to_output_FAST.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$1972776710, -84(%rbp)  # imm = 0x75962F06
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB221_48
# %bb.1:                                # %if.then
	jmp	.LBB221_2
.LBB221_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_3 Depth 2
	jmp	.LBB221_3
.LBB221_3:                              # %while.body2
                                        #   Parent Loop BB221_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB221_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB221_82
.LBB221_5:                              # %if.end
                                        #   in Loop: Header=BB221_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB221_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_10
.LBB221_7:                              # %if.end6
                                        #   in Loop: Header=BB221_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB221_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB221_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB221_9:                              # %if.end26
                                        #   in Loop: Header=BB221_3 Depth=2
	jmp	.LBB221_3
.LBB221_10:                             # %while.end
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB221_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB221_82
.LBB221_12:                             # %if.end30
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB221_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB221_82
.LBB221_14:                             # %if.end37
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB221_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB221_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB221_17:                             # %if.end61
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_18
.LBB221_18:                             # %if.end62
                                        #   in Loop: Header=BB221_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB221_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_20
.LBB221_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_2
.LBB221_21:                             # %if.end79
                                        #   in Loop: Header=BB221_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB221_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB221_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB221_20
.LBB221_23:                             # %if.end87
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB221_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB221_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB221_26:                             # %if.end114
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_27
.LBB221_27:                             # %if.end115
                                        #   in Loop: Header=BB221_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB221_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_20
.LBB221_29:                             # %if.end133
                                        #   in Loop: Header=BB221_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB221_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB221_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB221_20
.LBB221_31:                             # %if.end141
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB221_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB221_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB221_34:                             # %if.end168
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_35
.LBB221_35:                             # %if.end169
                                        #   in Loop: Header=BB221_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB221_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_20
.LBB221_37:                             # %if.end187
                                        #   in Loop: Header=BB221_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB221_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB221_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB221_20
.LBB221_39:                             # %if.end195
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB221_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB221_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB221_42:                             # %if.end221
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_43
.LBB221_43:                             # %if.end222
                                        #   in Loop: Header=BB221_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB221_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB221_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB221_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB221_46:                             # %if.end264
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_47
.LBB221_47:                             # %if.end265
                                        #   in Loop: Header=BB221_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB221_20
.LBB221_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB221_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB221_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB221_49 Depth=1
	jmp	.LBB221_51
.LBB221_51:                             # %while.body294
                                        #   Parent Loop BB221_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB221_53
# %bb.52:                               # %if.then297
	jmp	.LBB221_78
.LBB221_53:                             # %if.end298
                                        #   in Loop: Header=BB221_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB221_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB221_49 Depth=1
	jmp	.LBB221_56
.LBB221_55:                             # %if.end302
                                        #   in Loop: Header=BB221_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB221_51
.LBB221_56:                             # %while.end313
                                        #   in Loop: Header=BB221_49 Depth=1
	jmp	.LBB221_57
.LBB221_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB221_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB221_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB221_78
.LBB221_59:                             # %if.end317
                                        #   in Loop: Header=BB221_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB221_60:                             # %if.end327
                                        #   in Loop: Header=BB221_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB221_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB221_82
.LBB221_62:                             # %if.end331
                                        #   in Loop: Header=BB221_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB221_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB221_78
.LBB221_64:                             # %if.end335
                                        #   in Loop: Header=BB221_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB221_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB221_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB221_57
.LBB221_66:                             # %if.end348
                                        #   in Loop: Header=BB221_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB221_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB221_49 Depth=1
	jmp	.LBB221_57
.LBB221_68:                             # %if.end352
                                        #   in Loop: Header=BB221_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB221_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB221_49 Depth=1
	jmp	.LBB221_70
.LBB221_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB221_49 Depth=1
	jmp	.LBB221_49
.LBB221_71:                             # %if.end362
                                        #   in Loop: Header=BB221_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB221_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB221_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB221_70
.LBB221_73:                             # %if.end368
                                        #   in Loop: Header=BB221_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB221_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB221_49 Depth=1
	jmp	.LBB221_70
.LBB221_75:                             # %if.end378
                                        #   in Loop: Header=BB221_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB221_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB221_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB221_70
.LBB221_77:                             # %if.end384
                                        #   in Loop: Header=BB221_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB221_70
.LBB221_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -88(%rbp)
	movl	-92(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-88(%rbp), %eax
	jae	.LBB221_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB221_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB221_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$1972776710, -84(%rbp)  # imm = 0x75962F06
	jne	.LBB221_84
.LBB221_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_83
.Lfunc_end221:
	.size	unRLE_obuf_to_output_FAST.181, .Lfunc_end221-unRLE_obuf_to_output_FAST.181
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.182 # -- Begin function BZ2_bzBuffToBuffCompress.182
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.182,@function
BZ2_bzBuffToBuffCompress.182:           # @BZ2_bzBuffToBuffCompress.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1814486379, -36(%rbp)  # imm = 0x6C26DD6B
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB222_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB222_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB222_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB222_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB222_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB222_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB222_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB222_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB222_10
.LBB222_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB222_21
.LBB222_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB222_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB222_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB222_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_21
.LBB222_14:                             # %if.end21
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB222_16
# %bb.15:                               # %if.then24
	jmp	.LBB222_19
.LBB222_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB222_18
# %bb.17:                               # %if.then27
	jmp	.LBB222_20
.LBB222_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB222_21
.LBB222_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB222_21
.LBB222_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB222_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1814486379, -36(%rbp)  # imm = 0x6C26DD6B
	jne	.LBB222_23
.LBB222_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_22
.Lfunc_end222:
	.size	BZ2_bzBuffToBuffCompress.182, .Lfunc_end222-BZ2_bzBuffToBuffCompress.182
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.183
	.type	copy_input_until_stop.183,@function
copy_input_until_stop.183:              # @copy_input_until_stop.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$292838415, -32(%rbp)   # imm = 0x11745C0F
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB223_20
# %bb.1:                                # %if.then
	jmp	.LBB223_2
.LBB223_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB223_4
# %bb.3:                                # %if.then2
	jmp	.LBB223_19
.LBB223_4:                              # %if.end
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB223_6
# %bb.5:                                # %if.then4
	jmp	.LBB223_19
.LBB223_6:                              # %if.end5
                                        #   in Loop: Header=BB223_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB223_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB223_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB223_16
.LBB223_9:                              # %if.else
                                        #   in Loop: Header=BB223_2 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB223_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB223_14
.LBB223_11:                             # %if.then32
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB223_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB223_13:                             # %if.end37
                                        #   in Loop: Header=BB223_2 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB223_15
.LBB223_14:                             # %if.else40
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB223_15:                             # %if.end43
                                        #   in Loop: Header=BB223_2 Depth=1
	jmp	.LBB223_16
.LBB223_16:                             # %if.end44
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB223_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB223_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB223_18:                             # %if.end58
                                        #   in Loop: Header=BB223_2 Depth=1
	jmp	.LBB223_2
.LBB223_19:                             # %while.end
	jmp	.LBB223_41
.LBB223_20:                             # %if.else59
	jmp	.LBB223_21
.LBB223_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB223_23
# %bb.22:                               # %if.then65
	jmp	.LBB223_40
.LBB223_23:                             # %if.end66
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB223_25
# %bb.24:                               # %if.then71
	jmp	.LBB223_40
.LBB223_25:                             # %if.end72
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB223_27
# %bb.26:                               # %if.then75
	jmp	.LBB223_40
.LBB223_27:                             # %if.end76
                                        #   in Loop: Header=BB223_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB223_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB223_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB223_37
.LBB223_30:                             # %if.else113
                                        #   in Loop: Header=BB223_21 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB223_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB223_35
.LBB223_32:                             # %if.then121
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB223_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB223_34:                             # %if.end126
                                        #   in Loop: Header=BB223_21 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB223_36
.LBB223_35:                             # %if.else129
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB223_36:                             # %if.end132
                                        #   in Loop: Header=BB223_21 Depth=1
	jmp	.LBB223_37
.LBB223_37:                             # %if.end133
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB223_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB223_39:                             # %if.end151
                                        #   in Loop: Header=BB223_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB223_21
.LBB223_40:                             # %while.end154
	jmp	.LBB223_41
.LBB223_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$292838415, -32(%rbp)   # imm = 0x11745C0F
	jne	.LBB223_43
.LBB223_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_42
.Lfunc_end223:
	.size	copy_input_until_stop.183, .Lfunc_end223-copy_input_until_stop.183
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.184    # -- Begin function BZ2_bzWriteClose.184
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.184,@function
BZ2_bzWriteClose.184:                   # @BZ2_bzWriteClose.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1099694694, -8(%rbp)   # imm = 0x418C0266
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -16(%rbp)
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-16(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1099694694, -8(%rbp)   # imm = 0x418C0266
	jne	.LBB224_2
.LBB224_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_1
.Lfunc_end224:
	.size	BZ2_bzWriteClose.184, .Lfunc_end224-BZ2_bzWriteClose.184
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.185     # -- Begin function BZ2_bzWriteOpen.185
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.185,@function
BZ2_bzWriteOpen.185:                    # @BZ2_bzWriteOpen.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1309763243, -60(%rbp)  # imm = 0x4E1166AB
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB225_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB225_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB225_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB225_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB225_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB225_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -36(%rbp)
	jg	.LBB225_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB225_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB225_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -32(%rbp)
	jl	.LBB225_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -32(%rbp)
	jle	.LBB225_16
.LBB225_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB225_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB225_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB225_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB225_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB225_41
.LBB225_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB225_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB225_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB225_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB225_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB225_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB225_41
.LBB225_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB225_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB225_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB225_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB225_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB225_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB225_41
.LBB225_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB225_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB225_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB225_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB225_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB225_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB225_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB225_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB225_37
# %bb.36:                               # %if.then62
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB225_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB225_39
# %bb.38:                               # %if.then65
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB225_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB225_41
.LBB225_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB225_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1309763243, -60(%rbp)  # imm = 0x4E1166AB
	jne	.LBB225_43
.LBB225_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_42
.Lfunc_end225:
	.size	BZ2_bzWriteOpen.185, .Lfunc_end225-BZ2_bzWriteOpen.185
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.186         # -- Begin function BZ2_bzWrite.186
	.p2align	4, 0x90
	.type	BZ2_bzWrite.186,@function
BZ2_bzWrite.186:                        # @BZ2_bzWrite.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1100019371, -32(%rbp)  # imm = 0x4190F6AB
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB226_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB226_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB226_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB226_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB226_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB226_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -24(%rbp)
	jge	.LBB226_12
.LBB226_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB226_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB226_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB226_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB226_11:                             # %if.end15
	jmp	.LBB226_53
.LBB226_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB226_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB226_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB226_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB226_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB226_17:                             # %if.end24
	jmp	.LBB226_53
.LBB226_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB226_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB226_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB226_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB226_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB226_23:                             # %if.end34
	jmp	.LBB226_53
.LBB226_24:                             # %if.end35
	cmpl	$0, -24(%rbp)
	jne	.LBB226_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB226_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB226_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB226_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB226_29:                             # %if.end44
	jmp	.LBB226_53
.LBB226_30:                             # %if.end45
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB226_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$1, -20(%rbp)
	je	.LBB226_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB226_34
# %bb.33:                               # %if.then55
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB226_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB226_36
# %bb.35:                               # %if.then58
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB226_36:                             # %if.end60
	jmp	.LBB226_53
.LBB226_37:                             # %if.end61
                                        #   in Loop: Header=BB226_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB226_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB226_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB226_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB226_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB226_45
.LBB226_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB226_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB226_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB226_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB226_44:                             # %if.end88
	jmp	.LBB226_53
.LBB226_45:                             # %if.end89
                                        #   in Loop: Header=BB226_31 Depth=1
	jmp	.LBB226_46
.LBB226_46:                             # %if.end90
                                        #   in Loop: Header=BB226_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB226_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB226_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB226_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB226_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB226_51:                             # %if.end104
	jmp	.LBB226_53
.LBB226_52:                             # %if.end105
                                        #   in Loop: Header=BB226_31 Depth=1
	jmp	.LBB226_31
.LBB226_53:                             # %return
	cmpl	$1100019371, -32(%rbp)  # imm = 0x4190F6AB
	jne	.LBB226_55
.LBB226_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_54
.Lfunc_end226:
	.size	BZ2_bzWrite.186, .Lfunc_end226-BZ2_bzWrite.186
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.187    # -- Begin function BZ2_bzDecompress.187
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.187,@function
BZ2_bzDecompress.187:                   # @BZ2_bzDecompress.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1076612161, -44(%rbp)  # imm = 0x402BCC41
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB227_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB227_37
.LBB227_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB227_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB227_37
.LBB227_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB227_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB227_37
.LBB227_6:                              # %if.end7
	jmp	.LBB227_7
.LBB227_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB227_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB227_37
.LBB227_9:                              # %if.end11
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB227_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB227_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB227_13
.LBB227_12:                             # %if.else
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB227_13:                             # %if.end17
                                        #   in Loop: Header=BB227_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB227_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB227_37
.LBB227_15:                             # %if.end20
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB227_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB227_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB227_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB227_19:                             # %if.end29
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB227_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB227_21:                             # %if.end34
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB227_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB227_37
.LBB227_23:                             # %if.end39
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB227_25
.LBB227_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB227_37
.LBB227_25:                             # %if.end46
                                        #   in Loop: Header=BB227_7 Depth=1
	jmp	.LBB227_26
.LBB227_26:                             # %if.end47
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB227_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB227_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB227_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB227_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB227_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB227_37
.LBB227_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB227_37
.LBB227_33:                             # %if.end65
                                        #   in Loop: Header=BB227_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB227_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB227_37
.LBB227_35:                             # %if.end69
                                        #   in Loop: Header=BB227_7 Depth=1
	jmp	.LBB227_36
.LBB227_36:                             # %if.end70
                                        #   in Loop: Header=BB227_7 Depth=1
	jmp	.LBB227_7
.LBB227_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1076612161, -44(%rbp)  # imm = 0x402BCC41
	jne	.LBB227_39
.LBB227_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_38
.Lfunc_end227:
	.size	BZ2_bzDecompress.187, .Lfunc_end227-BZ2_bzDecompress.187
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.188      # -- Begin function BZ2_bzCompress.188
	.p2align	4, 0x90
	.type	BZ2_bzCompress.188,@function
BZ2_bzCompress.188:                     # @BZ2_bzCompress.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1835785956, -44(%rbp)  # imm = 0x6D6BDEE4
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB228_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB228_39
.LBB228_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB228_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB228_39
.LBB228_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB228_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB228_39
.LBB228_6:                              # %if.end7
	jmp	.LBB228_7
.LBB228_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB228_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB228_7 Depth=1
	movq	.LJTI228_0(,%rax,8), %rax
	jmpq	*%rax
.LBB228_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB228_39
.LBB228_10:                             # %sw.bb8
                                        #   in Loop: Header=BB228_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB228_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB228_39
.LBB228_12:                             # %if.else
                                        #   in Loop: Header=BB228_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB228_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB228_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB228_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB228_7 Depth=1
	jmp	.LBB228_7
.LBB228_15:                             # %if.else15
                                        #   in Loop: Header=BB228_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB228_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB228_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB228_14
.LBB228_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB228_39
.LBB228_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB228_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB228_39
.LBB228_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB228_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB228_39
.LBB228_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB228_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB228_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB228_26
.LBB228_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB228_39
.LBB228_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB228_39
.LBB228_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB228_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB228_39
.LBB228_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB228_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB228_39
.LBB228_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB228_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB228_39
.LBB228_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB228_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB228_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB228_37
.LBB228_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB228_39
.LBB228_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB228_39
.LBB228_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB228_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1835785956, -44(%rbp)  # imm = 0x6D6BDEE4
	jne	.LBB228_41
.LBB228_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_40
.Lfunc_end228:
	.size	BZ2_bzCompress.188, .Lfunc_end228-BZ2_bzCompress.188
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI228_0:
	.quad	.LBB228_9
	.quad	.LBB228_10
	.quad	.LBB228_18
	.quad	.LBB228_27
                                        # -- End function
	.text
	.globl	BZ2_bzread.189          # -- Begin function BZ2_bzread.189
	.p2align	4, 0x90
	.type	BZ2_bzread.189,@function
BZ2_bzread.189:                         # @BZ2_bzread.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$523297225, -28(%rbp)   # imm = 0x1F30E1C9
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -24(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB229_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB229_6
.LBB229_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-24(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -20(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB229_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB229_5
.LBB229_4:                              # %if.then3
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_6
.LBB229_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB229_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$523297225, -28(%rbp)   # imm = 0x1F30E1C9
	jne	.LBB229_8
.LBB229_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_7
.Lfunc_end229:
	.size	BZ2_bzread.189, .Lfunc_end229-BZ2_bzread.189
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.190
	.type	unRLE_obuf_to_output_FAST.190,@function
unRLE_obuf_to_output_FAST.190:          # @unRLE_obuf_to_output_FAST.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$866338107, -92(%rbp)   # imm = 0x33A3453B
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB230_48
# %bb.1:                                # %if.then
	jmp	.LBB230_2
.LBB230_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_3 Depth 2
	jmp	.LBB230_3
.LBB230_3:                              # %while.body2
                                        #   Parent Loop BB230_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB230_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB230_82
.LBB230_5:                              # %if.end
                                        #   in Loop: Header=BB230_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB230_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_10
.LBB230_7:                              # %if.end6
                                        #   in Loop: Header=BB230_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB230_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB230_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB230_9:                              # %if.end26
                                        #   in Loop: Header=BB230_3 Depth=2
	jmp	.LBB230_3
.LBB230_10:                             # %while.end
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB230_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB230_82
.LBB230_12:                             # %if.end30
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB230_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB230_82
.LBB230_14:                             # %if.end37
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB230_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB230_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB230_17:                             # %if.end61
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_18
.LBB230_18:                             # %if.end62
                                        #   in Loop: Header=BB230_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB230_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_20
.LBB230_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_2
.LBB230_21:                             # %if.end79
                                        #   in Loop: Header=BB230_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB230_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB230_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB230_20
.LBB230_23:                             # %if.end87
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB230_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB230_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB230_26:                             # %if.end114
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_27
.LBB230_27:                             # %if.end115
                                        #   in Loop: Header=BB230_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB230_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_20
.LBB230_29:                             # %if.end133
                                        #   in Loop: Header=BB230_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB230_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB230_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB230_20
.LBB230_31:                             # %if.end141
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB230_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB230_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB230_34:                             # %if.end168
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_35
.LBB230_35:                             # %if.end169
                                        #   in Loop: Header=BB230_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB230_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_20
.LBB230_37:                             # %if.end187
                                        #   in Loop: Header=BB230_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB230_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB230_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB230_20
.LBB230_39:                             # %if.end195
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB230_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB230_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB230_42:                             # %if.end221
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_43
.LBB230_43:                             # %if.end222
                                        #   in Loop: Header=BB230_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB230_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB230_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB230_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB230_46:                             # %if.end264
                                        #   in Loop: Header=BB230_2 Depth=1
	jmp	.LBB230_47
.LBB230_47:                             # %if.end265
                                        #   in Loop: Header=BB230_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB230_20
.LBB230_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB230_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB230_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB230_49 Depth=1
	jmp	.LBB230_51
.LBB230_51:                             # %while.body294
                                        #   Parent Loop BB230_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB230_53
# %bb.52:                               # %if.then297
	jmp	.LBB230_78
.LBB230_53:                             # %if.end298
                                        #   in Loop: Header=BB230_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB230_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB230_49 Depth=1
	jmp	.LBB230_56
.LBB230_55:                             # %if.end302
                                        #   in Loop: Header=BB230_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB230_51
.LBB230_56:                             # %while.end313
                                        #   in Loop: Header=BB230_49 Depth=1
	jmp	.LBB230_57
.LBB230_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB230_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB230_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB230_78
.LBB230_59:                             # %if.end317
                                        #   in Loop: Header=BB230_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB230_60:                             # %if.end327
                                        #   in Loop: Header=BB230_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB230_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB230_82
.LBB230_62:                             # %if.end331
                                        #   in Loop: Header=BB230_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB230_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB230_78
.LBB230_64:                             # %if.end335
                                        #   in Loop: Header=BB230_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB230_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB230_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB230_57
.LBB230_66:                             # %if.end348
                                        #   in Loop: Header=BB230_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB230_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB230_49 Depth=1
	jmp	.LBB230_57
.LBB230_68:                             # %if.end352
                                        #   in Loop: Header=BB230_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB230_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB230_49 Depth=1
	jmp	.LBB230_70
.LBB230_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB230_49 Depth=1
	jmp	.LBB230_49
.LBB230_71:                             # %if.end362
                                        #   in Loop: Header=BB230_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB230_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB230_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB230_70
.LBB230_73:                             # %if.end368
                                        #   in Loop: Header=BB230_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB230_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB230_49 Depth=1
	jmp	.LBB230_70
.LBB230_75:                             # %if.end378
                                        #   in Loop: Header=BB230_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB230_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB230_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB230_70
.LBB230_77:                             # %if.end384
                                        #   in Loop: Header=BB230_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB230_70
.LBB230_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -88(%rbp)
	movl	-84(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-88(%rbp), %eax
	jae	.LBB230_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB230_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB230_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$866338107, -92(%rbp)   # imm = 0x33A3453B
	jne	.LBB230_84
.LBB230_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_83
.Lfunc_end230:
	.size	unRLE_obuf_to_output_FAST.190, .Lfunc_end230-unRLE_obuf_to_output_FAST.190
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.191         # -- Begin function BZ2_bzwrite.191
	.p2align	4, 0x90
	.type	BZ2_bzwrite.191,@function
BZ2_bzwrite.191:                        # @BZ2_bzwrite.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$526356086, -24(%rbp)   # imm = 0x1F5F8E76
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB231_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB231_3
.LBB231_2:                              # %if.else
	movl	$-1, -16(%rbp)
.LBB231_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$526356086, -24(%rbp)   # imm = 0x1F5F8E76
	jne	.LBB231_5
.LBB231_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_4
.Lfunc_end231:
	.size	BZ2_bzwrite.191, .Lfunc_end231-BZ2_bzwrite.191
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.192 # -- Begin function BZ2_bzReadGetUnused.192
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.192,@function
BZ2_bzReadGetUnused.192:                # @BZ2_bzReadGetUnused.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$761288830, -20(%rbp)   # imm = 0x2D60587E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB232_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB232_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB232_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB232_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB232_5:                              # %if.end5
	jmp	.LBB232_24
.LBB232_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB232_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB232_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB232_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB232_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB232_11:                             # %if.end16
	jmp	.LBB232_24
.LBB232_12:                             # %if.end17
	cmpq	$0, -32(%rbp)
	je	.LBB232_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -40(%rbp)
	jne	.LBB232_19
.LBB232_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB232_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB232_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB232_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB232_18:                             # %if.end27
	jmp	.LBB232_24
.LBB232_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB232_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB232_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB232_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB232_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB232_24:                             # %return
	cmpl	$761288830, -20(%rbp)   # imm = 0x2D60587E
	jne	.LBB232_26
.LBB232_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_25
.Lfunc_end232:
	.size	BZ2_bzReadGetUnused.192, .Lfunc_end232-BZ2_bzReadGetUnused.192
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.193     # -- Begin function BZ2_bzWriteOpen.193
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.193,@function
BZ2_bzWriteOpen.193:                    # @BZ2_bzWriteOpen.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$512443661, -60(%rbp)   # imm = 0x1E8B450D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB233_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB233_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB233_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB233_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB233_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -40(%rbp)
	jl	.LBB233_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -40(%rbp)
	jg	.LBB233_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB233_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB233_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -36(%rbp)
	jl	.LBB233_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -36(%rbp)
	jle	.LBB233_16
.LBB233_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB233_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB233_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB233_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB233_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB233_41
.LBB233_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB233_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB233_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB233_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB233_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB233_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB233_41
.LBB233_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB233_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB233_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB233_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB233_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB233_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB233_41
.LBB233_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB233_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB233_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB233_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB233_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB233_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB233_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB233_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB233_37
# %bb.36:                               # %if.then62
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB233_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB233_39
# %bb.38:                               # %if.then65
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB233_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB233_41
.LBB233_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB233_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$512443661, -60(%rbp)   # imm = 0x1E8B450D
	jne	.LBB233_43
.LBB233_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_42
.Lfunc_end233:
	.size	BZ2_bzWriteOpen.193, .Lfunc_end233-BZ2_bzWriteOpen.193
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressEnd.194   # -- Begin function BZ2_bzCompressEnd.194
	.p2align	4, 0x90
	.type	BZ2_bzCompressEnd.194,@function
BZ2_bzCompressEnd.194:                  # @BZ2_bzCompressEnd.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2132095616, -36(%rbp)  # imm = 0x7F153280
	movq	%rdi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB234_2
# %bb.1:                                # %if.then
	movl	$-2, -20(%rbp)
	jmp	.LBB234_13
.LBB234_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB234_4
# %bb.3:                                # %if.then2
	movl	$-2, -20(%rbp)
	jmp	.LBB234_13
.LBB234_4:                              # %if.end3
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB234_6
# %bb.5:                                # %if.then6
	movl	$-2, -20(%rbp)
	jmp	.LBB234_13
.LBB234_6:                              # %if.end7
	movq	-32(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB234_8
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB234_8:                              # %if.end11
	movq	-32(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB234_10
# %bb.9:                                # %if.then13
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB234_10:                             # %if.end17
	movq	-32(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB234_12
# %bb.11:                               # %if.then19
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-32(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB234_12:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -20(%rbp)
.LBB234_13:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$2132095616, -36(%rbp)  # imm = 0x7F153280
	jne	.LBB234_15
.LBB234_14:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_14
.Lfunc_end234:
	.size	BZ2_bzCompressEnd.194, .Lfunc_end234-BZ2_bzCompressEnd.194
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.195
	.type	handle_compress.195,@function
handle_compress.195:                    # @handle_compress.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1520729316, -28(%rbp)  # imm = 0x5AA47CE4
	movq	%rdi, -40(%rbp)
	movb	$0, -10(%rbp)
	movb	$0, -9(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB235_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB235_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB235_4
# %bb.3:                                # %if.then6
	jmp	.LBB235_25
.LBB235_4:                              # %if.end
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB235_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB235_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB235_8
# %bb.7:                                # %if.then14
	jmp	.LBB235_25
.LBB235_8:                              # %if.end15
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB235_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB235_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB235_12
# %bb.11:                               # %if.then28
	jmp	.LBB235_25
.LBB235_12:                             # %if.end29
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_13
.LBB235_13:                             # %if.end30
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB235_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB235_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB235_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB235_23
.LBB235_17:                             # %if.else
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB235_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB235_22
.LBB235_19:                             # %if.else57
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB235_21
# %bb.20:                               # %if.then61
	jmp	.LBB235_25
.LBB235_21:                             # %if.end62
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_22
.LBB235_22:                             # %if.end63
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_23
.LBB235_23:                             # %if.end64
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_24
.LBB235_24:                             # %if.end65
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_1
.LBB235_25:                             # %while.end
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB235_27
# %bb.26:                               # %lor.rhs
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB235_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1520729316, -28(%rbp)  # imm = 0x5AA47CE4
	jne	.LBB235_29
.LBB235_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_28
.Lfunc_end235:
	.size	handle_compress.195, .Lfunc_end235-handle_compress.195
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.196      # -- Begin function BZ2_indexIntoF.196
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.196,@function
BZ2_indexIntoF.196:                     # @BZ2_indexIntoF.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1972649705, -28(%rbp)  # imm = 0x75943EE9
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB236_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB236_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB236_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB236_4
.LBB236_3:                              # %if.else
                                        #   in Loop: Header=BB236_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB236_4:                              # %if.end
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_5
.LBB236_5:                              # %do.cond
                                        #   in Loop: Header=BB236_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB236_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1972649705, -28(%rbp)  # imm = 0x75943EE9
	jne	.LBB236_8
.LBB236_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_7
.Lfunc_end236:
	.size	BZ2_indexIntoF.196, .Lfunc_end236-BZ2_indexIntoF.196
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.197 # -- Begin function BZ2_bzDecompressInit.197
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.197,@function
BZ2_bzDecompressInit.197:               # @BZ2_bzDecompressInit.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1846909200, -40(%rbp)  # imm = 0x6E159910
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB237_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB237_17
.LBB237_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB237_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB237_17
.LBB237_4:                              # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB237_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB237_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB237_17
.LBB237_7:                              # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB237_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB237_10
.LBB237_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB237_17
.LBB237_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB237_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB237_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB237_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB237_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB237_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB237_17
.LBB237_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB237_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1846909200, -40(%rbp)  # imm = 0x6E159910
	jne	.LBB237_19
.LBB237_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_18
.Lfunc_end237:
	.size	BZ2_bzDecompressInit.197, .Lfunc_end237-BZ2_bzDecompressInit.197
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.198
	.type	unRLE_obuf_to_output_FAST.198,@function
unRLE_obuf_to_output_FAST.198:          # @unRLE_obuf_to_output_FAST.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$614897579, -88(%rbp)   # imm = 0x24A697AB
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB238_48
# %bb.1:                                # %if.then
	jmp	.LBB238_2
.LBB238_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_3 Depth 2
	jmp	.LBB238_3
.LBB238_3:                              # %while.body2
                                        #   Parent Loop BB238_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB238_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB238_82
.LBB238_5:                              # %if.end
                                        #   in Loop: Header=BB238_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB238_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_10
.LBB238_7:                              # %if.end6
                                        #   in Loop: Header=BB238_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB238_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB238_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB238_9:                              # %if.end26
                                        #   in Loop: Header=BB238_3 Depth=2
	jmp	.LBB238_3
.LBB238_10:                             # %while.end
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB238_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB238_82
.LBB238_12:                             # %if.end30
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB238_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB238_82
.LBB238_14:                             # %if.end37
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB238_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB238_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB238_17:                             # %if.end61
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_18
.LBB238_18:                             # %if.end62
                                        #   in Loop: Header=BB238_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB238_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_20
.LBB238_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_2
.LBB238_21:                             # %if.end79
                                        #   in Loop: Header=BB238_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB238_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB238_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB238_20
.LBB238_23:                             # %if.end87
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB238_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB238_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB238_26:                             # %if.end114
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_27
.LBB238_27:                             # %if.end115
                                        #   in Loop: Header=BB238_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB238_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_20
.LBB238_29:                             # %if.end133
                                        #   in Loop: Header=BB238_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB238_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB238_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB238_20
.LBB238_31:                             # %if.end141
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB238_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB238_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB238_34:                             # %if.end168
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_35
.LBB238_35:                             # %if.end169
                                        #   in Loop: Header=BB238_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB238_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_20
.LBB238_37:                             # %if.end187
                                        #   in Loop: Header=BB238_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB238_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB238_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB238_20
.LBB238_39:                             # %if.end195
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB238_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB238_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB238_42:                             # %if.end221
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_43
.LBB238_43:                             # %if.end222
                                        #   in Loop: Header=BB238_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB238_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB238_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB238_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB238_46:                             # %if.end264
                                        #   in Loop: Header=BB238_2 Depth=1
	jmp	.LBB238_47
.LBB238_47:                             # %if.end265
                                        #   in Loop: Header=BB238_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB238_20
.LBB238_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB238_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB238_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB238_49 Depth=1
	jmp	.LBB238_51
.LBB238_51:                             # %while.body294
                                        #   Parent Loop BB238_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB238_53
# %bb.52:                               # %if.then297
	jmp	.LBB238_78
.LBB238_53:                             # %if.end298
                                        #   in Loop: Header=BB238_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB238_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB238_49 Depth=1
	jmp	.LBB238_56
.LBB238_55:                             # %if.end302
                                        #   in Loop: Header=BB238_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB238_51
.LBB238_56:                             # %while.end313
                                        #   in Loop: Header=BB238_49 Depth=1
	jmp	.LBB238_57
.LBB238_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB238_49 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB238_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB238_78
.LBB238_59:                             # %if.end317
                                        #   in Loop: Header=BB238_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
.LBB238_60:                             # %if.end327
                                        #   in Loop: Header=BB238_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB238_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB238_82
.LBB238_62:                             # %if.end331
                                        #   in Loop: Header=BB238_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB238_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB238_78
.LBB238_64:                             # %if.end335
                                        #   in Loop: Header=BB238_49 Depth=1
	movl	-48(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB238_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB238_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB238_57
.LBB238_66:                             # %if.end348
                                        #   in Loop: Header=BB238_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB238_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB238_49 Depth=1
	jmp	.LBB238_57
.LBB238_68:                             # %if.end352
                                        #   in Loop: Header=BB238_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB238_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB238_49 Depth=1
	jmp	.LBB238_70
.LBB238_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB238_49 Depth=1
	jmp	.LBB238_49
.LBB238_71:                             # %if.end362
                                        #   in Loop: Header=BB238_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB238_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB238_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB238_70
.LBB238_73:                             # %if.end368
                                        #   in Loop: Header=BB238_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB238_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB238_49 Depth=1
	jmp	.LBB238_70
.LBB238_75:                             # %if.end378
                                        #   in Loop: Header=BB238_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB238_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB238_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB238_70
.LBB238_77:                             # %if.end384
                                        #   in Loop: Header=BB238_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB238_70
.LBB238_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	subl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-84(%rbp), %eax
	jae	.LBB238_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB238_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB238_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$614897579, -88(%rbp)   # imm = 0x24A697AB
	jne	.LBB238_84
.LBB238_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_83
.Lfunc_end238:
	.size	unRLE_obuf_to_output_FAST.198, .Lfunc_end238-unRLE_obuf_to_output_FAST.198
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.199      # -- Begin function BZ2_bzCompress.199
	.p2align	4, 0x90
	.type	BZ2_bzCompress.199,@function
BZ2_bzCompress.199:                     # @BZ2_bzCompress.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$864789943, -44(%rbp)   # imm = 0x338BA5B7
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB239_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB239_39
.LBB239_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB239_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB239_39
.LBB239_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB239_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB239_39
.LBB239_6:                              # %if.end7
	jmp	.LBB239_7
.LBB239_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB239_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB239_7 Depth=1
	movq	.LJTI239_0(,%rax,8), %rax
	jmpq	*%rax
.LBB239_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB239_39
.LBB239_10:                             # %sw.bb8
                                        #   in Loop: Header=BB239_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB239_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB239_39
.LBB239_12:                             # %if.else
                                        #   in Loop: Header=BB239_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB239_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB239_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB239_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB239_7 Depth=1
	jmp	.LBB239_7
.LBB239_15:                             # %if.else15
                                        #   in Loop: Header=BB239_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB239_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB239_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB239_14
.LBB239_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB239_39
.LBB239_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB239_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB239_39
.LBB239_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB239_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB239_39
.LBB239_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB239_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB239_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB239_26
.LBB239_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB239_39
.LBB239_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB239_39
.LBB239_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB239_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB239_39
.LBB239_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB239_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB239_39
.LBB239_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB239_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB239_39
.LBB239_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB239_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB239_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB239_37
.LBB239_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB239_39
.LBB239_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB239_39
.LBB239_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB239_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$864789943, -44(%rbp)   # imm = 0x338BA5B7
	jne	.LBB239_41
.LBB239_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_40
.Lfunc_end239:
	.size	BZ2_bzCompress.199, .Lfunc_end239-BZ2_bzCompress.199
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI239_0:
	.quad	.LBB239_9
	.quad	.LBB239_10
	.quad	.LBB239_18
	.quad	.LBB239_27
                                        # -- End function
	.text
	.globl	BZ2_bzDecompressInit.200 # -- Begin function BZ2_bzDecompressInit.200
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.200,@function
BZ2_bzDecompressInit.200:               # @BZ2_bzDecompressInit.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1760030359, -40(%rbp)  # imm = 0x68E7EE97
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB240_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB240_17
.LBB240_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB240_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB240_17
.LBB240_4:                              # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB240_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB240_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB240_17
.LBB240_7:                              # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB240_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB240_10
.LBB240_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB240_17
.LBB240_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB240_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB240_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB240_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB240_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB240_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB240_17
.LBB240_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB240_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1760030359, -40(%rbp)  # imm = 0x68E7EE97
	jne	.LBB240_19
.LBB240_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_18
.Lfunc_end240:
	.size	BZ2_bzDecompressInit.200, .Lfunc_end240-BZ2_bzDecompressInit.200
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.201
	.type	handle_compress.201,@function
handle_compress.201:                    # @handle_compress.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2118160444, -28(%rbp)  # imm = 0x7E40903C
	movq	%rdi, -40(%rbp)
	movb	$0, -10(%rbp)
	movb	$0, -9(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB241_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB241_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB241_4
# %bb.3:                                # %if.then6
	jmp	.LBB241_25
.LBB241_4:                              # %if.end
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB241_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB241_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB241_8
# %bb.7:                                # %if.then14
	jmp	.LBB241_25
.LBB241_8:                              # %if.end15
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB241_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB241_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB241_12
# %bb.11:                               # %if.then28
	jmp	.LBB241_25
.LBB241_12:                             # %if.end29
                                        #   in Loop: Header=BB241_1 Depth=1
	jmp	.LBB241_13
.LBB241_13:                             # %if.end30
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB241_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB241_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB241_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB241_23
.LBB241_17:                             # %if.else
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB241_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB241_22
.LBB241_19:                             # %if.else57
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB241_21
# %bb.20:                               # %if.then61
	jmp	.LBB241_25
.LBB241_21:                             # %if.end62
                                        #   in Loop: Header=BB241_1 Depth=1
	jmp	.LBB241_22
.LBB241_22:                             # %if.end63
                                        #   in Loop: Header=BB241_1 Depth=1
	jmp	.LBB241_23
.LBB241_23:                             # %if.end64
                                        #   in Loop: Header=BB241_1 Depth=1
	jmp	.LBB241_24
.LBB241_24:                             # %if.end65
                                        #   in Loop: Header=BB241_1 Depth=1
	jmp	.LBB241_1
.LBB241_25:                             # %while.end
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB241_27
# %bb.26:                               # %lor.rhs
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB241_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$2118160444, -28(%rbp)  # imm = 0x7E40903C
	jne	.LBB241_29
.LBB241_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_28
.Lfunc_end241:
	.size	handle_compress.201, .Lfunc_end241-handle_compress.201
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.202  # -- Begin function BZ2_bzWriteClose64.202
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.202,@function
BZ2_bzWriteClose64.202:                 # @BZ2_bzWriteClose64.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$855611905, -60(%rbp)   # imm = 0x32FF9A01
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB242_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB242_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB242_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB242_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB242_5:                              # %if.end5
	jmp	.LBB242_71
.LBB242_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB242_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB242_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB242_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB242_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB242_11:                             # %if.end14
	jmp	.LBB242_71
.LBB242_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB242_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB242_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB242_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB242_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB242_17:                             # %if.end24
	jmp	.LBB242_71
.LBB242_18:                             # %if.end25
	cmpq	$0, -48(%rbp)
	je	.LBB242_20
# %bb.19:                               # %if.then27
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB242_20:                             # %if.end28
	cmpq	$0, -56(%rbp)
	je	.LBB242_22
# %bb.21:                               # %if.then30
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB242_22:                             # %if.end31
	cmpq	$0, -40(%rbp)
	je	.LBB242_24
# %bb.23:                               # %if.then33
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB242_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB242_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB242_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB242_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB242_49
# %bb.28:                               # %if.then41
	jmp	.LBB242_29
.LBB242_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB242_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB242_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB242_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB242_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB242_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB242_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB242_35:                             # %if.end55
	jmp	.LBB242_71
.LBB242_36:                             # %if.end56
                                        #   in Loop: Header=BB242_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB242_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB242_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB242_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB242_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB242_44
.LBB242_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB242_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB242_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB242_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB242_43:                             # %if.end82
	jmp	.LBB242_71
.LBB242_44:                             # %if.end83
                                        #   in Loop: Header=BB242_29 Depth=1
	jmp	.LBB242_45
.LBB242_45:                             # %if.end84
                                        #   in Loop: Header=BB242_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB242_47
# %bb.46:                               # %if.then87
	jmp	.LBB242_48
.LBB242_47:                             # %if.end88
                                        #   in Loop: Header=BB242_29 Depth=1
	jmp	.LBB242_29
.LBB242_48:                             # %while.end
	jmp	.LBB242_49
.LBB242_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB242_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB242_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB242_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB242_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB242_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB242_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB242_56:                             # %if.end110
	jmp	.LBB242_71
.LBB242_57:                             # %if.end111
	jmp	.LBB242_58
.LBB242_58:                             # %if.end112
	cmpq	$0, -48(%rbp)
	je	.LBB242_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB242_60:                             # %if.end117
	cmpq	$0, -56(%rbp)
	je	.LBB242_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB242_62:                             # %if.end122
	cmpq	$0, -40(%rbp)
	je	.LBB242_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB242_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB242_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB242_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB242_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB242_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB242_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB242_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB242_71:                             # %return
	cmpl	$855611905, -60(%rbp)   # imm = 0x32FF9A01
	jne	.LBB242_73
.LBB242_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_72
.Lfunc_end242:
	.size	BZ2_bzWriteClose64.202, .Lfunc_end242-BZ2_bzWriteClose64.202
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.203
	.type	handle_compress.203,@function
handle_compress.203:                    # @handle_compress.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$303647614, -28(%rbp)   # imm = 0x12194B7E
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB243_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB243_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB243_4
# %bb.3:                                # %if.then6
	jmp	.LBB243_25
.LBB243_4:                              # %if.end
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB243_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB243_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB243_8
# %bb.7:                                # %if.then14
	jmp	.LBB243_25
.LBB243_8:                              # %if.end15
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB243_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB243_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB243_12
# %bb.11:                               # %if.then28
	jmp	.LBB243_25
.LBB243_12:                             # %if.end29
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_13
.LBB243_13:                             # %if.end30
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB243_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB243_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB243_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB243_23
.LBB243_17:                             # %if.else
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB243_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB243_22
.LBB243_19:                             # %if.else57
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB243_21
# %bb.20:                               # %if.then61
	jmp	.LBB243_25
.LBB243_21:                             # %if.end62
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_22
.LBB243_22:                             # %if.end63
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_23
.LBB243_23:                             # %if.end64
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_24
.LBB243_24:                             # %if.end65
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_1
.LBB243_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB243_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB243_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$303647614, -28(%rbp)   # imm = 0x12194B7E
	jne	.LBB243_29
.LBB243_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_28
.Lfunc_end243:
	.size	handle_compress.203, .Lfunc_end243-handle_compress.203
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.204         # -- Begin function BZ2_bzwrite.204
	.p2align	4, 0x90
	.type	BZ2_bzwrite.204,@function
BZ2_bzwrite.204:                        # @BZ2_bzwrite.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1476900678, -24(%rbp)  # imm = 0x5807B746
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB244_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB244_3
.LBB244_2:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB244_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1476900678, -24(%rbp)  # imm = 0x5807B746
	jne	.LBB244_5
.LBB244_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_4
.Lfunc_end244:
	.size	BZ2_bzwrite.204, .Lfunc_end244-BZ2_bzwrite.204
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.205      # -- Begin function BZ2_bzCompress.205
	.p2align	4, 0x90
	.type	BZ2_bzCompress.205,@function
BZ2_bzCompress.205:                     # @BZ2_bzCompress.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$906398293, -44(%rbp)   # imm = 0x36068A55
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB245_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB245_39
.LBB245_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB245_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB245_39
.LBB245_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB245_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB245_39
.LBB245_6:                              # %if.end7
	jmp	.LBB245_7
.LBB245_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB245_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB245_7 Depth=1
	movq	.LJTI245_0(,%rax,8), %rax
	jmpq	*%rax
.LBB245_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB245_39
.LBB245_10:                             # %sw.bb8
                                        #   in Loop: Header=BB245_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB245_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB245_39
.LBB245_12:                             # %if.else
                                        #   in Loop: Header=BB245_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB245_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB245_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB245_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB245_7 Depth=1
	jmp	.LBB245_7
.LBB245_15:                             # %if.else15
                                        #   in Loop: Header=BB245_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB245_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB245_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB245_14
.LBB245_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB245_39
.LBB245_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB245_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB245_39
.LBB245_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB245_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB245_39
.LBB245_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB245_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB245_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB245_26
.LBB245_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB245_39
.LBB245_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB245_39
.LBB245_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB245_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB245_39
.LBB245_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB245_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB245_39
.LBB245_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB245_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB245_39
.LBB245_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB245_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB245_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB245_37
.LBB245_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB245_39
.LBB245_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB245_39
.LBB245_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB245_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$906398293, -44(%rbp)   # imm = 0x36068A55
	jne	.LBB245_41
.LBB245_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_40
.Lfunc_end245:
	.size	BZ2_bzCompress.205, .Lfunc_end245-BZ2_bzCompress.205
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI245_0:
	.quad	.LBB245_9
	.quad	.LBB245_10
	.quad	.LBB245_18
	.quad	.LBB245_27
                                        # -- End function
	.text
	.globl	BZ2_bzDecompressInit.206 # -- Begin function BZ2_bzDecompressInit.206
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.206,@function
BZ2_bzDecompressInit.206:               # @BZ2_bzDecompressInit.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1393308844, -40(%rbp)  # imm = 0x530C34AC
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB246_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB246_17
.LBB246_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB246_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB246_17
.LBB246_4:                              # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB246_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB246_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB246_17
.LBB246_7:                              # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB246_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB246_10
.LBB246_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB246_17
.LBB246_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB246_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB246_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB246_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB246_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB246_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB246_17
.LBB246_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB246_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1393308844, -40(%rbp)  # imm = 0x530C34AC
	jne	.LBB246_19
.LBB246_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_18
.Lfunc_end246:
	.size	BZ2_bzDecompressInit.206, .Lfunc_end246-BZ2_bzDecompressInit.206
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.207          # -- Begin function BZ2_bzRead.207
	.p2align	4, 0x90
	.type	BZ2_bzRead.207,@function
BZ2_bzRead.207:                         # @BZ2_bzRead.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1985391777, -44(%rbp)  # imm = 0x7656ACA1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB247_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB247_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB247_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB247_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB247_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB247_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB247_12
.LBB247_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB247_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB247_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB247_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB247_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB247_69
.LBB247_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB247_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB247_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB247_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB247_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB247_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB247_69
.LBB247_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB247_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB247_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB247_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB247_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB247_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB247_69
.LBB247_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB247_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB247_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB247_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB247_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB247_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB247_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB247_69
.LBB247_31:                             # %if.end46
                                        #   in Loop: Header=BB247_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB247_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB247_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB247_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB247_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB247_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB247_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB247_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB247_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB247_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB247_69
.LBB247_39:                             # %if.end69
                                        #   in Loop: Header=BB247_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB247_40:                             # %if.end76
                                        #   in Loop: Header=BB247_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB247_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB247_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB247_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB247_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB247_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB247_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB247_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB247_69
.LBB247_47:                             # %if.end94
                                        #   in Loop: Header=BB247_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB247_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB247_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB247_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB247_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB247_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB247_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB247_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB247_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB247_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB247_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB247_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB247_69
.LBB247_56:                             # %if.end122
                                        #   in Loop: Header=BB247_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB247_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB247_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB247_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB247_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB247_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB247_69
.LBB247_62:                             # %if.end137
                                        #   in Loop: Header=BB247_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB247_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB247_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB247_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB247_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB247_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB247_69
.LBB247_68:                             # %if.end152
                                        #   in Loop: Header=BB247_25 Depth=1
	jmp	.LBB247_25
.LBB247_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1985391777, -44(%rbp)  # imm = 0x7656ACA1
	jne	.LBB247_71
.LBB247_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_70
.Lfunc_end247:
	.size	BZ2_bzRead.207, .Lfunc_end247-BZ2_bzRead.207
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.208         # -- Begin function BZ2_bzWrite.208
	.p2align	4, 0x90
	.type	BZ2_bzWrite.208,@function
BZ2_bzWrite.208:                        # @BZ2_bzWrite.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1945035303, -36(%rbp)  # imm = 0x73EEE227
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB248_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB248_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB248_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB248_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB248_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB248_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -20(%rbp)
	jge	.LBB248_12
.LBB248_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB248_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB248_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB248_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB248_11:                             # %if.end15
	jmp	.LBB248_53
.LBB248_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB248_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB248_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB248_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB248_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB248_17:                             # %if.end24
	jmp	.LBB248_53
.LBB248_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB248_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB248_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB248_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB248_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB248_23:                             # %if.end34
	jmp	.LBB248_53
.LBB248_24:                             # %if.end35
	cmpl	$0, -20(%rbp)
	jne	.LBB248_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB248_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB248_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB248_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB248_29:                             # %if.end44
	jmp	.LBB248_53
.LBB248_30:                             # %if.end45
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB248_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	je	.LBB248_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB248_34
# %bb.33:                               # %if.then55
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB248_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB248_36
# %bb.35:                               # %if.then58
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB248_36:                             # %if.end60
	jmp	.LBB248_53
.LBB248_37:                             # %if.end61
                                        #   in Loop: Header=BB248_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB248_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB248_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB248_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB248_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB248_45
.LBB248_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB248_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB248_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB248_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB248_44:                             # %if.end88
	jmp	.LBB248_53
.LBB248_45:                             # %if.end89
                                        #   in Loop: Header=BB248_31 Depth=1
	jmp	.LBB248_46
.LBB248_46:                             # %if.end90
                                        #   in Loop: Header=BB248_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB248_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB248_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB248_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB248_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB248_51:                             # %if.end104
	jmp	.LBB248_53
.LBB248_52:                             # %if.end105
                                        #   in Loop: Header=BB248_31 Depth=1
	jmp	.LBB248_31
.LBB248_53:                             # %return
	cmpl	$1945035303, -36(%rbp)  # imm = 0x73EEE227
	jne	.LBB248_55
.LBB248_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_54
.Lfunc_end248:
	.size	BZ2_bzWrite.208, .Lfunc_end248-BZ2_bzWrite.208
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.209      # -- Begin function BZ2_bzReadOpen.209
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.209,@function
BZ2_bzReadOpen.209:                     # @BZ2_bzReadOpen.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1811145128, -76(%rbp)  # imm = 0x6BF3E1A8
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movq	%r8, -64(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB249_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB249_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB249_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB249_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB249_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -40(%rbp)
	je	.LBB249_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -40(%rbp)
	jne	.LBB249_14
.LBB249_7:                              # %lor.lhs.false7
	cmpl	$0, -36(%rbp)
	jl	.LBB249_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -36(%rbp)
	jg	.LBB249_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -64(%rbp)
	jne	.LBB249_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB249_14
.LBB249_11:                             # %lor.lhs.false15
	cmpq	$0, -64(%rbp)
	je	.LBB249_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB249_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB249_19
.LBB249_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB249_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB249_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB249_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB249_18:                             # %if.end28
	movq	$0, -56(%rbp)
	jmp	.LBB249_45
.LBB249_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB249_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB249_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB249_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB249_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB249_24:                             # %if.end37
	movq	$0, -56(%rbp)
	jmp	.LBB249_45
.LBB249_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB249_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB249_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB249_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB249_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB249_30:                             # %if.end48
	movq	$0, -56(%rbp)
	jmp	.LBB249_45
.LBB249_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB249_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB249_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB249_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB249_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB249_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB249_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB249_36 Depth=1
	movq	-64(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB249_36
.LBB249_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB249_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB249_41
# %bb.40:                               # %if.then67
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB249_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB249_43
# %bb.42:                               # %if.then70
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB249_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -56(%rbp)
	jmp	.LBB249_45
.LBB249_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB249_45:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$1811145128, -76(%rbp)  # imm = 0x6BF3E1A8
	jne	.LBB249_47
.LBB249_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_46
.Lfunc_end249:
	.size	BZ2_bzReadOpen.209, .Lfunc_end249-BZ2_bzReadOpen.209
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.210
	.type	handle_compress.210,@function
handle_compress.210:                    # @handle_compress.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1005617288, -28(%rbp)  # imm = 0x3BF08088
	movq	%rdi, -40(%rbp)
	movb	$0, -10(%rbp)
	movb	$0, -9(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB250_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB250_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB250_4
# %bb.3:                                # %if.then6
	jmp	.LBB250_25
.LBB250_4:                              # %if.end
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB250_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB250_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB250_8
# %bb.7:                                # %if.then14
	jmp	.LBB250_25
.LBB250_8:                              # %if.end15
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB250_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB250_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB250_12
# %bb.11:                               # %if.then28
	jmp	.LBB250_25
.LBB250_12:                             # %if.end29
                                        #   in Loop: Header=BB250_1 Depth=1
	jmp	.LBB250_13
.LBB250_13:                             # %if.end30
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB250_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB250_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB250_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB250_23
.LBB250_17:                             # %if.else
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB250_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB250_22
.LBB250_19:                             # %if.else57
                                        #   in Loop: Header=BB250_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB250_21
# %bb.20:                               # %if.then61
	jmp	.LBB250_25
.LBB250_21:                             # %if.end62
                                        #   in Loop: Header=BB250_1 Depth=1
	jmp	.LBB250_22
.LBB250_22:                             # %if.end63
                                        #   in Loop: Header=BB250_1 Depth=1
	jmp	.LBB250_23
.LBB250_23:                             # %if.end64
                                        #   in Loop: Header=BB250_1 Depth=1
	jmp	.LBB250_24
.LBB250_24:                             # %if.end65
                                        #   in Loop: Header=BB250_1 Depth=1
	jmp	.LBB250_1
.LBB250_25:                             # %while.end
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB250_27
# %bb.26:                               # %lor.rhs
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB250_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1005617288, -28(%rbp)  # imm = 0x3BF08088
	jne	.LBB250_29
.LBB250_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_28
.Lfunc_end250:
	.size	handle_compress.210, .Lfunc_end250-handle_compress.210
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.211
	.type	myfeof.211,@function
myfeof.211:                             # @myfeof.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$75280767, -20(%rbp)    # imm = 0x47CB17F
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB251_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB251_3
.LBB251_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB251_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$75280767, -20(%rbp)    # imm = 0x47CB17F
	jne	.LBB251_5
.LBB251_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_4
.Lfunc_end251:
	.size	myfeof.211, .Lfunc_end251-myfeof.211
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.212
	.type	unRLE_obuf_to_output_FAST.212,@function
unRLE_obuf_to_output_FAST.212:          # @unRLE_obuf_to_output_FAST.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$910205998, -88(%rbp)   # imm = 0x3640A42E
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB252_48
# %bb.1:                                # %if.then
	jmp	.LBB252_2
.LBB252_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_3 Depth 2
	jmp	.LBB252_3
.LBB252_3:                              # %while.body2
                                        #   Parent Loop BB252_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB252_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB252_82
.LBB252_5:                              # %if.end
                                        #   in Loop: Header=BB252_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB252_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_10
.LBB252_7:                              # %if.end6
                                        #   in Loop: Header=BB252_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB252_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB252_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB252_9:                              # %if.end26
                                        #   in Loop: Header=BB252_3 Depth=2
	jmp	.LBB252_3
.LBB252_10:                             # %while.end
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB252_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB252_82
.LBB252_12:                             # %if.end30
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB252_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB252_82
.LBB252_14:                             # %if.end37
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB252_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB252_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB252_17:                             # %if.end61
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_18
.LBB252_18:                             # %if.end62
                                        #   in Loop: Header=BB252_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB252_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_20
.LBB252_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_2
.LBB252_21:                             # %if.end79
                                        #   in Loop: Header=BB252_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB252_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB252_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB252_20
.LBB252_23:                             # %if.end87
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB252_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB252_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB252_26:                             # %if.end114
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_27
.LBB252_27:                             # %if.end115
                                        #   in Loop: Header=BB252_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB252_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_20
.LBB252_29:                             # %if.end133
                                        #   in Loop: Header=BB252_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB252_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB252_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB252_20
.LBB252_31:                             # %if.end141
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB252_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB252_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB252_34:                             # %if.end168
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_35
.LBB252_35:                             # %if.end169
                                        #   in Loop: Header=BB252_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB252_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_20
.LBB252_37:                             # %if.end187
                                        #   in Loop: Header=BB252_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB252_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB252_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB252_20
.LBB252_39:                             # %if.end195
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB252_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB252_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB252_42:                             # %if.end221
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_43
.LBB252_43:                             # %if.end222
                                        #   in Loop: Header=BB252_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB252_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB252_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB252_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB252_46:                             # %if.end264
                                        #   in Loop: Header=BB252_2 Depth=1
	jmp	.LBB252_47
.LBB252_47:                             # %if.end265
                                        #   in Loop: Header=BB252_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB252_20
.LBB252_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB252_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB252_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB252_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB252_49 Depth=1
	jmp	.LBB252_51
.LBB252_51:                             # %while.body294
                                        #   Parent Loop BB252_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB252_53
# %bb.52:                               # %if.then297
	jmp	.LBB252_78
.LBB252_53:                             # %if.end298
                                        #   in Loop: Header=BB252_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB252_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB252_49 Depth=1
	jmp	.LBB252_56
.LBB252_55:                             # %if.end302
                                        #   in Loop: Header=BB252_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB252_51
.LBB252_56:                             # %while.end313
                                        #   in Loop: Header=BB252_49 Depth=1
	jmp	.LBB252_57
.LBB252_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB252_49 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB252_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB252_78
.LBB252_59:                             # %if.end317
                                        #   in Loop: Header=BB252_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
.LBB252_60:                             # %if.end327
                                        #   in Loop: Header=BB252_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB252_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB252_82
.LBB252_62:                             # %if.end331
                                        #   in Loop: Header=BB252_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB252_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB252_78
.LBB252_64:                             # %if.end335
                                        #   in Loop: Header=BB252_49 Depth=1
	movl	-48(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB252_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB252_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB252_57
.LBB252_66:                             # %if.end348
                                        #   in Loop: Header=BB252_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB252_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB252_49 Depth=1
	jmp	.LBB252_57
.LBB252_68:                             # %if.end352
                                        #   in Loop: Header=BB252_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB252_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB252_49 Depth=1
	jmp	.LBB252_70
.LBB252_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB252_49 Depth=1
	jmp	.LBB252_49
.LBB252_71:                             # %if.end362
                                        #   in Loop: Header=BB252_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB252_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB252_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB252_70
.LBB252_73:                             # %if.end368
                                        #   in Loop: Header=BB252_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB252_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB252_49 Depth=1
	jmp	.LBB252_70
.LBB252_75:                             # %if.end378
                                        #   in Loop: Header=BB252_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB252_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB252_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB252_70
.LBB252_77:                             # %if.end384
                                        #   in Loop: Header=BB252_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB252_70
.LBB252_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	-84(%rbp), %eax
	subl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-92(%rbp), %eax
	jae	.LBB252_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB252_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB252_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$910205998, -88(%rbp)   # imm = 0x3640A42E
	jne	.LBB252_84
.LBB252_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_83
.Lfunc_end252:
	.size	unRLE_obuf_to_output_FAST.212, .Lfunc_end252-unRLE_obuf_to_output_FAST.212
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.213 # -- Begin function BZ2_bzBuffToBuffCompress.213
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.213,@function
BZ2_bzBuffToBuffCompress.213:           # @BZ2_bzBuffToBuffCompress.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$839486556, -36(%rbp)   # imm = 0x32098C5C
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB253_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB253_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB253_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB253_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB253_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB253_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB253_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB253_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB253_10
.LBB253_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB253_21
.LBB253_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB253_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB253_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB253_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB253_21
.LBB253_14:                             # %if.end21
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB253_16
# %bb.15:                               # %if.then24
	jmp	.LBB253_19
.LBB253_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB253_18
# %bb.17:                               # %if.then27
	jmp	.LBB253_20
.LBB253_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB253_21
.LBB253_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB253_21
.LBB253_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB253_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$839486556, -36(%rbp)   # imm = 0x32098C5C
	jne	.LBB253_23
.LBB253_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_22
.Lfunc_end253:
	.size	BZ2_bzBuffToBuffCompress.213, .Lfunc_end253-BZ2_bzBuffToBuffCompress.213
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.214          # -- Begin function BZ2_bzread.214
	.p2align	4, 0x90
	.type	BZ2_bzread.214,@function
BZ2_bzread.214:                         # @BZ2_bzread.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1702464844, -24(%rbp)  # imm = 0x65798D4C
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB254_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB254_6
.LBB254_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -28(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB254_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB254_5
.LBB254_4:                              # %if.then3
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB254_6
.LBB254_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB254_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1702464844, -24(%rbp)  # imm = 0x65798D4C
	jne	.LBB254_8
.LBB254_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_7
.Lfunc_end254:
	.size	BZ2_bzread.214, .Lfunc_end254-BZ2_bzread.214
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.215     # -- Begin function BZ2_bzWriteOpen.215
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.215,@function
BZ2_bzWriteOpen.215:                    # @BZ2_bzWriteOpen.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1092901975, -60(%rbp)  # imm = 0x41245C57
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB255_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB255_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB255_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB255_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB255_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -32(%rbp)
	jl	.LBB255_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -32(%rbp)
	jg	.LBB255_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB255_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB255_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -36(%rbp)
	jl	.LBB255_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -36(%rbp)
	jle	.LBB255_16
.LBB255_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB255_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB255_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB255_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB255_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB255_41
.LBB255_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB255_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB255_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB255_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB255_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB255_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB255_41
.LBB255_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB255_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB255_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB255_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB255_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB255_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB255_41
.LBB255_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB255_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB255_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB255_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB255_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB255_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB255_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB255_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB255_37
# %bb.36:                               # %if.then62
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB255_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB255_39
# %bb.38:                               # %if.then65
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB255_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB255_41
.LBB255_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB255_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1092901975, -60(%rbp)  # imm = 0x41245C57
	jne	.LBB255_43
.LBB255_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_42
.Lfunc_end255:
	.size	BZ2_bzWriteOpen.215, .Lfunc_end255-BZ2_bzWriteOpen.215
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.216      # -- Begin function BZ2_indexIntoF.216
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.216,@function
BZ2_indexIntoF.216:                     # @BZ2_indexIntoF.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1362441144, -28(%rbp)  # imm = 0x513533B8
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB256_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB256_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB256_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_4
.LBB256_3:                              # %if.else
                                        #   in Loop: Header=BB256_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB256_4:                              # %if.end
                                        #   in Loop: Header=BB256_1 Depth=1
	jmp	.LBB256_5
.LBB256_5:                              # %do.cond
                                        #   in Loop: Header=BB256_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB256_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1362441144, -28(%rbp)  # imm = 0x513533B8
	jne	.LBB256_8
.LBB256_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_7
.Lfunc_end256:
	.size	BZ2_indexIntoF.216, .Lfunc_end256-BZ2_indexIntoF.216
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.217
	.type	bzopen_or_bzdopen.217,@function
bzopen_or_bzdopen.217:                  # @bzopen_or_bzdopen.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$335453952, -80(%rbp)   # imm = 0x13FE9F00
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -84(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -88(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB257_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB257_39
.LBB257_2:                              # %if.end
	jmp	.LBB257_3
.LBB257_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB257_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB257_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB257_7
	jmp	.LBB257_5
.LBB257_5:                              # %while.body
                                        #   in Loop: Header=BB257_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB257_9
	jmp	.LBB257_6
.LBB257_6:                              # %while.body
                                        #   in Loop: Header=BB257_3 Depth=1
	subl	$119, %eax
	je	.LBB257_8
	jmp	.LBB257_10
.LBB257_7:                              # %sw.bb
                                        #   in Loop: Header=BB257_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB257_13
.LBB257_8:                              # %sw.bb1
                                        #   in Loop: Header=BB257_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB257_13
.LBB257_9:                              # %sw.bb2
                                        #   in Loop: Header=BB257_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB257_13
.LBB257_10:                             # %sw.default
                                        #   in Loop: Header=BB257_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB257_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB257_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB257_12:                             # %if.end8
                                        #   in Loop: Header=BB257_3 Depth=1
	jmp	.LBB257_13
.LBB257_13:                             # %sw.epilog
                                        #   in Loop: Header=BB257_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB257_3
.LBB257_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -76(%rbp)
	jne	.LBB257_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB257_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB257_21
.LBB257_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB257_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB257_20
.LBB257_19:                             # %cond.false
	movq	stdin, %rax
.LBB257_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB257_22
.LBB257_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB257_22:                             # %if.end26
	jmp	.LBB257_24
.LBB257_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-68(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB257_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB257_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB257_39
.LBB257_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB257_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB257_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB257_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB257_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB257_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-84(%rbp), %r8d
	leaq	-72(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB257_33
.LBB257_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-88(%rbp), %r9d
	leaq	-72(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB257_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB257_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB257_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB257_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB257_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB257_39
.LBB257_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB257_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$335453952, -80(%rbp)   # imm = 0x13FE9F00
	jne	.LBB257_41
.LBB257_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_40
.Lfunc_end257:
	.size	bzopen_or_bzdopen.217, .Lfunc_end257-bzopen_or_bzdopen.217
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.218      # -- Begin function BZ2_indexIntoF.218
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.218,@function
BZ2_indexIntoF.218:                     # @BZ2_indexIntoF.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1321731716, -28(%rbp)  # imm = 0x4EC80684
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB258_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB258_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB258_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB258_4
.LBB258_3:                              # %if.else
                                        #   in Loop: Header=BB258_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB258_4:                              # %if.end
                                        #   in Loop: Header=BB258_1 Depth=1
	jmp	.LBB258_5
.LBB258_5:                              # %do.cond
                                        #   in Loop: Header=BB258_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB258_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1321731716, -28(%rbp)  # imm = 0x4EC80684
	jne	.LBB258_8
.LBB258_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_7
.Lfunc_end258:
	.size	BZ2_indexIntoF.218, .Lfunc_end258-BZ2_indexIntoF.218
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.219 # -- Begin function BZ2_bzDecompressInit.219
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.219,@function
BZ2_bzDecompressInit.219:               # @BZ2_bzDecompressInit.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$226675450, -40(%rbp)   # imm = 0xD82CAFA
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB259_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB259_17
.LBB259_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB259_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB259_17
.LBB259_4:                              # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB259_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB259_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB259_17
.LBB259_7:                              # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB259_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB259_10
.LBB259_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB259_17
.LBB259_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB259_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB259_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB259_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB259_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB259_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB259_17
.LBB259_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB259_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$226675450, -40(%rbp)   # imm = 0xD82CAFA
	jne	.LBB259_19
.LBB259_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_18
.Lfunc_end259:
	.size	BZ2_bzDecompressInit.219, .Lfunc_end259-BZ2_bzDecompressInit.219
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.220     # -- Begin function BZ2_bzWriteOpen.220
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.220,@function
BZ2_bzWriteOpen.220:                    # @BZ2_bzWriteOpen.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$432779383, -60(%rbp)   # imm = 0x19CBB077
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB260_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB260_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB260_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB260_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB260_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB260_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -36(%rbp)
	jg	.LBB260_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB260_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB260_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -40(%rbp)
	jl	.LBB260_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -40(%rbp)
	jle	.LBB260_16
.LBB260_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB260_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB260_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB260_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB260_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB260_41
.LBB260_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB260_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB260_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB260_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB260_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB260_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB260_41
.LBB260_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB260_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB260_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB260_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB260_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB260_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB260_41
.LBB260_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB260_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB260_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB260_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB260_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB260_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB260_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB260_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB260_37
# %bb.36:                               # %if.then62
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB260_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB260_39
# %bb.38:                               # %if.then65
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB260_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB260_41
.LBB260_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB260_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$432779383, -60(%rbp)   # imm = 0x19CBB077
	jne	.LBB260_43
.LBB260_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_42
.Lfunc_end260:
	.size	BZ2_bzWriteOpen.220, .Lfunc_end260-BZ2_bzWriteOpen.220
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.221          # -- Begin function BZ2_bzread.221
	.p2align	4, 0x90
	.type	BZ2_bzread.221,@function
BZ2_bzread.221:                         # @BZ2_bzread.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$413995717, -24(%rbp)   # imm = 0x18AD12C5
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB261_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB261_6
.LBB261_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -28(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB261_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB261_5
.LBB261_4:                              # %if.then3
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB261_6
.LBB261_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB261_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$413995717, -24(%rbp)   # imm = 0x18AD12C5
	jne	.LBB261_8
.LBB261_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_7
.Lfunc_end261:
	.size	BZ2_bzread.221, .Lfunc_end261-BZ2_bzread.221
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.222 # -- Begin function BZ2_bzDecompressInit.222
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.222,@function
BZ2_bzDecompressInit.222:               # @BZ2_bzDecompressInit.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1442869199, -40(%rbp)  # imm = 0x56006FCF
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB262_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB262_17
.LBB262_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB262_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB262_17
.LBB262_4:                              # %if.end2
	cmpl	$0, -32(%rbp)
	je	.LBB262_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -32(%rbp)
	je	.LBB262_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB262_17
.LBB262_7:                              # %if.end6
	cmpl	$0, -36(%rbp)
	jl	.LBB262_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -36(%rbp)
	jle	.LBB262_10
.LBB262_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB262_17
.LBB262_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB262_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB262_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB262_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB262_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB262_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB262_17
.LBB262_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB262_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1442869199, -40(%rbp)  # imm = 0x56006FCF
	jne	.LBB262_19
.LBB262_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_18
.Lfunc_end262:
	.size	BZ2_bzDecompressInit.222, .Lfunc_end262-BZ2_bzDecompressInit.222
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.223         # -- Begin function BZ2_bzwrite.223
	.p2align	4, 0x90
	.type	BZ2_bzwrite.223,@function
BZ2_bzwrite.223:                        # @BZ2_bzwrite.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$107710426, -24(%rbp)   # imm = 0x66B87DA
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB263_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB263_3
.LBB263_2:                              # %if.else
	movl	$-1, -16(%rbp)
.LBB263_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$107710426, -24(%rbp)   # imm = 0x66B87DA
	jne	.LBB263_5
.LBB263_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_4
.Lfunc_end263:
	.size	BZ2_bzwrite.223, .Lfunc_end263-BZ2_bzwrite.223
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.224          # -- Begin function BZ2_bzread.224
	.p2align	4, 0x90
	.type	BZ2_bzread.224,@function
BZ2_bzread.224:                         # @BZ2_bzread.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$555870932, -24(%rbp)   # imm = 0x2121EAD4
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -28(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB264_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB264_6
.LBB264_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-28(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -20(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB264_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB264_5
.LBB264_4:                              # %if.then3
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_6
.LBB264_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB264_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$555870932, -24(%rbp)   # imm = 0x2121EAD4
	jne	.LBB264_8
.LBB264_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_7
.Lfunc_end264:
	.size	BZ2_bzread.224, .Lfunc_end264-BZ2_bzread.224
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.225 # -- Begin function BZ2_bzReadGetUnused.225
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.225,@function
BZ2_bzReadGetUnused.225:                # @BZ2_bzReadGetUnused.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$260493657, -20(%rbp)   # imm = 0xF86D159
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB265_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB265_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB265_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB265_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB265_5:                              # %if.end5
	jmp	.LBB265_24
.LBB265_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB265_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB265_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB265_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB265_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB265_11:                             # %if.end16
	jmp	.LBB265_24
.LBB265_12:                             # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB265_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB265_19
.LBB265_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB265_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB265_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB265_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB265_18:                             # %if.end27
	jmp	.LBB265_24
.LBB265_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB265_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB265_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB265_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB265_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB265_24:                             # %return
	cmpl	$260493657, -20(%rbp)   # imm = 0xF86D159
	jne	.LBB265_26
.LBB265_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_25
.Lfunc_end265:
	.size	BZ2_bzReadGetUnused.225, .Lfunc_end265-BZ2_bzReadGetUnused.225
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.226
	.type	bzopen_or_bzdopen.226,@function
bzopen_or_bzdopen.226:                  # @bzopen_or_bzdopen.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$1483178893, -72(%rbp)  # imm = 0x5867838D
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -84(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -88(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -76(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB266_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB266_39
.LBB266_2:                              # %if.end
	jmp	.LBB266_3
.LBB266_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB266_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB266_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB266_7
	jmp	.LBB266_5
.LBB266_5:                              # %while.body
                                        #   in Loop: Header=BB266_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB266_9
	jmp	.LBB266_6
.LBB266_6:                              # %while.body
                                        #   in Loop: Header=BB266_3 Depth=1
	subl	$119, %eax
	je	.LBB266_8
	jmp	.LBB266_10
.LBB266_7:                              # %sw.bb
                                        #   in Loop: Header=BB266_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB266_13
.LBB266_8:                              # %sw.bb1
                                        #   in Loop: Header=BB266_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB266_13
.LBB266_9:                              # %sw.bb2
                                        #   in Loop: Header=BB266_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB266_13
.LBB266_10:                             # %sw.default
                                        #   in Loop: Header=BB266_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB266_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB266_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB266_12:                             # %if.end8
                                        #   in Loop: Header=BB266_3 Depth=1
	jmp	.LBB266_13
.LBB266_13:                             # %sw.epilog
                                        #   in Loop: Header=BB266_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB266_3
.LBB266_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -84(%rbp)
	jne	.LBB266_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB266_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB266_21
.LBB266_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB266_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB266_20
.LBB266_19:                             # %cond.false
	movq	stdin, %rax
.LBB266_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB266_22
.LBB266_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB266_22:                             # %if.end26
	jmp	.LBB266_24
.LBB266_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-68(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB266_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB266_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB266_39
.LBB266_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB266_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB266_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB266_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB266_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB266_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-88(%rbp), %r8d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB266_33
.LBB266_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-76(%rbp), %r9d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB266_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB266_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB266_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB266_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB266_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB266_39
.LBB266_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB266_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1483178893, -72(%rbp)  # imm = 0x5867838D
	jne	.LBB266_41
.LBB266_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_40
.Lfunc_end266:
	.size	bzopen_or_bzdopen.226, .Lfunc_end266-bzopen_or_bzdopen.226
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.227         # -- Begin function BZ2_bzwrite.227
	.p2align	4, 0x90
	.type	BZ2_bzwrite.227,@function
BZ2_bzwrite.227:                        # @BZ2_bzwrite.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$436725024, -24(%rbp)   # imm = 0x1A07E520
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movl	-12(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB267_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB267_3
.LBB267_2:                              # %if.else
	movl	$-1, -16(%rbp)
.LBB267_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$436725024, -24(%rbp)   # imm = 0x1A07E520
	jne	.LBB267_5
.LBB267_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_4
.Lfunc_end267:
	.size	BZ2_bzwrite.227, .Lfunc_end267-BZ2_bzwrite.227
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.228          # -- Begin function BZ2_bzRead.228
	.p2align	4, 0x90
	.type	BZ2_bzRead.228,@function
BZ2_bzRead.228:                         # @BZ2_bzRead.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1850657117, -44(%rbp)  # imm = 0x6E4EC95D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB268_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB268_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB268_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB268_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB268_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB268_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB268_12
.LBB268_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB268_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB268_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB268_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB268_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB268_69
.LBB268_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB268_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB268_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB268_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB268_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB268_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB268_69
.LBB268_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB268_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB268_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB268_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB268_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB268_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB268_69
.LBB268_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB268_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB268_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB268_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB268_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB268_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB268_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB268_69
.LBB268_31:                             # %if.end46
                                        #   in Loop: Header=BB268_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB268_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB268_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB268_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB268_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB268_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB268_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB268_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB268_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB268_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB268_69
.LBB268_39:                             # %if.end69
                                        #   in Loop: Header=BB268_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB268_40:                             # %if.end76
                                        #   in Loop: Header=BB268_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB268_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB268_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB268_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB268_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB268_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB268_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB268_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB268_69
.LBB268_47:                             # %if.end94
                                        #   in Loop: Header=BB268_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB268_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB268_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB268_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB268_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB268_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB268_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB268_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB268_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB268_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB268_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB268_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB268_69
.LBB268_56:                             # %if.end122
                                        #   in Loop: Header=BB268_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB268_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB268_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB268_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB268_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB268_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB268_69
.LBB268_62:                             # %if.end137
                                        #   in Loop: Header=BB268_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB268_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB268_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB268_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB268_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB268_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB268_69
.LBB268_68:                             # %if.end152
                                        #   in Loop: Header=BB268_25 Depth=1
	jmp	.LBB268_25
.LBB268_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1850657117, -44(%rbp)  # imm = 0x6E4EC95D
	jne	.LBB268_71
.LBB268_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_70
.Lfunc_end268:
	.size	BZ2_bzRead.228, .Lfunc_end268-BZ2_bzRead.228
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.229    # -- Begin function BZ2_bzDecompress.229
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.229,@function
BZ2_bzDecompress.229:                   # @BZ2_bzDecompress.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$266168005, -44(%rbp)   # imm = 0xFDD66C5
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB269_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB269_37
.LBB269_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB269_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB269_37
.LBB269_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB269_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB269_37
.LBB269_6:                              # %if.end7
	jmp	.LBB269_7
.LBB269_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB269_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB269_37
.LBB269_9:                              # %if.end11
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB269_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB269_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB269_13
.LBB269_12:                             # %if.else
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB269_13:                             # %if.end17
                                        #   in Loop: Header=BB269_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB269_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB269_37
.LBB269_15:                             # %if.end20
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB269_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB269_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB269_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB269_19:                             # %if.end29
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB269_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB269_21:                             # %if.end34
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB269_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB269_37
.LBB269_23:                             # %if.end39
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB269_25
.LBB269_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB269_37
.LBB269_25:                             # %if.end46
                                        #   in Loop: Header=BB269_7 Depth=1
	jmp	.LBB269_26
.LBB269_26:                             # %if.end47
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB269_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB269_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB269_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB269_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB269_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB269_37
.LBB269_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB269_37
.LBB269_33:                             # %if.end65
                                        #   in Loop: Header=BB269_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB269_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB269_37
.LBB269_35:                             # %if.end69
                                        #   in Loop: Header=BB269_7 Depth=1
	jmp	.LBB269_36
.LBB269_36:                             # %if.end70
                                        #   in Loop: Header=BB269_7 Depth=1
	jmp	.LBB269_7
.LBB269_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$266168005, -44(%rbp)   # imm = 0xFDD66C5
	jne	.LBB269_39
.LBB269_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_38
.Lfunc_end269:
	.size	BZ2_bzDecompress.229, .Lfunc_end269-BZ2_bzDecompress.229
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.230          # -- Begin function BZ2_bzread.230
	.p2align	4, 0x90
	.type	BZ2_bzread.230,@function
BZ2_bzread.230:                         # @BZ2_bzread.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$147269987, -24(%rbp)   # imm = 0x8C72963
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -28(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB270_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB270_6
.LBB270_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-28(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -20(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB270_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB270_5
.LBB270_4:                              # %if.then3
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB270_6
.LBB270_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB270_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$147269987, -24(%rbp)   # imm = 0x8C72963
	jne	.LBB270_8
.LBB270_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_7
.Lfunc_end270:
	.size	BZ2_bzread.230, .Lfunc_end270-BZ2_bzread.230
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.231    # -- Begin function BZ2_bzDecompress.231
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.231,@function
BZ2_bzDecompress.231:                   # @BZ2_bzDecompress.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$549019339, -44(%rbp)   # imm = 0x20B95ECB
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB271_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB271_37
.LBB271_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB271_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB271_37
.LBB271_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB271_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB271_37
.LBB271_6:                              # %if.end7
	jmp	.LBB271_7
.LBB271_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB271_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB271_37
.LBB271_9:                              # %if.end11
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB271_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB271_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB271_13
.LBB271_12:                             # %if.else
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB271_13:                             # %if.end17
                                        #   in Loop: Header=BB271_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB271_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB271_37
.LBB271_15:                             # %if.end20
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB271_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB271_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB271_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB271_19:                             # %if.end29
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB271_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB271_21:                             # %if.end34
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB271_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB271_37
.LBB271_23:                             # %if.end39
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB271_25
.LBB271_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB271_37
.LBB271_25:                             # %if.end46
                                        #   in Loop: Header=BB271_7 Depth=1
	jmp	.LBB271_26
.LBB271_26:                             # %if.end47
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB271_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB271_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB271_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB271_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB271_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB271_37
.LBB271_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB271_37
.LBB271_33:                             # %if.end65
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB271_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB271_37
.LBB271_35:                             # %if.end69
                                        #   in Loop: Header=BB271_7 Depth=1
	jmp	.LBB271_36
.LBB271_36:                             # %if.end70
                                        #   in Loop: Header=BB271_7 Depth=1
	jmp	.LBB271_7
.LBB271_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$549019339, -44(%rbp)   # imm = 0x20B95ECB
	jne	.LBB271_39
.LBB271_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_38
.Lfunc_end271:
	.size	BZ2_bzDecompress.231, .Lfunc_end271-BZ2_bzDecompress.231
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.232 # -- Begin function BZ2_bzReadGetUnused.232
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.232,@function
BZ2_bzReadGetUnused.232:                # @BZ2_bzReadGetUnused.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$128074488, -20(%rbp)   # imm = 0x7A242F8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB272_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB272_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB272_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB272_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB272_5:                              # %if.end5
	jmp	.LBB272_24
.LBB272_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB272_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB272_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB272_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB272_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB272_11:                             # %if.end16
	jmp	.LBB272_24
.LBB272_12:                             # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB272_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB272_19
.LBB272_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB272_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB272_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB272_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB272_18:                             # %if.end27
	jmp	.LBB272_24
.LBB272_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB272_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB272_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB272_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB272_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB272_24:                             # %return
	cmpl	$128074488, -20(%rbp)   # imm = 0x7A242F8
	jne	.LBB272_26
.LBB272_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_25
.Lfunc_end272:
	.size	BZ2_bzReadGetUnused.232, .Lfunc_end272-BZ2_bzReadGetUnused.232
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.233    # -- Begin function BZ2_bzWriteClose.233
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.233,@function
BZ2_bzWriteClose.233:                   # @BZ2_bzWriteClose.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1421819136, -8(%rbp)   # imm = 0x54BF3D00
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%r8, -32(%rbp)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1421819136, -8(%rbp)   # imm = 0x54BF3D00
	jne	.LBB273_2
.LBB273_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_1
.Lfunc_end273:
	.size	BZ2_bzWriteClose.233, .Lfunc_end273-BZ2_bzWriteClose.233
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.234     # -- Begin function BZ2_bzWriteOpen.234
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.234,@function
BZ2_bzWriteOpen.234:                    # @BZ2_bzWriteOpen.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$539451698, -60(%rbp)   # imm = 0x20276132
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB274_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB274_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB274_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB274_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB274_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB274_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -36(%rbp)
	jg	.LBB274_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB274_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB274_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -32(%rbp)
	jl	.LBB274_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -32(%rbp)
	jle	.LBB274_16
.LBB274_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB274_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB274_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB274_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB274_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB274_41
.LBB274_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB274_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB274_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB274_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB274_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB274_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB274_41
.LBB274_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB274_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB274_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB274_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB274_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB274_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB274_41
.LBB274_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB274_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB274_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB274_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB274_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB274_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB274_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB274_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB274_37
# %bb.36:                               # %if.then62
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB274_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB274_39
# %bb.38:                               # %if.then65
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB274_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB274_41
.LBB274_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB274_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$539451698, -60(%rbp)   # imm = 0x20276132
	jne	.LBB274_43
.LBB274_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_42
.Lfunc_end274:
	.size	BZ2_bzWriteOpen.234, .Lfunc_end274-BZ2_bzWriteOpen.234
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.235  # -- Begin function BZ2_bzWriteClose64.235
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.235,@function
BZ2_bzWriteClose64.235:                 # @BZ2_bzWriteClose64.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$1741210840, -60(%rbp)  # imm = 0x67C8C4D8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB275_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB275_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB275_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB275_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB275_5:                              # %if.end5
	jmp	.LBB275_71
.LBB275_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB275_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB275_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB275_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB275_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB275_11:                             # %if.end14
	jmp	.LBB275_71
.LBB275_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB275_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB275_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB275_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB275_17:                             # %if.end24
	jmp	.LBB275_71
.LBB275_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB275_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB275_20:                             # %if.end28
	cmpq	$0, -48(%rbp)
	je	.LBB275_22
# %bb.21:                               # %if.then30
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB275_22:                             # %if.end31
	cmpq	$0, -40(%rbp)
	je	.LBB275_24
# %bb.23:                               # %if.then33
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB275_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB275_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB275_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB275_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB275_49
# %bb.28:                               # %if.then41
	jmp	.LBB275_29
.LBB275_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB275_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB275_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB275_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB275_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB275_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB275_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB275_35:                             # %if.end55
	jmp	.LBB275_71
.LBB275_36:                             # %if.end56
                                        #   in Loop: Header=BB275_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB275_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB275_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB275_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB275_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_44
.LBB275_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB275_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB275_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB275_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB275_43:                             # %if.end82
	jmp	.LBB275_71
.LBB275_44:                             # %if.end83
                                        #   in Loop: Header=BB275_29 Depth=1
	jmp	.LBB275_45
.LBB275_45:                             # %if.end84
                                        #   in Loop: Header=BB275_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB275_47
# %bb.46:                               # %if.then87
	jmp	.LBB275_48
.LBB275_47:                             # %if.end88
                                        #   in Loop: Header=BB275_29 Depth=1
	jmp	.LBB275_29
.LBB275_48:                             # %while.end
	jmp	.LBB275_49
.LBB275_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB275_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB275_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB275_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB275_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB275_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB275_56:                             # %if.end110
	jmp	.LBB275_71
.LBB275_57:                             # %if.end111
	jmp	.LBB275_58
.LBB275_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB275_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB275_60:                             # %if.end117
	cmpq	$0, -48(%rbp)
	je	.LBB275_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB275_62:                             # %if.end122
	cmpq	$0, -40(%rbp)
	je	.LBB275_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB275_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB275_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB275_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB275_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB275_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB275_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB275_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB275_71:                             # %return
	cmpl	$1741210840, -60(%rbp)  # imm = 0x67C8C4D8
	jne	.LBB275_73
.LBB275_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_72
.Lfunc_end275:
	.size	BZ2_bzWriteClose64.235, .Lfunc_end275-BZ2_bzWriteClose64.235
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.236  # -- Begin function BZ2_bzWriteClose64.236
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.236,@function
BZ2_bzWriteClose64.236:                 # @BZ2_bzWriteClose64.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$811429571, -64(%rbp)   # imm = 0x305D6EC3
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB276_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB276_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB276_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB276_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB276_5:                              # %if.end5
	jmp	.LBB276_71
.LBB276_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB276_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB276_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB276_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB276_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB276_11:                             # %if.end14
	jmp	.LBB276_71
.LBB276_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB276_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB276_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB276_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB276_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB276_17:                             # %if.end24
	jmp	.LBB276_71
.LBB276_18:                             # %if.end25
	cmpq	$0, -48(%rbp)
	je	.LBB276_20
# %bb.19:                               # %if.then27
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB276_20:                             # %if.end28
	cmpq	$0, -56(%rbp)
	je	.LBB276_22
# %bb.21:                               # %if.then30
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB276_22:                             # %if.end31
	cmpq	$0, -40(%rbp)
	je	.LBB276_24
# %bb.23:                               # %if.then33
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB276_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB276_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB276_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB276_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB276_49
# %bb.28:                               # %if.then41
	jmp	.LBB276_29
.LBB276_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB276_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB276_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB276_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB276_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB276_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB276_35:                             # %if.end55
	jmp	.LBB276_71
.LBB276_36:                             # %if.end56
                                        #   in Loop: Header=BB276_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB276_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB276_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB276_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB276_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB276_44
.LBB276_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB276_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB276_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB276_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB276_43:                             # %if.end82
	jmp	.LBB276_71
.LBB276_44:                             # %if.end83
                                        #   in Loop: Header=BB276_29 Depth=1
	jmp	.LBB276_45
.LBB276_45:                             # %if.end84
                                        #   in Loop: Header=BB276_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB276_47
# %bb.46:                               # %if.then87
	jmp	.LBB276_48
.LBB276_47:                             # %if.end88
                                        #   in Loop: Header=BB276_29 Depth=1
	jmp	.LBB276_29
.LBB276_48:                             # %while.end
	jmp	.LBB276_49
.LBB276_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB276_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB276_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB276_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB276_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB276_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB276_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB276_56:                             # %if.end110
	jmp	.LBB276_71
.LBB276_57:                             # %if.end111
	jmp	.LBB276_58
.LBB276_58:                             # %if.end112
	cmpq	$0, -48(%rbp)
	je	.LBB276_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_60:                             # %if.end117
	cmpq	$0, -56(%rbp)
	je	.LBB276_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_62:                             # %if.end122
	cmpq	$0, -40(%rbp)
	je	.LBB276_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB276_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB276_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB276_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB276_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB276_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB276_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB276_71:                             # %return
	cmpl	$811429571, -64(%rbp)   # imm = 0x305D6EC3
	jne	.LBB276_73
.LBB276_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_72
.Lfunc_end276:
	.size	BZ2_bzWriteClose64.236, .Lfunc_end276-BZ2_bzWriteClose64.236
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.237         # -- Begin function BZ2_bzwrite.237
	.p2align	4, 0x90
	.type	BZ2_bzwrite.237,@function
BZ2_bzwrite.237:                        # @BZ2_bzwrite.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$735936817, -24(%rbp)   # imm = 0x2BDD8131
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB277_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB277_3
.LBB277_2:                              # %if.else
	movl	$-1, -16(%rbp)
.LBB277_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$735936817, -24(%rbp)   # imm = 0x2BDD8131
	jne	.LBB277_5
.LBB277_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_4
.Lfunc_end277:
	.size	BZ2_bzwrite.237, .Lfunc_end277-BZ2_bzwrite.237
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.238         # -- Begin function BZ2_bzwrite.238
	.p2align	4, 0x90
	.type	BZ2_bzwrite.238,@function
BZ2_bzwrite.238:                        # @BZ2_bzwrite.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$499866895, -20(%rbp)   # imm = 0x1DCB5D0F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movl	-16(%rbp), %ecx
	leaq	-24(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -24(%rbp)
	jne	.LBB278_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_3
.LBB278_2:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB278_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$499866895, -20(%rbp)   # imm = 0x1DCB5D0F
	jne	.LBB278_5
.LBB278_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_4
.Lfunc_end278:
	.size	BZ2_bzwrite.238, .Lfunc_end278-BZ2_bzwrite.238
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block.239
	.type	add_pair_to_block.239,@function
add_pair_to_block.239:                  # @add_pair_to_block.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$71287142, -24(%rbp)    # imm = 0x43FC166
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -1(%rbp)
	movl	$0, -20(%rbp)
.LBB279_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	96(%rcx), %eax
	jge	.LBB279_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-1(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB279_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB279_1
.LBB279_4:                              # %for.end
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movb	$1, 128(%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB279_7
	jmp	.LBB279_5
.LBB279_5:                              # %for.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB279_8
	jmp	.LBB279_6
.LBB279_6:                              # %for.end
	subl	$3, %eax
	je	.LBB279_9
	jmp	.LBB279_10
.LBB279_7:                              # %sw.bb
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB279_11
.LBB279_8:                              # %sw.bb14
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB279_11
.LBB279_9:                              # %sw.bb27
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB279_11
.LBB279_10:                             # %sw.default
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	96(%rcx), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	$1, 128(%rax,%rcx)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	subl	$4, %eax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
.LBB279_11:                             # %sw.epilog
	cmpl	$71287142, -24(%rbp)    # imm = 0x43FC166
	jne	.LBB279_13
.LBB279_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_12
.Lfunc_end279:
	.size	add_pair_to_block.239, .Lfunc_end279-add_pair_to_block.239
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.240         # -- Begin function BZ2_bzWrite.240
	.p2align	4, 0x90
	.type	BZ2_bzWrite.240,@function
BZ2_bzWrite.240:                        # @BZ2_bzWrite.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$431192791, -36(%rbp)   # imm = 0x19B37AD7
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB280_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB280_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB280_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB280_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB280_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB280_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -24(%rbp)
	jge	.LBB280_12
.LBB280_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB280_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB280_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB280_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB280_11:                             # %if.end15
	jmp	.LBB280_53
.LBB280_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB280_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB280_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB280_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB280_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB280_17:                             # %if.end24
	jmp	.LBB280_53
.LBB280_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB280_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB280_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB280_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB280_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB280_23:                             # %if.end34
	jmp	.LBB280_53
.LBB280_24:                             # %if.end35
	cmpl	$0, -24(%rbp)
	jne	.LBB280_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB280_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB280_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB280_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB280_29:                             # %if.end44
	jmp	.LBB280_53
.LBB280_30:                             # %if.end45
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB280_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$1, -20(%rbp)
	je	.LBB280_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB280_34
# %bb.33:                               # %if.then55
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB280_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB280_36
# %bb.35:                               # %if.then58
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB280_36:                             # %if.end60
	jmp	.LBB280_53
.LBB280_37:                             # %if.end61
                                        #   in Loop: Header=BB280_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB280_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB280_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB280_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB280_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB280_45
.LBB280_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB280_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB280_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB280_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB280_44:                             # %if.end88
	jmp	.LBB280_53
.LBB280_45:                             # %if.end89
                                        #   in Loop: Header=BB280_31 Depth=1
	jmp	.LBB280_46
.LBB280_46:                             # %if.end90
                                        #   in Loop: Header=BB280_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB280_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB280_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB280_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB280_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB280_51:                             # %if.end104
	jmp	.LBB280_53
.LBB280_52:                             # %if.end105
                                        #   in Loop: Header=BB280_31 Depth=1
	jmp	.LBB280_31
.LBB280_53:                             # %return
	cmpl	$431192791, -36(%rbp)   # imm = 0x19B37AD7
	jne	.LBB280_55
.LBB280_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_54
.Lfunc_end280:
	.size	BZ2_bzWrite.240, .Lfunc_end280-BZ2_bzWrite.240
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.241
	.type	default_bzalloc.241,@function
default_bzalloc.241:                    # @default_bzalloc.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1167536518, -20(%rbp)  # imm = 0x45973186
	movq	%rdi, -40(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	-16(%rbp), %eax
	imull	-12(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1167536518, -20(%rbp)  # imm = 0x45973186
	jne	.LBB281_2
.LBB281_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_1
.Lfunc_end281:
	.size	default_bzalloc.241, .Lfunc_end281-default_bzalloc.241
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.242      # -- Begin function BZ2_indexIntoF.242
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.242,@function
BZ2_indexIntoF.242:                     # @BZ2_indexIntoF.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$200867261, -28(%rbp)   # imm = 0xBF8FDBD
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB282_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB282_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB282_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB282_4
.LBB282_3:                              # %if.else
                                        #   in Loop: Header=BB282_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB282_4:                              # %if.end
                                        #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_5
.LBB282_5:                              # %do.cond
                                        #   in Loop: Header=BB282_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB282_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$200867261, -28(%rbp)   # imm = 0xBF8FDBD
	jne	.LBB282_8
.LBB282_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_7
.Lfunc_end282:
	.size	BZ2_indexIntoF.242, .Lfunc_end282-BZ2_indexIntoF.242
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.243 # -- Begin function BZ2_bzDecompressInit.243
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.243,@function
BZ2_bzDecompressInit.243:               # @BZ2_bzDecompressInit.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1240204167, -40(%rbp)  # imm = 0x49EC0387
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB283_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB283_17
.LBB283_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB283_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB283_17
.LBB283_4:                              # %if.end2
	cmpl	$0, -32(%rbp)
	je	.LBB283_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -32(%rbp)
	je	.LBB283_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB283_17
.LBB283_7:                              # %if.end6
	cmpl	$0, -36(%rbp)
	jl	.LBB283_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -36(%rbp)
	jle	.LBB283_10
.LBB283_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB283_17
.LBB283_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB283_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB283_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB283_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB283_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB283_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB283_17
.LBB283_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB283_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1240204167, -40(%rbp)  # imm = 0x49EC0387
	jne	.LBB283_19
.LBB283_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_18
.Lfunc_end283:
	.size	BZ2_bzDecompressInit.243, .Lfunc_end283-BZ2_bzDecompressInit.243
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.244
	.type	copy_input_until_stop.244,@function
copy_input_until_stop.244:              # @copy_input_until_stop.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$467393736, -32(%rbp)   # imm = 0x1BDBDCC8
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB284_20
# %bb.1:                                # %if.then
	jmp	.LBB284_2
.LBB284_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB284_4
# %bb.3:                                # %if.then2
	jmp	.LBB284_19
.LBB284_4:                              # %if.end
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB284_6
# %bb.5:                                # %if.then4
	jmp	.LBB284_19
.LBB284_6:                              # %if.end5
                                        #   in Loop: Header=BB284_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB284_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB284_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB284_16
.LBB284_9:                              # %if.else
                                        #   in Loop: Header=BB284_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB284_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB284_14
.LBB284_11:                             # %if.then32
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB284_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB284_13:                             # %if.end37
                                        #   in Loop: Header=BB284_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB284_15
.LBB284_14:                             # %if.else40
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB284_15:                             # %if.end43
                                        #   in Loop: Header=BB284_2 Depth=1
	jmp	.LBB284_16
.LBB284_16:                             # %if.end44
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB284_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB284_18:                             # %if.end58
                                        #   in Loop: Header=BB284_2 Depth=1
	jmp	.LBB284_2
.LBB284_19:                             # %while.end
	jmp	.LBB284_41
.LBB284_20:                             # %if.else59
	jmp	.LBB284_21
.LBB284_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB284_23
# %bb.22:                               # %if.then65
	jmp	.LBB284_40
.LBB284_23:                             # %if.end66
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB284_25
# %bb.24:                               # %if.then71
	jmp	.LBB284_40
.LBB284_25:                             # %if.end72
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB284_27
# %bb.26:                               # %if.then75
	jmp	.LBB284_40
.LBB284_27:                             # %if.end76
                                        #   in Loop: Header=BB284_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB284_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB284_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB284_37
.LBB284_30:                             # %if.else113
                                        #   in Loop: Header=BB284_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB284_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB284_35
.LBB284_32:                             # %if.then121
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB284_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB284_34:                             # %if.end126
                                        #   in Loop: Header=BB284_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB284_36
.LBB284_35:                             # %if.else129
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB284_36:                             # %if.end132
                                        #   in Loop: Header=BB284_21 Depth=1
	jmp	.LBB284_37
.LBB284_37:                             # %if.end133
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB284_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB284_39:                             # %if.end151
                                        #   in Loop: Header=BB284_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB284_21
.LBB284_40:                             # %while.end154
	jmp	.LBB284_41
.LBB284_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$467393736, -32(%rbp)   # imm = 0x1BDBDCC8
	jne	.LBB284_43
.LBB284_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_42
.Lfunc_end284:
	.size	copy_input_until_stop.244, .Lfunc_end284-copy_input_until_stop.244
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.245          # -- Begin function BZ2_bzread.245
	.p2align	4, 0x90
	.type	BZ2_bzread.245,@function
BZ2_bzread.245:                         # @BZ2_bzread.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$191601428, -24(%rbp)   # imm = 0xB6B9B14
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB285_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB285_6
.LBB285_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -28(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB285_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB285_5
.LBB285_4:                              # %if.then3
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB285_6
.LBB285_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB285_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$191601428, -24(%rbp)   # imm = 0xB6B9B14
	jne	.LBB285_8
.LBB285_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_7
.Lfunc_end285:
	.size	BZ2_bzread.245, .Lfunc_end285-BZ2_bzread.245
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.246         # -- Begin function BZ2_bzwrite.246
	.p2align	4, 0x90
	.type	BZ2_bzwrite.246,@function
BZ2_bzwrite.246:                        # @BZ2_bzwrite.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1357634033, -24(%rbp)  # imm = 0x50EBD9F1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movl	-12(%rbp), %ecx
	leaq	-20(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -20(%rbp)
	jne	.LBB286_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB286_3
.LBB286_2:                              # %if.else
	movl	$-1, -16(%rbp)
.LBB286_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1357634033, -24(%rbp)  # imm = 0x50EBD9F1
	jne	.LBB286_5
.LBB286_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_4
.Lfunc_end286:
	.size	BZ2_bzwrite.246, .Lfunc_end286-BZ2_bzwrite.246
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.247          # -- Begin function BZ2_bzRead.247
	.p2align	4, 0x90
	.type	BZ2_bzRead.247,@function
BZ2_bzRead.247:                         # @BZ2_bzRead.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$171660429, -40(%rbp)   # imm = 0xA3B548D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB287_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB287_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB287_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB287_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB287_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB287_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB287_12
.LBB287_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB287_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB287_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB287_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB287_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB287_69
.LBB287_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB287_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB287_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB287_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB287_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB287_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB287_69
.LBB287_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB287_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB287_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB287_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB287_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB287_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB287_69
.LBB287_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB287_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB287_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB287_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB287_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB287_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB287_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB287_69
.LBB287_31:                             # %if.end46
                                        #   in Loop: Header=BB287_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB287_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB287_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB287_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB287_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB287_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB287_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB287_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB287_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB287_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB287_69
.LBB287_39:                             # %if.end69
                                        #   in Loop: Header=BB287_25 Depth=1
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB287_40:                             # %if.end76
                                        #   in Loop: Header=BB287_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB287_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB287_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB287_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB287_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB287_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB287_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB287_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB287_69
.LBB287_47:                             # %if.end94
                                        #   in Loop: Header=BB287_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB287_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB287_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB287_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB287_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB287_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB287_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB287_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB287_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB287_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB287_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB287_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB287_69
.LBB287_56:                             # %if.end122
                                        #   in Loop: Header=BB287_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB287_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB287_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB287_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB287_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB287_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB287_69
.LBB287_62:                             # %if.end137
                                        #   in Loop: Header=BB287_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB287_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB287_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB287_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB287_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB287_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB287_69
.LBB287_68:                             # %if.end152
                                        #   in Loop: Header=BB287_25 Depth=1
	jmp	.LBB287_25
.LBB287_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$171660429, -40(%rbp)   # imm = 0xA3B548D
	jne	.LBB287_71
.LBB287_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_70
.Lfunc_end287:
	.size	BZ2_bzRead.247, .Lfunc_end287-BZ2_bzRead.247
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.248          # -- Begin function BZ2_bzread.248
	.p2align	4, 0x90
	.type	BZ2_bzread.248,@function
BZ2_bzread.248:                         # @BZ2_bzread.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$868438195, -24(%rbp)   # imm = 0x33C350B3
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB288_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB288_6
.LBB288_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -28(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB288_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB288_5
.LBB288_4:                              # %if.then3
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB288_6
.LBB288_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB288_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$868438195, -24(%rbp)   # imm = 0x33C350B3
	jne	.LBB288_8
.LBB288_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_7
.Lfunc_end288:
	.size	BZ2_bzread.248, .Lfunc_end288-BZ2_bzread.248
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.249          # -- Begin function BZ2_bzRead.249
	.p2align	4, 0x90
	.type	BZ2_bzRead.249,@function
BZ2_bzRead.249:                         # @BZ2_bzRead.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1213677072, -44(%rbp)  # imm = 0x48573E10
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB289_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB289_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB289_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB289_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB289_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB289_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB289_12
.LBB289_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB289_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB289_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB289_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB289_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB289_69
.LBB289_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB289_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB289_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB289_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB289_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB289_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB289_69
.LBB289_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB289_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB289_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB289_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB289_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB289_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB289_69
.LBB289_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB289_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB289_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB289_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB289_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB289_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB289_69
.LBB289_31:                             # %if.end46
                                        #   in Loop: Header=BB289_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB289_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB289_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB289_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB289_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB289_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB289_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB289_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB289_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB289_69
.LBB289_39:                             # %if.end69
                                        #   in Loop: Header=BB289_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB289_40:                             # %if.end76
                                        #   in Loop: Header=BB289_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB289_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB289_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB289_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB289_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB289_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB289_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB289_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB289_69
.LBB289_47:                             # %if.end94
                                        #   in Loop: Header=BB289_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB289_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB289_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB289_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB289_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB289_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB289_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB289_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB289_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB289_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB289_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB289_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB289_69
.LBB289_56:                             # %if.end122
                                        #   in Loop: Header=BB289_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB289_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB289_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB289_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB289_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB289_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB289_69
.LBB289_62:                             # %if.end137
                                        #   in Loop: Header=BB289_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB289_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB289_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB289_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB289_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB289_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB289_69
.LBB289_68:                             # %if.end152
                                        #   in Loop: Header=BB289_25 Depth=1
	jmp	.LBB289_25
.LBB289_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1213677072, -44(%rbp)  # imm = 0x48573E10
	jne	.LBB289_71
.LBB289_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_70
.Lfunc_end289:
	.size	BZ2_bzRead.249, .Lfunc_end289-BZ2_bzRead.249
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.250      # -- Begin function BZ2_bzCompress.250
	.p2align	4, 0x90
	.type	BZ2_bzCompress.250,@function
BZ2_bzCompress.250:                     # @BZ2_bzCompress.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$177673547, -44(%rbp)   # imm = 0xA97154B
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB290_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB290_39
.LBB290_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB290_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB290_39
.LBB290_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB290_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB290_39
.LBB290_6:                              # %if.end7
	jmp	.LBB290_7
.LBB290_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB290_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB290_7 Depth=1
	movq	.LJTI290_0(,%rax,8), %rax
	jmpq	*%rax
.LBB290_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB290_39
.LBB290_10:                             # %sw.bb8
                                        #   in Loop: Header=BB290_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB290_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB290_39
.LBB290_12:                             # %if.else
                                        #   in Loop: Header=BB290_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB290_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB290_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB290_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB290_7 Depth=1
	jmp	.LBB290_7
.LBB290_15:                             # %if.else15
                                        #   in Loop: Header=BB290_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB290_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB290_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB290_14
.LBB290_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB290_39
.LBB290_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB290_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB290_39
.LBB290_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB290_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB290_39
.LBB290_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB290_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB290_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB290_26
.LBB290_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB290_39
.LBB290_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB290_39
.LBB290_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB290_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB290_39
.LBB290_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB290_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB290_39
.LBB290_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB290_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB290_39
.LBB290_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB290_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB290_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB290_37
.LBB290_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB290_39
.LBB290_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB290_39
.LBB290_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB290_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$177673547, -44(%rbp)   # imm = 0xA97154B
	jne	.LBB290_41
.LBB290_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_40
.Lfunc_end290:
	.size	BZ2_bzCompress.250, .Lfunc_end290-BZ2_bzCompress.250
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI290_0:
	.quad	.LBB290_9
	.quad	.LBB290_10
	.quad	.LBB290_18
	.quad	.LBB290_27
                                        # -- End function
	.text
	.globl	BZ2_bzWriteClose.251    # -- Begin function BZ2_bzWriteClose.251
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.251,@function
BZ2_bzWriteClose.251:                   # @BZ2_bzWriteClose.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2044070116, -8(%rbp)   # imm = 0x79D608E4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%r8, -16(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$2044070116, -8(%rbp)   # imm = 0x79D608E4
	jne	.LBB291_2
.LBB291_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_1
.Lfunc_end291:
	.size	BZ2_bzWriteClose.251, .Lfunc_end291-BZ2_bzWriteClose.251
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.252
	.type	default_bzalloc.252,@function
default_bzalloc.252:                    # @default_bzalloc.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1388806970, -16(%rbp)  # imm = 0x52C7833A
	movq	%rdi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -12(%rbp)
	movl	-20(%rbp), %eax
	imull	-12(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1388806970, -16(%rbp)  # imm = 0x52C7833A
	jne	.LBB292_2
.LBB292_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_1
.Lfunc_end292:
	.size	default_bzalloc.252, .Lfunc_end292-default_bzalloc.252
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.253         # -- Begin function BZ2_bzWrite.253
	.p2align	4, 0x90
	.type	BZ2_bzWrite.253,@function
BZ2_bzWrite.253:                        # @BZ2_bzWrite.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$828937903, -36(%rbp)   # imm = 0x316896AF
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB293_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB293_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB293_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB293_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB293_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB293_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -24(%rbp)
	jge	.LBB293_12
.LBB293_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB293_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB293_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB293_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB293_11:                             # %if.end15
	jmp	.LBB293_53
.LBB293_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB293_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB293_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB293_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB293_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB293_17:                             # %if.end24
	jmp	.LBB293_53
.LBB293_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB293_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB293_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB293_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB293_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB293_23:                             # %if.end34
	jmp	.LBB293_53
.LBB293_24:                             # %if.end35
	cmpl	$0, -24(%rbp)
	jne	.LBB293_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB293_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB293_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB293_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB293_29:                             # %if.end44
	jmp	.LBB293_53
.LBB293_30:                             # %if.end45
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB293_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$1, -20(%rbp)
	je	.LBB293_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB293_34
# %bb.33:                               # %if.then55
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB293_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB293_36
# %bb.35:                               # %if.then58
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB293_36:                             # %if.end60
	jmp	.LBB293_53
.LBB293_37:                             # %if.end61
                                        #   in Loop: Header=BB293_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB293_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB293_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB293_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB293_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB293_45
.LBB293_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB293_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB293_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB293_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB293_44:                             # %if.end88
	jmp	.LBB293_53
.LBB293_45:                             # %if.end89
                                        #   in Loop: Header=BB293_31 Depth=1
	jmp	.LBB293_46
.LBB293_46:                             # %if.end90
                                        #   in Loop: Header=BB293_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB293_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB293_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB293_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB293_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB293_51:                             # %if.end104
	jmp	.LBB293_53
.LBB293_52:                             # %if.end105
                                        #   in Loop: Header=BB293_31 Depth=1
	jmp	.LBB293_31
.LBB293_53:                             # %return
	cmpl	$828937903, -36(%rbp)   # imm = 0x316896AF
	jne	.LBB293_55
.LBB293_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_54
.Lfunc_end293:
	.size	BZ2_bzWrite.253, .Lfunc_end293-BZ2_bzWrite.253
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.254    # -- Begin function BZ2_bzDecompress.254
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.254,@function
BZ2_bzDecompress.254:                   # @BZ2_bzDecompress.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$737490677, -44(%rbp)   # imm = 0x2BF536F5
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB294_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB294_37
.LBB294_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB294_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB294_37
.LBB294_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB294_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB294_37
.LBB294_6:                              # %if.end7
	jmp	.LBB294_7
.LBB294_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB294_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB294_37
.LBB294_9:                              # %if.end11
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB294_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB294_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB294_13
.LBB294_12:                             # %if.else
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB294_13:                             # %if.end17
                                        #   in Loop: Header=BB294_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB294_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB294_37
.LBB294_15:                             # %if.end20
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB294_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB294_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB294_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB294_19:                             # %if.end29
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB294_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB294_21:                             # %if.end34
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB294_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB294_37
.LBB294_23:                             # %if.end39
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB294_25
.LBB294_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB294_37
.LBB294_25:                             # %if.end46
                                        #   in Loop: Header=BB294_7 Depth=1
	jmp	.LBB294_26
.LBB294_26:                             # %if.end47
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB294_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB294_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB294_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB294_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB294_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB294_37
.LBB294_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB294_37
.LBB294_33:                             # %if.end65
                                        #   in Loop: Header=BB294_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB294_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB294_37
.LBB294_35:                             # %if.end69
                                        #   in Loop: Header=BB294_7 Depth=1
	jmp	.LBB294_36
.LBB294_36:                             # %if.end70
                                        #   in Loop: Header=BB294_7 Depth=1
	jmp	.LBB294_7
.LBB294_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$737490677, -44(%rbp)   # imm = 0x2BF536F5
	jne	.LBB294_39
.LBB294_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_38
.Lfunc_end294:
	.size	BZ2_bzDecompress.254, .Lfunc_end294-BZ2_bzDecompress.254
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.255  # -- Begin function BZ2_bzWriteClose64.255
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.255,@function
BZ2_bzWriteClose64.255:                 # @BZ2_bzWriteClose64.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$1393970059, -64(%rbp)  # imm = 0x53164B8B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB295_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB295_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB295_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB295_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB295_5:                              # %if.end5
	jmp	.LBB295_71
.LBB295_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB295_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB295_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB295_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB295_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB295_11:                             # %if.end14
	jmp	.LBB295_71
.LBB295_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB295_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB295_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB295_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB295_17:                             # %if.end24
	jmp	.LBB295_71
.LBB295_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB295_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB295_20:                             # %if.end28
	cmpq	$0, -48(%rbp)
	je	.LBB295_22
# %bb.21:                               # %if.then30
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB295_22:                             # %if.end31
	cmpq	$0, -40(%rbp)
	je	.LBB295_24
# %bb.23:                               # %if.then33
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB295_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB295_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB295_26:                             # %if.end37
	cmpl	$0, -24(%rbp)
	jne	.LBB295_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB295_49
# %bb.28:                               # %if.then41
	jmp	.LBB295_29
.LBB295_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB295_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB295_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB295_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB295_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB295_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB295_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB295_35:                             # %if.end55
	jmp	.LBB295_71
.LBB295_36:                             # %if.end56
                                        #   in Loop: Header=BB295_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB295_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB295_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB295_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB295_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_44
.LBB295_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB295_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB295_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB295_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB295_43:                             # %if.end82
	jmp	.LBB295_71
.LBB295_44:                             # %if.end83
                                        #   in Loop: Header=BB295_29 Depth=1
	jmp	.LBB295_45
.LBB295_45:                             # %if.end84
                                        #   in Loop: Header=BB295_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB295_47
# %bb.46:                               # %if.then87
	jmp	.LBB295_48
.LBB295_47:                             # %if.end88
                                        #   in Loop: Header=BB295_29 Depth=1
	jmp	.LBB295_29
.LBB295_48:                             # %while.end
	jmp	.LBB295_49
.LBB295_49:                             # %if.end89
	cmpl	$0, -24(%rbp)
	jne	.LBB295_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB295_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB295_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB295_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB295_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB295_56:                             # %if.end110
	jmp	.LBB295_71
.LBB295_57:                             # %if.end111
	jmp	.LBB295_58
.LBB295_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB295_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB295_60:                             # %if.end117
	cmpq	$0, -48(%rbp)
	je	.LBB295_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB295_62:                             # %if.end122
	cmpq	$0, -40(%rbp)
	je	.LBB295_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB295_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB295_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB295_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB295_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB295_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB295_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB295_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB295_71:                             # %return
	cmpl	$1393970059, -64(%rbp)  # imm = 0x53164B8B
	jne	.LBB295_73
.LBB295_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_72
.Lfunc_end295:
	.size	BZ2_bzWriteClose64.255, .Lfunc_end295-BZ2_bzWriteClose64.255
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.256 # -- Begin function BZ2_bzBuffToBuffCompress.256
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.256,@function
BZ2_bzBuffToBuffCompress.256:           # @BZ2_bzBuffToBuffCompress.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$403715972, -36(%rbp)   # imm = 0x18103784
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB296_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB296_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB296_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB296_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB296_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB296_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB296_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB296_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB296_10
.LBB296_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB296_21
.LBB296_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB296_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB296_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB296_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB296_21
.LBB296_14:                             # %if.end21
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB296_16
# %bb.15:                               # %if.then24
	jmp	.LBB296_19
.LBB296_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB296_18
# %bb.17:                               # %if.then27
	jmp	.LBB296_20
.LBB296_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB296_21
.LBB296_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB296_21
.LBB296_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB296_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$403715972, -36(%rbp)   # imm = 0x18103784
	jne	.LBB296_23
.LBB296_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_22
.Lfunc_end296:
	.size	BZ2_bzBuffToBuffCompress.256, .Lfunc_end296-BZ2_bzBuffToBuffCompress.256
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.257
	.type	bzopen_or_bzdopen.257,@function
bzopen_or_bzdopen.257:                  # @bzopen_or_bzdopen.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$885486548, -88(%rbp)   # imm = 0x34C773D4
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -36(%rbp)
	movl	$30, -84(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -76(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB297_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB297_39
.LBB297_2:                              # %if.end
	jmp	.LBB297_3
.LBB297_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB297_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB297_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB297_7
	jmp	.LBB297_5
.LBB297_5:                              # %while.body
                                        #   in Loop: Header=BB297_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB297_9
	jmp	.LBB297_6
.LBB297_6:                              # %while.body
                                        #   in Loop: Header=BB297_3 Depth=1
	subl	$119, %eax
	je	.LBB297_8
	jmp	.LBB297_10
.LBB297_7:                              # %sw.bb
                                        #   in Loop: Header=BB297_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB297_13
.LBB297_8:                              # %sw.bb1
                                        #   in Loop: Header=BB297_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB297_13
.LBB297_9:                              # %sw.bb2
                                        #   in Loop: Header=BB297_3 Depth=1
	movl	$1, -40(%rbp)
	jmp	.LBB297_13
.LBB297_10:                             # %sw.default
                                        #   in Loop: Header=BB297_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB297_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB297_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB297_12:                             # %if.end8
                                        #   in Loop: Header=BB297_3 Depth=1
	jmp	.LBB297_13
.LBB297_13:                             # %sw.epilog
                                        #   in Loop: Header=BB297_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB297_3
.LBB297_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -68(%rbp)
	jne	.LBB297_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB297_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB297_21
.LBB297_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB297_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB297_20
.LBB297_19:                             # %cond.false
	movq	stdin, %rax
.LBB297_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB297_22
.LBB297_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB297_22:                             # %if.end26
	jmp	.LBB297_24
.LBB297_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-72(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB297_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB297_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB297_39
.LBB297_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB297_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB297_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB297_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB297_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB297_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-84(%rbp), %r8d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB297_33
.LBB297_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-76(%rbp), %r9d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB297_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB297_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB297_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB297_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB297_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB297_39
.LBB297_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB297_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$885486548, -88(%rbp)   # imm = 0x34C773D4
	jne	.LBB297_41
.LBB297_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_40
.Lfunc_end297:
	.size	bzopen_or_bzdopen.257, .Lfunc_end297-bzopen_or_bzdopen.257
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.258 # -- Begin function BZ2_bzReadGetUnused.258
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.258,@function
BZ2_bzReadGetUnused.258:                # @BZ2_bzReadGetUnused.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1336133316, -20(%rbp)  # imm = 0x4FA3C6C4
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB298_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB298_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB298_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB298_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB298_5:                              # %if.end5
	jmp	.LBB298_24
.LBB298_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB298_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB298_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB298_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB298_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB298_11:                             # %if.end16
	jmp	.LBB298_24
.LBB298_12:                             # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB298_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB298_19
.LBB298_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB298_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB298_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB298_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB298_18:                             # %if.end27
	jmp	.LBB298_24
.LBB298_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB298_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB298_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB298_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB298_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB298_24:                             # %return
	cmpl	$1336133316, -20(%rbp)  # imm = 0x4FA3C6C4
	jne	.LBB298_26
.LBB298_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_25
.Lfunc_end298:
	.size	BZ2_bzReadGetUnused.258, .Lfunc_end298-BZ2_bzReadGetUnused.258
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.259 # -- Begin function BZ2_bzBuffToBuffDecompress.259
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.259,@function
BZ2_bzBuffToBuffDecompress.259:         # @BZ2_bzBuffToBuffDecompress.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1060432991, -36(%rbp)  # imm = 0x3F34EC5F
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB299_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB299_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB299_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB299_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB299_7
.LBB299_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB299_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB299_8
.LBB299_7:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB299_19
.LBB299_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB299_10
# %bb.9:                                # %if.then12
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB299_19
.LBB299_10:                             # %if.end13
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB299_12
# %bb.11:                               # %if.then16
	jmp	.LBB299_15
.LBB299_12:                             # %if.end17
	cmpl	$4, -12(%rbp)
	je	.LBB299_14
# %bb.13:                               # %if.then19
	jmp	.LBB299_18
.LBB299_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB299_19
.LBB299_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB299_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -16(%rbp)
	jmp	.LBB299_19
.LBB299_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB299_19
.LBB299_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB299_19:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1060432991, -36(%rbp)  # imm = 0x3F34EC5F
	jne	.LBB299_21
.LBB299_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_20
.Lfunc_end299:
	.size	BZ2_bzBuffToBuffDecompress.259, .Lfunc_end299-BZ2_bzBuffToBuffDecompress.259
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.260    # -- Begin function BZ2_bzWriteClose.260
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.260,@function
BZ2_bzWriteClose.260:                   # @BZ2_bzWriteClose.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1571181862, -8(%rbp)   # imm = 0x5DA65526
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -16(%rbp)
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1571181862, -8(%rbp)   # imm = 0x5DA65526
	jne	.LBB300_2
.LBB300_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_1
.Lfunc_end300:
	.size	BZ2_bzWriteClose.260, .Lfunc_end300-BZ2_bzWriteClose.260
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.261          # -- Begin function BZ2_bzRead.261
	.p2align	4, 0x90
	.type	BZ2_bzRead.261,@function
BZ2_bzRead.261:                         # @BZ2_bzRead.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1235516385, -44(%rbp)  # imm = 0x49A47BE1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB301_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB301_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB301_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB301_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB301_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB301_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB301_12
.LBB301_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB301_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB301_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB301_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB301_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB301_69
.LBB301_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB301_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB301_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB301_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB301_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB301_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB301_69
.LBB301_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB301_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB301_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB301_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB301_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB301_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB301_69
.LBB301_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB301_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB301_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB301_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB301_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB301_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB301_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB301_69
.LBB301_31:                             # %if.end46
                                        #   in Loop: Header=BB301_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB301_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB301_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB301_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB301_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB301_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB301_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB301_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB301_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB301_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB301_69
.LBB301_39:                             # %if.end69
                                        #   in Loop: Header=BB301_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB301_40:                             # %if.end76
                                        #   in Loop: Header=BB301_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB301_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB301_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB301_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB301_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB301_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB301_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB301_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB301_69
.LBB301_47:                             # %if.end94
                                        #   in Loop: Header=BB301_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB301_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB301_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB301_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB301_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB301_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB301_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB301_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB301_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB301_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB301_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB301_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB301_69
.LBB301_56:                             # %if.end122
                                        #   in Loop: Header=BB301_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB301_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB301_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB301_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB301_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB301_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB301_69
.LBB301_62:                             # %if.end137
                                        #   in Loop: Header=BB301_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB301_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB301_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB301_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB301_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB301_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB301_69
.LBB301_68:                             # %if.end152
                                        #   in Loop: Header=BB301_25 Depth=1
	jmp	.LBB301_25
.LBB301_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1235516385, -44(%rbp)  # imm = 0x49A47BE1
	jne	.LBB301_71
.LBB301_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_70
.Lfunc_end301:
	.size	BZ2_bzRead.261, .Lfunc_end301-BZ2_bzRead.261
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function add_pair_to_block.262
	.type	add_pair_to_block.262,@function
add_pair_to_block.262:                  # @add_pair_to_block.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$270101879, -24(%rbp)   # imm = 0x10196D77
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -1(%rbp)
	movl	$0, -20(%rbp)
.LBB302_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	96(%rcx), %eax
	jge	.LBB302_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB302_1 Depth=1
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-1(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB302_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB302_1
.LBB302_4:                              # %for.end
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movb	$1, 128(%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB302_7
	jmp	.LBB302_5
.LBB302_5:                              # %for.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB302_8
	jmp	.LBB302_6
.LBB302_6:                              # %for.end
	subl	$3, %eax
	je	.LBB302_9
	jmp	.LBB302_10
.LBB302_7:                              # %sw.bb
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB302_11
.LBB302_8:                              # %sw.bb14
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB302_11
.LBB302_9:                              # %sw.bb27
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	jmp	.LBB302_11
.LBB302_10:                             # %sw.default
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	96(%rcx), %ecx
	subl	$4, %ecx
	movslq	%ecx, %rcx
	movb	$1, 128(%rax,%rcx)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movb	-1(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movq	-16(%rbp), %rax
	movl	96(%rax), %eax
	subl	$4, %eax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
.LBB302_11:                             # %sw.epilog
	cmpl	$270101879, -24(%rbp)   # imm = 0x10196D77
	jne	.LBB302_13
.LBB302_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_12
.Lfunc_end302:
	.size	add_pair_to_block.262, .Lfunc_end302-add_pair_to_block.262
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.263      # -- Begin function BZ2_indexIntoF.263
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.263,@function
BZ2_indexIntoF.263:                     # @BZ2_indexIntoF.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1084146399, -28(%rbp)  # imm = 0x409EC2DF
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -20(%rbp)         # imm = 0x100
.LBB303_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB303_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB303_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_4
.LBB303_3:                              # %if.else
                                        #   in Loop: Header=BB303_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB303_4:                              # %if.end
                                        #   in Loop: Header=BB303_1 Depth=1
	jmp	.LBB303_5
.LBB303_5:                              # %do.cond
                                        #   in Loop: Header=BB303_1 Depth=1
	movl	-20(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB303_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1084146399, -28(%rbp)  # imm = 0x409EC2DF
	jne	.LBB303_8
.LBB303_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_7
.Lfunc_end303:
	.size	BZ2_indexIntoF.263, .Lfunc_end303-BZ2_indexIntoF.263
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.264
	.type	bzopen_or_bzdopen.264,@function
bzopen_or_bzdopen.264:                  # @bzopen_or_bzdopen.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$2124398124, -72(%rbp)  # imm = 0x7E9FBE2C
	movq	%rdi, -64(%rbp)
	movl	%esi, -80(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -76(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -84(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB304_2
# %bb.1:                                # %if.then
	movq	$0, -56(%rbp)
	jmp	.LBB304_39
.LBB304_2:                              # %if.end
	jmp	.LBB304_3
.LBB304_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB304_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB304_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB304_7
	jmp	.LBB304_5
.LBB304_5:                              # %while.body
                                        #   in Loop: Header=BB304_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB304_9
	jmp	.LBB304_6
.LBB304_6:                              # %while.body
                                        #   in Loop: Header=BB304_3 Depth=1
	subl	$119, %eax
	je	.LBB304_8
	jmp	.LBB304_10
.LBB304_7:                              # %sw.bb
                                        #   in Loop: Header=BB304_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB304_13
.LBB304_8:                              # %sw.bb1
                                        #   in Loop: Header=BB304_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB304_13
.LBB304_9:                              # %sw.bb2
                                        #   in Loop: Header=BB304_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB304_13
.LBB304_10:                             # %sw.default
                                        #   in Loop: Header=BB304_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB304_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB304_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB304_12:                             # %if.end8
                                        #   in Loop: Header=BB304_3 Depth=1
	jmp	.LBB304_13
.LBB304_13:                             # %sw.epilog
                                        #   in Loop: Header=BB304_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB304_3
.LBB304_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -68(%rbp)
	jne	.LBB304_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB304_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB304_21
.LBB304_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB304_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB304_20
.LBB304_19:                             # %cond.false
	movq	stdin, %rax
.LBB304_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB304_22
.LBB304_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB304_22:                             # %if.end26
	jmp	.LBB304_24
.LBB304_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-80(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB304_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB304_26
# %bb.25:                               # %if.then33
	movq	$0, -56(%rbp)
	jmp	.LBB304_39
.LBB304_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB304_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB304_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB304_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB304_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB304_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-76(%rbp), %r8d
	leaq	-88(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -48(%rbp)
	jmp	.LBB304_33
.LBB304_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-84(%rbp), %r9d
	leaq	-88(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
.LBB304_33:                             # %if.end49
	cmpq	$0, -48(%rbp)
	jne	.LBB304_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB304_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB304_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB304_37:                             # %if.end59
	movq	$0, -56(%rbp)
	jmp	.LBB304_39
.LBB304_38:                             # %if.end60
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB304_39:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$2124398124, -72(%rbp)  # imm = 0x7E9FBE2C
	jne	.LBB304_41
.LBB304_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_40
.Lfunc_end304:
	.size	bzopen_or_bzdopen.264, .Lfunc_end304-bzopen_or_bzdopen.264
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.265  # -- Begin function BZ2_bzWriteClose64.265
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.265,@function
BZ2_bzWriteClose64.265:                 # @BZ2_bzWriteClose64.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$2122872848, -60(%rbp)  # imm = 0x7E887810
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB305_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB305_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB305_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB305_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB305_5:                              # %if.end5
	jmp	.LBB305_71
.LBB305_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB305_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB305_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB305_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB305_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB305_11:                             # %if.end14
	jmp	.LBB305_71
.LBB305_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB305_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB305_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB305_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB305_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB305_17:                             # %if.end24
	jmp	.LBB305_71
.LBB305_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB305_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB305_20:                             # %if.end28
	cmpq	$0, -40(%rbp)
	je	.LBB305_22
# %bb.21:                               # %if.then30
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB305_22:                             # %if.end31
	cmpq	$0, -48(%rbp)
	je	.LBB305_24
# %bb.23:                               # %if.then33
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB305_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB305_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB305_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB305_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB305_49
# %bb.28:                               # %if.then41
	jmp	.LBB305_29
.LBB305_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB305_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB305_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB305_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB305_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB305_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB305_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB305_35:                             # %if.end55
	jmp	.LBB305_71
.LBB305_36:                             # %if.end56
                                        #   in Loop: Header=BB305_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB305_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB305_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB305_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB305_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB305_44
.LBB305_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB305_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB305_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB305_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB305_43:                             # %if.end82
	jmp	.LBB305_71
.LBB305_44:                             # %if.end83
                                        #   in Loop: Header=BB305_29 Depth=1
	jmp	.LBB305_45
.LBB305_45:                             # %if.end84
                                        #   in Loop: Header=BB305_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB305_47
# %bb.46:                               # %if.then87
	jmp	.LBB305_48
.LBB305_47:                             # %if.end88
                                        #   in Loop: Header=BB305_29 Depth=1
	jmp	.LBB305_29
.LBB305_48:                             # %while.end
	jmp	.LBB305_49
.LBB305_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB305_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB305_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB305_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB305_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB305_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB305_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB305_56:                             # %if.end110
	jmp	.LBB305_71
.LBB305_57:                             # %if.end111
	jmp	.LBB305_58
.LBB305_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB305_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB305_60:                             # %if.end117
	cmpq	$0, -40(%rbp)
	je	.LBB305_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB305_62:                             # %if.end122
	cmpq	$0, -48(%rbp)
	je	.LBB305_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB305_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB305_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB305_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB305_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB305_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB305_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB305_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB305_71:                             # %return
	cmpl	$2122872848, -60(%rbp)  # imm = 0x7E887810
	jne	.LBB305_73
.LBB305_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_72
.Lfunc_end305:
	.size	BZ2_bzWriteClose64.265, .Lfunc_end305-BZ2_bzWriteClose64.265
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.266 # -- Begin function BZ2_bzBuffToBuffDecompress.266
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.266,@function
BZ2_bzBuffToBuffDecompress.266:         # @BZ2_bzBuffToBuffDecompress.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1654670873, -36(%rbp)  # imm = 0x62A04619
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -20(%rbp)
	movl	%r9d, -24(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB306_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB306_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB306_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -20(%rbp)
	je	.LBB306_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -20(%rbp)
	jne	.LBB306_7
.LBB306_5:                              # %lor.lhs.false7
	cmpl	$0, -24(%rbp)
	jl	.LBB306_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -24(%rbp)
	jle	.LBB306_8
.LBB306_7:                              # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB306_19
.LBB306_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB306_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_19
.LBB306_10:                             # %if.end13
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB306_12
# %bb.11:                               # %if.then16
	jmp	.LBB306_15
.LBB306_12:                             # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB306_14
# %bb.13:                               # %if.then19
	jmp	.LBB306_18
.LBB306_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB306_19
.LBB306_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB306_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB306_19
.LBB306_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB306_19
.LBB306_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB306_19:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1654670873, -36(%rbp)  # imm = 0x62A04619
	jne	.LBB306_21
.LBB306_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_20
.Lfunc_end306:
	.size	BZ2_bzBuffToBuffDecompress.266, .Lfunc_end306-BZ2_bzBuffToBuffDecompress.266
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.267 # -- Begin function BZ2_bzBuffToBuffDecompress.267
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.267,@function
BZ2_bzBuffToBuffDecompress.267:         # @BZ2_bzBuffToBuffDecompress.267
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1971429212, -36(%rbp)  # imm = 0x75819F5C
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -20(%rbp)
	movl	%r9d, -24(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB307_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB307_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB307_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -20(%rbp)
	je	.LBB307_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -20(%rbp)
	jne	.LBB307_7
.LBB307_5:                              # %lor.lhs.false7
	cmpl	$0, -24(%rbp)
	jl	.LBB307_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -24(%rbp)
	jle	.LBB307_8
.LBB307_7:                              # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB307_19
.LBB307_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB307_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB307_19
.LBB307_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB307_12
# %bb.11:                               # %if.then16
	jmp	.LBB307_15
.LBB307_12:                             # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB307_14
# %bb.13:                               # %if.then19
	jmp	.LBB307_18
.LBB307_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB307_19
.LBB307_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB307_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB307_19
.LBB307_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB307_19
.LBB307_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB307_19:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1971429212, -36(%rbp)  # imm = 0x75819F5C
	jne	.LBB307_21
.LBB307_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_20
.Lfunc_end307:
	.size	BZ2_bzBuffToBuffDecompress.267, .Lfunc_end307-BZ2_bzBuffToBuffDecompress.267
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.268 # -- Begin function BZ2_bzDecompressInit.268
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.268,@function
BZ2_bzDecompressInit.268:               # @BZ2_bzDecompressInit.268
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1086857411, -40(%rbp)  # imm = 0x40C820C3
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB308_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB308_17
.LBB308_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB308_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB308_17
.LBB308_4:                              # %if.end2
	cmpl	$0, -32(%rbp)
	je	.LBB308_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -32(%rbp)
	je	.LBB308_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB308_17
.LBB308_7:                              # %if.end6
	cmpl	$0, -36(%rbp)
	jl	.LBB308_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -36(%rbp)
	jle	.LBB308_10
.LBB308_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB308_17
.LBB308_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB308_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB308_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB308_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB308_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB308_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB308_17
.LBB308_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB308_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1086857411, -40(%rbp)  # imm = 0x40C820C3
	jne	.LBB308_19
.LBB308_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_18
.Lfunc_end308:
	.size	BZ2_bzDecompressInit.268, .Lfunc_end308-BZ2_bzDecompressInit.268
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.269         # -- Begin function BZ2_bzWrite.269
	.p2align	4, 0x90
	.type	BZ2_bzWrite.269,@function
BZ2_bzWrite.269:                        # @BZ2_bzWrite.269
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1442254068, -32(%rbp)  # imm = 0x55F70CF4
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB309_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB309_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB309_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB309_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB309_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB309_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -20(%rbp)
	jge	.LBB309_12
.LBB309_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB309_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB309_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB309_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB309_11:                             # %if.end15
	jmp	.LBB309_53
.LBB309_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB309_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB309_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB309_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB309_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB309_17:                             # %if.end24
	jmp	.LBB309_53
.LBB309_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB309_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB309_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB309_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB309_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB309_23:                             # %if.end34
	jmp	.LBB309_53
.LBB309_24:                             # %if.end35
	cmpl	$0, -20(%rbp)
	jne	.LBB309_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB309_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB309_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB309_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB309_29:                             # %if.end44
	jmp	.LBB309_53
.LBB309_30:                             # %if.end45
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB309_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	je	.LBB309_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB309_34
# %bb.33:                               # %if.then55
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB309_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB309_36
# %bb.35:                               # %if.then58
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB309_36:                             # %if.end60
	jmp	.LBB309_53
.LBB309_37:                             # %if.end61
                                        #   in Loop: Header=BB309_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB309_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB309_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB309_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB309_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB309_45
.LBB309_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB309_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB309_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB309_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB309_44:                             # %if.end88
	jmp	.LBB309_53
.LBB309_45:                             # %if.end89
                                        #   in Loop: Header=BB309_31 Depth=1
	jmp	.LBB309_46
.LBB309_46:                             # %if.end90
                                        #   in Loop: Header=BB309_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB309_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB309_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB309_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB309_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB309_51:                             # %if.end104
	jmp	.LBB309_53
.LBB309_52:                             # %if.end105
                                        #   in Loop: Header=BB309_31 Depth=1
	jmp	.LBB309_31
.LBB309_53:                             # %return
	cmpl	$1442254068, -32(%rbp)  # imm = 0x55F70CF4
	jne	.LBB309_55
.LBB309_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_54
.Lfunc_end309:
	.size	BZ2_bzWrite.269, .Lfunc_end309-BZ2_bzWrite.269
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.270
	.type	default_bzalloc.270,@function
default_bzalloc.270:                    # @default_bzalloc.270
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$459251622, -16(%rbp)   # imm = 0x1B5F9FA6
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	-12(%rbp), %eax
	imull	-20(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$459251622, -16(%rbp)   # imm = 0x1B5F9FA6
	jne	.LBB310_2
.LBB310_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_1
.Lfunc_end310:
	.size	default_bzalloc.270, .Lfunc_end310-default_bzalloc.270
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.271    # -- Begin function BZ2_bzWriteClose.271
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.271,@function
BZ2_bzWriteClose.271:                   # @BZ2_bzWriteClose.271
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1308609594, -8(%rbp)   # imm = 0x4DFFCC3A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -16(%rbp)
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1308609594, -8(%rbp)   # imm = 0x4DFFCC3A
	jne	.LBB311_2
.LBB311_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_1
.Lfunc_end311:
	.size	BZ2_bzWriteClose.271, .Lfunc_end311-BZ2_bzWriteClose.271
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzwrite.272         # -- Begin function BZ2_bzwrite.272
	.p2align	4, 0x90
	.type	BZ2_bzwrite.272,@function
BZ2_bzwrite.272:                        # @BZ2_bzwrite.272
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1828386094, -20(%rbp)  # imm = 0x6CFAF52E
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %ecx
	leaq	-24(%rbp), %rdi
	callq	BZ2_bzWrite
	cmpl	$0, -24(%rbp)
	jne	.LBB312_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB312_3
.LBB312_2:                              # %if.else
	movl	$-1, -16(%rbp)
.LBB312_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1828386094, -20(%rbp)  # imm = 0x6CFAF52E
	jne	.LBB312_5
.LBB312_4:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_4
.Lfunc_end312:
	.size	BZ2_bzwrite.272, .Lfunc_end312-BZ2_bzwrite.272
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.273
	.type	handle_compress.273,@function
handle_compress.273:                    # @handle_compress.273
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1759069635, -28(%rbp)  # imm = 0x68D945C3
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB313_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB313_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB313_4
# %bb.3:                                # %if.then6
	jmp	.LBB313_25
.LBB313_4:                              # %if.end
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB313_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB313_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB313_8
# %bb.7:                                # %if.then14
	jmp	.LBB313_25
.LBB313_8:                              # %if.end15
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB313_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB313_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB313_12
# %bb.11:                               # %if.then28
	jmp	.LBB313_25
.LBB313_12:                             # %if.end29
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_13
.LBB313_13:                             # %if.end30
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB313_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB313_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB313_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB313_23
.LBB313_17:                             # %if.else
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB313_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB313_22
.LBB313_19:                             # %if.else57
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB313_21
# %bb.20:                               # %if.then61
	jmp	.LBB313_25
.LBB313_21:                             # %if.end62
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_22
.LBB313_22:                             # %if.end63
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_23
.LBB313_23:                             # %if.end64
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_24
.LBB313_24:                             # %if.end65
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_1
.LBB313_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB313_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB313_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1759069635, -28(%rbp)  # imm = 0x68D945C3
	jne	.LBB313_29
.LBB313_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_28
.Lfunc_end313:
	.size	handle_compress.273, .Lfunc_end313-handle_compress.273
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.274    # -- Begin function BZ2_bzWriteClose.274
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.274,@function
BZ2_bzWriteClose.274:                   # @BZ2_bzWriteClose.274
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1228504125, -8(%rbp)   # imm = 0x49397C3D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -16(%rbp)
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-16(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1228504125, -8(%rbp)   # imm = 0x49397C3D
	jne	.LBB314_2
.LBB314_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_1
.Lfunc_end314:
	.size	BZ2_bzWriteClose.274, .Lfunc_end314-BZ2_bzWriteClose.274
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.275     # -- Begin function BZ2_bzWriteOpen.275
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.275,@function
BZ2_bzWriteOpen.275:                    # @BZ2_bzWriteOpen.275
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$726263667, -60(%rbp)   # imm = 0x2B49E773
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB315_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB315_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB315_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB315_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB315_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB315_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -36(%rbp)
	jg	.LBB315_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB315_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB315_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -32(%rbp)
	jl	.LBB315_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -32(%rbp)
	jle	.LBB315_16
.LBB315_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB315_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB315_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB315_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB315_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB315_41
.LBB315_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB315_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB315_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB315_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB315_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB315_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB315_41
.LBB315_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB315_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB315_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB315_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB315_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB315_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB315_41
.LBB315_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB315_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB315_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB315_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB315_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB315_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB315_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB315_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB315_37
# %bb.36:                               # %if.then62
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB315_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB315_39
# %bb.38:                               # %if.then65
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB315_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB315_41
.LBB315_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB315_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$726263667, -60(%rbp)   # imm = 0x2B49E773
	jne	.LBB315_43
.LBB315_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_42
.Lfunc_end315:
	.size	BZ2_bzWriteOpen.275, .Lfunc_end315-BZ2_bzWriteOpen.275
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.276 # -- Begin function BZ2_bzReadGetUnused.276
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.276,@function
BZ2_bzReadGetUnused.276:                # @BZ2_bzReadGetUnused.276
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1599231309, -20(%rbp)  # imm = 0x5F52554D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB316_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB316_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB316_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB316_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB316_5:                              # %if.end5
	jmp	.LBB316_24
.LBB316_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB316_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB316_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB316_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB316_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB316_11:                             # %if.end16
	jmp	.LBB316_24
.LBB316_12:                             # %if.end17
	cmpq	$0, -32(%rbp)
	je	.LBB316_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -40(%rbp)
	jne	.LBB316_19
.LBB316_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB316_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB316_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB316_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB316_18:                             # %if.end27
	jmp	.LBB316_24
.LBB316_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB316_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB316_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB316_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB316_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB316_24:                             # %return
	cmpl	$1599231309, -20(%rbp)  # imm = 0x5F52554D
	jne	.LBB316_26
.LBB316_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_25
.Lfunc_end316:
	.size	BZ2_bzReadGetUnused.276, .Lfunc_end316-BZ2_bzReadGetUnused.276
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.277      # -- Begin function BZ2_bzReadOpen.277
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.277,@function
BZ2_bzReadOpen.277:                     # @BZ2_bzReadOpen.277
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1506304496, -76(%rbp)  # imm = 0x59C861F0
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB317_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB317_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB317_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB317_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB317_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -40(%rbp)
	je	.LBB317_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -40(%rbp)
	jne	.LBB317_14
.LBB317_7:                              # %lor.lhs.false7
	cmpl	$0, -36(%rbp)
	jl	.LBB317_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -36(%rbp)
	jg	.LBB317_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -56(%rbp)
	jne	.LBB317_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB317_14
.LBB317_11:                             # %lor.lhs.false15
	cmpq	$0, -56(%rbp)
	je	.LBB317_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB317_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB317_19
.LBB317_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB317_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB317_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB317_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB317_18:                             # %if.end28
	movq	$0, -64(%rbp)
	jmp	.LBB317_45
.LBB317_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB317_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB317_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB317_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB317_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB317_24:                             # %if.end37
	movq	$0, -64(%rbp)
	jmp	.LBB317_45
.LBB317_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB317_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB317_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB317_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB317_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB317_30:                             # %if.end48
	movq	$0, -64(%rbp)
	jmp	.LBB317_45
.LBB317_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB317_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB317_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB317_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB317_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB317_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB317_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB317_36 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB317_36
.LBB317_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB317_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB317_41
# %bb.40:                               # %if.then67
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB317_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB317_43
# %bb.42:                               # %if.then70
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB317_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -64(%rbp)
	jmp	.LBB317_45
.LBB317_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB317_45:                             # %return
	movq	-64(%rbp), %rbx
	cmpl	$1506304496, -76(%rbp)  # imm = 0x59C861F0
	jne	.LBB317_47
.LBB317_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_46
.Lfunc_end317:
	.size	BZ2_bzReadOpen.277, .Lfunc_end317-BZ2_bzReadOpen.277
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWrite.278         # -- Begin function BZ2_bzWrite.278
	.p2align	4, 0x90
	.type	BZ2_bzWrite.278,@function
BZ2_bzWrite.278:                        # @BZ2_bzWrite.278
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1640533031, -36(%rbp)  # imm = 0x61C88C27
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB318_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB318_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB318_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB318_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB318_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB318_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -20(%rbp)
	jge	.LBB318_12
.LBB318_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB318_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB318_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB318_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB318_11:                             # %if.end15
	jmp	.LBB318_53
.LBB318_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB318_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB318_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB318_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB318_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB318_17:                             # %if.end24
	jmp	.LBB318_53
.LBB318_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB318_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB318_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB318_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB318_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB318_23:                             # %if.end34
	jmp	.LBB318_53
.LBB318_24:                             # %if.end35
	cmpl	$0, -20(%rbp)
	jne	.LBB318_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB318_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB318_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB318_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB318_29:                             # %if.end44
	jmp	.LBB318_53
.LBB318_30:                             # %if.end45
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB318_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	je	.LBB318_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB318_34
# %bb.33:                               # %if.then55
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB318_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB318_36
# %bb.35:                               # %if.then58
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB318_36:                             # %if.end60
	jmp	.LBB318_53
.LBB318_37:                             # %if.end61
                                        #   in Loop: Header=BB318_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB318_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB318_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB318_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB318_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB318_45
.LBB318_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB318_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB318_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB318_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB318_44:                             # %if.end88
	jmp	.LBB318_53
.LBB318_45:                             # %if.end89
                                        #   in Loop: Header=BB318_31 Depth=1
	jmp	.LBB318_46
.LBB318_46:                             # %if.end90
                                        #   in Loop: Header=BB318_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB318_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB318_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB318_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB318_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB318_51:                             # %if.end104
	jmp	.LBB318_53
.LBB318_52:                             # %if.end105
                                        #   in Loop: Header=BB318_31 Depth=1
	jmp	.LBB318_31
.LBB318_53:                             # %return
	cmpl	$1640533031, -36(%rbp)  # imm = 0x61C88C27
	jne	.LBB318_55
.LBB318_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_54
.Lfunc_end318:
	.size	BZ2_bzWrite.278, .Lfunc_end318-BZ2_bzWrite.278
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.279 # -- Begin function BZ2_bzReadGetUnused.279
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.279,@function
BZ2_bzReadGetUnused.279:                # @BZ2_bzReadGetUnused.279
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$105673984, -20(%rbp)   # imm = 0x64C7500
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB319_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB319_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB319_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB319_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB319_5:                              # %if.end5
	jmp	.LBB319_24
.LBB319_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB319_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB319_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB319_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB319_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB319_11:                             # %if.end16
	jmp	.LBB319_24
.LBB319_12:                             # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB319_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB319_19
.LBB319_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB319_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB319_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB319_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB319_18:                             # %if.end27
	jmp	.LBB319_24
.LBB319_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB319_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB319_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB319_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB319_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB319_24:                             # %return
	cmpl	$105673984, -20(%rbp)   # imm = 0x64C7500
	jne	.LBB319_26
.LBB319_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_25
.Lfunc_end319:
	.size	BZ2_bzReadGetUnused.279, .Lfunc_end319-BZ2_bzReadGetUnused.279
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.280     # -- Begin function BZ2_bzWriteOpen.280
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.280,@function
BZ2_bzWriteOpen.280:                    # @BZ2_bzWriteOpen.280
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1628512396, -60(%rbp)  # imm = 0x6111208C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB320_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB320_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB320_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB320_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB320_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -40(%rbp)
	jl	.LBB320_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -40(%rbp)
	jg	.LBB320_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB320_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB320_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -36(%rbp)
	jl	.LBB320_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -36(%rbp)
	jle	.LBB320_16
.LBB320_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB320_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB320_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB320_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB320_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB320_41
.LBB320_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB320_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB320_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB320_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB320_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB320_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB320_41
.LBB320_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB320_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB320_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB320_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB320_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB320_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB320_41
.LBB320_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB320_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB320_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB320_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB320_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB320_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB320_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB320_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB320_37
# %bb.36:                               # %if.then62
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB320_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB320_39
# %bb.38:                               # %if.then65
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB320_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB320_41
.LBB320_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB320_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1628512396, -60(%rbp)  # imm = 0x6111208C
	jne	.LBB320_43
.LBB320_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_42
.Lfunc_end320:
	.size	BZ2_bzWriteOpen.280, .Lfunc_end320-BZ2_bzWriteOpen.280
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.281      # -- Begin function BZ2_bzCompress.281
	.p2align	4, 0x90
	.type	BZ2_bzCompress.281,@function
BZ2_bzCompress.281:                     # @BZ2_bzCompress.281
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$576405231, -44(%rbp)   # imm = 0x225B3EEF
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB321_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB321_39
.LBB321_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB321_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB321_39
.LBB321_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB321_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB321_39
.LBB321_6:                              # %if.end7
	jmp	.LBB321_7
.LBB321_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB321_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB321_7 Depth=1
	movq	.LJTI321_0(,%rax,8), %rax
	jmpq	*%rax
.LBB321_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB321_39
.LBB321_10:                             # %sw.bb8
                                        #   in Loop: Header=BB321_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB321_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB321_39
.LBB321_12:                             # %if.else
                                        #   in Loop: Header=BB321_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB321_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB321_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB321_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB321_7 Depth=1
	jmp	.LBB321_7
.LBB321_15:                             # %if.else15
                                        #   in Loop: Header=BB321_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB321_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB321_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB321_14
.LBB321_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB321_39
.LBB321_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB321_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB321_39
.LBB321_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB321_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB321_39
.LBB321_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB321_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB321_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB321_26
.LBB321_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB321_39
.LBB321_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB321_39
.LBB321_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB321_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB321_39
.LBB321_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB321_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB321_39
.LBB321_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB321_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB321_39
.LBB321_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB321_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB321_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB321_37
.LBB321_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB321_39
.LBB321_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB321_39
.LBB321_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB321_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$576405231, -44(%rbp)   # imm = 0x225B3EEF
	jne	.LBB321_41
.LBB321_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_40
.Lfunc_end321:
	.size	BZ2_bzCompress.281, .Lfunc_end321-BZ2_bzCompress.281
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI321_0:
	.quad	.LBB321_9
	.quad	.LBB321_10
	.quad	.LBB321_18
	.quad	.LBB321_27
                                        # -- End function
	.text
	.globl	BZ2_bzread.282          # -- Begin function BZ2_bzread.282
	.p2align	4, 0x90
	.type	BZ2_bzread.282,@function
BZ2_bzread.282:                         # @BZ2_bzread.282
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1906394508, -24(%rbp)  # imm = 0x71A1458C
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB322_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB322_6
.LBB322_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -28(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB322_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB322_5
.LBB322_4:                              # %if.then3
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_6
.LBB322_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB322_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1906394508, -24(%rbp)  # imm = 0x71A1458C
	jne	.LBB322_8
.LBB322_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_7
.Lfunc_end322:
	.size	BZ2_bzread.282, .Lfunc_end322-BZ2_bzread.282
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.283
	.type	bzopen_or_bzdopen.283,@function
bzopen_or_bzdopen.283:                  # @bzopen_or_bzdopen.283
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$358870941, -84(%rbp)   # imm = 0x1563EF9D
	movq	%rdi, -64(%rbp)
	movl	%esi, -80(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -36(%rbp)
	movl	$30, -72(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -68(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB323_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB323_39
.LBB323_2:                              # %if.end
	jmp	.LBB323_3
.LBB323_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB323_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB323_7
	jmp	.LBB323_5
.LBB323_5:                              # %while.body
                                        #   in Loop: Header=BB323_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB323_9
	jmp	.LBB323_6
.LBB323_6:                              # %while.body
                                        #   in Loop: Header=BB323_3 Depth=1
	subl	$119, %eax
	je	.LBB323_8
	jmp	.LBB323_10
.LBB323_7:                              # %sw.bb
                                        #   in Loop: Header=BB323_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB323_13
.LBB323_8:                              # %sw.bb1
                                        #   in Loop: Header=BB323_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB323_13
.LBB323_9:                              # %sw.bb2
                                        #   in Loop: Header=BB323_3 Depth=1
	movl	$1, -40(%rbp)
	jmp	.LBB323_13
.LBB323_10:                             # %sw.default
                                        #   in Loop: Header=BB323_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB323_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB323_12:                             # %if.end8
                                        #   in Loop: Header=BB323_3 Depth=1
	jmp	.LBB323_13
.LBB323_13:                             # %sw.epilog
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB323_3
.LBB323_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -76(%rbp)
	jne	.LBB323_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB323_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB323_21
.LBB323_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB323_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB323_20
.LBB323_19:                             # %cond.false
	movq	stdin, %rax
.LBB323_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB323_22
.LBB323_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB323_22:                             # %if.end26
	jmp	.LBB323_24
.LBB323_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-80(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB323_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB323_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB323_39
.LBB323_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB323_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB323_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB323_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB323_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB323_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-72(%rbp), %r8d
	leaq	-88(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB323_33
.LBB323_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-68(%rbp), %r9d
	leaq	-88(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB323_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB323_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB323_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB323_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB323_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB323_39
.LBB323_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB323_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$358870941, -84(%rbp)   # imm = 0x1563EF9D
	jne	.LBB323_41
.LBB323_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_40
.Lfunc_end323:
	.size	bzopen_or_bzdopen.283, .Lfunc_end323-bzopen_or_bzdopen.283
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.284      # -- Begin function BZ2_bzCompress.284
	.p2align	4, 0x90
	.type	BZ2_bzCompress.284,@function
BZ2_bzCompress.284:                     # @BZ2_bzCompress.284
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$133387890, -44(%rbp)   # imm = 0x7F35672
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB324_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB324_39
.LBB324_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB324_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB324_39
.LBB324_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB324_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB324_39
.LBB324_6:                              # %if.end7
	jmp	.LBB324_7
.LBB324_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB324_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB324_7 Depth=1
	movq	.LJTI324_0(,%rax,8), %rax
	jmpq	*%rax
.LBB324_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB324_39
.LBB324_10:                             # %sw.bb8
                                        #   in Loop: Header=BB324_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB324_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB324_39
.LBB324_12:                             # %if.else
                                        #   in Loop: Header=BB324_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB324_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB324_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB324_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB324_7 Depth=1
	jmp	.LBB324_7
.LBB324_15:                             # %if.else15
                                        #   in Loop: Header=BB324_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB324_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB324_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB324_14
.LBB324_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB324_39
.LBB324_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB324_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB324_39
.LBB324_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB324_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB324_39
.LBB324_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB324_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB324_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB324_26
.LBB324_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB324_39
.LBB324_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB324_39
.LBB324_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB324_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB324_39
.LBB324_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB324_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB324_39
.LBB324_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB324_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB324_39
.LBB324_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB324_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB324_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB324_37
.LBB324_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB324_39
.LBB324_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB324_39
.LBB324_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB324_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$133387890, -44(%rbp)   # imm = 0x7F35672
	jne	.LBB324_41
.LBB324_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_40
.Lfunc_end324:
	.size	BZ2_bzCompress.284, .Lfunc_end324-BZ2_bzCompress.284
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI324_0:
	.quad	.LBB324_9
	.quad	.LBB324_10
	.quad	.LBB324_18
	.quad	.LBB324_27
                                        # -- End function
	.text
	.globl	BZ2_bzBuffToBuffCompress.285 # -- Begin function BZ2_bzBuffToBuffCompress.285
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.285,@function
BZ2_bzBuffToBuffCompress.285:           # @BZ2_bzBuffToBuffCompress.285
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$525433972, -36(%rbp)   # imm = 0x1F517C74
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB325_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB325_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB325_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB325_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB325_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB325_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB325_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB325_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB325_10
.LBB325_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB325_21
.LBB325_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB325_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB325_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB325_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB325_21
.LBB325_14:                             # %if.end21
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB325_16
# %bb.15:                               # %if.then24
	jmp	.LBB325_19
.LBB325_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB325_18
# %bb.17:                               # %if.then27
	jmp	.LBB325_20
.LBB325_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB325_21
.LBB325_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB325_21
.LBB325_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB325_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$525433972, -36(%rbp)   # imm = 0x1F517C74
	jne	.LBB325_23
.LBB325_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_22
.Lfunc_end325:
	.size	BZ2_bzBuffToBuffCompress.285, .Lfunc_end325-BZ2_bzBuffToBuffCompress.285
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.286
	.type	handle_compress.286,@function
handle_compress.286:                    # @handle_compress.286
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1911942892, -28(%rbp)  # imm = 0x71F5EEEC
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB326_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB326_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB326_4
# %bb.3:                                # %if.then6
	jmp	.LBB326_25
.LBB326_4:                              # %if.end
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB326_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB326_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB326_8
# %bb.7:                                # %if.then14
	jmp	.LBB326_25
.LBB326_8:                              # %if.end15
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB326_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB326_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB326_12
# %bb.11:                               # %if.then28
	jmp	.LBB326_25
.LBB326_12:                             # %if.end29
                                        #   in Loop: Header=BB326_1 Depth=1
	jmp	.LBB326_13
.LBB326_13:                             # %if.end30
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB326_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB326_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB326_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB326_23
.LBB326_17:                             # %if.else
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB326_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB326_22
.LBB326_19:                             # %if.else57
                                        #   in Loop: Header=BB326_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB326_21
# %bb.20:                               # %if.then61
	jmp	.LBB326_25
.LBB326_21:                             # %if.end62
                                        #   in Loop: Header=BB326_1 Depth=1
	jmp	.LBB326_22
.LBB326_22:                             # %if.end63
                                        #   in Loop: Header=BB326_1 Depth=1
	jmp	.LBB326_23
.LBB326_23:                             # %if.end64
                                        #   in Loop: Header=BB326_1 Depth=1
	jmp	.LBB326_24
.LBB326_24:                             # %if.end65
                                        #   in Loop: Header=BB326_1 Depth=1
	jmp	.LBB326_1
.LBB326_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB326_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB326_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1911942892, -28(%rbp)  # imm = 0x71F5EEEC
	jne	.LBB326_29
.LBB326_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_28
.Lfunc_end326:
	.size	handle_compress.286, .Lfunc_end326-handle_compress.286
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.287      # -- Begin function BZ2_bzReadOpen.287
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.287,@function
BZ2_bzReadOpen.287:                     # @BZ2_bzReadOpen.287
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$591980346, -76(%rbp)   # imm = 0x2348E73A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -64(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB327_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB327_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB327_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB327_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB327_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -36(%rbp)
	je	.LBB327_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	jne	.LBB327_14
.LBB327_7:                              # %lor.lhs.false7
	cmpl	$0, -44(%rbp)
	jl	.LBB327_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -44(%rbp)
	jg	.LBB327_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -64(%rbp)
	jne	.LBB327_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB327_14
.LBB327_11:                             # %lor.lhs.false15
	cmpq	$0, -64(%rbp)
	je	.LBB327_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB327_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB327_19
.LBB327_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB327_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB327_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB327_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB327_18:                             # %if.end28
	movq	$0, -56(%rbp)
	jmp	.LBB327_45
.LBB327_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB327_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB327_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB327_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB327_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB327_24:                             # %if.end37
	movq	$0, -56(%rbp)
	jmp	.LBB327_45
.LBB327_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB327_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB327_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB327_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB327_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB327_30:                             # %if.end48
	movq	$0, -56(%rbp)
	jmp	.LBB327_45
.LBB327_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB327_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB327_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB327_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB327_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB327_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB327_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB327_36 Depth=1
	movq	-64(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB327_36
.LBB327_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-44(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB327_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB327_41
# %bb.40:                               # %if.then67
	movl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB327_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB327_43
# %bb.42:                               # %if.then70
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB327_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -56(%rbp)
	jmp	.LBB327_45
.LBB327_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB327_45:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$591980346, -76(%rbp)   # imm = 0x2348E73A
	jne	.LBB327_47
.LBB327_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_46
.Lfunc_end327:
	.size	BZ2_bzReadOpen.287, .Lfunc_end327-BZ2_bzReadOpen.287
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.288
	.type	default_bzalloc.288,@function
default_bzalloc.288:                    # @default_bzalloc.288
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1745681890, -16(%rbp)  # imm = 0x680CFDE2
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	-12(%rbp), %eax
	imull	-20(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1745681890, -16(%rbp)  # imm = 0x680CFDE2
	jne	.LBB328_2
.LBB328_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_1
.Lfunc_end328:
	.size	default_bzalloc.288, .Lfunc_end328-default_bzalloc.288
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.289          # -- Begin function BZ2_bzRead.289
	.p2align	4, 0x90
	.type	BZ2_bzRead.289,@function
BZ2_bzRead.289:                         # @BZ2_bzRead.289
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1109089775, -44(%rbp)  # imm = 0x421B5DEF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB329_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB329_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB329_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB329_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB329_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB329_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB329_12
.LBB329_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB329_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB329_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB329_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB329_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB329_69
.LBB329_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB329_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB329_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB329_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB329_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB329_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB329_69
.LBB329_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB329_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB329_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB329_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB329_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB329_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB329_69
.LBB329_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB329_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB329_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB329_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB329_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB329_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB329_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB329_69
.LBB329_31:                             # %if.end46
                                        #   in Loop: Header=BB329_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB329_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB329_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB329_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB329_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB329_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB329_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB329_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB329_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB329_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB329_69
.LBB329_39:                             # %if.end69
                                        #   in Loop: Header=BB329_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB329_40:                             # %if.end76
                                        #   in Loop: Header=BB329_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB329_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB329_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB329_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB329_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB329_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB329_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB329_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB329_69
.LBB329_47:                             # %if.end94
                                        #   in Loop: Header=BB329_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB329_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB329_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB329_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB329_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB329_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB329_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB329_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB329_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB329_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB329_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB329_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB329_69
.LBB329_56:                             # %if.end122
                                        #   in Loop: Header=BB329_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB329_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB329_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB329_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB329_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB329_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB329_69
.LBB329_62:                             # %if.end137
                                        #   in Loop: Header=BB329_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB329_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB329_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB329_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB329_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB329_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB329_69
.LBB329_68:                             # %if.end152
                                        #   in Loop: Header=BB329_25 Depth=1
	jmp	.LBB329_25
.LBB329_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1109089775, -44(%rbp)  # imm = 0x421B5DEF
	jne	.LBB329_71
.LBB329_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_70
.Lfunc_end329:
	.size	BZ2_bzRead.289, .Lfunc_end329-BZ2_bzRead.289
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.290 # -- Begin function BZ2_bzBuffToBuffDecompress.290
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.290,@function
BZ2_bzBuffToBuffDecompress.290:         # @BZ2_bzBuffToBuffDecompress.290
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1060657482, -40(%rbp)  # imm = 0x3F38594A
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB330_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB330_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB330_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB330_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB330_7
.LBB330_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB330_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB330_8
.LBB330_7:                              # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB330_19
.LBB330_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB330_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB330_19
.LBB330_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB330_12
# %bb.11:                               # %if.then16
	jmp	.LBB330_15
.LBB330_12:                             # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB330_14
# %bb.13:                               # %if.then19
	jmp	.LBB330_18
.LBB330_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB330_19
.LBB330_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB330_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB330_19
.LBB330_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB330_19
.LBB330_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB330_19:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1060657482, -40(%rbp)  # imm = 0x3F38594A
	jne	.LBB330_21
.LBB330_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB330_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB330_20
.Lfunc_end330:
	.size	BZ2_bzBuffToBuffDecompress.290, .Lfunc_end330-BZ2_bzBuffToBuffDecompress.290
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.291      # -- Begin function BZ2_bzCompress.291
	.p2align	4, 0x90
	.type	BZ2_bzCompress.291,@function
BZ2_bzCompress.291:                     # @BZ2_bzCompress.291
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$751479921, -44(%rbp)   # imm = 0x2CCAAC71
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB331_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB331_39
.LBB331_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB331_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB331_39
.LBB331_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB331_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB331_39
.LBB331_6:                              # %if.end7
	jmp	.LBB331_7
.LBB331_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB331_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB331_7 Depth=1
	movq	.LJTI331_0(,%rax,8), %rax
	jmpq	*%rax
.LBB331_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB331_39
.LBB331_10:                             # %sw.bb8
                                        #   in Loop: Header=BB331_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB331_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB331_39
.LBB331_12:                             # %if.else
                                        #   in Loop: Header=BB331_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB331_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB331_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB331_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB331_7 Depth=1
	jmp	.LBB331_7
.LBB331_15:                             # %if.else15
                                        #   in Loop: Header=BB331_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB331_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB331_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB331_14
.LBB331_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB331_39
.LBB331_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB331_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB331_39
.LBB331_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB331_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB331_39
.LBB331_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB331_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB331_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB331_26
.LBB331_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB331_39
.LBB331_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB331_39
.LBB331_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB331_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB331_39
.LBB331_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB331_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB331_39
.LBB331_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB331_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB331_39
.LBB331_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB331_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB331_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB331_37
.LBB331_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB331_39
.LBB331_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB331_39
.LBB331_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB331_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$751479921, -44(%rbp)   # imm = 0x2CCAAC71
	jne	.LBB331_41
.LBB331_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB331_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB331_40
.Lfunc_end331:
	.size	BZ2_bzCompress.291, .Lfunc_end331-BZ2_bzCompress.291
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI331_0:
	.quad	.LBB331_9
	.quad	.LBB331_10
	.quad	.LBB331_18
	.quad	.LBB331_27
                                        # -- End function
	.text
	.globl	BZ2_bzWrite.292         # -- Begin function BZ2_bzWrite.292
	.p2align	4, 0x90
	.type	BZ2_bzWrite.292,@function
BZ2_bzWrite.292:                        # @BZ2_bzWrite.292
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$662654738, -36(%rbp)   # imm = 0x277F4F12
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB332_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB332_2:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB332_4
# %bb.3:                                # %if.then2
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB332_4:                              # %if.end3
	cmpq	$0, -8(%rbp)
	je	.LBB332_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -48(%rbp)
	je	.LBB332_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -20(%rbp)
	jge	.LBB332_12
.LBB332_7:                              # %if.then8
	cmpq	$0, -16(%rbp)
	je	.LBB332_9
# %bb.8:                                # %if.then10
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB332_9:                              # %if.end11
	cmpq	$0, -8(%rbp)
	je	.LBB332_11
# %bb.10:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB332_11:                             # %if.end15
	jmp	.LBB332_53
.LBB332_12:                             # %if.end16
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB332_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB332_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB332_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB332_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB332_17:                             # %if.end24
	jmp	.LBB332_53
.LBB332_18:                             # %if.end25
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB332_24
# %bb.19:                               # %if.then27
	cmpq	$0, -16(%rbp)
	je	.LBB332_21
# %bb.20:                               # %if.then29
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB332_21:                             # %if.end30
	cmpq	$0, -8(%rbp)
	je	.LBB332_23
# %bb.22:                               # %if.then32
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB332_23:                             # %if.end34
	jmp	.LBB332_53
.LBB332_24:                             # %if.end35
	cmpl	$0, -20(%rbp)
	jne	.LBB332_30
# %bb.25:                               # %if.then37
	cmpq	$0, -16(%rbp)
	je	.LBB332_27
# %bb.26:                               # %if.then39
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB332_27:                             # %if.end40
	cmpq	$0, -8(%rbp)
	je	.LBB332_29
# %bb.28:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB332_29:                             # %if.end44
	jmp	.LBB332_53
.LBB332_30:                             # %if.end45
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB332_31:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	xorl	%esi, %esi
	callq	BZ2_bzCompress
	movl	%eax, -24(%rbp)
	cmpl	$1, -24(%rbp)
	je	.LBB332_37
# %bb.32:                               # %if.then53
	cmpq	$0, -16(%rbp)
	je	.LBB332_34
# %bb.33:                               # %if.then55
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB332_34:                             # %if.end56
	cmpq	$0, -8(%rbp)
	je	.LBB332_36
# %bb.35:                               # %if.then58
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB332_36:                             # %if.end60
	jmp	.LBB332_53
.LBB332_37:                             # %if.end61
                                        #   in Loop: Header=BB332_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB332_46
# %bb.38:                               # %if.then65
                                        #   in Loop: Header=BB332_31 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB332_40
# %bb.39:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB332_31 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB332_45
.LBB332_40:                             # %if.then79
	cmpq	$0, -16(%rbp)
	je	.LBB332_42
# %bb.41:                               # %if.then82
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB332_42:                             # %if.end83
	cmpq	$0, -8(%rbp)
	je	.LBB332_44
# %bb.43:                               # %if.then86
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB332_44:                             # %if.end88
	jmp	.LBB332_53
.LBB332_45:                             # %if.end89
                                        #   in Loop: Header=BB332_31 Depth=1
	jmp	.LBB332_46
.LBB332_46:                             # %if.end90
                                        #   in Loop: Header=BB332_31 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB332_52
# %bb.47:                               # %if.then95
	cmpq	$0, -16(%rbp)
	je	.LBB332_49
# %bb.48:                               # %if.then98
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB332_49:                             # %if.end99
	cmpq	$0, -8(%rbp)
	je	.LBB332_51
# %bb.50:                               # %if.then102
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB332_51:                             # %if.end104
	jmp	.LBB332_53
.LBB332_52:                             # %if.end105
                                        #   in Loop: Header=BB332_31 Depth=1
	jmp	.LBB332_31
.LBB332_53:                             # %return
	cmpl	$662654738, -36(%rbp)   # imm = 0x277F4F12
	jne	.LBB332_55
.LBB332_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB332_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB332_54
.Lfunc_end332:
	.size	BZ2_bzWrite.292, .Lfunc_end332-BZ2_bzWrite.292
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.293  # -- Begin function BZ2_bzWriteClose64.293
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.293,@function
BZ2_bzWriteClose64.293:                 # @BZ2_bzWriteClose64.293
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$791163283, -60(%rbp)   # imm = 0x2F283193
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB333_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB333_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB333_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB333_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB333_5:                              # %if.end5
	jmp	.LBB333_71
.LBB333_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB333_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB333_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB333_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB333_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB333_11:                             # %if.end14
	jmp	.LBB333_71
.LBB333_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB333_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB333_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB333_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB333_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB333_17:                             # %if.end24
	jmp	.LBB333_71
.LBB333_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB333_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB333_20:                             # %if.end28
	cmpq	$0, -40(%rbp)
	je	.LBB333_22
# %bb.21:                               # %if.then30
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB333_22:                             # %if.end31
	cmpq	$0, -48(%rbp)
	je	.LBB333_24
# %bb.23:                               # %if.then33
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB333_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB333_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB333_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB333_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB333_49
# %bb.28:                               # %if.then41
	jmp	.LBB333_29
.LBB333_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB333_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB333_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB333_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB333_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB333_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB333_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB333_35:                             # %if.end55
	jmp	.LBB333_71
.LBB333_36:                             # %if.end56
                                        #   in Loop: Header=BB333_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB333_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB333_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB333_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB333_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB333_44
.LBB333_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB333_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB333_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB333_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB333_43:                             # %if.end82
	jmp	.LBB333_71
.LBB333_44:                             # %if.end83
                                        #   in Loop: Header=BB333_29 Depth=1
	jmp	.LBB333_45
.LBB333_45:                             # %if.end84
                                        #   in Loop: Header=BB333_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB333_47
# %bb.46:                               # %if.then87
	jmp	.LBB333_48
.LBB333_47:                             # %if.end88
                                        #   in Loop: Header=BB333_29 Depth=1
	jmp	.LBB333_29
.LBB333_48:                             # %while.end
	jmp	.LBB333_49
.LBB333_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB333_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB333_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB333_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB333_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB333_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB333_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB333_56:                             # %if.end110
	jmp	.LBB333_71
.LBB333_57:                             # %if.end111
	jmp	.LBB333_58
.LBB333_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB333_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB333_60:                             # %if.end117
	cmpq	$0, -40(%rbp)
	je	.LBB333_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB333_62:                             # %if.end122
	cmpq	$0, -48(%rbp)
	je	.LBB333_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB333_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB333_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB333_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB333_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB333_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB333_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB333_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB333_71:                             # %return
	cmpl	$791163283, -60(%rbp)   # imm = 0x2F283193
	jne	.LBB333_73
.LBB333_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB333_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB333_72
.Lfunc_end333:
	.size	BZ2_bzWriteClose64.293, .Lfunc_end333-BZ2_bzWriteClose64.293
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.294      # -- Begin function BZ2_bzReadOpen.294
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.294,@function
BZ2_bzReadOpen.294:                     # @BZ2_bzReadOpen.294
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$703228135, -76(%rbp)   # imm = 0x29EA68E7
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -40(%rbp)
	movq	%r8, -64(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB334_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB334_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB334_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB334_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB334_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -40(%rbp)
	je	.LBB334_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -40(%rbp)
	jne	.LBB334_14
.LBB334_7:                              # %lor.lhs.false7
	cmpl	$0, -44(%rbp)
	jl	.LBB334_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -44(%rbp)
	jg	.LBB334_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -64(%rbp)
	jne	.LBB334_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB334_14
.LBB334_11:                             # %lor.lhs.false15
	cmpq	$0, -64(%rbp)
	je	.LBB334_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB334_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB334_19
.LBB334_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB334_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB334_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB334_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB334_18:                             # %if.end28
	movq	$0, -56(%rbp)
	jmp	.LBB334_45
.LBB334_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB334_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB334_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB334_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB334_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB334_24:                             # %if.end37
	movq	$0, -56(%rbp)
	jmp	.LBB334_45
.LBB334_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB334_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB334_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB334_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB334_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB334_30:                             # %if.end48
	movq	$0, -56(%rbp)
	jmp	.LBB334_45
.LBB334_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB334_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB334_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB334_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB334_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB334_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB334_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB334_36 Depth=1
	movq	-64(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB334_36
.LBB334_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-44(%rbp), %esi
	movl	-40(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB334_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB334_41
# %bb.40:                               # %if.then67
	movl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB334_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB334_43
# %bb.42:                               # %if.then70
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB334_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -56(%rbp)
	jmp	.LBB334_45
.LBB334_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB334_45:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$703228135, -76(%rbp)   # imm = 0x29EA68E7
	jne	.LBB334_47
.LBB334_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB334_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB334_46
.Lfunc_end334:
	.size	BZ2_bzReadOpen.294, .Lfunc_end334-BZ2_bzReadOpen.294
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.295      # -- Begin function BZ2_indexIntoF.295
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.295,@function
BZ2_indexIntoF.295:                     # @BZ2_indexIntoF.295
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1132215602, -28(%rbp)  # imm = 0x437C3D32
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB335_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB335_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB335_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB335_4
.LBB335_3:                              # %if.else
                                        #   in Loop: Header=BB335_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB335_4:                              # %if.end
                                        #   in Loop: Header=BB335_1 Depth=1
	jmp	.LBB335_5
.LBB335_5:                              # %do.cond
                                        #   in Loop: Header=BB335_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB335_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1132215602, -28(%rbp)  # imm = 0x437C3D32
	jne	.LBB335_8
.LBB335_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB335_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB335_7
.Lfunc_end335:
	.size	BZ2_indexIntoF.295, .Lfunc_end335-BZ2_indexIntoF.295
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.296
	.type	handle_compress.296,@function
handle_compress.296:                    # @handle_compress.296
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1092197959, -28(%rbp)  # imm = 0x41199E47
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB336_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB336_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB336_4
# %bb.3:                                # %if.then6
	jmp	.LBB336_25
.LBB336_4:                              # %if.end
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB336_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB336_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB336_8
# %bb.7:                                # %if.then14
	jmp	.LBB336_25
.LBB336_8:                              # %if.end15
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB336_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB336_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB336_12
# %bb.11:                               # %if.then28
	jmp	.LBB336_25
.LBB336_12:                             # %if.end29
                                        #   in Loop: Header=BB336_1 Depth=1
	jmp	.LBB336_13
.LBB336_13:                             # %if.end30
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB336_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB336_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB336_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB336_23
.LBB336_17:                             # %if.else
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB336_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB336_22
.LBB336_19:                             # %if.else57
                                        #   in Loop: Header=BB336_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB336_21
# %bb.20:                               # %if.then61
	jmp	.LBB336_25
.LBB336_21:                             # %if.end62
                                        #   in Loop: Header=BB336_1 Depth=1
	jmp	.LBB336_22
.LBB336_22:                             # %if.end63
                                        #   in Loop: Header=BB336_1 Depth=1
	jmp	.LBB336_23
.LBB336_23:                             # %if.end64
                                        #   in Loop: Header=BB336_1 Depth=1
	jmp	.LBB336_24
.LBB336_24:                             # %if.end65
                                        #   in Loop: Header=BB336_1 Depth=1
	jmp	.LBB336_1
.LBB336_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB336_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB336_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1092197959, -28(%rbp)  # imm = 0x41199E47
	jne	.LBB336_29
.LBB336_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB336_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB336_28
.Lfunc_end336:
	.size	handle_compress.296, .Lfunc_end336-handle_compress.296
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.297
	.type	handle_compress.297,@function
handle_compress.297:                    # @handle_compress.297
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1331503264, -28(%rbp)  # imm = 0x4F5D20A0
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB337_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB337_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB337_4
# %bb.3:                                # %if.then6
	jmp	.LBB337_25
.LBB337_4:                              # %if.end
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB337_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB337_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB337_8
# %bb.7:                                # %if.then14
	jmp	.LBB337_25
.LBB337_8:                              # %if.end15
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB337_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB337_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB337_12
# %bb.11:                               # %if.then28
	jmp	.LBB337_25
.LBB337_12:                             # %if.end29
                                        #   in Loop: Header=BB337_1 Depth=1
	jmp	.LBB337_13
.LBB337_13:                             # %if.end30
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB337_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB337_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB337_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB337_23
.LBB337_17:                             # %if.else
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB337_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB337_22
.LBB337_19:                             # %if.else57
                                        #   in Loop: Header=BB337_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB337_21
# %bb.20:                               # %if.then61
	jmp	.LBB337_25
.LBB337_21:                             # %if.end62
                                        #   in Loop: Header=BB337_1 Depth=1
	jmp	.LBB337_22
.LBB337_22:                             # %if.end63
                                        #   in Loop: Header=BB337_1 Depth=1
	jmp	.LBB337_23
.LBB337_23:                             # %if.end64
                                        #   in Loop: Header=BB337_1 Depth=1
	jmp	.LBB337_24
.LBB337_24:                             # %if.end65
                                        #   in Loop: Header=BB337_1 Depth=1
	jmp	.LBB337_1
.LBB337_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB337_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB337_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1331503264, -28(%rbp)  # imm = 0x4F5D20A0
	jne	.LBB337_29
.LBB337_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB337_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB337_28
.Lfunc_end337:
	.size	handle_compress.297, .Lfunc_end337-handle_compress.297
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.298          # -- Begin function BZ2_bzRead.298
	.p2align	4, 0x90
	.type	BZ2_bzRead.298,@function
BZ2_bzRead.298:                         # @BZ2_bzRead.298
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$670177436, -40(%rbp)   # imm = 0x27F2189C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB338_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB338_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB338_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB338_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB338_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB338_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB338_12
.LBB338_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB338_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB338_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB338_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB338_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB338_69
.LBB338_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB338_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB338_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB338_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB338_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB338_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB338_69
.LBB338_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB338_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB338_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB338_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB338_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB338_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB338_69
.LBB338_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB338_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB338_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB338_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB338_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB338_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB338_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB338_69
.LBB338_31:                             # %if.end46
                                        #   in Loop: Header=BB338_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB338_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB338_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB338_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB338_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB338_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB338_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB338_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB338_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB338_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB338_69
.LBB338_39:                             # %if.end69
                                        #   in Loop: Header=BB338_25 Depth=1
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB338_40:                             # %if.end76
                                        #   in Loop: Header=BB338_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB338_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB338_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB338_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB338_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB338_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB338_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB338_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB338_69
.LBB338_47:                             # %if.end94
                                        #   in Loop: Header=BB338_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB338_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB338_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB338_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB338_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB338_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB338_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB338_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB338_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB338_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB338_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB338_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB338_69
.LBB338_56:                             # %if.end122
                                        #   in Loop: Header=BB338_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB338_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB338_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB338_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB338_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB338_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB338_69
.LBB338_62:                             # %if.end137
                                        #   in Loop: Header=BB338_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB338_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB338_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB338_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB338_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB338_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB338_69
.LBB338_68:                             # %if.end152
                                        #   in Loop: Header=BB338_25 Depth=1
	jmp	.LBB338_25
.LBB338_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$670177436, -40(%rbp)   # imm = 0x27F2189C
	jne	.LBB338_71
.LBB338_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB338_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB338_70
.Lfunc_end338:
	.size	BZ2_bzRead.298, .Lfunc_end338-BZ2_bzRead.298
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.299 # -- Begin function BZ2_bzDecompressInit.299
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.299,@function
BZ2_bzDecompressInit.299:               # @BZ2_bzDecompressInit.299
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$594369265, -40(%rbp)   # imm = 0x236D5AF1
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB339_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB339_17
.LBB339_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	jne	.LBB339_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB339_17
.LBB339_4:                              # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB339_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB339_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB339_17
.LBB339_7:                              # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB339_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB339_10
.LBB339_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB339_17
.LBB339_10:                             # %if.end10
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB339_12
# %bb.11:                               # %if.then12
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB339_12:                             # %if.end14
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB339_14
# %bb.13:                               # %if.then16
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB339_14:                             # %if.end18
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB339_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB339_17
.LBB339_16:                             # %if.end23
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB339_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$594369265, -40(%rbp)   # imm = 0x236D5AF1
	jne	.LBB339_19
.LBB339_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB339_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB339_18
.Lfunc_end339:
	.size	BZ2_bzDecompressInit.299, .Lfunc_end339-BZ2_bzDecompressInit.299
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.300  # -- Begin function BZ2_bzCompressInit.300
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.300,@function
BZ2_bzCompressInit.300:                 # @BZ2_bzCompressInit.300
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1410956182, -48(%rbp)  # imm = 0x54197B96
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB340_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB340_29
.LBB340_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB340_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -32(%rbp)
	jl	.LBB340_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -32(%rbp)
	jg	.LBB340_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -36(%rbp)
	jl	.LBB340_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -36(%rbp)
	jle	.LBB340_8
.LBB340_7:                              # %if.then8
	movl	$-2, -28(%rbp)
	jmp	.LBB340_29
.LBB340_8:                              # %if.end9
	cmpl	$0, -36(%rbp)
	jne	.LBB340_10
# %bb.9:                                # %if.then11
	movl	$30, -36(%rbp)
.LBB340_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB340_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB340_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB340_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB340_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB340_16
# %bb.15:                               # %if.then24
	movl	$-3, -28(%rbp)
	jmp	.LBB340_29
.LBB340_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -32(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB340_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB340_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB340_28
.LBB340_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB340_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB340_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB340_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB340_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB340_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB340_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB340_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB340_27:                             # %if.end85
	movl	$-3, -28(%rbp)
	jmp	.LBB340_29
.LBB340_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -32(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -28(%rbp)
.LBB340_29:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1410956182, -48(%rbp)  # imm = 0x54197B96
	jne	.LBB340_31
.LBB340_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB340_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB340_30
.Lfunc_end340:
	.size	BZ2_bzCompressInit.300, .Lfunc_end340-BZ2_bzCompressInit.300
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.301 # -- Begin function BZ2_bzReadGetUnused.301
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.301,@function
BZ2_bzReadGetUnused.301:                # @BZ2_bzReadGetUnused.301
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$428342455, -20(%rbp)   # imm = 0x1987FCB7
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB341_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB341_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB341_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB341_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB341_5:                              # %if.end5
	jmp	.LBB341_24
.LBB341_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB341_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB341_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB341_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB341_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB341_11:                             # %if.end16
	jmp	.LBB341_24
.LBB341_12:                             # %if.end17
	cmpq	$0, -32(%rbp)
	je	.LBB341_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -40(%rbp)
	jne	.LBB341_19
.LBB341_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB341_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB341_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB341_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB341_18:                             # %if.end27
	jmp	.LBB341_24
.LBB341_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB341_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB341_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB341_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB341_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB341_24:                             # %return
	cmpl	$428342455, -20(%rbp)   # imm = 0x1987FCB7
	jne	.LBB341_26
.LBB341_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB341_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB341_25
.Lfunc_end341:
	.size	BZ2_bzReadGetUnused.301, .Lfunc_end341-BZ2_bzReadGetUnused.301
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.302      # -- Begin function BZ2_bzCompress.302
	.p2align	4, 0x90
	.type	BZ2_bzCompress.302,@function
BZ2_bzCompress.302:                     # @BZ2_bzCompress.302
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1859647453, -44(%rbp)  # imm = 0x6ED7F7DD
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB342_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB342_39
.LBB342_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB342_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB342_39
.LBB342_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB342_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB342_39
.LBB342_6:                              # %if.end7
	jmp	.LBB342_7
.LBB342_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB342_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB342_7 Depth=1
	movq	.LJTI342_0(,%rax,8), %rax
	jmpq	*%rax
.LBB342_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB342_39
.LBB342_10:                             # %sw.bb8
                                        #   in Loop: Header=BB342_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB342_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB342_39
.LBB342_12:                             # %if.else
                                        #   in Loop: Header=BB342_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB342_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB342_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB342_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB342_7 Depth=1
	jmp	.LBB342_7
.LBB342_15:                             # %if.else15
                                        #   in Loop: Header=BB342_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB342_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB342_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB342_14
.LBB342_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB342_39
.LBB342_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB342_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB342_39
.LBB342_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB342_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB342_39
.LBB342_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB342_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB342_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB342_26
.LBB342_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB342_39
.LBB342_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB342_39
.LBB342_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB342_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB342_39
.LBB342_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB342_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB342_39
.LBB342_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB342_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB342_39
.LBB342_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB342_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB342_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB342_37
.LBB342_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB342_39
.LBB342_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB342_39
.LBB342_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB342_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1859647453, -44(%rbp)  # imm = 0x6ED7F7DD
	jne	.LBB342_41
.LBB342_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB342_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB342_40
.Lfunc_end342:
	.size	BZ2_bzCompress.302, .Lfunc_end342-BZ2_bzCompress.302
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI342_0:
	.quad	.LBB342_9
	.quad	.LBB342_10
	.quad	.LBB342_18
	.quad	.LBB342_27
                                        # -- End function
	.text
	.globl	BZ2_bzWriteOpen.303     # -- Begin function BZ2_bzWriteOpen.303
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.303,@function
BZ2_bzWriteOpen.303:                    # @BZ2_bzWriteOpen.303
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1487208104, -60(%rbp)  # imm = 0x58A4FEA8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB343_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB343_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB343_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB343_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB343_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -32(%rbp)
	jl	.LBB343_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -32(%rbp)
	jg	.LBB343_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB343_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB343_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -36(%rbp)
	jl	.LBB343_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -36(%rbp)
	jle	.LBB343_16
.LBB343_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB343_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB343_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB343_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB343_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB343_41
.LBB343_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB343_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB343_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB343_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB343_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB343_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB343_41
.LBB343_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB343_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB343_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB343_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB343_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB343_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB343_41
.LBB343_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB343_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB343_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB343_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB343_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB343_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB343_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB343_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB343_37
# %bb.36:                               # %if.then62
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB343_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB343_39
# %bb.38:                               # %if.then65
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB343_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB343_41
.LBB343_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB343_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1487208104, -60(%rbp)  # imm = 0x58A4FEA8
	jne	.LBB343_43
.LBB343_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB343_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB343_42
.Lfunc_end343:
	.size	BZ2_bzWriteOpen.303, .Lfunc_end343-BZ2_bzWriteOpen.303
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.304      # -- Begin function BZ2_indexIntoF.304
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.304,@function
BZ2_indexIntoF.304:                     # @BZ2_indexIntoF.304
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$396057433, -28(%rbp)   # imm = 0x179B5B59
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -20(%rbp)         # imm = 0x100
.LBB344_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB344_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB344_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB344_4
.LBB344_3:                              # %if.else
                                        #   in Loop: Header=BB344_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB344_4:                              # %if.end
                                        #   in Loop: Header=BB344_1 Depth=1
	jmp	.LBB344_5
.LBB344_5:                              # %do.cond
                                        #   in Loop: Header=BB344_1 Depth=1
	movl	-20(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB344_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$396057433, -28(%rbp)   # imm = 0x179B5B59
	jne	.LBB344_8
.LBB344_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB344_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB344_7
.Lfunc_end344:
	.size	BZ2_indexIntoF.304, .Lfunc_end344-BZ2_indexIntoF.304
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.305
	.type	bzopen_or_bzdopen.305,@function
bzopen_or_bzdopen.305:                  # @bzopen_or_bzdopen.305
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$221477868, -76(%rbp)   # imm = 0xD337BEC
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -80(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -88(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -68(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB345_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB345_39
.LBB345_2:                              # %if.end
	jmp	.LBB345_3
.LBB345_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB345_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB345_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB345_7
	jmp	.LBB345_5
.LBB345_5:                              # %while.body
                                        #   in Loop: Header=BB345_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB345_9
	jmp	.LBB345_6
.LBB345_6:                              # %while.body
                                        #   in Loop: Header=BB345_3 Depth=1
	subl	$119, %eax
	je	.LBB345_8
	jmp	.LBB345_10
.LBB345_7:                              # %sw.bb
                                        #   in Loop: Header=BB345_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB345_13
.LBB345_8:                              # %sw.bb1
                                        #   in Loop: Header=BB345_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB345_13
.LBB345_9:                              # %sw.bb2
                                        #   in Loop: Header=BB345_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB345_13
.LBB345_10:                             # %sw.default
                                        #   in Loop: Header=BB345_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB345_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB345_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB345_12:                             # %if.end8
                                        #   in Loop: Header=BB345_3 Depth=1
	jmp	.LBB345_13
.LBB345_13:                             # %sw.epilog
                                        #   in Loop: Header=BB345_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB345_3
.LBB345_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -80(%rbp)
	jne	.LBB345_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB345_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB345_21
.LBB345_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB345_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB345_20
.LBB345_19:                             # %cond.false
	movq	stdin, %rax
.LBB345_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB345_22
.LBB345_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB345_22:                             # %if.end26
	jmp	.LBB345_24
.LBB345_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-72(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB345_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB345_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB345_39
.LBB345_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB345_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB345_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB345_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB345_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB345_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-88(%rbp), %r8d
	leaq	-84(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB345_33
.LBB345_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-68(%rbp), %r9d
	leaq	-84(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB345_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB345_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB345_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB345_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB345_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB345_39
.LBB345_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB345_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$221477868, -76(%rbp)   # imm = 0xD337BEC
	jne	.LBB345_41
.LBB345_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB345_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB345_40
.Lfunc_end345:
	.size	bzopen_or_bzdopen.305, .Lfunc_end345-bzopen_or_bzdopen.305
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.306
	.type	unRLE_obuf_to_output_FAST.306,@function
unRLE_obuf_to_output_FAST.306:          # @unRLE_obuf_to_output_FAST.306
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$2048508226, -92(%rbp)  # imm = 0x7A19C142
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB346_48
# %bb.1:                                # %if.then
	jmp	.LBB346_2
.LBB346_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB346_3 Depth 2
	jmp	.LBB346_3
.LBB346_3:                              # %while.body2
                                        #   Parent Loop BB346_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB346_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB346_82
.LBB346_5:                              # %if.end
                                        #   in Loop: Header=BB346_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB346_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_10
.LBB346_7:                              # %if.end6
                                        #   in Loop: Header=BB346_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB346_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB346_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB346_9:                              # %if.end26
                                        #   in Loop: Header=BB346_3 Depth=2
	jmp	.LBB346_3
.LBB346_10:                             # %while.end
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB346_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB346_82
.LBB346_12:                             # %if.end30
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB346_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB346_82
.LBB346_14:                             # %if.end37
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB346_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB346_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB346_17:                             # %if.end61
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_18
.LBB346_18:                             # %if.end62
                                        #   in Loop: Header=BB346_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB346_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_20
.LBB346_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_2
.LBB346_21:                             # %if.end79
                                        #   in Loop: Header=BB346_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB346_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB346_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB346_20
.LBB346_23:                             # %if.end87
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB346_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB346_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB346_26:                             # %if.end114
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_27
.LBB346_27:                             # %if.end115
                                        #   in Loop: Header=BB346_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB346_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_20
.LBB346_29:                             # %if.end133
                                        #   in Loop: Header=BB346_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB346_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB346_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB346_20
.LBB346_31:                             # %if.end141
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB346_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB346_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB346_34:                             # %if.end168
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_35
.LBB346_35:                             # %if.end169
                                        #   in Loop: Header=BB346_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB346_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_20
.LBB346_37:                             # %if.end187
                                        #   in Loop: Header=BB346_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB346_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB346_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB346_20
.LBB346_39:                             # %if.end195
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB346_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB346_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB346_42:                             # %if.end221
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_43
.LBB346_43:                             # %if.end222
                                        #   in Loop: Header=BB346_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB346_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB346_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB346_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB346_46:                             # %if.end264
                                        #   in Loop: Header=BB346_2 Depth=1
	jmp	.LBB346_47
.LBB346_47:                             # %if.end265
                                        #   in Loop: Header=BB346_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB346_20
.LBB346_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB346_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB346_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB346_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB346_49 Depth=1
	jmp	.LBB346_51
.LBB346_51:                             # %while.body294
                                        #   Parent Loop BB346_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB346_53
# %bb.52:                               # %if.then297
	jmp	.LBB346_78
.LBB346_53:                             # %if.end298
                                        #   in Loop: Header=BB346_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB346_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB346_49 Depth=1
	jmp	.LBB346_56
.LBB346_55:                             # %if.end302
                                        #   in Loop: Header=BB346_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB346_51
.LBB346_56:                             # %while.end313
                                        #   in Loop: Header=BB346_49 Depth=1
	jmp	.LBB346_57
.LBB346_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB346_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB346_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB346_78
.LBB346_59:                             # %if.end317
                                        #   in Loop: Header=BB346_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB346_60:                             # %if.end327
                                        #   in Loop: Header=BB346_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB346_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB346_82
.LBB346_62:                             # %if.end331
                                        #   in Loop: Header=BB346_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB346_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB346_78
.LBB346_64:                             # %if.end335
                                        #   in Loop: Header=BB346_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB346_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB346_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB346_57
.LBB346_66:                             # %if.end348
                                        #   in Loop: Header=BB346_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB346_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB346_49 Depth=1
	jmp	.LBB346_57
.LBB346_68:                             # %if.end352
                                        #   in Loop: Header=BB346_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB346_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB346_49 Depth=1
	jmp	.LBB346_70
.LBB346_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB346_49 Depth=1
	jmp	.LBB346_49
.LBB346_71:                             # %if.end362
                                        #   in Loop: Header=BB346_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB346_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB346_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB346_70
.LBB346_73:                             # %if.end368
                                        #   in Loop: Header=BB346_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB346_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB346_49 Depth=1
	jmp	.LBB346_70
.LBB346_75:                             # %if.end378
                                        #   in Loop: Header=BB346_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB346_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB346_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB346_70
.LBB346_77:                             # %if.end384
                                        #   in Loop: Header=BB346_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB346_70
.LBB346_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -84(%rbp)
	movl	-88(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-84(%rbp), %eax
	jae	.LBB346_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB346_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB346_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$2048508226, -92(%rbp)  # imm = 0x7A19C142
	jne	.LBB346_84
.LBB346_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB346_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB346_83
.Lfunc_end346:
	.size	unRLE_obuf_to_output_FAST.306, .Lfunc_end346-unRLE_obuf_to_output_FAST.306
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.307     # -- Begin function BZ2_bzWriteOpen.307
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.307,@function
BZ2_bzWriteOpen.307:                    # @BZ2_bzWriteOpen.307
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$135947293, -60(%rbp)   # imm = 0x81A641D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB347_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB347_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB347_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB347_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB347_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB347_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -36(%rbp)
	jg	.LBB347_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB347_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB347_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -40(%rbp)
	jl	.LBB347_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -40(%rbp)
	jle	.LBB347_16
.LBB347_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB347_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB347_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB347_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB347_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB347_41
.LBB347_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB347_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB347_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB347_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB347_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB347_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB347_41
.LBB347_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB347_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB347_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB347_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB347_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB347_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB347_41
.LBB347_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB347_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB347_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB347_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB347_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB347_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB347_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB347_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB347_37
# %bb.36:                               # %if.then62
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB347_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB347_39
# %bb.38:                               # %if.then65
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB347_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB347_41
.LBB347_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB347_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$135947293, -60(%rbp)   # imm = 0x81A641D
	jne	.LBB347_43
.LBB347_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB347_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB347_42
.Lfunc_end347:
	.size	BZ2_bzWriteOpen.307, .Lfunc_end347-BZ2_bzWriteOpen.307
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.308
	.type	unRLE_obuf_to_output_FAST.308,@function
unRLE_obuf_to_output_FAST.308:          # @unRLE_obuf_to_output_FAST.308
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$2096009656, -84(%rbp)  # imm = 0x7CEE91B8
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB348_48
# %bb.1:                                # %if.then
	jmp	.LBB348_2
.LBB348_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB348_3 Depth 2
	jmp	.LBB348_3
.LBB348_3:                              # %while.body2
                                        #   Parent Loop BB348_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB348_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB348_82
.LBB348_5:                              # %if.end
                                        #   in Loop: Header=BB348_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB348_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_10
.LBB348_7:                              # %if.end6
                                        #   in Loop: Header=BB348_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB348_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB348_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB348_9:                              # %if.end26
                                        #   in Loop: Header=BB348_3 Depth=2
	jmp	.LBB348_3
.LBB348_10:                             # %while.end
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB348_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB348_82
.LBB348_12:                             # %if.end30
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB348_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB348_82
.LBB348_14:                             # %if.end37
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB348_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB348_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB348_17:                             # %if.end61
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_18
.LBB348_18:                             # %if.end62
                                        #   in Loop: Header=BB348_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB348_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_20
.LBB348_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_2
.LBB348_21:                             # %if.end79
                                        #   in Loop: Header=BB348_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB348_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB348_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB348_20
.LBB348_23:                             # %if.end87
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB348_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB348_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB348_26:                             # %if.end114
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_27
.LBB348_27:                             # %if.end115
                                        #   in Loop: Header=BB348_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB348_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_20
.LBB348_29:                             # %if.end133
                                        #   in Loop: Header=BB348_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB348_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB348_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB348_20
.LBB348_31:                             # %if.end141
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB348_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB348_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB348_34:                             # %if.end168
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_35
.LBB348_35:                             # %if.end169
                                        #   in Loop: Header=BB348_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB348_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_20
.LBB348_37:                             # %if.end187
                                        #   in Loop: Header=BB348_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB348_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB348_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB348_20
.LBB348_39:                             # %if.end195
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB348_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB348_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB348_42:                             # %if.end221
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_43
.LBB348_43:                             # %if.end222
                                        #   in Loop: Header=BB348_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB348_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB348_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB348_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB348_46:                             # %if.end264
                                        #   in Loop: Header=BB348_2 Depth=1
	jmp	.LBB348_47
.LBB348_47:                             # %if.end265
                                        #   in Loop: Header=BB348_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB348_20
.LBB348_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB348_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB348_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB348_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB348_49 Depth=1
	jmp	.LBB348_51
.LBB348_51:                             # %while.body294
                                        #   Parent Loop BB348_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB348_53
# %bb.52:                               # %if.then297
	jmp	.LBB348_78
.LBB348_53:                             # %if.end298
                                        #   in Loop: Header=BB348_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB348_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB348_49 Depth=1
	jmp	.LBB348_56
.LBB348_55:                             # %if.end302
                                        #   in Loop: Header=BB348_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB348_51
.LBB348_56:                             # %while.end313
                                        #   in Loop: Header=BB348_49 Depth=1
	jmp	.LBB348_57
.LBB348_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB348_49 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB348_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB348_78
.LBB348_59:                             # %if.end317
                                        #   in Loop: Header=BB348_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
.LBB348_60:                             # %if.end327
                                        #   in Loop: Header=BB348_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB348_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB348_82
.LBB348_62:                             # %if.end331
                                        #   in Loop: Header=BB348_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB348_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB348_78
.LBB348_64:                             # %if.end335
                                        #   in Loop: Header=BB348_49 Depth=1
	movl	-48(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB348_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB348_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB348_57
.LBB348_66:                             # %if.end348
                                        #   in Loop: Header=BB348_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB348_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB348_49 Depth=1
	jmp	.LBB348_57
.LBB348_68:                             # %if.end352
                                        #   in Loop: Header=BB348_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB348_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB348_49 Depth=1
	jmp	.LBB348_70
.LBB348_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB348_49 Depth=1
	jmp	.LBB348_49
.LBB348_71:                             # %if.end362
                                        #   in Loop: Header=BB348_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB348_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB348_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB348_70
.LBB348_73:                             # %if.end368
                                        #   in Loop: Header=BB348_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB348_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB348_49 Depth=1
	jmp	.LBB348_70
.LBB348_75:                             # %if.end378
                                        #   in Loop: Header=BB348_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB348_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB348_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB348_70
.LBB348_77:                             # %if.end384
                                        #   in Loop: Header=BB348_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB348_70
.LBB348_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %eax
	subl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-92(%rbp), %eax
	jae	.LBB348_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB348_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB348_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$2096009656, -84(%rbp)  # imm = 0x7CEE91B8
	jne	.LBB348_84
.LBB348_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB348_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB348_83
.Lfunc_end348:
	.size	unRLE_obuf_to_output_FAST.308, .Lfunc_end348-unRLE_obuf_to_output_FAST.308
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.309    # -- Begin function BZ2_bzDecompress.309
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.309,@function
BZ2_bzDecompress.309:                   # @BZ2_bzDecompress.309
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1241587495, -44(%rbp)  # imm = 0x4A011F27
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB349_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB349_37
.LBB349_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB349_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB349_37
.LBB349_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB349_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB349_37
.LBB349_6:                              # %if.end7
	jmp	.LBB349_7
.LBB349_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB349_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB349_37
.LBB349_9:                              # %if.end11
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB349_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB349_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB349_13
.LBB349_12:                             # %if.else
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB349_13:                             # %if.end17
                                        #   in Loop: Header=BB349_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB349_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB349_37
.LBB349_15:                             # %if.end20
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB349_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB349_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB349_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB349_19:                             # %if.end29
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB349_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB349_21:                             # %if.end34
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB349_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB349_37
.LBB349_23:                             # %if.end39
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB349_25
.LBB349_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB349_37
.LBB349_25:                             # %if.end46
                                        #   in Loop: Header=BB349_7 Depth=1
	jmp	.LBB349_26
.LBB349_26:                             # %if.end47
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB349_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB349_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB349_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB349_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB349_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB349_37
.LBB349_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB349_37
.LBB349_33:                             # %if.end65
                                        #   in Loop: Header=BB349_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB349_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB349_37
.LBB349_35:                             # %if.end69
                                        #   in Loop: Header=BB349_7 Depth=1
	jmp	.LBB349_36
.LBB349_36:                             # %if.end70
                                        #   in Loop: Header=BB349_7 Depth=1
	jmp	.LBB349_7
.LBB349_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1241587495, -44(%rbp)  # imm = 0x4A011F27
	jne	.LBB349_39
.LBB349_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB349_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB349_38
.Lfunc_end349:
	.size	BZ2_bzDecompress.309, .Lfunc_end349-BZ2_bzDecompress.309
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.310    # -- Begin function BZ2_bzWriteClose.310
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.310,@function
BZ2_bzWriteClose.310:                   # @BZ2_bzWriteClose.310
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$39157539, -4(%rbp)     # imm = 0x2557F23
	movq	%rdi, -40(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -24(%rbp)
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$39157539, -4(%rbp)     # imm = 0x2557F23
	jne	.LBB350_2
.LBB350_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB350_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB350_1
.Lfunc_end350:
	.size	BZ2_bzWriteClose.310, .Lfunc_end350-BZ2_bzWriteClose.310
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.311 # -- Begin function BZ2_bzBuffToBuffDecompress.311
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.311,@function
BZ2_bzBuffToBuffDecompress.311:         # @BZ2_bzBuffToBuffDecompress.311
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1795912771, -40(%rbp)  # imm = 0x6B0B7443
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB351_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB351_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB351_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB351_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB351_7
.LBB351_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB351_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB351_8
.LBB351_7:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB351_19
.LBB351_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB351_10
# %bb.9:                                # %if.then12
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB351_19
.LBB351_10:                             # %if.end13
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB351_12
# %bb.11:                               # %if.then16
	jmp	.LBB351_15
.LBB351_12:                             # %if.end17
	cmpl	$4, -12(%rbp)
	je	.LBB351_14
# %bb.13:                               # %if.then19
	jmp	.LBB351_18
.LBB351_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB351_19
.LBB351_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB351_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -16(%rbp)
	jmp	.LBB351_19
.LBB351_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB351_19
.LBB351_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB351_19:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1795912771, -40(%rbp)  # imm = 0x6B0B7443
	jne	.LBB351_21
.LBB351_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB351_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB351_20
.Lfunc_end351:
	.size	BZ2_bzBuffToBuffDecompress.311, .Lfunc_end351-BZ2_bzBuffToBuffDecompress.311
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.312      # -- Begin function BZ2_indexIntoF.312
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.312,@function
BZ2_indexIntoF.312:                     # @BZ2_indexIntoF.312
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$145074885, -28(%rbp)   # imm = 0x8A5AAC5
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -20(%rbp)         # imm = 0x100
.LBB352_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB352_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB352_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB352_4
.LBB352_3:                              # %if.else
                                        #   in Loop: Header=BB352_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB352_4:                              # %if.end
                                        #   in Loop: Header=BB352_1 Depth=1
	jmp	.LBB352_5
.LBB352_5:                              # %do.cond
                                        #   in Loop: Header=BB352_1 Depth=1
	movl	-20(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB352_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$145074885, -28(%rbp)   # imm = 0x8A5AAC5
	jne	.LBB352_8
.LBB352_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB352_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB352_7
.Lfunc_end352:
	.size	BZ2_indexIntoF.312, .Lfunc_end352-BZ2_indexIntoF.312
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.313
	.type	default_bzalloc.313,@function
default_bzalloc.313:                    # @default_bzalloc.313
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$826024457, -16(%rbp)   # imm = 0x313C2209
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	-12(%rbp), %eax
	imull	-20(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$826024457, -16(%rbp)   # imm = 0x313C2209
	jne	.LBB353_2
.LBB353_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB353_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB353_1
.Lfunc_end353:
	.size	default_bzalloc.313, .Lfunc_end353-default_bzalloc.313
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.314    # -- Begin function BZ2_bzWriteClose.314
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.314,@function
BZ2_bzWriteClose.314:                   # @BZ2_bzWriteClose.314
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1002649068, -4(%rbp)   # imm = 0x3BC335EC
	movq	%rdi, -40(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -8(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%r8, -32(%rbp)
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1002649068, -4(%rbp)   # imm = 0x3BC335EC
	jne	.LBB354_2
.LBB354_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB354_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB354_1
.Lfunc_end354:
	.size	BZ2_bzWriteClose.314, .Lfunc_end354-BZ2_bzWriteClose.314
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompressInit.315 # -- Begin function BZ2_bzDecompressInit.315
	.p2align	4, 0x90
	.type	BZ2_bzDecompressInit.315,@function
BZ2_bzDecompressInit.315:               # @BZ2_bzDecompressInit.315
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$790992329, -40(%rbp)   # imm = 0x2F2595C9
	movq	%rdi, -16(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB355_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB355_17
.LBB355_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	jne	.LBB355_4
# %bb.3:                                # %if.then1
	movl	$-2, -28(%rbp)
	jmp	.LBB355_17
.LBB355_4:                              # %if.end2
	cmpl	$0, -36(%rbp)
	je	.LBB355_7
# %bb.5:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	je	.LBB355_7
# %bb.6:                                # %if.then5
	movl	$-2, -28(%rbp)
	jmp	.LBB355_17
.LBB355_7:                              # %if.end6
	cmpl	$0, -32(%rbp)
	jl	.LBB355_9
# %bb.8:                                # %lor.lhs.false
	cmpl	$4, -32(%rbp)
	jle	.LBB355_10
.LBB355_9:                              # %if.then9
	movl	$-2, -28(%rbp)
	jmp	.LBB355_17
.LBB355_10:                             # %if.end10
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB355_12
# %bb.11:                               # %if.then12
	movq	-16(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB355_12:                             # %if.end14
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB355_14
# %bb.13:                               # %if.then16
	movq	-16(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB355_14:                             # %if.end18
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$64144, %esi            # imm = 0xFA90
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB355_16
# %bb.15:                               # %if.then22
	movl	$-3, -28(%rbp)
	jmp	.LBB355_17
.LBB355_16:                             # %if.end23
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$10, 8(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 3188(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 40(%rax)
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 44(%rcx)
	movq	-24(%rbp), %rax
	movq	$0, 3168(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 3160(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 3152(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 48(%rax)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movl	$0, -28(%rbp)
.LBB355_17:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$790992329, -40(%rbp)   # imm = 0x2F2595C9
	jne	.LBB355_19
.LBB355_18:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB355_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB355_18
.Lfunc_end355:
	.size	BZ2_bzDecompressInit.315, .Lfunc_end355-BZ2_bzDecompressInit.315
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.316 # -- Begin function BZ2_bzReadGetUnused.316
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.316,@function
BZ2_bzReadGetUnused.316:                # @BZ2_bzReadGetUnused.316
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$554748552, -20(%rbp)   # imm = 0x2110CA88
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB356_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB356_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB356_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB356_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB356_5:                              # %if.end5
	jmp	.LBB356_24
.LBB356_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB356_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB356_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB356_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB356_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB356_11:                             # %if.end16
	jmp	.LBB356_24
.LBB356_12:                             # %if.end17
	cmpq	$0, -40(%rbp)
	je	.LBB356_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB356_19
.LBB356_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB356_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB356_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB356_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB356_18:                             # %if.end27
	jmp	.LBB356_24
.LBB356_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB356_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB356_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB356_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB356_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB356_24:                             # %return
	cmpl	$554748552, -20(%rbp)   # imm = 0x2110CA88
	jne	.LBB356_26
.LBB356_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB356_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB356_25
.Lfunc_end356:
	.size	BZ2_bzReadGetUnused.316, .Lfunc_end356-BZ2_bzReadGetUnused.316
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.317 # -- Begin function BZ2_bzReadGetUnused.317
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.317,@function
BZ2_bzReadGetUnused.317:                # @BZ2_bzReadGetUnused.317
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1990328177, -20(%rbp)  # imm = 0x76A1FF71
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB357_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB357_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB357_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB357_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB357_5:                              # %if.end5
	jmp	.LBB357_24
.LBB357_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB357_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB357_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB357_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB357_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB357_11:                             # %if.end16
	jmp	.LBB357_24
.LBB357_12:                             # %if.end17
	cmpq	$0, -32(%rbp)
	je	.LBB357_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -40(%rbp)
	jne	.LBB357_19
.LBB357_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB357_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB357_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB357_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB357_18:                             # %if.end27
	jmp	.LBB357_24
.LBB357_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB357_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB357_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB357_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB357_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB357_24:                             # %return
	cmpl	$1990328177, -20(%rbp)  # imm = 0x76A1FF71
	jne	.LBB357_26
.LBB357_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB357_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB357_25
.Lfunc_end357:
	.size	BZ2_bzReadGetUnused.317, .Lfunc_end357-BZ2_bzReadGetUnused.317
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.318  # -- Begin function BZ2_bzCompressInit.318
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.318,@function
BZ2_bzCompressInit.318:                 # @BZ2_bzCompressInit.318
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1782029488, -44(%rbp)  # imm = 0x6A379CB0
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB358_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB358_29
.LBB358_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB358_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB358_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -36(%rbp)
	jg	.LBB358_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -32(%rbp)
	jl	.LBB358_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -32(%rbp)
	jle	.LBB358_8
.LBB358_7:                              # %if.then8
	movl	$-2, -28(%rbp)
	jmp	.LBB358_29
.LBB358_8:                              # %if.end9
	cmpl	$0, -32(%rbp)
	jne	.LBB358_10
# %bb.9:                                # %if.then11
	movl	$30, -32(%rbp)
.LBB358_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB358_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB358_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB358_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB358_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB358_16
# %bb.15:                               # %if.then24
	movl	$-3, -28(%rbp)
	jmp	.LBB358_29
.LBB358_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB358_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB358_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB358_28
.LBB358_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB358_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB358_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB358_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB358_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB358_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB358_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB358_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB358_27:                             # %if.end85
	movl	$-3, -28(%rbp)
	jmp	.LBB358_29
.LBB358_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -28(%rbp)
.LBB358_29:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1782029488, -44(%rbp)  # imm = 0x6A379CB0
	jne	.LBB358_31
.LBB358_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB358_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB358_30
.Lfunc_end358:
	.size	BZ2_bzCompressInit.318, .Lfunc_end358-BZ2_bzCompressInit.318
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.319      # -- Begin function BZ2_indexIntoF.319
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.319,@function
BZ2_indexIntoF.319:                     # @BZ2_indexIntoF.319
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1052466705, -28(%rbp)  # imm = 0x3EBB5E11
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -16(%rbp)         # imm = 0x100
.LBB359_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB359_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB359_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB359_4
.LBB359_3:                              # %if.else
                                        #   in Loop: Header=BB359_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB359_4:                              # %if.end
                                        #   in Loop: Header=BB359_1 Depth=1
	jmp	.LBB359_5
.LBB359_5:                              # %do.cond
                                        #   in Loop: Header=BB359_1 Depth=1
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB359_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1052466705, -28(%rbp)  # imm = 0x3EBB5E11
	jne	.LBB359_8
.LBB359_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB359_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB359_7
.Lfunc_end359:
	.size	BZ2_indexIntoF.319, .Lfunc_end359-BZ2_indexIntoF.319
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_indexIntoF.320      # -- Begin function BZ2_indexIntoF.320
	.p2align	4, 0x90
	.type	BZ2_indexIntoF.320,@function
BZ2_indexIntoF.320:                     # @BZ2_indexIntoF.320
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1901480975, -28(%rbp)  # imm = 0x71564C0F
	movl	%edi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$256, -20(%rbp)         # imm = 0x100
.LBB360_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jl	.LBB360_3
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB360_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB360_4
.LBB360_3:                              # %if.else
                                        #   in Loop: Header=BB360_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB360_4:                              # %if.end
                                        #   in Loop: Header=BB360_1 Depth=1
	jmp	.LBB360_5
.LBB360_5:                              # %do.cond
                                        #   in Loop: Header=BB360_1 Depth=1
	movl	-20(%rbp), %eax
	subl	-12(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB360_1
# %bb.6:                                # %do.end
	movl	-12(%rbp), %ebx
	cmpl	$1901480975, -28(%rbp)  # imm = 0x71564C0F
	jne	.LBB360_8
.LBB360_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB360_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB360_7
.Lfunc_end360:
	.size	BZ2_indexIntoF.320, .Lfunc_end360-BZ2_indexIntoF.320
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.321
	.type	copy_input_until_stop.321,@function
copy_input_until_stop.321:              # @copy_input_until_stop.321
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1788888461, -32(%rbp)  # imm = 0x6AA0458D
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB361_20
# %bb.1:                                # %if.then
	jmp	.LBB361_2
.LBB361_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB361_4
# %bb.3:                                # %if.then2
	jmp	.LBB361_19
.LBB361_4:                              # %if.end
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB361_6
# %bb.5:                                # %if.then4
	jmp	.LBB361_19
.LBB361_6:                              # %if.end5
                                        #   in Loop: Header=BB361_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB361_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB361_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB361_16
.LBB361_9:                              # %if.else
                                        #   in Loop: Header=BB361_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB361_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB361_14
.LBB361_11:                             # %if.then32
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB361_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB361_13:                             # %if.end37
                                        #   in Loop: Header=BB361_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB361_15
.LBB361_14:                             # %if.else40
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB361_15:                             # %if.end43
                                        #   in Loop: Header=BB361_2 Depth=1
	jmp	.LBB361_16
.LBB361_16:                             # %if.end44
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB361_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB361_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB361_18:                             # %if.end58
                                        #   in Loop: Header=BB361_2 Depth=1
	jmp	.LBB361_2
.LBB361_19:                             # %while.end
	jmp	.LBB361_41
.LBB361_20:                             # %if.else59
	jmp	.LBB361_21
.LBB361_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB361_23
# %bb.22:                               # %if.then65
	jmp	.LBB361_40
.LBB361_23:                             # %if.end66
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB361_25
# %bb.24:                               # %if.then71
	jmp	.LBB361_40
.LBB361_25:                             # %if.end72
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB361_27
# %bb.26:                               # %if.then75
	jmp	.LBB361_40
.LBB361_27:                             # %if.end76
                                        #   in Loop: Header=BB361_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB361_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB361_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB361_37
.LBB361_30:                             # %if.else113
                                        #   in Loop: Header=BB361_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB361_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB361_35
.LBB361_32:                             # %if.then121
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB361_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB361_34:                             # %if.end126
                                        #   in Loop: Header=BB361_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB361_36
.LBB361_35:                             # %if.else129
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB361_36:                             # %if.end132
                                        #   in Loop: Header=BB361_21 Depth=1
	jmp	.LBB361_37
.LBB361_37:                             # %if.end133
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB361_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB361_39:                             # %if.end151
                                        #   in Loop: Header=BB361_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB361_21
.LBB361_40:                             # %while.end154
	jmp	.LBB361_41
.LBB361_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$1788888461, -32(%rbp)  # imm = 0x6AA0458D
	jne	.LBB361_43
.LBB361_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB361_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB361_42
.Lfunc_end361:
	.size	copy_input_until_stop.321, .Lfunc_end361-copy_input_until_stop.321
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.322 # -- Begin function BZ2_bzBuffToBuffDecompress.322
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.322,@function
BZ2_bzBuffToBuffDecompress.322:         # @BZ2_bzBuffToBuffDecompress.322
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$357748744, -40(%rbp)   # imm = 0x1552D008
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB362_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB362_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB362_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB362_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB362_7
.LBB362_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB362_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB362_8
.LBB362_7:                              # %if.then
	movl	$-2, -12(%rbp)
	jmp	.LBB362_19
.LBB362_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB362_10
# %bb.9:                                # %if.then12
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB362_19
.LBB362_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB362_12
# %bb.11:                               # %if.then16
	jmp	.LBB362_15
.LBB362_12:                             # %if.end17
	cmpl	$4, -16(%rbp)
	je	.LBB362_14
# %bb.13:                               # %if.then19
	jmp	.LBB362_18
.LBB362_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -12(%rbp)
	jmp	.LBB362_19
.LBB362_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB362_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -12(%rbp)
	jmp	.LBB362_19
.LBB362_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -12(%rbp)
	jmp	.LBB362_19
.LBB362_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB362_19:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$357748744, -40(%rbp)   # imm = 0x1552D008
	jne	.LBB362_21
.LBB362_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB362_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB362_20
.Lfunc_end362:
	.size	BZ2_bzBuffToBuffDecompress.322, .Lfunc_end362-BZ2_bzBuffToBuffDecompress.322
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose.323    # -- Begin function BZ2_bzWriteClose.323
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose.323,@function
BZ2_bzWriteClose.323:                   # @BZ2_bzWriteClose.323
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1587737176, -8(%rbp)   # imm = 0x5EA2F258
	movq	%rdi, -16(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -4(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	-4(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %r9
	xorl	%r8d, %r8d
	movq	$0, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$1587737176, -8(%rbp)   # imm = 0x5EA2F258
	jne	.LBB363_2
.LBB363_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB363_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB363_1
.Lfunc_end363:
	.size	BZ2_bzWriteClose.323, .Lfunc_end363-BZ2_bzWriteClose.323
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.324      # -- Begin function BZ2_bzCompress.324
	.p2align	4, 0x90
	.type	BZ2_bzCompress.324,@function
BZ2_bzCompress.324:                     # @BZ2_bzCompress.324
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$28010754, -44(%rbp)    # imm = 0x1AB6902
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB364_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB364_39
.LBB364_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB364_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB364_39
.LBB364_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB364_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB364_39
.LBB364_6:                              # %if.end7
	jmp	.LBB364_7
.LBB364_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB364_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB364_7 Depth=1
	movq	.LJTI364_0(,%rax,8), %rax
	jmpq	*%rax
.LBB364_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB364_39
.LBB364_10:                             # %sw.bb8
                                        #   in Loop: Header=BB364_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB364_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB364_39
.LBB364_12:                             # %if.else
                                        #   in Loop: Header=BB364_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB364_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB364_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB364_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB364_7 Depth=1
	jmp	.LBB364_7
.LBB364_15:                             # %if.else15
                                        #   in Loop: Header=BB364_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB364_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB364_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB364_14
.LBB364_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB364_39
.LBB364_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB364_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB364_39
.LBB364_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB364_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB364_39
.LBB364_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB364_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB364_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB364_26
.LBB364_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB364_39
.LBB364_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB364_39
.LBB364_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB364_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB364_39
.LBB364_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB364_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB364_39
.LBB364_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB364_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB364_39
.LBB364_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB364_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB364_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB364_37
.LBB364_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB364_39
.LBB364_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB364_39
.LBB364_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB364_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$28010754, -44(%rbp)    # imm = 0x1AB6902
	jne	.LBB364_41
.LBB364_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB364_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB364_40
.Lfunc_end364:
	.size	BZ2_bzCompress.324, .Lfunc_end364-BZ2_bzCompress.324
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI364_0:
	.quad	.LBB364_9
	.quad	.LBB364_10
	.quad	.LBB364_18
	.quad	.LBB364_27
                                        # -- End function
	.text
	.globl	BZ2_bzBuffToBuffCompress.325 # -- Begin function BZ2_bzBuffToBuffCompress.325
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.325,@function
BZ2_bzBuffToBuffCompress.325:           # @BZ2_bzBuffToBuffCompress.325
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$495341131, -36(%rbp)   # imm = 0x1D864E4B
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB365_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB365_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB365_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB365_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB365_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB365_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB365_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB365_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB365_10
.LBB365_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB365_21
.LBB365_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB365_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB365_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB365_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB365_21
.LBB365_14:                             # %if.end21
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB365_16
# %bb.15:                               # %if.then24
	jmp	.LBB365_19
.LBB365_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB365_18
# %bb.17:                               # %if.then27
	jmp	.LBB365_20
.LBB365_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB365_21
.LBB365_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB365_21
.LBB365_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB365_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$495341131, -36(%rbp)   # imm = 0x1D864E4B
	jne	.LBB365_23
.LBB365_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB365_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB365_22
.Lfunc_end365:
	.size	BZ2_bzBuffToBuffCompress.325, .Lfunc_end365-BZ2_bzBuffToBuffCompress.325
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.326          # -- Begin function BZ2_bzRead.326
	.p2align	4, 0x90
	.type	BZ2_bzRead.326,@function
BZ2_bzRead.326:                         # @BZ2_bzRead.326
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$907522437, -40(%rbp)   # imm = 0x3617B185
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB366_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB366_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB366_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB366_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB366_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB366_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB366_12
.LBB366_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB366_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB366_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB366_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB366_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB366_69
.LBB366_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB366_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB366_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB366_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB366_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB366_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB366_69
.LBB366_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB366_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB366_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB366_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB366_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB366_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB366_69
.LBB366_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB366_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB366_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB366_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB366_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB366_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB366_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB366_69
.LBB366_31:                             # %if.end46
                                        #   in Loop: Header=BB366_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB366_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB366_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB366_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB366_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB366_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB366_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB366_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB366_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB366_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB366_69
.LBB366_39:                             # %if.end69
                                        #   in Loop: Header=BB366_25 Depth=1
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB366_40:                             # %if.end76
                                        #   in Loop: Header=BB366_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB366_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB366_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB366_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB366_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB366_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB366_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB366_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB366_69
.LBB366_47:                             # %if.end94
                                        #   in Loop: Header=BB366_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB366_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB366_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB366_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB366_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB366_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB366_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB366_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB366_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB366_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB366_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB366_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB366_69
.LBB366_56:                             # %if.end122
                                        #   in Loop: Header=BB366_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB366_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB366_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB366_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB366_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB366_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB366_69
.LBB366_62:                             # %if.end137
                                        #   in Loop: Header=BB366_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB366_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB366_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB366_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB366_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB366_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB366_69
.LBB366_68:                             # %if.end152
                                        #   in Loop: Header=BB366_25 Depth=1
	jmp	.LBB366_25
.LBB366_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$907522437, -40(%rbp)   # imm = 0x3617B185
	jne	.LBB366_71
.LBB366_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB366_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB366_70
.Lfunc_end366:
	.size	BZ2_bzRead.326, .Lfunc_end366-BZ2_bzRead.326
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.327
	.type	copy_input_until_stop.327,@function
copy_input_until_stop.327:              # @copy_input_until_stop.327
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1013713450, -32(%rbp)  # imm = 0x3C6C0A2A
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB367_20
# %bb.1:                                # %if.then
	jmp	.LBB367_2
.LBB367_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB367_4
# %bb.3:                                # %if.then2
	jmp	.LBB367_19
.LBB367_4:                              # %if.end
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB367_6
# %bb.5:                                # %if.then4
	jmp	.LBB367_19
.LBB367_6:                              # %if.end5
                                        #   in Loop: Header=BB367_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB367_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB367_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB367_16
.LBB367_9:                              # %if.else
                                        #   in Loop: Header=BB367_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB367_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB367_14
.LBB367_11:                             # %if.then32
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB367_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB367_13:                             # %if.end37
                                        #   in Loop: Header=BB367_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB367_15
.LBB367_14:                             # %if.else40
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB367_15:                             # %if.end43
                                        #   in Loop: Header=BB367_2 Depth=1
	jmp	.LBB367_16
.LBB367_16:                             # %if.end44
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB367_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB367_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB367_18:                             # %if.end58
                                        #   in Loop: Header=BB367_2 Depth=1
	jmp	.LBB367_2
.LBB367_19:                             # %while.end
	jmp	.LBB367_41
.LBB367_20:                             # %if.else59
	jmp	.LBB367_21
.LBB367_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB367_23
# %bb.22:                               # %if.then65
	jmp	.LBB367_40
.LBB367_23:                             # %if.end66
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB367_25
# %bb.24:                               # %if.then71
	jmp	.LBB367_40
.LBB367_25:                             # %if.end72
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB367_27
# %bb.26:                               # %if.then75
	jmp	.LBB367_40
.LBB367_27:                             # %if.end76
                                        #   in Loop: Header=BB367_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB367_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB367_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB367_37
.LBB367_30:                             # %if.else113
                                        #   in Loop: Header=BB367_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB367_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB367_35
.LBB367_32:                             # %if.then121
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB367_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB367_34:                             # %if.end126
                                        #   in Loop: Header=BB367_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB367_36
.LBB367_35:                             # %if.else129
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB367_36:                             # %if.end132
                                        #   in Loop: Header=BB367_21 Depth=1
	jmp	.LBB367_37
.LBB367_37:                             # %if.end133
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB367_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB367_39:                             # %if.end151
                                        #   in Loop: Header=BB367_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB367_21
.LBB367_40:                             # %while.end154
	jmp	.LBB367_41
.LBB367_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$1013713450, -32(%rbp)  # imm = 0x3C6C0A2A
	jne	.LBB367_43
.LBB367_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB367_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB367_42
.Lfunc_end367:
	.size	copy_input_until_stop.327, .Lfunc_end367-copy_input_until_stop.327
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.328     # -- Begin function BZ2_bzWriteOpen.328
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.328,@function
BZ2_bzWriteOpen.328:                    # @BZ2_bzWriteOpen.328
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$373954423, -60(%rbp)   # imm = 0x164A1777
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB368_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB368_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB368_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB368_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB368_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -32(%rbp)
	jl	.LBB368_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -32(%rbp)
	jg	.LBB368_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB368_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB368_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -40(%rbp)
	jl	.LBB368_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -40(%rbp)
	jle	.LBB368_16
.LBB368_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB368_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB368_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB368_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB368_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB368_41
.LBB368_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB368_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB368_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB368_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB368_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB368_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB368_41
.LBB368_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB368_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB368_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB368_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB368_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB368_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB368_41
.LBB368_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB368_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB368_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB368_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB368_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB368_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB368_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-32(%rbp), %esi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB368_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB368_37
# %bb.36:                               # %if.then62
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB368_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB368_39
# %bb.38:                               # %if.then65
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB368_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB368_41
.LBB368_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB368_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$373954423, -60(%rbp)   # imm = 0x164A1777
	jne	.LBB368_43
.LBB368_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB368_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB368_42
.Lfunc_end368:
	.size	BZ2_bzWriteOpen.328, .Lfunc_end368-BZ2_bzWriteOpen.328
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.329  # -- Begin function BZ2_bzWriteClose64.329
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.329,@function
BZ2_bzWriteClose64.329:                 # @BZ2_bzWriteClose64.329
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$654333026, -60(%rbp)   # imm = 0x27005462
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB369_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB369_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB369_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB369_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB369_5:                              # %if.end5
	jmp	.LBB369_71
.LBB369_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB369_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB369_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB369_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB369_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB369_11:                             # %if.end14
	jmp	.LBB369_71
.LBB369_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB369_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB369_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB369_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB369_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB369_17:                             # %if.end24
	jmp	.LBB369_71
.LBB369_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB369_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB369_20:                             # %if.end28
	cmpq	$0, -40(%rbp)
	je	.LBB369_22
# %bb.21:                               # %if.then30
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB369_22:                             # %if.end31
	cmpq	$0, -48(%rbp)
	je	.LBB369_24
# %bb.23:                               # %if.then33
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB369_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB369_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB369_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB369_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB369_49
# %bb.28:                               # %if.then41
	jmp	.LBB369_29
.LBB369_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB369_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB369_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB369_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB369_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB369_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB369_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB369_35:                             # %if.end55
	jmp	.LBB369_71
.LBB369_36:                             # %if.end56
                                        #   in Loop: Header=BB369_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB369_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB369_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB369_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB369_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB369_44
.LBB369_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB369_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB369_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB369_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB369_43:                             # %if.end82
	jmp	.LBB369_71
.LBB369_44:                             # %if.end83
                                        #   in Loop: Header=BB369_29 Depth=1
	jmp	.LBB369_45
.LBB369_45:                             # %if.end84
                                        #   in Loop: Header=BB369_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB369_47
# %bb.46:                               # %if.then87
	jmp	.LBB369_48
.LBB369_47:                             # %if.end88
                                        #   in Loop: Header=BB369_29 Depth=1
	jmp	.LBB369_29
.LBB369_48:                             # %while.end
	jmp	.LBB369_49
.LBB369_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB369_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB369_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB369_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB369_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB369_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB369_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB369_56:                             # %if.end110
	jmp	.LBB369_71
.LBB369_57:                             # %if.end111
	jmp	.LBB369_58
.LBB369_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB369_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB369_60:                             # %if.end117
	cmpq	$0, -40(%rbp)
	je	.LBB369_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB369_62:                             # %if.end122
	cmpq	$0, -48(%rbp)
	je	.LBB369_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB369_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB369_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB369_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB369_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB369_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB369_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB369_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB369_71:                             # %return
	cmpl	$654333026, -60(%rbp)   # imm = 0x27005462
	jne	.LBB369_73
.LBB369_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB369_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB369_72
.Lfunc_end369:
	.size	BZ2_bzWriteClose64.329, .Lfunc_end369-BZ2_bzWriteClose64.329
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.330
	.type	copy_input_until_stop.330,@function
copy_input_until_stop.330:              # @copy_input_until_stop.330
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2086462154, -32(%rbp)  # imm = 0x7C5CE2CA
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB370_20
# %bb.1:                                # %if.then
	jmp	.LBB370_2
.LBB370_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB370_4
# %bb.3:                                # %if.then2
	jmp	.LBB370_19
.LBB370_4:                              # %if.end
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB370_6
# %bb.5:                                # %if.then4
	jmp	.LBB370_19
.LBB370_6:                              # %if.end5
                                        #   in Loop: Header=BB370_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB370_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB370_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB370_16
.LBB370_9:                              # %if.else
                                        #   in Loop: Header=BB370_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB370_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB370_14
.LBB370_11:                             # %if.then32
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB370_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB370_13:                             # %if.end37
                                        #   in Loop: Header=BB370_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB370_15
.LBB370_14:                             # %if.else40
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB370_15:                             # %if.end43
                                        #   in Loop: Header=BB370_2 Depth=1
	jmp	.LBB370_16
.LBB370_16:                             # %if.end44
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB370_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB370_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB370_18:                             # %if.end58
                                        #   in Loop: Header=BB370_2 Depth=1
	jmp	.LBB370_2
.LBB370_19:                             # %while.end
	jmp	.LBB370_41
.LBB370_20:                             # %if.else59
	jmp	.LBB370_21
.LBB370_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB370_23
# %bb.22:                               # %if.then65
	jmp	.LBB370_40
.LBB370_23:                             # %if.end66
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB370_25
# %bb.24:                               # %if.then71
	jmp	.LBB370_40
.LBB370_25:                             # %if.end72
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB370_27
# %bb.26:                               # %if.then75
	jmp	.LBB370_40
.LBB370_27:                             # %if.end76
                                        #   in Loop: Header=BB370_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB370_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB370_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB370_37
.LBB370_30:                             # %if.else113
                                        #   in Loop: Header=BB370_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB370_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB370_35
.LBB370_32:                             # %if.then121
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB370_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB370_34:                             # %if.end126
                                        #   in Loop: Header=BB370_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB370_36
.LBB370_35:                             # %if.else129
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB370_36:                             # %if.end132
                                        #   in Loop: Header=BB370_21 Depth=1
	jmp	.LBB370_37
.LBB370_37:                             # %if.end133
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB370_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB370_39:                             # %if.end151
                                        #   in Loop: Header=BB370_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB370_21
.LBB370_40:                             # %while.end154
	jmp	.LBB370_41
.LBB370_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$2086462154, -32(%rbp)  # imm = 0x7C5CE2CA
	jne	.LBB370_43
.LBB370_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB370_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB370_42
.Lfunc_end370:
	.size	copy_input_until_stop.330, .Lfunc_end370-copy_input_until_stop.330
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.331    # -- Begin function BZ2_bzDecompress.331
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.331,@function
BZ2_bzDecompress.331:                   # @BZ2_bzDecompress.331
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1701622488, -44(%rbp)  # imm = 0x656CB2D8
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB371_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB371_37
.LBB371_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB371_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB371_37
.LBB371_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB371_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB371_37
.LBB371_6:                              # %if.end7
	jmp	.LBB371_7
.LBB371_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB371_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB371_37
.LBB371_9:                              # %if.end11
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB371_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB371_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB371_13
.LBB371_12:                             # %if.else
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB371_13:                             # %if.end17
                                        #   in Loop: Header=BB371_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB371_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB371_37
.LBB371_15:                             # %if.end20
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB371_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB371_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB371_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB371_19:                             # %if.end29
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB371_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB371_21:                             # %if.end34
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB371_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB371_37
.LBB371_23:                             # %if.end39
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB371_25
.LBB371_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB371_37
.LBB371_25:                             # %if.end46
                                        #   in Loop: Header=BB371_7 Depth=1
	jmp	.LBB371_26
.LBB371_26:                             # %if.end47
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB371_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB371_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB371_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB371_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB371_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB371_37
.LBB371_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB371_37
.LBB371_33:                             # %if.end65
                                        #   in Loop: Header=BB371_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB371_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB371_37
.LBB371_35:                             # %if.end69
                                        #   in Loop: Header=BB371_7 Depth=1
	jmp	.LBB371_36
.LBB371_36:                             # %if.end70
                                        #   in Loop: Header=BB371_7 Depth=1
	jmp	.LBB371_7
.LBB371_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1701622488, -44(%rbp)  # imm = 0x656CB2D8
	jne	.LBB371_39
.LBB371_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB371_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB371_38
.Lfunc_end371:
	.size	BZ2_bzDecompress.331, .Lfunc_end371-BZ2_bzDecompress.331
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.332
	.type	unRLE_obuf_to_output_FAST.332,@function
unRLE_obuf_to_output_FAST.332:          # @unRLE_obuf_to_output_FAST.332
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$735080503, -84(%rbp)   # imm = 0x2BD07037
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB372_48
# %bb.1:                                # %if.then
	jmp	.LBB372_2
.LBB372_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB372_3 Depth 2
	jmp	.LBB372_3
.LBB372_3:                              # %while.body2
                                        #   Parent Loop BB372_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB372_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB372_82
.LBB372_5:                              # %if.end
                                        #   in Loop: Header=BB372_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB372_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_10
.LBB372_7:                              # %if.end6
                                        #   in Loop: Header=BB372_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB372_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB372_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB372_9:                              # %if.end26
                                        #   in Loop: Header=BB372_3 Depth=2
	jmp	.LBB372_3
.LBB372_10:                             # %while.end
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB372_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB372_82
.LBB372_12:                             # %if.end30
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB372_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB372_82
.LBB372_14:                             # %if.end37
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB372_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB372_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB372_17:                             # %if.end61
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_18
.LBB372_18:                             # %if.end62
                                        #   in Loop: Header=BB372_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB372_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_20
.LBB372_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_2
.LBB372_21:                             # %if.end79
                                        #   in Loop: Header=BB372_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB372_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB372_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB372_20
.LBB372_23:                             # %if.end87
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB372_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB372_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB372_26:                             # %if.end114
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_27
.LBB372_27:                             # %if.end115
                                        #   in Loop: Header=BB372_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB372_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_20
.LBB372_29:                             # %if.end133
                                        #   in Loop: Header=BB372_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB372_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB372_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB372_20
.LBB372_31:                             # %if.end141
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB372_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB372_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB372_34:                             # %if.end168
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_35
.LBB372_35:                             # %if.end169
                                        #   in Loop: Header=BB372_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB372_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_20
.LBB372_37:                             # %if.end187
                                        #   in Loop: Header=BB372_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB372_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB372_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB372_20
.LBB372_39:                             # %if.end195
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB372_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB372_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB372_42:                             # %if.end221
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_43
.LBB372_43:                             # %if.end222
                                        #   in Loop: Header=BB372_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB372_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB372_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB372_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB372_46:                             # %if.end264
                                        #   in Loop: Header=BB372_2 Depth=1
	jmp	.LBB372_47
.LBB372_47:                             # %if.end265
                                        #   in Loop: Header=BB372_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB372_20
.LBB372_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB372_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB372_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB372_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB372_49 Depth=1
	jmp	.LBB372_51
.LBB372_51:                             # %while.body294
                                        #   Parent Loop BB372_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB372_53
# %bb.52:                               # %if.then297
	jmp	.LBB372_78
.LBB372_53:                             # %if.end298
                                        #   in Loop: Header=BB372_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB372_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB372_49 Depth=1
	jmp	.LBB372_56
.LBB372_55:                             # %if.end302
                                        #   in Loop: Header=BB372_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB372_51
.LBB372_56:                             # %while.end313
                                        #   in Loop: Header=BB372_49 Depth=1
	jmp	.LBB372_57
.LBB372_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB372_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB372_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB372_78
.LBB372_59:                             # %if.end317
                                        #   in Loop: Header=BB372_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB372_60:                             # %if.end327
                                        #   in Loop: Header=BB372_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB372_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB372_82
.LBB372_62:                             # %if.end331
                                        #   in Loop: Header=BB372_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB372_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB372_78
.LBB372_64:                             # %if.end335
                                        #   in Loop: Header=BB372_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB372_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB372_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB372_57
.LBB372_66:                             # %if.end348
                                        #   in Loop: Header=BB372_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB372_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB372_49 Depth=1
	jmp	.LBB372_57
.LBB372_68:                             # %if.end352
                                        #   in Loop: Header=BB372_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB372_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB372_49 Depth=1
	jmp	.LBB372_70
.LBB372_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB372_49 Depth=1
	jmp	.LBB372_49
.LBB372_71:                             # %if.end362
                                        #   in Loop: Header=BB372_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB372_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB372_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB372_70
.LBB372_73:                             # %if.end368
                                        #   in Loop: Header=BB372_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB372_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB372_49 Depth=1
	jmp	.LBB372_70
.LBB372_75:                             # %if.end378
                                        #   in Loop: Header=BB372_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB372_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB372_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB372_70
.LBB372_77:                             # %if.end384
                                        #   in Loop: Header=BB372_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB372_70
.LBB372_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	-88(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-92(%rbp), %eax
	jae	.LBB372_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB372_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB372_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$735080503, -84(%rbp)   # imm = 0x2BD07037
	jne	.LBB372_84
.LBB372_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB372_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB372_83
.Lfunc_end372:
	.size	unRLE_obuf_to_output_FAST.332, .Lfunc_end372-unRLE_obuf_to_output_FAST.332
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.333
	.type	copy_input_until_stop.333,@function
copy_input_until_stop.333:              # @copy_input_until_stop.333
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1577769196, -32(%rbp)  # imm = 0x5E0AD8EC
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB373_20
# %bb.1:                                # %if.then
	jmp	.LBB373_2
.LBB373_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB373_4
# %bb.3:                                # %if.then2
	jmp	.LBB373_19
.LBB373_4:                              # %if.end
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB373_6
# %bb.5:                                # %if.then4
	jmp	.LBB373_19
.LBB373_6:                              # %if.end5
                                        #   in Loop: Header=BB373_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB373_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB373_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB373_16
.LBB373_9:                              # %if.else
                                        #   in Loop: Header=BB373_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB373_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB373_14
.LBB373_11:                             # %if.then32
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB373_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB373_13:                             # %if.end37
                                        #   in Loop: Header=BB373_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB373_15
.LBB373_14:                             # %if.else40
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB373_15:                             # %if.end43
                                        #   in Loop: Header=BB373_2 Depth=1
	jmp	.LBB373_16
.LBB373_16:                             # %if.end44
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB373_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB373_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB373_18:                             # %if.end58
                                        #   in Loop: Header=BB373_2 Depth=1
	jmp	.LBB373_2
.LBB373_19:                             # %while.end
	jmp	.LBB373_41
.LBB373_20:                             # %if.else59
	jmp	.LBB373_21
.LBB373_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB373_23
# %bb.22:                               # %if.then65
	jmp	.LBB373_40
.LBB373_23:                             # %if.end66
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB373_25
# %bb.24:                               # %if.then71
	jmp	.LBB373_40
.LBB373_25:                             # %if.end72
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB373_27
# %bb.26:                               # %if.then75
	jmp	.LBB373_40
.LBB373_27:                             # %if.end76
                                        #   in Loop: Header=BB373_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB373_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB373_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB373_37
.LBB373_30:                             # %if.else113
                                        #   in Loop: Header=BB373_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB373_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB373_35
.LBB373_32:                             # %if.then121
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB373_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB373_34:                             # %if.end126
                                        #   in Loop: Header=BB373_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB373_36
.LBB373_35:                             # %if.else129
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB373_36:                             # %if.end132
                                        #   in Loop: Header=BB373_21 Depth=1
	jmp	.LBB373_37
.LBB373_37:                             # %if.end133
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB373_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB373_39:                             # %if.end151
                                        #   in Loop: Header=BB373_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB373_21
.LBB373_40:                             # %while.end154
	jmp	.LBB373_41
.LBB373_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$1577769196, -32(%rbp)  # imm = 0x5E0AD8EC
	jne	.LBB373_43
.LBB373_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB373_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB373_42
.Lfunc_end373:
	.size	copy_input_until_stop.333, .Lfunc_end373-copy_input_until_stop.333
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.334      # -- Begin function BZ2_bzReadOpen.334
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.334,@function
BZ2_bzReadOpen.334:                     # @BZ2_bzReadOpen.334
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$182893726, -76(%rbp)   # imm = 0xAE6BC9E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -64(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB374_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB374_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB374_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB374_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB374_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -36(%rbp)
	je	.LBB374_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -36(%rbp)
	jne	.LBB374_14
.LBB374_7:                              # %lor.lhs.false7
	cmpl	$0, -40(%rbp)
	jl	.LBB374_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -40(%rbp)
	jg	.LBB374_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -64(%rbp)
	jne	.LBB374_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB374_14
.LBB374_11:                             # %lor.lhs.false15
	cmpq	$0, -64(%rbp)
	je	.LBB374_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB374_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB374_19
.LBB374_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB374_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB374_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB374_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB374_18:                             # %if.end28
	movq	$0, -56(%rbp)
	jmp	.LBB374_45
.LBB374_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB374_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB374_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB374_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB374_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB374_24:                             # %if.end37
	movq	$0, -56(%rbp)
	jmp	.LBB374_45
.LBB374_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB374_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB374_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB374_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB374_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB374_30:                             # %if.end48
	movq	$0, -56(%rbp)
	jmp	.LBB374_45
.LBB374_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB374_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB374_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB374_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB374_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB374_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB374_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB374_36 Depth=1
	movq	-64(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB374_36
.LBB374_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB374_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB374_41
# %bb.40:                               # %if.then67
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB374_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB374_43
# %bb.42:                               # %if.then70
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB374_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -56(%rbp)
	jmp	.LBB374_45
.LBB374_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB374_45:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$182893726, -76(%rbp)   # imm = 0xAE6BC9E
	jne	.LBB374_47
.LBB374_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB374_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB374_46
.Lfunc_end374:
	.size	BZ2_bzReadOpen.334, .Lfunc_end374-BZ2_bzReadOpen.334
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.335  # -- Begin function BZ2_bzCompressInit.335
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.335,@function
BZ2_bzCompressInit.335:                 # @BZ2_bzCompressInit.335
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1464778257, -44(%rbp)  # imm = 0x574EBE11
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB375_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB375_29
.LBB375_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB375_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB375_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -36(%rbp)
	jg	.LBB375_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -32(%rbp)
	jl	.LBB375_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -32(%rbp)
	jle	.LBB375_8
.LBB375_7:                              # %if.then8
	movl	$-2, -28(%rbp)
	jmp	.LBB375_29
.LBB375_8:                              # %if.end9
	cmpl	$0, -32(%rbp)
	jne	.LBB375_10
# %bb.9:                                # %if.then11
	movl	$30, -32(%rbp)
.LBB375_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB375_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB375_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB375_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB375_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB375_16
# %bb.15:                               # %if.then24
	movl	$-3, -28(%rbp)
	jmp	.LBB375_29
.LBB375_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB375_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB375_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB375_28
.LBB375_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB375_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB375_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB375_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB375_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB375_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB375_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB375_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB375_27:                             # %if.end85
	movl	$-3, -28(%rbp)
	jmp	.LBB375_29
.LBB375_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -28(%rbp)
.LBB375_29:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1464778257, -44(%rbp)  # imm = 0x574EBE11
	jne	.LBB375_31
.LBB375_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB375_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB375_30
.Lfunc_end375:
	.size	BZ2_bzCompressInit.335, .Lfunc_end375-BZ2_bzCompressInit.335
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzRead.336          # -- Begin function BZ2_bzRead.336
	.p2align	4, 0x90
	.type	BZ2_bzRead.336,@function
BZ2_bzRead.336:                         # @BZ2_bzRead.336
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1051557015, -44(%rbp)  # imm = 0x3EAD7C97
	movq	%rdi, -24(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB376_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB376_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB376_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB376_4:                              # %if.end3
	cmpq	$0, -16(%rbp)
	je	.LBB376_7
# %bb.5:                                # %lor.lhs.false
	cmpq	$0, -56(%rbp)
	je	.LBB376_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$0, -36(%rbp)
	jge	.LBB376_12
.LBB376_7:                              # %if.then8
	cmpq	$0, -24(%rbp)
	je	.LBB376_9
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB376_9:                              # %if.end11
	cmpq	$0, -16(%rbp)
	je	.LBB376_11
# %bb.10:                               # %if.then13
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB376_11:                             # %if.end15
	movl	$0, -28(%rbp)
	jmp	.LBB376_69
.LBB376_12:                             # %if.end16
	movq	-16(%rbp), %rax
	cmpb	$0, 5012(%rax)
	je	.LBB376_18
# %bb.13:                               # %if.then17
	cmpq	$0, -24(%rbp)
	je	.LBB376_15
# %bb.14:                               # %if.then19
	movq	-24(%rbp), %rax
	movl	$-1, (%rax)
.LBB376_15:                             # %if.end20
	cmpq	$0, -16(%rbp)
	je	.LBB376_17
# %bb.16:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB376_17:                             # %if.end24
	movl	$0, -28(%rbp)
	jmp	.LBB376_69
.LBB376_18:                             # %if.end25
	cmpl	$0, -36(%rbp)
	jne	.LBB376_24
# %bb.19:                               # %if.then27
	cmpq	$0, -24(%rbp)
	je	.LBB376_21
# %bb.20:                               # %if.then29
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB376_21:                             # %if.end30
	cmpq	$0, -16(%rbp)
	je	.LBB376_23
# %bb.22:                               # %if.then32
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB376_23:                             # %if.end34
	movl	$0, -28(%rbp)
	jmp	.LBB376_69
.LBB376_24:                             # %if.end35
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5048(%rcx)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5040(%rcx)
.LBB376_25:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB376_31
# %bb.26:                               # %if.then38
	cmpq	$0, -24(%rbp)
	je	.LBB376_28
# %bb.27:                               # %if.then40
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB376_28:                             # %if.end41
	cmpq	$0, -16(%rbp)
	je	.LBB376_30
# %bb.29:                               # %if.then43
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB376_30:                             # %if.end45
	movl	$0, -28(%rbp)
	jmp	.LBB376_69
.LBB376_31:                             # %if.end46
                                        #   in Loop: Header=BB376_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB376_40
# %bb.32:                               # %land.lhs.true
                                        #   in Loop: Header=BB376_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	cmpb	$0, %al
	jne	.LBB376_40
# %bb.33:                               # %if.then52
                                        #   in Loop: Header=BB376_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB376_39
# %bb.34:                               # %if.then59
	cmpq	$0, -24(%rbp)
	je	.LBB376_36
# %bb.35:                               # %if.then62
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB376_36:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB376_38
# %bb.37:                               # %if.then66
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB376_38:                             # %if.end68
	movl	$0, -28(%rbp)
	jmp	.LBB376_69
.LBB376_39:                             # %if.end69
                                        #   in Loop: Header=BB376_25 Depth=1
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5008(%rcx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
.LBB376_40:                             # %if.end76
                                        #   in Loop: Header=BB376_25 Depth=1
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzDecompress
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB376_47
# %bb.41:                               # %land.lhs.true81
                                        #   in Loop: Header=BB376_25 Depth=1
	cmpl	$4, -32(%rbp)
	je	.LBB376_47
# %bb.42:                               # %if.then84
	cmpq	$0, -24(%rbp)
	je	.LBB376_44
# %bb.43:                               # %if.then87
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB376_44:                             # %if.end88
	cmpq	$0, -16(%rbp)
	je	.LBB376_46
# %bb.45:                               # %if.then91
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB376_46:                             # %if.end93
	movl	$0, -28(%rbp)
	jmp	.LBB376_69
.LBB376_47:                             # %if.end94
                                        #   in Loop: Header=BB376_25 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB376_56
# %bb.48:                               # %land.lhs.true97
                                        #   in Loop: Header=BB376_25 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB376_56
# %bb.49:                               # %land.lhs.true102
                                        #   in Loop: Header=BB376_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5024(%rax)
	jne	.LBB376_56
# %bb.50:                               # %land.lhs.true107
                                        #   in Loop: Header=BB376_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jbe	.LBB376_56
# %bb.51:                               # %if.then112
	cmpq	$0, -24(%rbp)
	je	.LBB376_53
# %bb.52:                               # %if.then115
	movq	-24(%rbp), %rax
	movl	$-7, (%rax)
.LBB376_53:                             # %if.end116
	cmpq	$0, -16(%rbp)
	je	.LBB376_55
# %bb.54:                               # %if.then119
	movq	-16(%rbp), %rax
	movl	$-7, 5096(%rax)
.LBB376_55:                             # %if.end121
	movl	$0, -28(%rbp)
	jmp	.LBB376_69
.LBB376_56:                             # %if.end122
                                        #   in Loop: Header=BB376_25 Depth=1
	cmpl	$4, -32(%rbp)
	jne	.LBB376_62
# %bb.57:                               # %if.then125
	cmpq	$0, -24(%rbp)
	je	.LBB376_59
# %bb.58:                               # %if.then128
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
.LBB376_59:                             # %if.end129
	cmpq	$0, -16(%rbp)
	je	.LBB376_61
# %bb.60:                               # %if.then132
	movq	-16(%rbp), %rax
	movl	$4, 5096(%rax)
.LBB376_61:                             # %if.end134
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	5048(%rcx), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB376_69
.LBB376_62:                             # %if.end137
                                        #   in Loop: Header=BB376_25 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 5048(%rax)
	jne	.LBB376_68
# %bb.63:                               # %if.then142
	cmpq	$0, -24(%rbp)
	je	.LBB376_65
# %bb.64:                               # %if.then145
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB376_65:                             # %if.end146
	cmpq	$0, -16(%rbp)
	je	.LBB376_67
# %bb.66:                               # %if.then149
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB376_67:                             # %if.end151
	movl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB376_69
.LBB376_68:                             # %if.end152
                                        #   in Loop: Header=BB376_25 Depth=1
	jmp	.LBB376_25
.LBB376_69:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1051557015, -44(%rbp)  # imm = 0x3EAD7C97
	jne	.LBB376_71
.LBB376_70:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB376_71:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB376_70
.Lfunc_end376:
	.size	BZ2_bzRead.336, .Lfunc_end376-BZ2_bzRead.336
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.337      # -- Begin function BZ2_bzCompress.337
	.p2align	4, 0x90
	.type	BZ2_bzCompress.337,@function
BZ2_bzCompress.337:                     # @BZ2_bzCompress.337
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1631183964, -44(%rbp)  # imm = 0x6139E45C
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB377_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB377_39
.LBB377_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB377_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB377_39
.LBB377_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB377_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB377_39
.LBB377_6:                              # %if.end7
	jmp	.LBB377_7
.LBB377_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB377_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB377_7 Depth=1
	movq	.LJTI377_0(,%rax,8), %rax
	jmpq	*%rax
.LBB377_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB377_39
.LBB377_10:                             # %sw.bb8
                                        #   in Loop: Header=BB377_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB377_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB377_39
.LBB377_12:                             # %if.else
                                        #   in Loop: Header=BB377_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB377_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB377_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB377_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB377_7 Depth=1
	jmp	.LBB377_7
.LBB377_15:                             # %if.else15
                                        #   in Loop: Header=BB377_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB377_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB377_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB377_14
.LBB377_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB377_39
.LBB377_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB377_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB377_39
.LBB377_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB377_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB377_39
.LBB377_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB377_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB377_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB377_26
.LBB377_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB377_39
.LBB377_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB377_39
.LBB377_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB377_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB377_39
.LBB377_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB377_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB377_39
.LBB377_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB377_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB377_39
.LBB377_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB377_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB377_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB377_37
.LBB377_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB377_39
.LBB377_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB377_39
.LBB377_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB377_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1631183964, -44(%rbp)  # imm = 0x6139E45C
	jne	.LBB377_41
.LBB377_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB377_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB377_40
.Lfunc_end377:
	.size	BZ2_bzCompress.337, .Lfunc_end377-BZ2_bzCompress.337
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI377_0:
	.quad	.LBB377_9
	.quad	.LBB377_10
	.quad	.LBB377_18
	.quad	.LBB377_27
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function default_bzalloc.338
	.type	default_bzalloc.338,@function
default_bzalloc.338:                    # @default_bzalloc.338
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1669707648, -12(%rbp)  # imm = 0x6385B780
	movq	%rdi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	-20(%rbp), %eax
	imull	-16(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1669707648, -12(%rbp)  # imm = 0x6385B780
	jne	.LBB378_2
.LBB378_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB378_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB378_1
.Lfunc_end378:
	.size	default_bzalloc.338, .Lfunc_end378-default_bzalloc.338
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.339  # -- Begin function BZ2_bzCompressInit.339
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.339,@function
BZ2_bzCompressInit.339:                 # @BZ2_bzCompressInit.339
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1002690329, -48(%rbp)  # imm = 0x3BC3D719
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB379_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB379_29
.LBB379_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB379_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB379_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -36(%rbp)
	jg	.LBB379_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -32(%rbp)
	jl	.LBB379_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -32(%rbp)
	jle	.LBB379_8
.LBB379_7:                              # %if.then8
	movl	$-2, -28(%rbp)
	jmp	.LBB379_29
.LBB379_8:                              # %if.end9
	cmpl	$0, -32(%rbp)
	jne	.LBB379_10
# %bb.9:                                # %if.then11
	movl	$30, -32(%rbp)
.LBB379_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB379_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB379_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB379_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB379_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB379_16
# %bb.15:                               # %if.then24
	movl	$-3, -28(%rbp)
	jmp	.LBB379_29
.LBB379_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB379_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB379_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB379_28
.LBB379_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB379_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB379_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB379_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB379_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB379_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB379_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB379_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB379_27:                             # %if.end85
	movl	$-3, -28(%rbp)
	jmp	.LBB379_29
.LBB379_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -28(%rbp)
.LBB379_29:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$1002690329, -48(%rbp)  # imm = 0x3BC3D719
	jne	.LBB379_31
.LBB379_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB379_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB379_30
.Lfunc_end379:
	.size	BZ2_bzCompressInit.339, .Lfunc_end379-BZ2_bzCompressInit.339
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.340
	.type	handle_compress.340,@function
handle_compress.340:                    # @handle_compress.340
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2004420073, -28(%rbp)  # imm = 0x777905E9
	movq	%rdi, -40(%rbp)
	movb	$0, -10(%rbp)
	movb	$0, -9(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB380_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB380_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB380_4
# %bb.3:                                # %if.then6
	jmp	.LBB380_25
.LBB380_4:                              # %if.end
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB380_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB380_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB380_8
# %bb.7:                                # %if.then14
	jmp	.LBB380_25
.LBB380_8:                              # %if.end15
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB380_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB380_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB380_12
# %bb.11:                               # %if.then28
	jmp	.LBB380_25
.LBB380_12:                             # %if.end29
                                        #   in Loop: Header=BB380_1 Depth=1
	jmp	.LBB380_13
.LBB380_13:                             # %if.end30
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB380_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB380_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB380_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB380_23
.LBB380_17:                             # %if.else
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB380_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB380_22
.LBB380_19:                             # %if.else57
                                        #   in Loop: Header=BB380_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB380_21
# %bb.20:                               # %if.then61
	jmp	.LBB380_25
.LBB380_21:                             # %if.end62
                                        #   in Loop: Header=BB380_1 Depth=1
	jmp	.LBB380_22
.LBB380_22:                             # %if.end63
                                        #   in Loop: Header=BB380_1 Depth=1
	jmp	.LBB380_23
.LBB380_23:                             # %if.end64
                                        #   in Loop: Header=BB380_1 Depth=1
	jmp	.LBB380_24
.LBB380_24:                             # %if.end65
                                        #   in Loop: Header=BB380_1 Depth=1
	jmp	.LBB380_1
.LBB380_25:                             # %while.end
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB380_27
# %bb.26:                               # %lor.rhs
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB380_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$2004420073, -28(%rbp)  # imm = 0x777905E9
	jne	.LBB380_29
.LBB380_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB380_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB380_28
.Lfunc_end380:
	.size	handle_compress.340, .Lfunc_end380-handle_compress.340
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.341      # -- Begin function BZ2_bzCompress.341
	.p2align	4, 0x90
	.type	BZ2_bzCompress.341,@function
BZ2_bzCompress.341:                     # @BZ2_bzCompress.341
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1700421128, -44(%rbp)  # imm = 0x655A5E08
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB381_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB381_39
.LBB381_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB381_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB381_39
.LBB381_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB381_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB381_39
.LBB381_6:                              # %if.end7
	jmp	.LBB381_7
.LBB381_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB381_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB381_7 Depth=1
	movq	.LJTI381_0(,%rax,8), %rax
	jmpq	*%rax
.LBB381_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB381_39
.LBB381_10:                             # %sw.bb8
                                        #   in Loop: Header=BB381_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB381_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB381_39
.LBB381_12:                             # %if.else
                                        #   in Loop: Header=BB381_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB381_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB381_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB381_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB381_7 Depth=1
	jmp	.LBB381_7
.LBB381_15:                             # %if.else15
                                        #   in Loop: Header=BB381_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB381_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB381_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB381_14
.LBB381_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB381_39
.LBB381_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB381_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB381_39
.LBB381_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB381_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB381_39
.LBB381_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB381_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB381_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB381_26
.LBB381_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB381_39
.LBB381_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB381_39
.LBB381_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB381_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB381_39
.LBB381_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB381_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB381_39
.LBB381_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB381_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB381_39
.LBB381_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB381_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB381_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB381_37
.LBB381_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB381_39
.LBB381_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB381_39
.LBB381_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB381_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1700421128, -44(%rbp)  # imm = 0x655A5E08
	jne	.LBB381_41
.LBB381_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB381_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB381_40
.Lfunc_end381:
	.size	BZ2_bzCompress.341, .Lfunc_end381-BZ2_bzCompress.341
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI381_0:
	.quad	.LBB381_9
	.quad	.LBB381_10
	.quad	.LBB381_18
	.quad	.LBB381_27
                                        # -- End function
	.text
	.globl	BZ2_bzWriteClose64.342  # -- Begin function BZ2_bzWriteClose64.342
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.342,@function
BZ2_bzWriteClose64.342:                 # @BZ2_bzWriteClose64.342
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$612020930, -60(%rbp)   # imm = 0x247AB2C2
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB382_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB382_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB382_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB382_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB382_5:                              # %if.end5
	jmp	.LBB382_71
.LBB382_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB382_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB382_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB382_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB382_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB382_11:                             # %if.end14
	jmp	.LBB382_71
.LBB382_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB382_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB382_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB382_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB382_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB382_17:                             # %if.end24
	jmp	.LBB382_71
.LBB382_18:                             # %if.end25
	cmpq	$0, -56(%rbp)
	je	.LBB382_20
# %bb.19:                               # %if.then27
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB382_20:                             # %if.end28
	cmpq	$0, -48(%rbp)
	je	.LBB382_22
# %bb.21:                               # %if.then30
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB382_22:                             # %if.end31
	cmpq	$0, -40(%rbp)
	je	.LBB382_24
# %bb.23:                               # %if.then33
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB382_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB382_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB382_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB382_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB382_49
# %bb.28:                               # %if.then41
	jmp	.LBB382_29
.LBB382_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB382_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB382_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB382_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB382_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB382_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB382_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB382_35:                             # %if.end55
	jmp	.LBB382_71
.LBB382_36:                             # %if.end56
                                        #   in Loop: Header=BB382_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB382_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB382_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB382_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB382_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB382_44
.LBB382_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB382_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB382_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB382_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB382_43:                             # %if.end82
	jmp	.LBB382_71
.LBB382_44:                             # %if.end83
                                        #   in Loop: Header=BB382_29 Depth=1
	jmp	.LBB382_45
.LBB382_45:                             # %if.end84
                                        #   in Loop: Header=BB382_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB382_47
# %bb.46:                               # %if.then87
	jmp	.LBB382_48
.LBB382_47:                             # %if.end88
                                        #   in Loop: Header=BB382_29 Depth=1
	jmp	.LBB382_29
.LBB382_48:                             # %while.end
	jmp	.LBB382_49
.LBB382_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB382_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB382_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB382_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB382_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB382_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB382_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB382_56:                             # %if.end110
	jmp	.LBB382_71
.LBB382_57:                             # %if.end111
	jmp	.LBB382_58
.LBB382_58:                             # %if.end112
	cmpq	$0, -56(%rbp)
	je	.LBB382_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB382_60:                             # %if.end117
	cmpq	$0, -48(%rbp)
	je	.LBB382_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB382_62:                             # %if.end122
	cmpq	$0, -40(%rbp)
	je	.LBB382_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB382_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB382_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB382_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB382_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB382_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB382_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB382_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB382_71:                             # %return
	cmpl	$612020930, -60(%rbp)   # imm = 0x247AB2C2
	jne	.LBB382_73
.LBB382_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB382_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB382_72
.Lfunc_end382:
	.size	BZ2_bzWriteClose64.342, .Lfunc_end382-BZ2_bzWriteClose64.342
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.343 # -- Begin function BZ2_bzBuffToBuffDecompress.343
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.343,@function
BZ2_bzBuffToBuffDecompress.343:         # @BZ2_bzBuffToBuffDecompress.343
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1805143543, -40(%rbp)  # imm = 0x6B984DF7
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB383_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB383_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB383_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB383_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB383_7
.LBB383_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB383_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB383_8
.LBB383_7:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB383_19
.LBB383_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB383_10
# %bb.9:                                # %if.then12
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB383_19
.LBB383_10:                             # %if.end13
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB383_12
# %bb.11:                               # %if.then16
	jmp	.LBB383_15
.LBB383_12:                             # %if.end17
	cmpl	$4, -12(%rbp)
	je	.LBB383_14
# %bb.13:                               # %if.then19
	jmp	.LBB383_18
.LBB383_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB383_19
.LBB383_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB383_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -16(%rbp)
	jmp	.LBB383_19
.LBB383_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB383_19
.LBB383_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB383_19:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1805143543, -40(%rbp)  # imm = 0x6B984DF7
	jne	.LBB383_21
.LBB383_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB383_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB383_20
.Lfunc_end383:
	.size	BZ2_bzBuffToBuffDecompress.343, .Lfunc_end383-BZ2_bzBuffToBuffDecompress.343
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.344    # -- Begin function BZ2_bzDecompress.344
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.344,@function
BZ2_bzDecompress.344:                   # @BZ2_bzDecompress.344
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$74999006, -44(%rbp)    # imm = 0x47864DE
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB384_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB384_37
.LBB384_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB384_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB384_37
.LBB384_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB384_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB384_37
.LBB384_6:                              # %if.end7
	jmp	.LBB384_7
.LBB384_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB384_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB384_37
.LBB384_9:                              # %if.end11
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB384_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB384_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB384_13
.LBB384_12:                             # %if.else
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB384_13:                             # %if.end17
                                        #   in Loop: Header=BB384_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB384_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB384_37
.LBB384_15:                             # %if.end20
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB384_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB384_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB384_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB384_19:                             # %if.end29
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB384_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB384_21:                             # %if.end34
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB384_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB384_37
.LBB384_23:                             # %if.end39
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB384_25
.LBB384_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB384_37
.LBB384_25:                             # %if.end46
                                        #   in Loop: Header=BB384_7 Depth=1
	jmp	.LBB384_26
.LBB384_26:                             # %if.end47
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB384_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB384_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB384_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB384_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB384_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB384_37
.LBB384_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB384_37
.LBB384_33:                             # %if.end65
                                        #   in Loop: Header=BB384_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB384_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB384_37
.LBB384_35:                             # %if.end69
                                        #   in Loop: Header=BB384_7 Depth=1
	jmp	.LBB384_36
.LBB384_36:                             # %if.end70
                                        #   in Loop: Header=BB384_7 Depth=1
	jmp	.LBB384_7
.LBB384_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$74999006, -44(%rbp)    # imm = 0x47864DE
	jne	.LBB384_39
.LBB384_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB384_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB384_38
.Lfunc_end384:
	.size	BZ2_bzDecompress.344, .Lfunc_end384-BZ2_bzDecompress.344
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.345  # -- Begin function BZ2_bzWriteClose64.345
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.345,@function
BZ2_bzWriteClose64.345:                 # @BZ2_bzWriteClose64.345
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$1646177740, -60(%rbp)  # imm = 0x621EADCC
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB385_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB385_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB385_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB385_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB385_5:                              # %if.end5
	jmp	.LBB385_71
.LBB385_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB385_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB385_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB385_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB385_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB385_11:                             # %if.end14
	jmp	.LBB385_71
.LBB385_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB385_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB385_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB385_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB385_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB385_17:                             # %if.end24
	jmp	.LBB385_71
.LBB385_18:                             # %if.end25
	cmpq	$0, -48(%rbp)
	je	.LBB385_20
# %bb.19:                               # %if.then27
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB385_20:                             # %if.end28
	cmpq	$0, -56(%rbp)
	je	.LBB385_22
# %bb.21:                               # %if.then30
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB385_22:                             # %if.end31
	cmpq	$0, -40(%rbp)
	je	.LBB385_24
# %bb.23:                               # %if.then33
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB385_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB385_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB385_26:                             # %if.end37
	cmpl	$0, -28(%rbp)
	jne	.LBB385_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB385_49
# %bb.28:                               # %if.then41
	jmp	.LBB385_29
.LBB385_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB385_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB385_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB385_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB385_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB385_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB385_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB385_35:                             # %if.end55
	jmp	.LBB385_71
.LBB385_36:                             # %if.end56
                                        #   in Loop: Header=BB385_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB385_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB385_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB385_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB385_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB385_44
.LBB385_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB385_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB385_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB385_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB385_43:                             # %if.end82
	jmp	.LBB385_71
.LBB385_44:                             # %if.end83
                                        #   in Loop: Header=BB385_29 Depth=1
	jmp	.LBB385_45
.LBB385_45:                             # %if.end84
                                        #   in Loop: Header=BB385_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB385_47
# %bb.46:                               # %if.then87
	jmp	.LBB385_48
.LBB385_47:                             # %if.end88
                                        #   in Loop: Header=BB385_29 Depth=1
	jmp	.LBB385_29
.LBB385_48:                             # %while.end
	jmp	.LBB385_49
.LBB385_49:                             # %if.end89
	cmpl	$0, -28(%rbp)
	jne	.LBB385_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB385_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB385_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB385_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB385_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB385_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB385_56:                             # %if.end110
	jmp	.LBB385_71
.LBB385_57:                             # %if.end111
	jmp	.LBB385_58
.LBB385_58:                             # %if.end112
	cmpq	$0, -48(%rbp)
	je	.LBB385_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB385_60:                             # %if.end117
	cmpq	$0, -56(%rbp)
	je	.LBB385_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB385_62:                             # %if.end122
	cmpq	$0, -40(%rbp)
	je	.LBB385_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB385_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB385_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB385_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB385_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB385_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB385_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB385_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB385_71:                             # %return
	cmpl	$1646177740, -60(%rbp)  # imm = 0x621EADCC
	jne	.LBB385_73
.LBB385_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB385_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB385_72
.Lfunc_end385:
	.size	BZ2_bzWriteClose64.345, .Lfunc_end385-BZ2_bzWriteClose64.345
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffDecompress.346 # -- Begin function BZ2_bzBuffToBuffDecompress.346
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffDecompress.346,@function
BZ2_bzBuffToBuffDecompress.346:         # @BZ2_bzBuffToBuffDecompress.346
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$243730587, -36(%rbp)   # imm = 0xE87089B
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB386_7
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB386_7
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -56(%rbp)
	je	.LBB386_7
# %bb.3:                                # %lor.lhs.false4
	cmpl	$0, -24(%rbp)
	je	.LBB386_5
# %bb.4:                                # %land.lhs.true
	cmpl	$1, -24(%rbp)
	jne	.LBB386_7
.LBB386_5:                              # %lor.lhs.false7
	cmpl	$0, -20(%rbp)
	jl	.LBB386_7
# %bb.6:                                # %lor.lhs.false9
	cmpl	$4, -20(%rbp)
	jle	.LBB386_8
.LBB386_7:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB386_19
.LBB386_8:                              # %if.end
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB386_10
# %bb.9:                                # %if.then12
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB386_19
.LBB386_10:                             # %if.end13
	movq	-56(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompress
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB386_12
# %bb.11:                               # %if.then16
	jmp	.LBB386_15
.LBB386_12:                             # %if.end17
	cmpl	$4, -12(%rbp)
	je	.LBB386_14
# %bb.13:                               # %if.then19
	jmp	.LBB386_18
.LBB386_14:                             # %if.end20
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB386_19
.LBB386_15:                             # %output_overflow_or_eof
	cmpl	$0, -104(%rbp)
	jbe	.LBB386_17
# %bb.16:                               # %if.then25
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-7, -16(%rbp)
	jmp	.LBB386_19
.LBB386_17:                             # %if.else
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB386_19
.LBB386_18:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzDecompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB386_19:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$243730587, -36(%rbp)   # imm = 0xE87089B
	jne	.LBB386_21
.LBB386_20:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB386_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB386_20
.Lfunc_end386:
	.size	BZ2_bzBuffToBuffDecompress.346, .Lfunc_end386-BZ2_bzBuffToBuffDecompress.346
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadGetUnused.347 # -- Begin function BZ2_bzReadGetUnused.347
	.p2align	4, 0x90
	.type	BZ2_bzReadGetUnused.347,@function
BZ2_bzReadGetUnused.347:                # @BZ2_bzReadGetUnused.347
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1151953395, -20(%rbp)  # imm = 0x44A969F3
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB387_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB387_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB387_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB387_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB387_5:                              # %if.end5
	jmp	.LBB387_24
.LBB387_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpl	$4, 5096(%rax)
	je	.LBB387_12
# %bb.7:                                # %if.then9
	cmpq	$0, -16(%rbp)
	je	.LBB387_9
# %bb.8:                                # %if.then11
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB387_9:                              # %if.end12
	cmpq	$0, -8(%rbp)
	je	.LBB387_11
# %bb.10:                               # %if.then14
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB387_11:                             # %if.end16
	jmp	.LBB387_24
.LBB387_12:                             # %if.end17
	cmpq	$0, -32(%rbp)
	je	.LBB387_14
# %bb.13:                               # %lor.lhs.false
	cmpq	$0, -40(%rbp)
	jne	.LBB387_19
.LBB387_14:                             # %if.then20
	cmpq	$0, -16(%rbp)
	je	.LBB387_16
# %bb.15:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$-2, (%rax)
.LBB387_16:                             # %if.end23
	cmpq	$0, -8(%rbp)
	je	.LBB387_18
# %bb.17:                               # %if.then25
	movq	-8(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB387_18:                             # %if.end27
	jmp	.LBB387_24
.LBB387_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB387_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB387_21:                             # %if.end31
	cmpq	$0, -8(%rbp)
	je	.LBB387_23
# %bb.22:                               # %if.then33
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB387_23:                             # %if.end35
	movq	-8(%rbp), %rax
	movl	5024(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rax
	movq	5016(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB387_24:                             # %return
	cmpl	$1151953395, -20(%rbp)  # imm = 0x44A969F3
	jne	.LBB387_26
.LBB387_25:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB387_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB387_25
.Lfunc_end387:
	.size	BZ2_bzReadGetUnused.347, .Lfunc_end387-BZ2_bzReadGetUnused.347
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.348     # -- Begin function BZ2_bzWriteOpen.348
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.348,@function
BZ2_bzWriteOpen.348:                    # @BZ2_bzWriteOpen.348
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$475870710, -60(%rbp)   # imm = 0x1C5D35F6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB388_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB388_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB388_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB388_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB388_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -40(%rbp)
	jl	.LBB388_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -40(%rbp)
	jg	.LBB388_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB388_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB388_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -32(%rbp)
	jl	.LBB388_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -32(%rbp)
	jle	.LBB388_16
.LBB388_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB388_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB388_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB388_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB388_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB388_41
.LBB388_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB388_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB388_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB388_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB388_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB388_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB388_41
.LBB388_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB388_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB388_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB388_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB388_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB388_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB388_41
.LBB388_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB388_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB388_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB388_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB388_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB388_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB388_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-40(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB388_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB388_37
# %bb.36:                               # %if.then62
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB388_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB388_39
# %bb.38:                               # %if.then65
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB388_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB388_41
.LBB388_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB388_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$475870710, -60(%rbp)   # imm = 0x1C5D35F6
	jne	.LBB388_43
.LBB388_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB388_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB388_42
.Lfunc_end388:
	.size	BZ2_bzWriteOpen.348, .Lfunc_end388-BZ2_bzWriteOpen.348
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.349 # -- Begin function BZ2_bzBuffToBuffCompress.349
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.349,@function
BZ2_bzBuffToBuffCompress.349:           # @BZ2_bzBuffToBuffCompress.349
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1584607830, -40(%rbp)  # imm = 0x5E733256
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB389_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB389_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB389_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB389_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB389_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB389_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB389_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB389_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB389_10
.LBB389_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB389_21
.LBB389_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB389_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB389_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB389_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB389_21
.LBB389_14:                             # %if.end21
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB389_16
# %bb.15:                               # %if.then24
	jmp	.LBB389_19
.LBB389_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB389_18
# %bb.17:                               # %if.then27
	jmp	.LBB389_20
.LBB389_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB389_21
.LBB389_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB389_21
.LBB389_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB389_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1584607830, -40(%rbp)  # imm = 0x5E733256
	jne	.LBB389_23
.LBB389_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB389_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB389_22
.Lfunc_end389:
	.size	BZ2_bzBuffToBuffCompress.349, .Lfunc_end389-BZ2_bzBuffToBuffCompress.349
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.350     # -- Begin function BZ2_bzWriteOpen.350
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.350,@function
BZ2_bzWriteOpen.350:                    # @BZ2_bzWriteOpen.350
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1260490213, -60(%rbp)  # imm = 0x4B218DE5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB390_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB390_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB390_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB390_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB390_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB390_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -36(%rbp)
	jg	.LBB390_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB390_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB390_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -40(%rbp)
	jl	.LBB390_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -40(%rbp)
	jle	.LBB390_16
.LBB390_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB390_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB390_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB390_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB390_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB390_41
.LBB390_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB390_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB390_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB390_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB390_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB390_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB390_41
.LBB390_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB390_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB390_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB390_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB390_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB390_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB390_41
.LBB390_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB390_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB390_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB390_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB390_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB390_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB390_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB390_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB390_37
# %bb.36:                               # %if.then62
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB390_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB390_39
# %bb.38:                               # %if.then65
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB390_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB390_41
.LBB390_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB390_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1260490213, -60(%rbp)  # imm = 0x4B218DE5
	jne	.LBB390_43
.LBB390_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB390_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB390_42
.Lfunc_end390:
	.size	BZ2_bzWriteOpen.350, .Lfunc_end390-BZ2_bzWriteOpen.350
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.351    # -- Begin function BZ2_bzDecompress.351
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.351,@function
BZ2_bzDecompress.351:                   # @BZ2_bzDecompress.351
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1386106220, -44(%rbp)  # imm = 0x529E4D6C
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB391_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB391_37
.LBB391_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB391_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB391_37
.LBB391_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB391_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB391_37
.LBB391_6:                              # %if.end7
	jmp	.LBB391_7
.LBB391_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB391_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB391_37
.LBB391_9:                              # %if.end11
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB391_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB391_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB391_13
.LBB391_12:                             # %if.else
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB391_13:                             # %if.end17
                                        #   in Loop: Header=BB391_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB391_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB391_37
.LBB391_15:                             # %if.end20
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB391_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB391_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB391_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB391_19:                             # %if.end29
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB391_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB391_21:                             # %if.end34
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB391_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB391_37
.LBB391_23:                             # %if.end39
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB391_25
.LBB391_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB391_37
.LBB391_25:                             # %if.end46
                                        #   in Loop: Header=BB391_7 Depth=1
	jmp	.LBB391_26
.LBB391_26:                             # %if.end47
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB391_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB391_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB391_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB391_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB391_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB391_37
.LBB391_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB391_37
.LBB391_33:                             # %if.end65
                                        #   in Loop: Header=BB391_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB391_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB391_37
.LBB391_35:                             # %if.end69
                                        #   in Loop: Header=BB391_7 Depth=1
	jmp	.LBB391_36
.LBB391_36:                             # %if.end70
                                        #   in Loop: Header=BB391_7 Depth=1
	jmp	.LBB391_7
.LBB391_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1386106220, -44(%rbp)  # imm = 0x529E4D6C
	jne	.LBB391_39
.LBB391_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB391_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB391_38
.Lfunc_end391:
	.size	BZ2_bzDecompress.351, .Lfunc_end391-BZ2_bzDecompress.351
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.352          # -- Begin function BZ2_bzread.352
	.p2align	4, 0x90
	.type	BZ2_bzread.352,@function
BZ2_bzread.352:                         # @BZ2_bzread.352
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$249467309, -28(%rbp)   # imm = 0xEDE91AD
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB392_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB392_6
.LBB392_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -24(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB392_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB392_5
.LBB392_4:                              # %if.then3
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB392_6
.LBB392_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB392_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$249467309, -28(%rbp)   # imm = 0xEDE91AD
	jne	.LBB392_8
.LBB392_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB392_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB392_7
.Lfunc_end392:
	.size	BZ2_bzread.352, .Lfunc_end392-BZ2_bzread.352
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzReadOpen.353      # -- Begin function BZ2_bzReadOpen.353
	.p2align	4, 0x90
	.type	BZ2_bzReadOpen.353,@function
BZ2_bzReadOpen.353:                     # @BZ2_bzReadOpen.353
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$942919686, -76(%rbp)   # imm = 0x3833D006
	movq	%rdi, -32(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -44(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -20(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB393_2
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB393_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB393_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB393_4:                              # %if.end3
	cmpq	$0, -72(%rbp)
	je	.LBB393_14
# %bb.5:                                # %lor.lhs.false
	cmpl	$0, -44(%rbp)
	je	.LBB393_7
# %bb.6:                                # %land.lhs.true
	cmpl	$1, -44(%rbp)
	jne	.LBB393_14
.LBB393_7:                              # %lor.lhs.false7
	cmpl	$0, -36(%rbp)
	jl	.LBB393_14
# %bb.8:                                # %lor.lhs.false9
	cmpl	$4, -36(%rbp)
	jg	.LBB393_14
# %bb.9:                                # %lor.lhs.false11
	cmpq	$0, -56(%rbp)
	jne	.LBB393_11
# %bb.10:                               # %land.lhs.true13
	cmpl	$0, -20(%rbp)
	jne	.LBB393_14
.LBB393_11:                             # %lor.lhs.false15
	cmpq	$0, -56(%rbp)
	je	.LBB393_19
# %bb.12:                               # %land.lhs.true17
	cmpl	$0, -20(%rbp)
	jl	.LBB393_14
# %bb.13:                               # %lor.lhs.false19
	cmpl	$5000, -20(%rbp)        # imm = 0x1388
	jle	.LBB393_19
.LBB393_14:                             # %if.then21
	cmpq	$0, -32(%rbp)
	je	.LBB393_16
# %bb.15:                               # %if.then23
	movq	-32(%rbp), %rax
	movl	$-2, (%rax)
.LBB393_16:                             # %if.end24
	cmpq	$0, -16(%rbp)
	je	.LBB393_18
# %bb.17:                               # %if.then26
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB393_18:                             # %if.end28
	movq	$0, -64(%rbp)
	jmp	.LBB393_45
.LBB393_19:                             # %if.end29
	movq	-72(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB393_25
# %bb.20:                               # %if.then30
	cmpq	$0, -32(%rbp)
	je	.LBB393_22
# %bb.21:                               # %if.then32
	movq	-32(%rbp), %rax
	movl	$-6, (%rax)
.LBB393_22:                             # %if.end33
	cmpq	$0, -16(%rbp)
	je	.LBB393_24
# %bb.23:                               # %if.then35
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB393_24:                             # %if.end37
	movq	$0, -64(%rbp)
	jmp	.LBB393_45
.LBB393_25:                             # %if.end38
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB393_31
# %bb.26:                               # %if.then41
	cmpq	$0, -32(%rbp)
	je	.LBB393_28
# %bb.27:                               # %if.then43
	movq	-32(%rbp), %rax
	movl	$-3, (%rax)
.LBB393_28:                             # %if.end44
	cmpq	$0, -16(%rbp)
	je	.LBB393_30
# %bb.29:                               # %if.then46
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB393_30:                             # %if.end48
	movq	$0, -64(%rbp)
	jmp	.LBB393_45
.LBB393_31:                             # %if.end49
	cmpq	$0, -32(%rbp)
	je	.LBB393_33
# %bb.32:                               # %if.then51
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB393_33:                             # %if.end52
	cmpq	$0, -16(%rbp)
	je	.LBB393_35
# %bb.34:                               # %if.then54
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB393_35:                             # %if.end56
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
.LBB393_36:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jle	.LBB393_38
# %bb.37:                               # %while.body
                                        #   in Loop: Header=BB393_36 Depth=1
	movq	-56(%rbp), %rax
	movb	(%rax), %al
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	5008(%rdx), %rdx
	movb	%al, 8(%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	5008(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 5008(%rax)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB393_36
.LBB393_38:                             # %while.end
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	callq	BZ2_bzDecompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB393_44
# %bb.39:                               # %if.then65
	cmpq	$0, -32(%rbp)
	je	.LBB393_41
# %bb.40:                               # %if.then67
	movl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB393_41:                             # %if.end68
	cmpq	$0, -16(%rbp)
	je	.LBB393_43
# %bb.42:                               # %if.then70
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB393_43:                             # %if.end72
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -64(%rbp)
	jmp	.LBB393_45
.LBB393_44:                             # %if.end73
	movq	-16(%rbp), %rax
	movl	5008(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5024(%rcx)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 5016(%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB393_45:                             # %return
	movq	-64(%rbp), %rbx
	cmpl	$942919686, -76(%rbp)   # imm = 0x3833D006
	jne	.LBB393_47
.LBB393_46:
	movq	%rbx, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB393_47:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB393_46
.Lfunc_end393:
	.size	BZ2_bzReadOpen.353, .Lfunc_end393-BZ2_bzReadOpen.353
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.354
	.type	bzopen_or_bzdopen.354,@function
bzopen_or_bzdopen.354:                  # @bzopen_or_bzdopen.354
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$1884636372, -68(%rbp)  # imm = 0x705544D4
	movq	%rdi, -64(%rbp)
	movl	%esi, -80(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -88(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -84(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -72(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB394_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB394_39
.LBB394_2:                              # %if.end
	jmp	.LBB394_3
.LBB394_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB394_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB394_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB394_7
	jmp	.LBB394_5
.LBB394_5:                              # %while.body
                                        #   in Loop: Header=BB394_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB394_9
	jmp	.LBB394_6
.LBB394_6:                              # %while.body
                                        #   in Loop: Header=BB394_3 Depth=1
	subl	$119, %eax
	je	.LBB394_8
	jmp	.LBB394_10
.LBB394_7:                              # %sw.bb
                                        #   in Loop: Header=BB394_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB394_13
.LBB394_8:                              # %sw.bb1
                                        #   in Loop: Header=BB394_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB394_13
.LBB394_9:                              # %sw.bb2
                                        #   in Loop: Header=BB394_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB394_13
.LBB394_10:                             # %sw.default
                                        #   in Loop: Header=BB394_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB394_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB394_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB394_12:                             # %if.end8
                                        #   in Loop: Header=BB394_3 Depth=1
	jmp	.LBB394_13
.LBB394_13:                             # %sw.epilog
                                        #   in Loop: Header=BB394_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB394_3
.LBB394_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -88(%rbp)
	jne	.LBB394_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB394_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB394_21
.LBB394_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB394_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB394_20
.LBB394_19:                             # %cond.false
	movq	stdin, %rax
.LBB394_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB394_22
.LBB394_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB394_22:                             # %if.end26
	jmp	.LBB394_24
.LBB394_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-80(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB394_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB394_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB394_39
.LBB394_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB394_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB394_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB394_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB394_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB394_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-84(%rbp), %r8d
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB394_33
.LBB394_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-72(%rbp), %r9d
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB394_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB394_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB394_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB394_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB394_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB394_39
.LBB394_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB394_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1884636372, -68(%rbp)  # imm = 0x705544D4
	jne	.LBB394_41
.LBB394_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB394_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB394_40
.Lfunc_end394:
	.size	bzopen_or_bzdopen.354, .Lfunc_end394-bzopen_or_bzdopen.354
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.355
	.type	unRLE_obuf_to_output_FAST.355,@function
unRLE_obuf_to_output_FAST.355:          # @unRLE_obuf_to_output_FAST.355
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$159653864, -84(%rbp)   # imm = 0x9841FE8
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB395_48
# %bb.1:                                # %if.then
	jmp	.LBB395_2
.LBB395_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB395_3 Depth 2
	jmp	.LBB395_3
.LBB395_3:                              # %while.body2
                                        #   Parent Loop BB395_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB395_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB395_82
.LBB395_5:                              # %if.end
                                        #   in Loop: Header=BB395_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB395_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_10
.LBB395_7:                              # %if.end6
                                        #   in Loop: Header=BB395_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB395_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB395_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB395_9:                              # %if.end26
                                        #   in Loop: Header=BB395_3 Depth=2
	jmp	.LBB395_3
.LBB395_10:                             # %while.end
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB395_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB395_82
.LBB395_12:                             # %if.end30
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB395_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB395_82
.LBB395_14:                             # %if.end37
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB395_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB395_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB395_17:                             # %if.end61
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_18
.LBB395_18:                             # %if.end62
                                        #   in Loop: Header=BB395_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB395_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_20
.LBB395_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_2
.LBB395_21:                             # %if.end79
                                        #   in Loop: Header=BB395_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB395_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB395_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB395_20
.LBB395_23:                             # %if.end87
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB395_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB395_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB395_26:                             # %if.end114
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_27
.LBB395_27:                             # %if.end115
                                        #   in Loop: Header=BB395_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB395_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_20
.LBB395_29:                             # %if.end133
                                        #   in Loop: Header=BB395_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB395_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB395_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB395_20
.LBB395_31:                             # %if.end141
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB395_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB395_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB395_34:                             # %if.end168
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_35
.LBB395_35:                             # %if.end169
                                        #   in Loop: Header=BB395_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB395_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_20
.LBB395_37:                             # %if.end187
                                        #   in Loop: Header=BB395_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB395_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB395_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB395_20
.LBB395_39:                             # %if.end195
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB395_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB395_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB395_42:                             # %if.end221
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_43
.LBB395_43:                             # %if.end222
                                        #   in Loop: Header=BB395_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB395_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB395_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB395_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB395_46:                             # %if.end264
                                        #   in Loop: Header=BB395_2 Depth=1
	jmp	.LBB395_47
.LBB395_47:                             # %if.end265
                                        #   in Loop: Header=BB395_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB395_20
.LBB395_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB395_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB395_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB395_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB395_49 Depth=1
	jmp	.LBB395_51
.LBB395_51:                             # %while.body294
                                        #   Parent Loop BB395_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -48(%rbp)
	jne	.LBB395_53
# %bb.52:                               # %if.then297
	jmp	.LBB395_78
.LBB395_53:                             # %if.end298
                                        #   in Loop: Header=BB395_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB395_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB395_49 Depth=1
	jmp	.LBB395_56
.LBB395_55:                             # %if.end302
                                        #   in Loop: Header=BB395_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB395_51
.LBB395_56:                             # %while.end313
                                        #   in Loop: Header=BB395_49 Depth=1
	jmp	.LBB395_57
.LBB395_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB395_49 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB395_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB395_78
.LBB395_59:                             # %if.end317
                                        #   in Loop: Header=BB395_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
.LBB395_60:                             # %if.end327
                                        #   in Loop: Header=BB395_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB395_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB395_82
.LBB395_62:                             # %if.end331
                                        #   in Loop: Header=BB395_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB395_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB395_78
.LBB395_64:                             # %if.end335
                                        #   in Loop: Header=BB395_49 Depth=1
	movl	-52(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB395_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB395_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB395_57
.LBB395_66:                             # %if.end348
                                        #   in Loop: Header=BB395_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB395_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB395_49 Depth=1
	jmp	.LBB395_57
.LBB395_68:                             # %if.end352
                                        #   in Loop: Header=BB395_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB395_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB395_49 Depth=1
	jmp	.LBB395_70
.LBB395_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB395_49 Depth=1
	jmp	.LBB395_49
.LBB395_71:                             # %if.end362
                                        #   in Loop: Header=BB395_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB395_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB395_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB395_70
.LBB395_73:                             # %if.end368
                                        #   in Loop: Header=BB395_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB395_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB395_49 Depth=1
	jmp	.LBB395_70
.LBB395_75:                             # %if.end378
                                        #   in Loop: Header=BB395_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.LBB395_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB395_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB395_70
.LBB395_77:                             # %if.end384
                                        #   in Loop: Header=BB395_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB395_70
.LBB395_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -88(%rbp)
	movl	-92(%rbp), %eax
	subl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-88(%rbp), %eax
	jae	.LBB395_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB395_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB395_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$159653864, -84(%rbp)   # imm = 0x9841FE8
	jne	.LBB395_84
.LBB395_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB395_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB395_83
.Lfunc_end395:
	.size	unRLE_obuf_to_output_FAST.355, .Lfunc_end395-unRLE_obuf_to_output_FAST.355
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteOpen.356     # -- Begin function BZ2_bzWriteOpen.356
	.p2align	4, 0x90
	.type	BZ2_bzWriteOpen.356,@function
BZ2_bzWriteOpen.356:                    # @BZ2_bzWriteOpen.356
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1780827200, -60(%rbp)  # imm = 0x6A254440
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB396_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB396_2:                              # %if.end
	cmpq	$0, -16(%rbp)
	je	.LBB396_4
# %bb.3:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB396_4:                              # %if.end3
	cmpq	$0, -56(%rbp)
	je	.LBB396_11
# %bb.5:                                # %lor.lhs.false
	cmpl	$1, -32(%rbp)
	jl	.LBB396_11
# %bb.6:                                # %lor.lhs.false6
	cmpl	$9, -32(%rbp)
	jg	.LBB396_11
# %bb.7:                                # %lor.lhs.false8
	cmpl	$0, -28(%rbp)
	jl	.LBB396_11
# %bb.8:                                # %lor.lhs.false10
	cmpl	$250, -28(%rbp)
	jg	.LBB396_11
# %bb.9:                                # %lor.lhs.false12
	cmpl	$0, -36(%rbp)
	jl	.LBB396_11
# %bb.10:                               # %lor.lhs.false14
	cmpl	$4, -36(%rbp)
	jle	.LBB396_16
.LBB396_11:                             # %if.then16
	cmpq	$0, -24(%rbp)
	je	.LBB396_13
# %bb.12:                               # %if.then18
	movq	-24(%rbp), %rax
	movl	$-2, (%rax)
.LBB396_13:                             # %if.end19
	cmpq	$0, -16(%rbp)
	je	.LBB396_15
# %bb.14:                               # %if.then21
	movq	-16(%rbp), %rax
	movl	$-2, 5096(%rax)
.LBB396_15:                             # %if.end23
	movq	$0, -48(%rbp)
	jmp	.LBB396_41
.LBB396_16:                             # %if.end24
	movq	-56(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB396_22
# %bb.17:                               # %if.then25
	cmpq	$0, -24(%rbp)
	je	.LBB396_19
# %bb.18:                               # %if.then27
	movq	-24(%rbp), %rax
	movl	$-6, (%rax)
.LBB396_19:                             # %if.end28
	cmpq	$0, -16(%rbp)
	je	.LBB396_21
# %bb.20:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB396_21:                             # %if.end32
	movq	$0, -48(%rbp)
	jmp	.LBB396_41
.LBB396_22:                             # %if.end33
	movl	$5104, %edi             # imm = 0x13F0
	callq	malloc
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB396_28
# %bb.23:                               # %if.then36
	cmpq	$0, -24(%rbp)
	je	.LBB396_25
# %bb.24:                               # %if.then38
	movq	-24(%rbp), %rax
	movl	$-3, (%rax)
.LBB396_25:                             # %if.end39
	cmpq	$0, -16(%rbp)
	je	.LBB396_27
# %bb.26:                               # %if.then41
	movq	-16(%rbp), %rax
	movl	$-3, 5096(%rax)
.LBB396_27:                             # %if.end43
	movq	$0, -48(%rbp)
	jmp	.LBB396_41
.LBB396_28:                             # %if.end44
	cmpq	$0, -24(%rbp)
	je	.LBB396_30
# %bb.29:                               # %if.then46
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.LBB396_30:                             # %if.end47
	cmpq	$0, -16(%rbp)
	je	.LBB396_32
# %bb.31:                               # %if.then49
	movq	-16(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB396_32:                             # %if.end51
	movq	-16(%rbp), %rax
	movb	$0, 5100(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 5008(%rax)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movb	$1, 5012(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5072(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5080(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 5088(%rax)
	cmpl	$0, -28(%rbp)
	jne	.LBB396_34
# %bb.33:                               # %if.then55
	movl	$30, -28(%rbp)
.LBB396_34:                             # %if.end56
	movq	-16(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	callq	BZ2_bzCompressInit
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB396_40
# %bb.35:                               # %if.then60
	cmpq	$0, -24(%rbp)
	je	.LBB396_37
# %bb.36:                               # %if.then62
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB396_37:                             # %if.end63
	cmpq	$0, -16(%rbp)
	je	.LBB396_39
# %bb.38:                               # %if.then65
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB396_39:                             # %if.end67
	movq	-16(%rbp), %rdi
	callq	free
	movq	$0, -48(%rbp)
	jmp	.LBB396_41
.LBB396_40:                             # %if.end68
	movq	-16(%rbp), %rax
	movl	$0, 5024(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 5100(%rax)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB396_41:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1780827200, -60(%rbp)  # imm = 0x6A254440
	jne	.LBB396_43
.LBB396_42:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB396_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB396_42
.Lfunc_end396:
	.size	BZ2_bzWriteOpen.356, .Lfunc_end396-BZ2_bzWriteOpen.356
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.357          # -- Begin function BZ2_bzread.357
	.p2align	4, 0x90
	.type	BZ2_bzread.357,@function
BZ2_bzread.357:                         # @BZ2_bzread.357
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1453304126, -28(%rbp)  # imm = 0x569FA93E
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB397_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB397_6
.LBB397_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -24(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB397_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB397_5
.LBB397_4:                              # %if.then3
	movl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB397_6
.LBB397_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB397_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1453304126, -28(%rbp)  # imm = 0x569FA93E
	jne	.LBB397_8
.LBB397_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB397_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB397_7
.Lfunc_end397:
	.size	BZ2_bzread.357, .Lfunc_end397-BZ2_bzread.357
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.358  # -- Begin function BZ2_bzCompressInit.358
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.358,@function
BZ2_bzCompressInit.358:                 # @BZ2_bzCompressInit.358
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1120926304, -44(%rbp)  # imm = 0x42CFFA60
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB398_2
# %bb.1:                                # %if.then
	movl	$-9, -32(%rbp)
	jmp	.LBB398_29
.LBB398_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB398_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -28(%rbp)
	jl	.LBB398_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -28(%rbp)
	jg	.LBB398_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -36(%rbp)
	jl	.LBB398_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -36(%rbp)
	jle	.LBB398_8
.LBB398_7:                              # %if.then8
	movl	$-2, -32(%rbp)
	jmp	.LBB398_29
.LBB398_8:                              # %if.end9
	cmpl	$0, -36(%rbp)
	jne	.LBB398_10
# %bb.9:                                # %if.then11
	movl	$30, -36(%rbp)
.LBB398_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB398_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB398_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB398_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB398_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB398_16
# %bb.15:                               # %if.then24
	movl	$-3, -32(%rbp)
	jmp	.LBB398_29
.LBB398_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB398_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB398_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB398_28
.LBB398_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB398_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB398_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB398_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB398_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB398_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB398_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB398_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB398_27:                             # %if.end85
	movl	$-3, -32(%rbp)
	jmp	.LBB398_29
.LBB398_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -32(%rbp)
.LBB398_29:                             # %return
	movl	-32(%rbp), %ebx
	cmpl	$1120926304, -44(%rbp)  # imm = 0x42CFFA60
	jne	.LBB398_31
.LBB398_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB398_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB398_30
.Lfunc_end398:
	.size	BZ2_bzCompressInit.358, .Lfunc_end398-BZ2_bzCompressInit.358
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.359
	.type	default_bzalloc.359,@function
default_bzalloc.359:                    # @default_bzalloc.359
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$493868720, -20(%rbp)   # imm = 0x1D6FD6B0
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	-12(%rbp), %eax
	imull	-16(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$493868720, -20(%rbp)   # imm = 0x1D6FD6B0
	jne	.LBB399_2
.LBB399_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB399_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB399_1
.Lfunc_end399:
	.size	default_bzalloc.359, .Lfunc_end399-default_bzalloc.359
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.360      # -- Begin function BZ2_bzCompress.360
	.p2align	4, 0x90
	.type	BZ2_bzCompress.360,@function
BZ2_bzCompress.360:                     # @BZ2_bzCompress.360
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1001378308, -44(%rbp)  # imm = 0x3BAFD204
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB400_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB400_39
.LBB400_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB400_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB400_39
.LBB400_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB400_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB400_39
.LBB400_6:                              # %if.end7
	jmp	.LBB400_7
.LBB400_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB400_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB400_7 Depth=1
	movq	.LJTI400_0(,%rax,8), %rax
	jmpq	*%rax
.LBB400_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB400_39
.LBB400_10:                             # %sw.bb8
                                        #   in Loop: Header=BB400_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB400_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB400_39
.LBB400_12:                             # %if.else
                                        #   in Loop: Header=BB400_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB400_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB400_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB400_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB400_7 Depth=1
	jmp	.LBB400_7
.LBB400_15:                             # %if.else15
                                        #   in Loop: Header=BB400_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB400_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB400_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB400_14
.LBB400_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB400_39
.LBB400_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB400_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB400_39
.LBB400_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB400_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB400_39
.LBB400_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB400_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB400_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB400_26
.LBB400_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB400_39
.LBB400_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB400_39
.LBB400_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB400_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB400_39
.LBB400_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB400_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB400_39
.LBB400_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB400_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB400_39
.LBB400_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB400_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB400_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB400_37
.LBB400_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB400_39
.LBB400_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB400_39
.LBB400_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB400_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1001378308, -44(%rbp)  # imm = 0x3BAFD204
	jne	.LBB400_41
.LBB400_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB400_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB400_40
.Lfunc_end400:
	.size	BZ2_bzCompress.360, .Lfunc_end400-BZ2_bzCompress.360
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI400_0:
	.quad	.LBB400_9
	.quad	.LBB400_10
	.quad	.LBB400_18
	.quad	.LBB400_27
                                        # -- End function
	.text
	.globl	BZ2_bzCompressInit.361  # -- Begin function BZ2_bzCompressInit.361
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.361,@function
BZ2_bzCompressInit.361:                 # @BZ2_bzCompressInit.361
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$75750019, -48(%rbp)    # imm = 0x483DA83
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB401_2
# %bb.1:                                # %if.then
	movl	$-9, -32(%rbp)
	jmp	.LBB401_29
.LBB401_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB401_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -28(%rbp)
	jl	.LBB401_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -28(%rbp)
	jg	.LBB401_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -36(%rbp)
	jl	.LBB401_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -36(%rbp)
	jle	.LBB401_8
.LBB401_7:                              # %if.then8
	movl	$-2, -32(%rbp)
	jmp	.LBB401_29
.LBB401_8:                              # %if.end9
	cmpl	$0, -36(%rbp)
	jne	.LBB401_10
# %bb.9:                                # %if.then11
	movl	$30, -36(%rbp)
.LBB401_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB401_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB401_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB401_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB401_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB401_16
# %bb.15:                               # %if.then24
	movl	$-3, -32(%rbp)
	jmp	.LBB401_29
.LBB401_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB401_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB401_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB401_28
.LBB401_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB401_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB401_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB401_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB401_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB401_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB401_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB401_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB401_27:                             # %if.end85
	movl	$-3, -32(%rbp)
	jmp	.LBB401_29
.LBB401_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -32(%rbp)
.LBB401_29:                             # %return
	movl	-32(%rbp), %ebx
	cmpl	$75750019, -48(%rbp)    # imm = 0x483DA83
	jne	.LBB401_31
.LBB401_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB401_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB401_30
.Lfunc_end401:
	.size	BZ2_bzCompressInit.361, .Lfunc_end401-BZ2_bzCompressInit.361
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.362
	.type	default_bzalloc.362,@function
default_bzalloc.362:                    # @default_bzalloc.362
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$241497618, -20(%rbp)   # imm = 0xE64F612
	movq	%rdi, -40(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	-16(%rbp), %eax
	imull	-12(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$241497618, -20(%rbp)   # imm = 0xE64F612
	jne	.LBB402_2
.LBB402_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB402_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB402_1
.Lfunc_end402:
	.size	default_bzalloc.362, .Lfunc_end402-default_bzalloc.362
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.363
	.type	bzopen_or_bzdopen.363,@function
bzopen_or_bzdopen.363:                  # @bzopen_or_bzdopen.363
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$1790990695, -84(%rbp)  # imm = 0x6AC05967
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -88(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$30, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -76(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB403_2
# %bb.1:                                # %if.then
	movq	$0, -56(%rbp)
	jmp	.LBB403_39
.LBB403_2:                              # %if.end
	jmp	.LBB403_3
.LBB403_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB403_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB403_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB403_7
	jmp	.LBB403_5
.LBB403_5:                              # %while.body
                                        #   in Loop: Header=BB403_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB403_9
	jmp	.LBB403_6
.LBB403_6:                              # %while.body
                                        #   in Loop: Header=BB403_3 Depth=1
	subl	$119, %eax
	je	.LBB403_8
	jmp	.LBB403_10
.LBB403_7:                              # %sw.bb
                                        #   in Loop: Header=BB403_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB403_13
.LBB403_8:                              # %sw.bb1
                                        #   in Loop: Header=BB403_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB403_13
.LBB403_9:                              # %sw.bb2
                                        #   in Loop: Header=BB403_3 Depth=1
	movl	$1, -40(%rbp)
	jmp	.LBB403_13
.LBB403_10:                             # %sw.default
                                        #   in Loop: Header=BB403_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB403_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB403_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB403_12:                             # %if.end8
                                        #   in Loop: Header=BB403_3 Depth=1
	jmp	.LBB403_13
.LBB403_13:                             # %sw.epilog
                                        #   in Loop: Header=BB403_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB403_3
.LBB403_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -88(%rbp)
	jne	.LBB403_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB403_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB403_21
.LBB403_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB403_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB403_20
.LBB403_19:                             # %cond.false
	movq	stdin, %rax
.LBB403_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB403_22
.LBB403_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB403_22:                             # %if.end26
	jmp	.LBB403_24
.LBB403_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-72(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB403_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB403_26
# %bb.25:                               # %if.then33
	movq	$0, -56(%rbp)
	jmp	.LBB403_39
.LBB403_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB403_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB403_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB403_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB403_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB403_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-68(%rbp), %r8d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -48(%rbp)
	jmp	.LBB403_33
.LBB403_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-76(%rbp), %r9d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
.LBB403_33:                             # %if.end49
	cmpq	$0, -48(%rbp)
	jne	.LBB403_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB403_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB403_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB403_37:                             # %if.end59
	movq	$0, -56(%rbp)
	jmp	.LBB403_39
.LBB403_38:                             # %if.end60
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB403_39:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$1790990695, -84(%rbp)  # imm = 0x6AC05967
	jne	.LBB403_41
.LBB403_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB403_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB403_40
.Lfunc_end403:
	.size	bzopen_or_bzdopen.363, .Lfunc_end403-bzopen_or_bzdopen.363
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.364
	.type	default_bzalloc.364,@function
default_bzalloc.364:                    # @default_bzalloc.364
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2079019840, -16(%rbp)  # imm = 0x7BEB5340
	movq	%rdi, -40(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -12(%rbp)
	movl	-20(%rbp), %eax
	imull	-12(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$2079019840, -16(%rbp)  # imm = 0x7BEB5340
	jne	.LBB404_2
.LBB404_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB404_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB404_1
.Lfunc_end404:
	.size	default_bzalloc.364, .Lfunc_end404-default_bzalloc.364
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.365  # -- Begin function BZ2_bzCompressInit.365
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.365,@function
BZ2_bzCompressInit.365:                 # @BZ2_bzCompressInit.365
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$541995778, -48(%rbp)   # imm = 0x204E3302
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB405_2
# %bb.1:                                # %if.then
	movl	$-9, -32(%rbp)
	jmp	.LBB405_29
.LBB405_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB405_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -28(%rbp)
	jl	.LBB405_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -28(%rbp)
	jg	.LBB405_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -36(%rbp)
	jl	.LBB405_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -36(%rbp)
	jle	.LBB405_8
.LBB405_7:                              # %if.then8
	movl	$-2, -32(%rbp)
	jmp	.LBB405_29
.LBB405_8:                              # %if.end9
	cmpl	$0, -36(%rbp)
	jne	.LBB405_10
# %bb.9:                                # %if.then11
	movl	$30, -36(%rbp)
.LBB405_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB405_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB405_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB405_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB405_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB405_16
# %bb.15:                               # %if.then24
	movl	$-3, -32(%rbp)
	jmp	.LBB405_29
.LBB405_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB405_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB405_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB405_28
.LBB405_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB405_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB405_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB405_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB405_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB405_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB405_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB405_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB405_27:                             # %if.end85
	movl	$-3, -32(%rbp)
	jmp	.LBB405_29
.LBB405_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -32(%rbp)
.LBB405_29:                             # %return
	movl	-32(%rbp), %ebx
	cmpl	$541995778, -48(%rbp)   # imm = 0x204E3302
	jne	.LBB405_31
.LBB405_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB405_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB405_30
.Lfunc_end405:
	.size	BZ2_bzCompressInit.365, .Lfunc_end405-BZ2_bzCompressInit.365
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.366 # -- Begin function BZ2_bzBuffToBuffCompress.366
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.366,@function
BZ2_bzBuffToBuffCompress.366:           # @BZ2_bzBuffToBuffCompress.366
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1846604427, -40(%rbp)  # imm = 0x6E10F28B
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB406_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB406_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB406_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB406_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB406_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB406_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB406_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB406_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB406_10
.LBB406_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB406_21
.LBB406_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB406_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB406_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB406_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB406_21
.LBB406_14:                             # %if.end21
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB406_16
# %bb.15:                               # %if.then24
	jmp	.LBB406_19
.LBB406_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB406_18
# %bb.17:                               # %if.then27
	jmp	.LBB406_20
.LBB406_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB406_21
.LBB406_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB406_21
.LBB406_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB406_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1846604427, -40(%rbp)  # imm = 0x6E10F28B
	jne	.LBB406_23
.LBB406_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB406_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB406_22
.Lfunc_end406:
	.size	BZ2_bzBuffToBuffCompress.366, .Lfunc_end406-BZ2_bzBuffToBuffCompress.366
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.367    # -- Begin function BZ2_bzDecompress.367
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.367,@function
BZ2_bzDecompress.367:                   # @BZ2_bzDecompress.367
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1535666073, -44(%rbp)  # imm = 0x5B886799
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB407_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB407_37
.LBB407_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB407_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB407_37
.LBB407_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB407_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB407_37
.LBB407_6:                              # %if.end7
	jmp	.LBB407_7
.LBB407_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB407_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB407_37
.LBB407_9:                              # %if.end11
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB407_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB407_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB407_13
.LBB407_12:                             # %if.else
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB407_13:                             # %if.end17
                                        #   in Loop: Header=BB407_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB407_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB407_37
.LBB407_15:                             # %if.end20
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB407_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB407_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB407_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB407_19:                             # %if.end29
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB407_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB407_21:                             # %if.end34
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB407_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB407_37
.LBB407_23:                             # %if.end39
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB407_25
.LBB407_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB407_37
.LBB407_25:                             # %if.end46
                                        #   in Loop: Header=BB407_7 Depth=1
	jmp	.LBB407_26
.LBB407_26:                             # %if.end47
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB407_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB407_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB407_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB407_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB407_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB407_37
.LBB407_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB407_37
.LBB407_33:                             # %if.end65
                                        #   in Loop: Header=BB407_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB407_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB407_37
.LBB407_35:                             # %if.end69
                                        #   in Loop: Header=BB407_7 Depth=1
	jmp	.LBB407_36
.LBB407_36:                             # %if.end70
                                        #   in Loop: Header=BB407_7 Depth=1
	jmp	.LBB407_7
.LBB407_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1535666073, -44(%rbp)  # imm = 0x5B886799
	jne	.LBB407_39
.LBB407_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB407_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB407_38
.Lfunc_end407:
	.size	BZ2_bzDecompress.367, .Lfunc_end407-BZ2_bzDecompress.367
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.368
	.type	bzopen_or_bzdopen.368,@function
bzopen_or_bzdopen.368:                  # @bzopen_or_bzdopen.368
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$1086354150, -84(%rbp)  # imm = 0x40C072E6
	movq	%rdi, -64(%rbp)
	movl	%esi, -76(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$30, -88(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -68(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB408_2
# %bb.1:                                # %if.then
	movq	$0, -56(%rbp)
	jmp	.LBB408_39
.LBB408_2:                              # %if.end
	jmp	.LBB408_3
.LBB408_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB408_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB408_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB408_7
	jmp	.LBB408_5
.LBB408_5:                              # %while.body
                                        #   in Loop: Header=BB408_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB408_9
	jmp	.LBB408_6
.LBB408_6:                              # %while.body
                                        #   in Loop: Header=BB408_3 Depth=1
	subl	$119, %eax
	je	.LBB408_8
	jmp	.LBB408_10
.LBB408_7:                              # %sw.bb
                                        #   in Loop: Header=BB408_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB408_13
.LBB408_8:                              # %sw.bb1
                                        #   in Loop: Header=BB408_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB408_13
.LBB408_9:                              # %sw.bb2
                                        #   in Loop: Header=BB408_3 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB408_13
.LBB408_10:                             # %sw.default
                                        #   in Loop: Header=BB408_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB408_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB408_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB408_12:                             # %if.end8
                                        #   in Loop: Header=BB408_3 Depth=1
	jmp	.LBB408_13
.LBB408_13:                             # %sw.epilog
                                        #   in Loop: Header=BB408_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB408_3
.LBB408_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -72(%rbp)
	jne	.LBB408_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB408_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB408_21
.LBB408_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB408_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB408_20
.LBB408_19:                             # %cond.false
	movq	stdin, %rax
.LBB408_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB408_22
.LBB408_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB408_22:                             # %if.end26
	jmp	.LBB408_24
.LBB408_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-76(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB408_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB408_26
# %bb.25:                               # %if.then33
	movq	$0, -56(%rbp)
	jmp	.LBB408_39
.LBB408_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB408_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB408_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB408_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB408_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB408_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-88(%rbp), %r8d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -48(%rbp)
	jmp	.LBB408_33
.LBB408_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-68(%rbp), %r9d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
.LBB408_33:                             # %if.end49
	cmpq	$0, -48(%rbp)
	jne	.LBB408_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB408_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB408_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB408_37:                             # %if.end59
	movq	$0, -56(%rbp)
	jmp	.LBB408_39
.LBB408_38:                             # %if.end60
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB408_39:                             # %return
	movq	-56(%rbp), %rbx
	cmpl	$1086354150, -84(%rbp)  # imm = 0x40C072E6
	jne	.LBB408_41
.LBB408_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB408_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB408_40
.Lfunc_end408:
	.size	bzopen_or_bzdopen.368, .Lfunc_end408-bzopen_or_bzdopen.368
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.369  # -- Begin function BZ2_bzCompressInit.369
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.369,@function
BZ2_bzCompressInit.369:                 # @BZ2_bzCompressInit.369
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$943432420, -48(%rbp)   # imm = 0x383BA2E4
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB409_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB409_29
.LBB409_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB409_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB409_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -36(%rbp)
	jg	.LBB409_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -32(%rbp)
	jl	.LBB409_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -32(%rbp)
	jle	.LBB409_8
.LBB409_7:                              # %if.then8
	movl	$-2, -28(%rbp)
	jmp	.LBB409_29
.LBB409_8:                              # %if.end9
	cmpl	$0, -32(%rbp)
	jne	.LBB409_10
# %bb.9:                                # %if.then11
	movl	$30, -32(%rbp)
.LBB409_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB409_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB409_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB409_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB409_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB409_16
# %bb.15:                               # %if.then24
	movl	$-3, -28(%rbp)
	jmp	.LBB409_29
.LBB409_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB409_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB409_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB409_28
.LBB409_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB409_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB409_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB409_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB409_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB409_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB409_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB409_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB409_27:                             # %if.end85
	movl	$-3, -28(%rbp)
	jmp	.LBB409_29
.LBB409_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -28(%rbp)
.LBB409_29:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$943432420, -48(%rbp)   # imm = 0x383BA2E4
	jne	.LBB409_31
.LBB409_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB409_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB409_30
.Lfunc_end409:
	.size	BZ2_bzCompressInit.369, .Lfunc_end409-BZ2_bzCompressInit.369
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzread.370          # -- Begin function BZ2_bzread.370
	.p2align	4, 0x90
	.type	BZ2_bzread.370,@function
BZ2_bzread.370:                         # @BZ2_bzread.370
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$718348203, -24(%rbp)   # imm = 0x2AD11FAB
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$4, 5096(%rax)
	jne	.LBB410_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB410_6
.LBB410_2:                              # %if.end
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movl	-20(%rbp), %ecx
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzRead
	movl	%eax, -28(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB410_4
# %bb.3:                                # %lor.lhs.false
	cmpl	$4, -16(%rbp)
	jne	.LBB410_5
.LBB410_4:                              # %if.then3
	movl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB410_6
.LBB410_5:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB410_6:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$718348203, -24(%rbp)   # imm = 0x2AD11FAB
	jne	.LBB410_8
.LBB410_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB410_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB410_7
.Lfunc_end410:
	.size	BZ2_bzread.370, .Lfunc_end410-BZ2_bzread.370
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzWriteClose64.371  # -- Begin function BZ2_bzWriteClose64.371
	.p2align	4, 0x90
	.type	BZ2_bzWriteClose64.371,@function
BZ2_bzWriteClose64.371:                 # @BZ2_bzWriteClose64.371
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	16(%rbp), %rax
	movl	$859383890, -64(%rbp)   # imm = 0x33392852
	movq	%rdi, -16(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -56(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB411_6
# %bb.1:                                # %if.then
	cmpq	$0, -16(%rbp)
	je	.LBB411_3
# %bb.2:                                # %if.then2
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB411_3:                              # %if.end
	cmpq	$0, -8(%rbp)
	je	.LBB411_5
# %bb.4:                                # %if.then4
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB411_5:                              # %if.end5
	jmp	.LBB411_71
.LBB411_6:                              # %if.end6
	movq	-8(%rbp), %rax
	cmpb	$0, 5012(%rax)
	jne	.LBB411_12
# %bb.7:                                # %if.then7
	cmpq	$0, -16(%rbp)
	je	.LBB411_9
# %bb.8:                                # %if.then9
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
.LBB411_9:                              # %if.end10
	cmpq	$0, -8(%rbp)
	je	.LBB411_11
# %bb.10:                               # %if.then12
	movq	-8(%rbp), %rax
	movl	$-1, 5096(%rax)
.LBB411_11:                             # %if.end14
	jmp	.LBB411_71
.LBB411_12:                             # %if.end15
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB411_18
# %bb.13:                               # %if.then17
	cmpq	$0, -16(%rbp)
	je	.LBB411_15
# %bb.14:                               # %if.then19
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB411_15:                             # %if.end20
	cmpq	$0, -8(%rbp)
	je	.LBB411_17
# %bb.16:                               # %if.then22
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB411_17:                             # %if.end24
	jmp	.LBB411_71
.LBB411_18:                             # %if.end25
	cmpq	$0, -48(%rbp)
	je	.LBB411_20
# %bb.19:                               # %if.then27
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
.LBB411_20:                             # %if.end28
	cmpq	$0, -40(%rbp)
	je	.LBB411_22
# %bb.21:                               # %if.then30
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
.LBB411_22:                             # %if.end31
	cmpq	$0, -56(%rbp)
	je	.LBB411_24
# %bb.23:                               # %if.then33
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
.LBB411_24:                             # %if.end34
	cmpq	$0, 16(%rbp)
	je	.LBB411_26
# %bb.25:                               # %if.then36
	movq	16(%rbp), %rax
	movl	$0, (%rax)
.LBB411_26:                             # %if.end37
	cmpl	$0, -24(%rbp)
	jne	.LBB411_49
# %bb.27:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 5096(%rax)
	jne	.LBB411_49
# %bb.28:                               # %if.then41
	jmp	.LBB411_29
.LBB411_29:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, 5048(%rax)       # imm = 0x1388
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 5040(%rcx)
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -20(%rbp)
	cmpl	$3, -20(%rbp)
	je	.LBB411_36
# %bb.30:                               # %land.lhs.true46
                                        #   in Loop: Header=BB411_29 Depth=1
	cmpl	$4, -20(%rbp)
	je	.LBB411_36
# %bb.31:                               # %if.then48
	cmpq	$0, -16(%rbp)
	je	.LBB411_33
# %bb.32:                               # %if.then50
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB411_33:                             # %if.end51
	cmpq	$0, -8(%rbp)
	je	.LBB411_35
# %bb.34:                               # %if.then53
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 5096(%rcx)
.LBB411_35:                             # %if.end55
	jmp	.LBB411_71
.LBB411_36:                             # %if.end56
                                        #   in Loop: Header=BB411_29 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5000, 5048(%rax)       # imm = 0x1388
	jae	.LBB411_45
# %bb.37:                               # %if.then60
                                        #   in Loop: Header=BB411_29 Depth=1
	movq	-8(%rbp), %rax
	movl	$5000, %ecx             # imm = 0x1388
	subl	5048(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	movslq	-28(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movl	$1, %esi
	callq	fwrite
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB411_39
# %bb.38:                               # %lor.lhs.false
                                        #   in Loop: Header=BB411_29 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB411_44
.LBB411_39:                             # %if.then73
	cmpq	$0, -16(%rbp)
	je	.LBB411_41
# %bb.40:                               # %if.then76
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB411_41:                             # %if.end77
	cmpq	$0, -8(%rbp)
	je	.LBB411_43
# %bb.42:                               # %if.then80
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB411_43:                             # %if.end82
	jmp	.LBB411_71
.LBB411_44:                             # %if.end83
                                        #   in Loop: Header=BB411_29 Depth=1
	jmp	.LBB411_45
.LBB411_45:                             # %if.end84
                                        #   in Loop: Header=BB411_29 Depth=1
	cmpl	$4, -20(%rbp)
	jne	.LBB411_47
# %bb.46:                               # %if.then87
	jmp	.LBB411_48
.LBB411_47:                             # %if.end88
                                        #   in Loop: Header=BB411_29 Depth=1
	jmp	.LBB411_29
.LBB411_48:                             # %while.end
	jmp	.LBB411_49
.LBB411_49:                             # %if.end89
	cmpl	$0, -24(%rbp)
	jne	.LBB411_58
# %bb.50:                               # %land.lhs.true91
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	jne	.LBB411_58
# %bb.51:                               # %if.then95
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	fflush
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB411_57
# %bb.52:                               # %if.then101
	cmpq	$0, -16(%rbp)
	je	.LBB411_54
# %bb.53:                               # %if.then104
	movq	-16(%rbp), %rax
	movl	$-6, (%rax)
.LBB411_54:                             # %if.end105
	cmpq	$0, -8(%rbp)
	je	.LBB411_56
# %bb.55:                               # %if.then108
	movq	-8(%rbp), %rax
	movl	$-6, 5096(%rax)
.LBB411_56:                             # %if.end110
	jmp	.LBB411_71
.LBB411_57:                             # %if.end111
	jmp	.LBB411_58
.LBB411_58:                             # %if.end112
	cmpq	$0, -48(%rbp)
	je	.LBB411_60
# %bb.59:                               # %if.then115
	movq	-8(%rbp), %rax
	movl	5028(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB411_60:                             # %if.end117
	cmpq	$0, -40(%rbp)
	je	.LBB411_62
# %bb.61:                               # %if.then120
	movq	-8(%rbp), %rax
	movl	5032(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB411_62:                             # %if.end122
	cmpq	$0, -56(%rbp)
	je	.LBB411_64
# %bb.63:                               # %if.then125
	movq	-8(%rbp), %rax
	movl	5052(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB411_64:                             # %if.end127
	cmpq	$0, 16(%rbp)
	je	.LBB411_66
# %bb.65:                               # %if.then130
	movq	-8(%rbp), %rax
	movl	5056(%rax), %eax
	movq	16(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB411_66:                             # %if.end132
	cmpq	$0, -16(%rbp)
	je	.LBB411_68
# %bb.67:                               # %if.then135
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
.LBB411_68:                             # %if.end136
	cmpq	$0, -8(%rbp)
	je	.LBB411_70
# %bb.69:                               # %if.then139
	movq	-8(%rbp), %rax
	movl	$0, 5096(%rax)
.LBB411_70:                             # %if.end141
	movq	-8(%rbp), %rdi
	addq	$5016, %rdi             # imm = 0x1398
	callq	BZ2_bzCompressEnd
	movq	-8(%rbp), %rdi
	callq	free
.LBB411_71:                             # %return
	cmpl	$859383890, -64(%rbp)   # imm = 0x33392852
	jne	.LBB411_73
.LBB411_72:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB411_73:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB411_72
.Lfunc_end411:
	.size	BZ2_bzWriteClose64.371, .Lfunc_end411-BZ2_bzWriteClose64.371
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.372
	.type	bzopen_or_bzdopen.372,@function
bzopen_or_bzdopen.372:                  # @bzopen_or_bzdopen.372
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$1750317535, -76(%rbp)  # imm = 0x6853B9DF
	movq	%rdi, -64(%rbp)
	movl	%esi, -84(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -36(%rbp)
	movl	$30, -72(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -88(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB412_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB412_39
.LBB412_2:                              # %if.end
	jmp	.LBB412_3
.LBB412_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB412_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB412_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB412_7
	jmp	.LBB412_5
.LBB412_5:                              # %while.body
                                        #   in Loop: Header=BB412_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB412_9
	jmp	.LBB412_6
.LBB412_6:                              # %while.body
                                        #   in Loop: Header=BB412_3 Depth=1
	subl	$119, %eax
	je	.LBB412_8
	jmp	.LBB412_10
.LBB412_7:                              # %sw.bb
                                        #   in Loop: Header=BB412_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB412_13
.LBB412_8:                              # %sw.bb1
                                        #   in Loop: Header=BB412_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB412_13
.LBB412_9:                              # %sw.bb2
                                        #   in Loop: Header=BB412_3 Depth=1
	movl	$1, -40(%rbp)
	jmp	.LBB412_13
.LBB412_10:                             # %sw.default
                                        #   in Loop: Header=BB412_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB412_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB412_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB412_12:                             # %if.end8
                                        #   in Loop: Header=BB412_3 Depth=1
	jmp	.LBB412_13
.LBB412_13:                             # %sw.epilog
                                        #   in Loop: Header=BB412_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB412_3
.LBB412_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -68(%rbp)
	jne	.LBB412_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB412_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB412_21
.LBB412_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB412_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB412_20
.LBB412_19:                             # %cond.false
	movq	stdin, %rax
.LBB412_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB412_22
.LBB412_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB412_22:                             # %if.end26
	jmp	.LBB412_24
.LBB412_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-84(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB412_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB412_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB412_39
.LBB412_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB412_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB412_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB412_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB412_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB412_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-72(%rbp), %r8d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB412_33
.LBB412_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-88(%rbp), %r9d
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB412_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB412_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB412_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB412_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB412_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB412_39
.LBB412_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB412_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1750317535, -76(%rbp)  # imm = 0x6853B9DF
	jne	.LBB412_41
.LBB412_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB412_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB412_40
.Lfunc_end412:
	.size	bzopen_or_bzdopen.372, .Lfunc_end412-bzopen_or_bzdopen.372
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.373
	.type	handle_compress.373,@function
handle_compress.373:                    # @handle_compress.373
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1285542067, -28(%rbp)  # imm = 0x4C9FD0B3
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB413_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB413_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB413_4
# %bb.3:                                # %if.then6
	jmp	.LBB413_25
.LBB413_4:                              # %if.end
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB413_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB413_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB413_8
# %bb.7:                                # %if.then14
	jmp	.LBB413_25
.LBB413_8:                              # %if.end15
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB413_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB413_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB413_12
# %bb.11:                               # %if.then28
	jmp	.LBB413_25
.LBB413_12:                             # %if.end29
                                        #   in Loop: Header=BB413_1 Depth=1
	jmp	.LBB413_13
.LBB413_13:                             # %if.end30
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB413_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB413_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB413_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB413_23
.LBB413_17:                             # %if.else
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB413_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB413_22
.LBB413_19:                             # %if.else57
                                        #   in Loop: Header=BB413_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB413_21
# %bb.20:                               # %if.then61
	jmp	.LBB413_25
.LBB413_21:                             # %if.end62
                                        #   in Loop: Header=BB413_1 Depth=1
	jmp	.LBB413_22
.LBB413_22:                             # %if.end63
                                        #   in Loop: Header=BB413_1 Depth=1
	jmp	.LBB413_23
.LBB413_23:                             # %if.end64
                                        #   in Loop: Header=BB413_1 Depth=1
	jmp	.LBB413_24
.LBB413_24:                             # %if.end65
                                        #   in Loop: Header=BB413_1 Depth=1
	jmp	.LBB413_1
.LBB413_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB413_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB413_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$1285542067, -28(%rbp)  # imm = 0x4C9FD0B3
	jne	.LBB413_29
.LBB413_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB413_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB413_28
.Lfunc_end413:
	.size	handle_compress.373, .Lfunc_end413-handle_compress.373
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.374
	.type	copy_input_until_stop.374,@function
copy_input_until_stop.374:              # @copy_input_until_stop.374
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1872011273, -32(%rbp)  # imm = 0x6F94A009
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB414_20
# %bb.1:                                # %if.then
	jmp	.LBB414_2
.LBB414_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB414_4
# %bb.3:                                # %if.then2
	jmp	.LBB414_19
.LBB414_4:                              # %if.end
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB414_6
# %bb.5:                                # %if.then4
	jmp	.LBB414_19
.LBB414_6:                              # %if.end5
                                        #   in Loop: Header=BB414_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB414_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB414_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB414_16
.LBB414_9:                              # %if.else
                                        #   in Loop: Header=BB414_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB414_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB414_14
.LBB414_11:                             # %if.then32
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB414_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB414_13:                             # %if.end37
                                        #   in Loop: Header=BB414_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB414_15
.LBB414_14:                             # %if.else40
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB414_15:                             # %if.end43
                                        #   in Loop: Header=BB414_2 Depth=1
	jmp	.LBB414_16
.LBB414_16:                             # %if.end44
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB414_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB414_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB414_18:                             # %if.end58
                                        #   in Loop: Header=BB414_2 Depth=1
	jmp	.LBB414_2
.LBB414_19:                             # %while.end
	jmp	.LBB414_41
.LBB414_20:                             # %if.else59
	jmp	.LBB414_21
.LBB414_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB414_23
# %bb.22:                               # %if.then65
	jmp	.LBB414_40
.LBB414_23:                             # %if.end66
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB414_25
# %bb.24:                               # %if.then71
	jmp	.LBB414_40
.LBB414_25:                             # %if.end72
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB414_27
# %bb.26:                               # %if.then75
	jmp	.LBB414_40
.LBB414_27:                             # %if.end76
                                        #   in Loop: Header=BB414_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB414_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB414_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB414_37
.LBB414_30:                             # %if.else113
                                        #   in Loop: Header=BB414_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB414_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB414_35
.LBB414_32:                             # %if.then121
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB414_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB414_34:                             # %if.end126
                                        #   in Loop: Header=BB414_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB414_36
.LBB414_35:                             # %if.else129
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB414_36:                             # %if.end132
                                        #   in Loop: Header=BB414_21 Depth=1
	jmp	.LBB414_37
.LBB414_37:                             # %if.end133
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB414_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB414_39:                             # %if.end151
                                        #   in Loop: Header=BB414_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB414_21
.LBB414_40:                             # %while.end154
	jmp	.LBB414_41
.LBB414_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$1872011273, -32(%rbp)  # imm = 0x6F94A009
	jne	.LBB414_43
.LBB414_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB414_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB414_42
.Lfunc_end414:
	.size	copy_input_until_stop.374, .Lfunc_end414-copy_input_until_stop.374
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.375
	.type	copy_input_until_stop.375,@function
copy_input_until_stop.375:              # @copy_input_until_stop.375
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$937725199, -32(%rbp)   # imm = 0x37E48D0F
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB415_20
# %bb.1:                                # %if.then
	jmp	.LBB415_2
.LBB415_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB415_4
# %bb.3:                                # %if.then2
	jmp	.LBB415_19
.LBB415_4:                              # %if.end
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB415_6
# %bb.5:                                # %if.then4
	jmp	.LBB415_19
.LBB415_6:                              # %if.end5
                                        #   in Loop: Header=BB415_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB415_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB415_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB415_16
.LBB415_9:                              # %if.else
                                        #   in Loop: Header=BB415_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB415_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB415_14
.LBB415_11:                             # %if.then32
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB415_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB415_13:                             # %if.end37
                                        #   in Loop: Header=BB415_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB415_15
.LBB415_14:                             # %if.else40
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB415_15:                             # %if.end43
                                        #   in Loop: Header=BB415_2 Depth=1
	jmp	.LBB415_16
.LBB415_16:                             # %if.end44
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB415_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB415_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB415_18:                             # %if.end58
                                        #   in Loop: Header=BB415_2 Depth=1
	jmp	.LBB415_2
.LBB415_19:                             # %while.end
	jmp	.LBB415_41
.LBB415_20:                             # %if.else59
	jmp	.LBB415_21
.LBB415_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB415_23
# %bb.22:                               # %if.then65
	jmp	.LBB415_40
.LBB415_23:                             # %if.end66
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB415_25
# %bb.24:                               # %if.then71
	jmp	.LBB415_40
.LBB415_25:                             # %if.end72
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB415_27
# %bb.26:                               # %if.then75
	jmp	.LBB415_40
.LBB415_27:                             # %if.end76
                                        #   in Loop: Header=BB415_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB415_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB415_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB415_37
.LBB415_30:                             # %if.else113
                                        #   in Loop: Header=BB415_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB415_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB415_35
.LBB415_32:                             # %if.then121
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB415_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB415_34:                             # %if.end126
                                        #   in Loop: Header=BB415_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB415_36
.LBB415_35:                             # %if.else129
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB415_36:                             # %if.end132
                                        #   in Loop: Header=BB415_21 Depth=1
	jmp	.LBB415_37
.LBB415_37:                             # %if.end133
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB415_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB415_39:                             # %if.end151
                                        #   in Loop: Header=BB415_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB415_21
.LBB415_40:                             # %while.end154
	jmp	.LBB415_41
.LBB415_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$937725199, -32(%rbp)   # imm = 0x37E48D0F
	jne	.LBB415_43
.LBB415_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB415_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB415_42
.Lfunc_end415:
	.size	copy_input_until_stop.375, .Lfunc_end415-copy_input_until_stop.375
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_input_until_stop.376
	.type	copy_input_until_stop.376,@function
copy_input_until_stop.376:              # @copy_input_until_stop.376
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2144877713, -32(%rbp)  # imm = 0x7FD83C91
	movq	%rdi, -16(%rbp)
	movb	$0, -17(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB416_20
# %bb.1:                                # %if.then
	jmp	.LBB416_2
.LBB416_2:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB416_4
# %bb.3:                                # %if.then2
	jmp	.LBB416_19
.LBB416_4:                              # %if.end
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB416_6
# %bb.5:                                # %if.then4
	jmp	.LBB416_19
.LBB416_6:                              # %if.end5
                                        #   in Loop: Header=BB416_2 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB416_9
# %bb.7:                                # %land.lhs.true
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB416_9
# %bb.8:                                # %if.then11
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -18(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-18(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-18(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB416_16
.LBB416_9:                              # %if.else
                                        #   in Loop: Header=BB416_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB416_11
# %bb.10:                               # %lor.lhs.false
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB416_14
.LBB416_11:                             # %if.then32
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB416_13
# %bb.12:                               # %if.then36
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB416_13:                             # %if.end37
                                        #   in Loop: Header=BB416_2 Depth=1
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB416_15
.LBB416_14:                             # %if.else40
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB416_15:                             # %if.end43
                                        #   in Loop: Header=BB416_2 Depth=1
	jmp	.LBB416_16
.LBB416_16:                             # %if.end44
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB416_18
# %bb.17:                               # %if.then55
                                        #   in Loop: Header=BB416_2 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB416_18:                             # %if.end58
                                        #   in Loop: Header=BB416_2 Depth=1
	jmp	.LBB416_2
.LBB416_19:                             # %while.end
	jmp	.LBB416_41
.LBB416_20:                             # %if.else59
	jmp	.LBB416_21
.LBB416_21:                             # %while.body60
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	108(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB416_23
# %bb.22:                               # %if.then65
	jmp	.LBB416_40
.LBB416_23:                             # %if.end66
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB416_25
# %bb.24:                               # %if.then71
	jmp	.LBB416_40
.LBB416_25:                             # %if.end72
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB416_27
# %bb.26:                               # %if.then75
	jmp	.LBB416_40
.LBB416_27:                             # %if.end76
                                        #   in Loop: Header=BB416_21 Depth=1
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	je	.LBB416_30
# %bb.28:                               # %land.lhs.true84
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 96(%rax)
	jne	.LBB416_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	movl	92(%rax), %eax
	movb	%al, -19(%rbp)
	movq	-16(%rbp), %rax
	movl	648(%rax), %eax
	shll	$8, %eax
	movq	-16(%rbp), %rcx
	movl	648(%rcx), %ecx
	shrl	$24, %ecx
	movzbl	-19(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 648(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	92(%rcx), %ecx
	movb	$1, 128(%rax,%rcx)
	movb	-19(%rbp), %al
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	108(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
	movq	-16(%rbp), %rax
	movl	108(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 108(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	jmp	.LBB416_37
.LBB416_30:                             # %if.else113
                                        #   in Loop: Header=BB416_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	92(%rcx), %eax
	jne	.LBB416_32
# %bb.31:                               # %lor.lhs.false117
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$255, 96(%rax)
	jne	.LBB416_35
.LBB416_32:                             # %if.then121
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$256, 92(%rax)          # imm = 0x100
	jae	.LBB416_34
# %bb.33:                               # %if.then125
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rdi
	callq	add_pair_to_block
.LBB416_34:                             # %if.end126
                                        #   in Loop: Header=BB416_21 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 96(%rax)
	jmp	.LBB416_36
.LBB416_35:                             # %if.else129
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 96(%rax)
.LBB416_36:                             # %if.end132
                                        #   in Loop: Header=BB416_21 Depth=1
	jmp	.LBB416_37
.LBB416_37:                             # %if.end133
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 12(%rax)
	jne	.LBB416_39
# %bb.38:                               # %if.then147
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB416_39:                             # %if.end151
                                        #   in Loop: Header=BB416_21 Depth=1
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB416_21
.LBB416_40:                             # %while.end154
	jmp	.LBB416_41
.LBB416_41:                             # %if.end155
	movb	-17(%rbp), %bl
	cmpl	$2144877713, -32(%rbp)  # imm = 0x7FD83C91
	jne	.LBB416_43
.LBB416_42:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB416_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB416_42
.Lfunc_end416:
	.size	copy_input_until_stop.376, .Lfunc_end416-copy_input_until_stop.376
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.377    # -- Begin function BZ2_bzDecompress.377
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.377,@function
BZ2_bzDecompress.377:                   # @BZ2_bzDecompress.377
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$971543728, -44(%rbp)   # imm = 0x39E894B0
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB417_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB417_37
.LBB417_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB417_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB417_37
.LBB417_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB417_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB417_37
.LBB417_6:                              # %if.end7
	jmp	.LBB417_7
.LBB417_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB417_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB417_37
.LBB417_9:                              # %if.end11
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB417_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB417_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB417_13
.LBB417_12:                             # %if.else
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB417_13:                             # %if.end17
                                        #   in Loop: Header=BB417_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB417_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB417_37
.LBB417_15:                             # %if.end20
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB417_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB417_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB417_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB417_19:                             # %if.end29
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB417_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB417_21:                             # %if.end34
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB417_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB417_37
.LBB417_23:                             # %if.end39
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB417_25
.LBB417_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB417_37
.LBB417_25:                             # %if.end46
                                        #   in Loop: Header=BB417_7 Depth=1
	jmp	.LBB417_26
.LBB417_26:                             # %if.end47
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB417_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB417_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB417_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB417_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB417_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB417_37
.LBB417_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB417_37
.LBB417_33:                             # %if.end65
                                        #   in Loop: Header=BB417_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB417_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB417_37
.LBB417_35:                             # %if.end69
                                        #   in Loop: Header=BB417_7 Depth=1
	jmp	.LBB417_36
.LBB417_36:                             # %if.end70
                                        #   in Loop: Header=BB417_7 Depth=1
	jmp	.LBB417_7
.LBB417_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$971543728, -44(%rbp)   # imm = 0x39E894B0
	jne	.LBB417_39
.LBB417_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB417_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB417_38
.Lfunc_end417:
	.size	BZ2_bzDecompress.377, .Lfunc_end417-BZ2_bzDecompress.377
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.378      # -- Begin function BZ2_bzCompress.378
	.p2align	4, 0x90
	.type	BZ2_bzCompress.378,@function
BZ2_bzCompress.378:                     # @BZ2_bzCompress.378
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2131421882, -44(%rbp)  # imm = 0x7F0AEABA
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB418_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB418_39
.LBB418_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB418_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB418_39
.LBB418_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB418_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB418_39
.LBB418_6:                              # %if.end7
	jmp	.LBB418_7
.LBB418_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB418_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB418_7 Depth=1
	movq	.LJTI418_0(,%rax,8), %rax
	jmpq	*%rax
.LBB418_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB418_39
.LBB418_10:                             # %sw.bb8
                                        #   in Loop: Header=BB418_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB418_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB418_39
.LBB418_12:                             # %if.else
                                        #   in Loop: Header=BB418_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB418_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB418_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB418_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB418_7 Depth=1
	jmp	.LBB418_7
.LBB418_15:                             # %if.else15
                                        #   in Loop: Header=BB418_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB418_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB418_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB418_14
.LBB418_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB418_39
.LBB418_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB418_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB418_39
.LBB418_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB418_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB418_39
.LBB418_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB418_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB418_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB418_26
.LBB418_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB418_39
.LBB418_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB418_39
.LBB418_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB418_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB418_39
.LBB418_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB418_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB418_39
.LBB418_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB418_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB418_39
.LBB418_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB418_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB418_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB418_37
.LBB418_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB418_39
.LBB418_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB418_39
.LBB418_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB418_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$2131421882, -44(%rbp)  # imm = 0x7F0AEABA
	jne	.LBB418_41
.LBB418_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB418_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB418_40
.Lfunc_end418:
	.size	BZ2_bzCompress.378, .Lfunc_end418-BZ2_bzCompress.378
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI418_0:
	.quad	.LBB418_9
	.quad	.LBB418_10
	.quad	.LBB418_18
	.quad	.LBB418_27
                                        # -- End function
	.text
	.globl	BZ2_bzCompressInit.379  # -- Begin function BZ2_bzCompressInit.379
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.379,@function
BZ2_bzCompressInit.379:                 # @BZ2_bzCompressInit.379
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$498367059, -48(%rbp)   # imm = 0x1DB47A53
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB419_2
# %bb.1:                                # %if.then
	movl	$-9, -32(%rbp)
	jmp	.LBB419_29
.LBB419_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB419_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -28(%rbp)
	jl	.LBB419_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -28(%rbp)
	jg	.LBB419_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -36(%rbp)
	jl	.LBB419_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -36(%rbp)
	jle	.LBB419_8
.LBB419_7:                              # %if.then8
	movl	$-2, -32(%rbp)
	jmp	.LBB419_29
.LBB419_8:                              # %if.end9
	cmpl	$0, -36(%rbp)
	jne	.LBB419_10
# %bb.9:                                # %if.then11
	movl	$30, -36(%rbp)
.LBB419_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB419_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB419_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB419_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB419_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB419_16
# %bb.15:                               # %if.then24
	movl	$-3, -32(%rbp)
	jmp	.LBB419_29
.LBB419_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB419_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB419_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB419_28
.LBB419_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB419_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB419_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB419_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB419_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB419_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB419_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB419_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB419_27:                             # %if.end85
	movl	$-3, -32(%rbp)
	jmp	.LBB419_29
.LBB419_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -32(%rbp)
.LBB419_29:                             # %return
	movl	-32(%rbp), %ebx
	cmpl	$498367059, -48(%rbp)   # imm = 0x1DB47A53
	jne	.LBB419_31
.LBB419_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB419_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB419_30
.Lfunc_end419:
	.size	BZ2_bzCompressInit.379, .Lfunc_end419-BZ2_bzCompressInit.379
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unRLE_obuf_to_output_FAST.380
	.type	unRLE_obuf_to_output_FAST.380,@function
unRLE_obuf_to_output_FAST.380:          # @unRLE_obuf_to_output_FAST.380
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -24
	movl	$767412466, -92(%rbp)   # imm = 0x2DBDC8F2
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpb	$0, 20(%rax)
	je	.LBB420_48
# %bb.1:                                # %if.then
	jmp	.LBB420_2
.LBB420_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB420_3 Depth 2
	jmp	.LBB420_3
.LBB420_3:                              # %while.body2
                                        #   Parent Loop BB420_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB420_5
# %bb.4:                                # %if.then3
	movb	$0, -33(%rbp)
	jmp	.LBB420_82
.LBB420_5:                              # %if.end
                                        #   in Loop: Header=BB420_3 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB420_7
# %bb.6:                                # %if.then5
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_10
.LBB420_7:                              # %if.end6
                                        #   in Loop: Header=BB420_3 Depth=2
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	24(%rcx), %rcx
	movb	%al, (%rcx)
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	shll	$8, %eax
	movq	-24(%rbp), %rcx
	movl	3184(%rcx), %ecx
	shrl	$24, %ecx
	movq	-24(%rbp), %rdx
	movzbl	12(%rdx), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 24(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 36(%rax)
	jne	.LBB420_9
# %bb.8:                                # %if.then23
                                        #   in Loop: Header=BB420_3 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB420_9:                              # %if.end26
                                        #   in Loop: Header=BB420_3 Depth=2
	jmp	.LBB420_3
.LBB420_10:                             # %while.end
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB420_12
# %bb.11:                               # %if.then29
	movb	$0, -33(%rbp)
	jmp	.LBB420_82
.LBB420_12:                             # %if.end30
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB420_14
# %bb.13:                               # %if.then36
	movb	$1, -33(%rbp)
	jmp	.LBB420_82
.LBB420_14:                             # %if.end37
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$1, 16(%rax)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB420_18
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB420_17
# %bb.16:                               # %if.then59
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB420_17:                             # %if.end61
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_18
.LBB420_18:                             # %if.end62
                                        #   in Loop: Header=BB420_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB420_21
# %bb.19:                               # %if.then78
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_20
.LBB420_20:                             # %while.body.backedge
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_2
.LBB420_21:                             # %if.end79
                                        #   in Loop: Header=BB420_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB420_23
# %bb.22:                               # %if.then84
                                        #   in Loop: Header=BB420_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB420_20
.LBB420_23:                             # %if.end87
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$2, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB420_27
# %bb.24:                               # %if.then102
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB420_26
# %bb.25:                               # %if.then112
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB420_26:                             # %if.end114
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_27
.LBB420_27:                             # %if.end115
                                        #   in Loop: Header=BB420_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB420_29
# %bb.28:                               # %if.then132
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_20
.LBB420_29:                             # %if.end133
                                        #   in Loop: Header=BB420_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB420_31
# %bb.30:                               # %if.then138
                                        #   in Loop: Header=BB420_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB420_20
.LBB420_31:                             # %if.end141
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$3, 16(%rax)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB420_35
# %bb.32:                               # %if.then156
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB420_34
# %bb.33:                               # %if.then166
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB420_34:                             # %if.end168
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_35
.LBB420_35:                             # %if.end169
                                        #   in Loop: Header=BB420_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB420_37
# %bb.36:                               # %if.then186
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_20
.LBB420_37:                             # %if.end187
                                        #   in Loop: Header=BB420_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	64(%rcx), %eax
	je	.LBB420_39
# %bb.38:                               # %if.then192
                                        #   in Loop: Header=BB420_2 Depth=1
	movzbl	-9(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	jmp	.LBB420_20
.LBB420_39:                             # %if.end195
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB420_43
# %bb.40:                               # %if.then209
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB420_42
# %bb.41:                               # %if.then219
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB420_42:                             # %if.end221
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_43
.LBB420_43:                             # %if.end222
                                        #   in Loop: Header=BB420_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movzbl	-9(%rbp), %ecx
	xorl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %ecx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	shrl	$8, %ecx
	movl	%ecx, 60(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB420_47
# %bb.44:                               # %if.then252
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movslq	28(%rax), %rax
	movl	BZ2_rNums(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 28(%rax)
	movq	-24(%rbp), %rax
	cmpl	$512, 28(%rax)          # imm = 0x200
	jne	.LBB420_46
# %bb.45:                               # %if.then262
                                        #   in Loop: Header=BB420_2 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 28(%rax)
.LBB420_46:                             # %if.end264
                                        #   in Loop: Header=BB420_2 Depth=1
	jmp	.LBB420_47
.LBB420_47:                             # %if.end265
                                        #   in Loop: Header=BB420_2 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %edx
	addl	$-1, %edx
	movl	%edx, 24(%rcx)
	movq	-24(%rbp), %rcx
	movl	24(%rcx), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movq	-24(%rbp), %rcx
	xorl	64(%rcx), %eax
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1092(%rax)
	jmp	.LBB420_20
.LBB420_48:                             # %if.else
	movq	-24(%rbp), %rax
	movl	3184(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	movb	12(%rax), %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	1092(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	64(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	3152(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movl	60(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-24(%rbp), %rax
	movl	64080(%rax), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB420_49:                             # %while.body289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB420_51 Depth 2
	cmpl	$0, -44(%rbp)
	jle	.LBB420_60
# %bb.50:                               # %if.then292
                                        #   in Loop: Header=BB420_49 Depth=1
	jmp	.LBB420_51
.LBB420_51:                             # %while.body294
                                        #   Parent Loop BB420_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB420_53
# %bb.52:                               # %if.then297
	jmp	.LBB420_78
.LBB420_53:                             # %if.end298
                                        #   in Loop: Header=BB420_51 Depth=2
	cmpl	$1, -44(%rbp)
	jne	.LBB420_55
# %bb.54:                               # %if.then301
                                        #   in Loop: Header=BB420_49 Depth=1
	jmp	.LBB420_56
.LBB420_55:                             # %if.end302
                                        #   in Loop: Header=BB420_51 Depth=2
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB420_51
.LBB420_56:                             # %while.end313
                                        #   in Loop: Header=BB420_49 Depth=1
	jmp	.LBB420_57
.LBB420_57:                             # %s_state_out_len_eq_one
                                        #   in Loop: Header=BB420_49 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB420_59
# %bb.58:                               # %if.then316
	movl	$1, -44(%rbp)
	jmp	.LBB420_78
.LBB420_59:                             # %if.end317
                                        #   in Loop: Header=BB420_49 Depth=1
	movb	-25(%rbp), %al
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	movl	-56(%rbp), %eax
	shll	$8, %eax
	movl	-56(%rbp), %ecx
	shrl	$24, %ecx
	movzbl	-25(%rbp), %edx
	xorl	%edx, %ecx
	movl	%ecx, %ecx
	xorl	BZ2_crc32Table(,%rcx,4), %eax
	movl	%eax, -56(%rbp)
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
.LBB420_60:                             # %if.end327
                                        #   in Loop: Header=BB420_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jle	.LBB420_62
# %bb.61:                               # %if.then330
	movb	$1, -33(%rbp)
	jmp	.LBB420_82
.LBB420_62:                             # %if.end331
                                        #   in Loop: Header=BB420_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB420_64
# %bb.63:                               # %if.then334
	movl	$0, -44(%rbp)
	jmp	.LBB420_78
.LBB420_64:                             # %if.end335
                                        #   in Loop: Header=BB420_49 Depth=1
	movl	-48(%rbp), %eax
	movb	%al, -25(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB420_66
# %bb.65:                               # %if.then346
                                        #   in Loop: Header=BB420_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB420_57
.LBB420_66:                             # %if.end348
                                        #   in Loop: Header=BB420_49 Depth=1
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB420_68
# %bb.67:                               # %if.then351
                                        #   in Loop: Header=BB420_49 Depth=1
	jmp	.LBB420_57
.LBB420_68:                             # %if.end352
                                        #   in Loop: Header=BB420_49 Depth=1
	movl	$2, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB420_71
# %bb.69:                               # %if.then361
                                        #   in Loop: Header=BB420_49 Depth=1
	jmp	.LBB420_70
.LBB420_70:                             # %while.body289.backedge
                                        #   in Loop: Header=BB420_49 Depth=1
	jmp	.LBB420_49
.LBB420_71:                             # %if.end362
                                        #   in Loop: Header=BB420_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB420_73
# %bb.72:                               # %if.then366
                                        #   in Loop: Header=BB420_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB420_70
.LBB420_73:                             # %if.end368
                                        #   in Loop: Header=BB420_49 Depth=1
	movl	$3, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB420_75
# %bb.74:                               # %if.then377
                                        #   in Loop: Header=BB420_49 Depth=1
	jmp	.LBB420_70
.LBB420_75:                             # %if.end378
                                        #   in Loop: Header=BB420_49 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	-48(%rbp), %eax
	je	.LBB420_77
# %bb.76:                               # %if.then382
                                        #   in Loop: Header=BB420_49 Depth=1
	movzbl	-9(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB420_70
.LBB420_77:                             # %if.end384
                                        #   in Loop: Header=BB420_49 Depth=1
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movb	%al, -9(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movzbl	-9(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	andl	$255, %eax
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB420_70
.LBB420_78:                             # %return_notr
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movl	%eax, -88(%rbp)
	movl	-84(%rbp), %eax
	subl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	addl	36(%rcx), %eax
	movl	%eax, 36(%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	cmpl	-88(%rbp), %eax
	jae	.LBB420_80
# %bb.79:                               # %if.then409
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB420_80:                             # %if.end413
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movb	-25(%rbp), %al
	movq	-24(%rbp), %rcx
	movb	%al, 12(%rcx)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-40(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 1092(%rcx)
	movl	-48(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 3152(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 24(%rcx)
	movl	-52(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	%eax, 32(%rcx)
# %bb.81:                               # %if.end425
	movb	$0, -33(%rbp)
.LBB420_82:                             # %return
	movb	-33(%rbp), %bl
	cmpl	$767412466, -92(%rbp)   # imm = 0x2DBDC8F2
	jne	.LBB420_84
.LBB420_83:
	movzbl	%bl, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB420_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB420_83
.Lfunc_end420:
	.size	unRLE_obuf_to_output_FAST.380, .Lfunc_end420-unRLE_obuf_to_output_FAST.380
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzDecompress.381    # -- Begin function BZ2_bzDecompress.381
	.p2align	4, 0x90
	.type	BZ2_bzDecompress.381,@function
BZ2_bzDecompress.381:                   # @BZ2_bzDecompress.381
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$883080324, -44(%rbp)   # imm = 0x34A2BC84
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB421_2
# %bb.1:                                # %if.then
	movl	$-2, -24(%rbp)
	jmp	.LBB421_37
.LBB421_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB421_4
# %bb.3:                                # %if.then2
	movl	$-2, -24(%rbp)
	jmp	.LBB421_37
.LBB421_4:                              # %if.end3
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB421_6
# %bb.5:                                # %if.then6
	movl	$-2, -24(%rbp)
	jmp	.LBB421_37
.LBB421_6:                              # %if.end7
	jmp	.LBB421_7
.LBB421_7:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB421_9
# %bb.8:                                # %if.then10
	movl	$-1, -24(%rbp)
	jmp	.LBB421_37
.LBB421_9:                              # %if.end11
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB421_26
# %bb.10:                               # %if.then14
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, 44(%rax)
	je	.LBB421_12
# %bb.11:                               # %if.then15
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_SMALL
	movb	%al, -17(%rbp)
	jmp	.LBB421_13
.LBB421_12:                             # %if.else
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	unRLE_obuf_to_output_FAST
	movb	%al, -17(%rbp)
.LBB421_13:                             # %if.end17
                                        #   in Loop: Header=BB421_7 Depth=1
	cmpb	$0, -17(%rbp)
	je	.LBB421_15
# %bb.14:                               # %if.then19
	movl	$-4, -24(%rbp)
	jmp	.LBB421_37
.LBB421_15:                             # %if.end20
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	movl	1092(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	64080(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jne	.LBB421_24
# %bb.16:                               # %land.lhs.true
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB421_24
# %bb.17:                               # %if.then23
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	xorl	$-1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3184(%rcx)
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB421_19
# %bb.18:                               # %if.then26
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3176(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3184(%rax), %ecx
	movabsq	$.L.str.2, %rsi
	movb	$0, %al
	callq	fprintf
.LBB421_19:                             # %if.end29
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 52(%rax)
	jl	.LBB421_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.3, %rsi
	movb	$0, %al
	callq	fprintf
.LBB421_21:                             # %if.end34
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3176(%rcx), %eax
	je	.LBB421_23
# %bb.22:                               # %if.then38
	movl	$-4, -24(%rbp)
	jmp	.LBB421_37
.LBB421_23:                             # %if.end39
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	shll	$1, %eax
	movq	-16(%rbp), %rcx
	movl	3188(%rcx), %ecx
	shrl	$31, %ecx
	orl	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	3184(%rax), %eax
	movq	-16(%rbp), %rcx
	xorl	3188(%rcx), %eax
	movl	%eax, 3188(%rcx)
	movq	-16(%rbp), %rax
	movl	$14, 8(%rax)
	jmp	.LBB421_25
.LBB421_24:                             # %if.else45
	movl	$0, -24(%rbp)
	jmp	.LBB421_37
.LBB421_25:                             # %if.end46
                                        #   in Loop: Header=BB421_7 Depth=1
	jmp	.LBB421_26
.LBB421_26:                             # %if.end47
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 8(%rax)
	jl	.LBB421_36
# %bb.27:                               # %if.then50
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rdi
	callq	BZ2_decompress
	movl	%eax, -28(%rbp)
	cmpl	$4, -28(%rbp)
	jne	.LBB421_33
# %bb.28:                               # %if.then53
	movq	-16(%rbp), %rax
	cmpl	$3, 52(%rax)
	jl	.LBB421_30
# %bb.29:                               # %if.then56
	movq	stderr, %rdi
	movq	-16(%rbp), %rax
	movl	3180(%rax), %edx
	movq	-16(%rbp), %rax
	movl	3188(%rax), %ecx
	movabsq	$.L.str.4, %rsi
	movb	$0, %al
	callq	fprintf
.LBB421_30:                             # %if.end59
	movq	-16(%rbp), %rax
	movl	3188(%rax), %eax
	movq	-16(%rbp), %rcx
	cmpl	3180(%rcx), %eax
	je	.LBB421_32
# %bb.31:                               # %if.then63
	movl	$-4, -24(%rbp)
	jmp	.LBB421_37
.LBB421_32:                             # %if.end64
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB421_37
.LBB421_33:                             # %if.end65
                                        #   in Loop: Header=BB421_7 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB421_35
# %bb.34:                               # %if.then68
	movl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB421_37
.LBB421_35:                             # %if.end69
                                        #   in Loop: Header=BB421_7 Depth=1
	jmp	.LBB421_36
.LBB421_36:                             # %if.end70
                                        #   in Loop: Header=BB421_7 Depth=1
	jmp	.LBB421_7
.LBB421_37:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$883080324, -44(%rbp)   # imm = 0x34A2BC84
	jne	.LBB421_39
.LBB421_38:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB421_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB421_38
.Lfunc_end421:
	.size	BZ2_bzDecompress.381, .Lfunc_end421-BZ2_bzDecompress.381
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.382 # -- Begin function BZ2_bzBuffToBuffCompress.382
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.382,@function
BZ2_bzBuffToBuffCompress.382:           # @BZ2_bzBuffToBuffCompress.382
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$378839727, -36(%rbp)   # imm = 0x1694A2AF
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB422_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB422_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB422_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB422_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB422_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB422_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB422_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB422_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB422_10
.LBB422_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB422_21
.LBB422_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB422_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB422_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB422_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB422_21
.LBB422_14:                             # %if.end21
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB422_16
# %bb.15:                               # %if.then24
	jmp	.LBB422_19
.LBB422_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB422_18
# %bb.17:                               # %if.then27
	jmp	.LBB422_20
.LBB422_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB422_21
.LBB422_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB422_21
.LBB422_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB422_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$378839727, -36(%rbp)   # imm = 0x1694A2AF
	jne	.LBB422_23
.LBB422_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB422_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB422_22
.Lfunc_end422:
	.size	BZ2_bzBuffToBuffCompress.382, .Lfunc_end422-BZ2_bzBuffToBuffCompress.382
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.383  # -- Begin function BZ2_bzCompressInit.383
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.383,@function
BZ2_bzCompressInit.383:                 # @BZ2_bzCompressInit.383
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$603875214, -44(%rbp)   # imm = 0x23FE678E
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB423_2
# %bb.1:                                # %if.then
	movl	$-9, -36(%rbp)
	jmp	.LBB423_29
.LBB423_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB423_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -28(%rbp)
	jl	.LBB423_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -28(%rbp)
	jg	.LBB423_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -32(%rbp)
	jl	.LBB423_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -32(%rbp)
	jle	.LBB423_8
.LBB423_7:                              # %if.then8
	movl	$-2, -36(%rbp)
	jmp	.LBB423_29
.LBB423_8:                              # %if.end9
	cmpl	$0, -32(%rbp)
	jne	.LBB423_10
# %bb.9:                                # %if.then11
	movl	$30, -32(%rbp)
.LBB423_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB423_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB423_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB423_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB423_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB423_16
# %bb.15:                               # %if.then24
	movl	$-3, -36(%rbp)
	jmp	.LBB423_29
.LBB423_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB423_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB423_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB423_28
.LBB423_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB423_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB423_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB423_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB423_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB423_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB423_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB423_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB423_27:                             # %if.end85
	movl	$-3, -36(%rbp)
	jmp	.LBB423_29
.LBB423_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -36(%rbp)
.LBB423_29:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$603875214, -44(%rbp)   # imm = 0x23FE678E
	jne	.LBB423_31
.LBB423_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB423_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB423_30
.Lfunc_end423:
	.size	BZ2_bzCompressInit.383, .Lfunc_end423-BZ2_bzCompressInit.383
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.384 # -- Begin function BZ2_bzBuffToBuffCompress.384
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.384,@function
BZ2_bzBuffToBuffCompress.384:           # @BZ2_bzBuffToBuffCompress.384
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1067426393, -40(%rbp)  # imm = 0x3F9FA259
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB424_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB424_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB424_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB424_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB424_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB424_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB424_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB424_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB424_10
.LBB424_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB424_21
.LBB424_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB424_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB424_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB424_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB424_21
.LBB424_14:                             # %if.end21
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB424_16
# %bb.15:                               # %if.then24
	jmp	.LBB424_19
.LBB424_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB424_18
# %bb.17:                               # %if.then27
	jmp	.LBB424_20
.LBB424_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB424_21
.LBB424_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB424_21
.LBB424_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB424_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1067426393, -40(%rbp)  # imm = 0x3F9FA259
	jne	.LBB424_23
.LBB424_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB424_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB424_22
.Lfunc_end424:
	.size	BZ2_bzBuffToBuffCompress.384, .Lfunc_end424-BZ2_bzBuffToBuffCompress.384
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function default_bzalloc.385
	.type	default_bzalloc.385,@function
default_bzalloc.385:                    # @default_bzalloc.385
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1969718953, -20(%rbp)  # imm = 0x756786A9
	movq	%rdi, -40(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	-12(%rbp), %eax
	imull	-16(%rbp), %eax
	movslq	%eax, %rdi
	callq	malloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rbx
	cmpl	$1969718953, -20(%rbp)  # imm = 0x756786A9
	jne	.LBB425_2
.LBB425_1:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB425_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB425_1
.Lfunc_end425:
	.size	default_bzalloc.385, .Lfunc_end425-default_bzalloc.385
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzBuffToBuffCompress.386 # -- Begin function BZ2_bzBuffToBuffCompress.386
	.p2align	4, 0x90
	.type	BZ2_bzBuffToBuffCompress.386,@function
BZ2_bzBuffToBuffCompress.386:           # @BZ2_bzBuffToBuffCompress.386
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1526577013, -36(%rbp)  # imm = 0x5AFDB775
	movq	%rdi, -56(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -20(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB426_9
# %bb.1:                                # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	je	.LBB426_9
# %bb.2:                                # %lor.lhs.false2
	cmpq	$0, -48(%rbp)
	je	.LBB426_9
# %bb.3:                                # %lor.lhs.false4
	cmpl	$1, -24(%rbp)
	jl	.LBB426_9
# %bb.4:                                # %lor.lhs.false6
	cmpl	$9, -24(%rbp)
	jg	.LBB426_9
# %bb.5:                                # %lor.lhs.false8
	cmpl	$0, -20(%rbp)
	jl	.LBB426_9
# %bb.6:                                # %lor.lhs.false10
	cmpl	$4, -20(%rbp)
	jg	.LBB426_9
# %bb.7:                                # %lor.lhs.false12
	cmpl	$0, 16(%rbp)
	jl	.LBB426_9
# %bb.8:                                # %lor.lhs.false14
	cmpl	$250, 16(%rbp)
	jle	.LBB426_10
.LBB426_9:                              # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB426_21
.LBB426_10:                             # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB426_12
# %bb.11:                               # %if.then17
	movl	$30, 16(%rbp)
.LBB426_12:                             # %if.end18
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	16(%rbp), %ecx
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressInit
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB426_14
# %bb.13:                               # %if.then20
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB426_21
.LBB426_14:                             # %if.end21
	movq	-48(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -104(%rbp)
	leaq	-136(%rbp), %rdi
	movl	$2, %esi
	callq	BZ2_bzCompress
	movl	%eax, -12(%rbp)
	cmpl	$3, -12(%rbp)
	jne	.LBB426_16
# %bb.15:                               # %if.then24
	jmp	.LBB426_19
.LBB426_16:                             # %if.end25
	cmpl	$4, -12(%rbp)
	je	.LBB426_18
# %bb.17:                               # %if.then27
	jmp	.LBB426_20
.LBB426_18:                             # %if.end28
	movl	-104(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, (%rcx)
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$0, -16(%rbp)
	jmp	.LBB426_21
.LBB426_19:                             # %output_overflow
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	$-8, -16(%rbp)
	jmp	.LBB426_21
.LBB426_20:                             # %errhandler
	leaq	-136(%rbp), %rdi
	callq	BZ2_bzCompressEnd
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB426_21:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1526577013, -36(%rbp)  # imm = 0x5AFDB775
	jne	.LBB426_23
.LBB426_22:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB426_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB426_22
.Lfunc_end426:
	.size	BZ2_bzBuffToBuffCompress.386, .Lfunc_end426-BZ2_bzBuffToBuffCompress.386
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.387  # -- Begin function BZ2_bzCompressInit.387
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.387,@function
BZ2_bzCompressInit.387:                 # @BZ2_bzCompressInit.387
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2143999649, -48(%rbp)  # imm = 0x7FCAD6A1
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -28(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB427_2
# %bb.1:                                # %if.then
	movl	$-9, -32(%rbp)
	jmp	.LBB427_29
.LBB427_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB427_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB427_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -36(%rbp)
	jg	.LBB427_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -28(%rbp)
	jl	.LBB427_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -28(%rbp)
	jle	.LBB427_8
.LBB427_7:                              # %if.then8
	movl	$-2, -32(%rbp)
	jmp	.LBB427_29
.LBB427_8:                              # %if.end9
	cmpl	$0, -28(%rbp)
	jne	.LBB427_10
# %bb.9:                                # %if.then11
	movl	$30, -28(%rbp)
.LBB427_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB427_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB427_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB427_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB427_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB427_16
# %bb.15:                               # %if.then24
	movl	$-3, -32(%rbp)
	jmp	.LBB427_29
.LBB427_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB427_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB427_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB427_28
.LBB427_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB427_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB427_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB427_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB427_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB427_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB427_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB427_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB427_27:                             # %if.end85
	movl	$-3, -32(%rbp)
	jmp	.LBB427_29
.LBB427_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -32(%rbp)
.LBB427_29:                             # %return
	movl	-32(%rbp), %ebx
	cmpl	$2143999649, -48(%rbp)  # imm = 0x7FCAD6A1
	jne	.LBB427_31
.LBB427_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB427_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB427_30
.Lfunc_end427:
	.size	BZ2_bzCompressInit.387, .Lfunc_end427-BZ2_bzCompressInit.387
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function handle_compress.388
	.type	handle_compress.388,@function
handle_compress.388:                    # @handle_compress.388
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$859258973, -28(%rbp)   # imm = 0x3337405D
	movq	%rdi, -40(%rbp)
	movb	$0, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB428_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$1, 12(%rax)
	jne	.LBB428_13
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_output_until_stop
	movzbl	%al, %eax
	movzbl	-10(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -10(%rbp)
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB428_4
# %bb.3:                                # %if.then6
	jmp	.LBB428_25
.LBB428_4:                              # %if.end
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	jne	.LBB428_8
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB428_8
# %bb.6:                                # %land.lhs.true11
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB428_8
# %bb.7:                                # %if.then14
	jmp	.LBB428_25
.LBB428_8:                              # %if.end15
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	prepare_new_block
	movq	-24(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-24(%rbp), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB428_12
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB428_12
# %bb.10:                               # %land.lhs.true24
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB428_12
# %bb.11:                               # %if.then28
	jmp	.LBB428_25
.LBB428_12:                             # %if.end29
                                        #   in Loop: Header=BB428_1 Depth=1
	jmp	.LBB428_13
.LBB428_13:                             # %if.end30
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$2, 12(%rax)
	jne	.LBB428_24
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	copy_input_until_stop
	movzbl	%al, %eax
	movzbl	-9(%rbp), %ecx
	orl	%eax, %ecx
	movb	%cl, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$2, 8(%rax)
	je	.LBB428_17
# %bb.15:                               # %land.lhs.true43
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB428_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	flush_RL
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	cmpl	$4, 8(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movzbl	%al, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB428_23
.LBB428_17:                             # %if.else
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rax
	movl	108(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jl	.LBB428_19
# %bb.18:                               # %if.then55
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	BZ2_compressBlock
	movq	-24(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB428_22
.LBB428_19:                             # %if.else57
                                        #   in Loop: Header=BB428_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB428_21
# %bb.20:                               # %if.then61
	jmp	.LBB428_25
.LBB428_21:                             # %if.end62
                                        #   in Loop: Header=BB428_1 Depth=1
	jmp	.LBB428_22
.LBB428_22:                             # %if.end63
                                        #   in Loop: Header=BB428_1 Depth=1
	jmp	.LBB428_23
.LBB428_23:                             # %if.end64
                                        #   in Loop: Header=BB428_1 Depth=1
	jmp	.LBB428_24
.LBB428_24:                             # %if.end65
                                        #   in Loop: Header=BB428_1 Depth=1
	jmp	.LBB428_1
.LBB428_25:                             # %while.end
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movb	$1, %al
	jne	.LBB428_27
# %bb.26:                               # %lor.rhs
	movzbl	-10(%rbp), %eax
	cmpl	$0, %eax
	setne	%al
.LBB428_27:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %ebx
	cmpl	$859258973, -28(%rbp)   # imm = 0x3337405D
	jne	.LBB428_29
.LBB428_28:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB428_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB428_28
.Lfunc_end428:
	.size	handle_compress.388, .Lfunc_end428-handle_compress.388
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompress.389      # -- Begin function BZ2_bzCompress.389
	.p2align	4, 0x90
	.type	BZ2_bzCompress.389,@function
BZ2_bzCompress.389:                     # @BZ2_bzCompress.389
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1792979124, -44(%rbp)  # imm = 0x6ADEB0B4
	movq	%rdi, -40(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB429_2
# %bb.1:                                # %if.then
	movl	$-2, -16(%rbp)
	jmp	.LBB429_39
.LBB429_2:                              # %if.end
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB429_4
# %bb.3:                                # %if.then2
	movl	$-2, -16(%rbp)
	jmp	.LBB429_39
.LBB429_4:                              # %if.end3
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB429_6
# %bb.5:                                # %if.then6
	movl	$-2, -16(%rbp)
	jmp	.LBB429_39
.LBB429_6:                              # %if.end7
	jmp	.LBB429_7
.LBB429_7:                              # %preswitch
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$3, %ecx
	ja	.LBB429_38
# %bb.8:                                # %preswitch
                                        #   in Loop: Header=BB429_7 Depth=1
	movq	.LJTI429_0(,%rax,8), %rax
	jmpq	*%rax
.LBB429_9:                              # %sw.bb
	movl	$-1, -16(%rbp)
	jmp	.LBB429_39
.LBB429_10:                             # %sw.bb8
                                        #   in Loop: Header=BB429_7 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB429_12
# %bb.11:                               # %if.then10
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$4294967294, %ecx       # imm = 0xFFFFFFFE
	cmovnel	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB429_39
.LBB429_12:                             # %if.else
                                        #   in Loop: Header=BB429_7 Depth=1
	cmpl	$1, -28(%rbp)
	jne	.LBB429_15
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB429_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$3, 8(%rax)
.LBB429_14:                             # %preswitch.backedge
                                        #   in Loop: Header=BB429_7 Depth=1
	jmp	.LBB429_7
.LBB429_15:                             # %if.else15
                                        #   in Loop: Header=BB429_7 Depth=1
	cmpl	$2, -28(%rbp)
	jne	.LBB429_17
# %bb.16:                               # %if.then18
                                        #   in Loop: Header=BB429_7 Depth=1
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rax
	movl	$4, 8(%rax)
	jmp	.LBB429_14
.LBB429_17:                             # %if.else22
	movl	$-2, -16(%rbp)
	jmp	.LBB429_39
.LBB429_18:                             # %sw.bb23
	cmpl	$1, -28(%rbp)
	je	.LBB429_20
# %bb.19:                               # %if.then26
	movl	$-1, -16(%rbp)
	jmp	.LBB429_39
.LBB429_20:                             # %if.end27
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB429_22
# %bb.21:                               # %if.then33
	movl	$-1, -16(%rbp)
	jmp	.LBB429_39
.LBB429_22:                             # %if.end34
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB429_25
# %bb.23:                               # %lor.lhs.false
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB429_25
# %bb.24:                               # %lor.lhs.false41
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB429_26
.LBB429_25:                             # %if.then44
	movl	$2, -16(%rbp)
	jmp	.LBB429_39
.LBB429_26:                             # %if.end45
	movq	-24(%rbp), %rax
	movl	$2, 8(%rax)
	movl	$1, -16(%rbp)
	jmp	.LBB429_39
.LBB429_27:                             # %sw.bb47
	cmpl	$2, -28(%rbp)
	je	.LBB429_29
# %bb.28:                               # %if.then50
	movl	$-1, -16(%rbp)
	jmp	.LBB429_39
.LBB429_29:                             # %if.end51
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	8(%rcx), %eax
	je	.LBB429_31
# %bb.30:                               # %if.then57
	movl	$-1, -16(%rbp)
	jmp	.LBB429_39
.LBB429_31:                             # %if.end58
	movq	-40(%rbp), %rdi
	callq	handle_compress
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.LBB429_33
# %bb.32:                               # %if.then61
	movl	$-1, -16(%rbp)
	jmp	.LBB429_39
.LBB429_33:                             # %if.end62
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	ja	.LBB429_36
# %bb.34:                               # %lor.lhs.false66
	movq	-24(%rbp), %rdi
	callq	isempty_RL
	cmpb	$0, %al
	je	.LBB429_36
# %bb.35:                               # %lor.lhs.false69
	movq	-24(%rbp), %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	cmpl	116(%rcx), %eax
	jge	.LBB429_37
.LBB429_36:                             # %if.then74
	movl	$3, -16(%rbp)
	jmp	.LBB429_39
.LBB429_37:                             # %if.end75
	movq	-24(%rbp), %rax
	movl	$1, 8(%rax)
	movl	$4, -16(%rbp)
	jmp	.LBB429_39
.LBB429_38:                             # %sw.epilog
	movl	$0, -16(%rbp)
.LBB429_39:                             # %return
	movl	-16(%rbp), %ebx
	cmpl	$1792979124, -44(%rbp)  # imm = 0x6ADEB0B4
	jne	.LBB429_41
.LBB429_40:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB429_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB429_40
.Lfunc_end429:
	.size	BZ2_bzCompress.389, .Lfunc_end429-BZ2_bzCompress.389
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI429_0:
	.quad	.LBB429_9
	.quad	.LBB429_10
	.quad	.LBB429_18
	.quad	.LBB429_27
                                        # -- End function
	.text
	.globl	BZ2_bzCompressInit.390  # -- Begin function BZ2_bzCompressInit.390
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.390,@function
BZ2_bzCompressInit.390:                 # @BZ2_bzCompressInit.390
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$534755025, -48(%rbp)   # imm = 0x1FDFB6D1
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB430_2
# %bb.1:                                # %if.then
	movl	$-9, -36(%rbp)
	jmp	.LBB430_29
.LBB430_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB430_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -28(%rbp)
	jl	.LBB430_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -28(%rbp)
	jg	.LBB430_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -32(%rbp)
	jl	.LBB430_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -32(%rbp)
	jle	.LBB430_8
.LBB430_7:                              # %if.then8
	movl	$-2, -36(%rbp)
	jmp	.LBB430_29
.LBB430_8:                              # %if.end9
	cmpl	$0, -32(%rbp)
	jne	.LBB430_10
# %bb.9:                                # %if.then11
	movl	$30, -32(%rbp)
.LBB430_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB430_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB430_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB430_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB430_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB430_16
# %bb.15:                               # %if.then24
	movl	$-3, -36(%rbp)
	jmp	.LBB430_29
.LBB430_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB430_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB430_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB430_28
.LBB430_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB430_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB430_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB430_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB430_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB430_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB430_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB430_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB430_27:                             # %if.end85
	movl	$-3, -36(%rbp)
	jmp	.LBB430_29
.LBB430_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -36(%rbp)
.LBB430_29:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$534755025, -48(%rbp)   # imm = 0x1FDFB6D1
	jne	.LBB430_31
.LBB430_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB430_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB430_30
.Lfunc_end430:
	.size	BZ2_bzCompressInit.390, .Lfunc_end430-BZ2_bzCompressInit.390
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.391  # -- Begin function BZ2_bzCompressInit.391
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.391,@function
BZ2_bzCompressInit.391:                 # @BZ2_bzCompressInit.391
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$645944194, -48(%rbp)   # imm = 0x26805382
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB431_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB431_29
.LBB431_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB431_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -36(%rbp)
	jl	.LBB431_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -36(%rbp)
	jg	.LBB431_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -32(%rbp)
	jl	.LBB431_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -32(%rbp)
	jle	.LBB431_8
.LBB431_7:                              # %if.then8
	movl	$-2, -28(%rbp)
	jmp	.LBB431_29
.LBB431_8:                              # %if.end9
	cmpl	$0, -32(%rbp)
	jne	.LBB431_10
# %bb.9:                                # %if.then11
	movl	$30, -32(%rbp)
.LBB431_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB431_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB431_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB431_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB431_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB431_16
# %bb.15:                               # %if.then24
	movl	$-3, -28(%rbp)
	jmp	.LBB431_29
.LBB431_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB431_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB431_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB431_28
.LBB431_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB431_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB431_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB431_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB431_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB431_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB431_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB431_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB431_27:                             # %if.end85
	movl	$-3, -28(%rbp)
	jmp	.LBB431_29
.LBB431_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -36(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -28(%rbp)
.LBB431_29:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$645944194, -48(%rbp)   # imm = 0x26805382
	jne	.LBB431_31
.LBB431_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB431_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB431_30
.Lfunc_end431:
	.size	BZ2_bzCompressInit.391, .Lfunc_end431-BZ2_bzCompressInit.391
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.392
	.type	bzopen_or_bzdopen.392,@function
bzopen_or_bzdopen.392:                  # @bzopen_or_bzdopen.392
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$1536449668, -84(%rbp)  # imm = 0x5B945C84
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -80(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -36(%rbp)
	movl	$30, -76(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -88(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB432_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB432_39
.LBB432_2:                              # %if.end
	jmp	.LBB432_3
.LBB432_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB432_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB432_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB432_7
	jmp	.LBB432_5
.LBB432_5:                              # %while.body
                                        #   in Loop: Header=BB432_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB432_9
	jmp	.LBB432_6
.LBB432_6:                              # %while.body
                                        #   in Loop: Header=BB432_3 Depth=1
	subl	$119, %eax
	je	.LBB432_8
	jmp	.LBB432_10
.LBB432_7:                              # %sw.bb
                                        #   in Loop: Header=BB432_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB432_13
.LBB432_8:                              # %sw.bb1
                                        #   in Loop: Header=BB432_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB432_13
.LBB432_9:                              # %sw.bb2
                                        #   in Loop: Header=BB432_3 Depth=1
	movl	$1, -40(%rbp)
	jmp	.LBB432_13
.LBB432_10:                             # %sw.default
                                        #   in Loop: Header=BB432_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB432_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB432_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB432_12:                             # %if.end8
                                        #   in Loop: Header=BB432_3 Depth=1
	jmp	.LBB432_13
.LBB432_13:                             # %sw.epilog
                                        #   in Loop: Header=BB432_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB432_3
.LBB432_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -80(%rbp)
	jne	.LBB432_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB432_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB432_21
.LBB432_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB432_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB432_20
.LBB432_19:                             # %cond.false
	movq	stdin, %rax
.LBB432_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB432_22
.LBB432_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB432_22:                             # %if.end26
	jmp	.LBB432_24
.LBB432_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-68(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB432_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB432_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB432_39
.LBB432_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB432_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB432_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB432_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB432_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB432_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-76(%rbp), %r8d
	leaq	-72(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB432_33
.LBB432_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-88(%rbp), %r9d
	leaq	-72(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB432_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB432_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB432_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB432_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB432_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB432_39
.LBB432_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB432_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1536449668, -84(%rbp)  # imm = 0x5B945C84
	jne	.LBB432_41
.LBB432_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB432_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB432_40
.Lfunc_end432:
	.size	bzopen_or_bzdopen.392, .Lfunc_end432-bzopen_or_bzdopen.392
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function bzopen_or_bzdopen.393
	.type	bzopen_or_bzdopen.393,@function
bzopen_or_bzdopen.393:                  # @bzopen_or_bzdopen.393
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$5096, %rsp             # imm = 0x13E8
	.cfi_offset %rbx, -24
	movl	$1751294485, -68(%rbp)  # imm = 0x6862A215
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$9, -12(%rbp)
	movl	$0, -16(%rbp)
	leaq	-98(%rbp), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	memset
	movq	$0, -24(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -36(%rbp)
	movl	$30, -88(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -80(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB433_2
# %bb.1:                                # %if.then
	movq	$0, -48(%rbp)
	jmp	.LBB433_39
.LBB433_2:                              # %if.end
	jmp	.LBB433_3
.LBB433_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpb	$0, (%rax)
	je	.LBB433_14
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB433_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	movl	%eax, %ecx
	subl	$114, %ecx
	je	.LBB433_7
	jmp	.LBB433_5
.LBB433_5:                              # %while.body
                                        #   in Loop: Header=BB433_3 Depth=1
	movl	%eax, %ecx
	subl	$115, %ecx
	je	.LBB433_9
	jmp	.LBB433_6
.LBB433_6:                              # %while.body
                                        #   in Loop: Header=BB433_3 Depth=1
	subl	$119, %eax
	je	.LBB433_8
	jmp	.LBB433_10
.LBB433_7:                              # %sw.bb
                                        #   in Loop: Header=BB433_3 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB433_13
.LBB433_8:                              # %sw.bb1
                                        #   in Loop: Header=BB433_3 Depth=1
	movl	$1, -16(%rbp)
	jmp	.LBB433_13
.LBB433_9:                              # %sw.bb2
                                        #   in Loop: Header=BB433_3 Depth=1
	movl	$1, -40(%rbp)
	jmp	.LBB433_13
.LBB433_10:                             # %sw.default
                                        #   in Loop: Header=BB433_3 Depth=1
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB433_12
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB433_3 Depth=1
	movq	-32(%rbp), %rax
	movsbl	(%rax), %eax
	subl	$48, %eax
	movl	%eax, -12(%rbp)
.LBB433_12:                             # %if.end8
                                        #   in Loop: Header=BB433_3 Depth=1
	jmp	.LBB433_13
.LBB433_13:                             # %sw.epilog
                                        #   in Loop: Header=BB433_3 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB433_3
.LBB433_14:                             # %while.end
	leaq	-98(%rbp), %rdi
	movl	-16(%rbp), %eax
	cmpl	$0, %eax
	movabsq	$.L.str.6, %rax
	movabsq	$.L.str.7, %rsi
	cmovneq	%rax, %rsi
	callq	strcat
	leaq	-98(%rbp), %rdi
	movabsq	$.L.str.8, %rsi
	callq	strcat
	cmpl	$0, -76(%rbp)
	jne	.LBB433_23
# %bb.15:                               # %if.then15
	cmpq	$0, -64(%rbp)
	je	.LBB433_17
# %bb.16:                               # %lor.lhs.false
	movq	-64(%rbp), %rdi
	movl	$.L.str.9, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB433_21
.LBB433_17:                             # %if.then21
	cmpl	$0, -16(%rbp)
	je	.LBB433_19
# %bb.18:                               # %cond.true
	movq	stdout, %rax
	jmp	.LBB433_20
.LBB433_19:                             # %cond.false
	movq	stdin, %rax
.LBB433_20:                             # %cond.end
	movq	%rax, -24(%rbp)
	jmp	.LBB433_22
.LBB433_21:                             # %if.else
	leaq	-98(%rbp), %rsi
	movq	-64(%rbp), %rdi
	callq	fopen
	movq	%rax, -24(%rbp)
.LBB433_22:                             # %if.end26
	jmp	.LBB433_24
.LBB433_23:                             # %if.else27
	leaq	-98(%rbp), %rsi
	movl	-72(%rbp), %edi
	callq	fdopen
	movq	%rax, -24(%rbp)
.LBB433_24:                             # %if.end30
	cmpq	$0, -24(%rbp)
	jne	.LBB433_26
# %bb.25:                               # %if.then33
	movq	$0, -48(%rbp)
	jmp	.LBB433_39
.LBB433_26:                             # %if.end34
	cmpl	$0, -16(%rbp)
	je	.LBB433_32
# %bb.27:                               # %if.then36
	cmpl	$1, -12(%rbp)
	jge	.LBB433_29
# %bb.28:                               # %if.then39
	movl	$1, -12(%rbp)
.LBB433_29:                             # %if.end40
	cmpl	$9, -12(%rbp)
	jle	.LBB433_31
# %bb.30:                               # %if.then43
	movl	$9, -12(%rbp)
.LBB433_31:                             # %if.end44
	movq	-24(%rbp), %rsi
	movl	-12(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-88(%rbp), %r8d
	leaq	-84(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	jmp	.LBB433_33
.LBB433_32:                             # %if.else46
	leaq	-5104(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-80(%rbp), %r9d
	leaq	-84(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -56(%rbp)
.LBB433_33:                             # %if.end49
	cmpq	$0, -56(%rbp)
	jne	.LBB433_38
# %bb.34:                               # %if.then52
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB433_37
# %bb.35:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB433_37
# %bb.36:                               # %if.then57
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB433_37:                             # %if.end59
	movq	$0, -48(%rbp)
	jmp	.LBB433_39
.LBB433_38:                             # %if.end60
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB433_39:                             # %return
	movq	-48(%rbp), %rbx
	cmpl	$1751294485, -68(%rbp)  # imm = 0x6862A215
	jne	.LBB433_41
.LBB433_40:
	movq	%rbx, %rax
	addq	$5096, %rsp             # imm = 0x13E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB433_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB433_40
.Lfunc_end433:
	.size	bzopen_or_bzdopen.393, .Lfunc_end433-bzopen_or_bzdopen.393
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.394  # -- Begin function BZ2_bzCompressInit.394
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.394,@function
BZ2_bzCompressInit.394:                 # @BZ2_bzCompressInit.394
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1150769629, -48(%rbp)  # imm = 0x449759DD
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB434_2
# %bb.1:                                # %if.then
	movl	$-9, -32(%rbp)
	jmp	.LBB434_29
.LBB434_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB434_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -28(%rbp)
	jl	.LBB434_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -28(%rbp)
	jg	.LBB434_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -36(%rbp)
	jl	.LBB434_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -36(%rbp)
	jle	.LBB434_8
.LBB434_7:                              # %if.then8
	movl	$-2, -32(%rbp)
	jmp	.LBB434_29
.LBB434_8:                              # %if.end9
	cmpl	$0, -36(%rbp)
	jne	.LBB434_10
# %bb.9:                                # %if.then11
	movl	$30, -36(%rbp)
.LBB434_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB434_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB434_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB434_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB434_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB434_16
# %bb.15:                               # %if.then24
	movl	$-3, -32(%rbp)
	jmp	.LBB434_29
.LBB434_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB434_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB434_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB434_28
.LBB434_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB434_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB434_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB434_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB434_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB434_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB434_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB434_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB434_27:                             # %if.end85
	movl	$-3, -32(%rbp)
	jmp	.LBB434_29
.LBB434_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -32(%rbp)
.LBB434_29:                             # %return
	movl	-32(%rbp), %ebx
	cmpl	$1150769629, -48(%rbp)  # imm = 0x449759DD
	jne	.LBB434_31
.LBB434_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB434_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB434_30
.Lfunc_end434:
	.size	BZ2_bzCompressInit.394, .Lfunc_end434-BZ2_bzCompressInit.394
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.395  # -- Begin function BZ2_bzCompressInit.395
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.395,@function
BZ2_bzCompressInit.395:                 # @BZ2_bzCompressInit.395
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1313345522, -48(%rbp)  # imm = 0x4E480FF2
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -32(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB435_2
# %bb.1:                                # %if.then
	movl	$-9, -36(%rbp)
	jmp	.LBB435_29
.LBB435_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB435_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -28(%rbp)
	jl	.LBB435_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -28(%rbp)
	jg	.LBB435_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -32(%rbp)
	jl	.LBB435_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -32(%rbp)
	jle	.LBB435_8
.LBB435_7:                              # %if.then8
	movl	$-2, -36(%rbp)
	jmp	.LBB435_29
.LBB435_8:                              # %if.end9
	cmpl	$0, -32(%rbp)
	jne	.LBB435_10
# %bb.9:                                # %if.then11
	movl	$30, -32(%rbp)
.LBB435_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB435_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB435_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB435_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB435_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB435_16
# %bb.15:                               # %if.then24
	movl	$-3, -36(%rbp)
	jmp	.LBB435_29
.LBB435_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB435_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB435_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB435_28
.LBB435_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB435_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB435_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB435_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB435_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB435_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB435_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB435_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB435_27:                             # %if.end85
	movl	$-3, -36(%rbp)
	jmp	.LBB435_29
.LBB435_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -28(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -36(%rbp)
.LBB435_29:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$1313345522, -48(%rbp)  # imm = 0x4E480FF2
	jne	.LBB435_31
.LBB435_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB435_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB435_30
.Lfunc_end435:
	.size	BZ2_bzCompressInit.395, .Lfunc_end435-BZ2_bzCompressInit.395
	.cfi_endproc
                                        # -- End function
	.globl	BZ2_bzCompressInit.396  # -- Begin function BZ2_bzCompressInit.396
	.p2align	4, 0x90
	.type	BZ2_bzCompressInit.396,@function
BZ2_bzCompressInit.396:                 # @BZ2_bzCompressInit.396
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$192124142, -48(%rbp)   # imm = 0xB7394EE
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -36(%rbp)
	callq	bz_config_ok
	cmpl	$0, %eax
	jne	.LBB436_2
# %bb.1:                                # %if.then
	movl	$-9, -28(%rbp)
	jmp	.LBB436_29
.LBB436_2:                              # %if.end
	cmpq	$0, -24(%rbp)
	je	.LBB436_7
# %bb.3:                                # %lor.lhs.false
	cmpl	$1, -32(%rbp)
	jl	.LBB436_7
# %bb.4:                                # %lor.lhs.false2
	cmpl	$9, -32(%rbp)
	jg	.LBB436_7
# %bb.5:                                # %lor.lhs.false4
	cmpl	$0, -36(%rbp)
	jl	.LBB436_7
# %bb.6:                                # %lor.lhs.false6
	cmpl	$250, -36(%rbp)
	jle	.LBB436_8
.LBB436_7:                              # %if.then8
	movl	$-2, -28(%rbp)
	jmp	.LBB436_29
.LBB436_8:                              # %if.end9
	cmpl	$0, -36(%rbp)
	jne	.LBB436_10
# %bb.9:                                # %if.then11
	movl	$30, -36(%rbp)
.LBB436_10:                             # %if.end12
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	.LBB436_12
# %bb.11:                               # %if.then14
	movq	-24(%rbp), %rax
	movabsq	$default_bzalloc, %rcx
	movq	%rcx, 56(%rax)
.LBB436_12:                             # %if.end16
	movq	-24(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB436_14
# %bb.13:                               # %if.then18
	movq	-24(%rbp), %rax
	movabsq	$default_bzfree, %rcx
	movq	%rcx, 64(%rax)
.LBB436_14:                             # %if.end20
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$55768, %esi            # imm = 0xD9D8
	movl	$1, %edx
	callq	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB436_16
# %bb.15:                               # %if.then24
	movl	$-3, -28(%rbp)
	jmp	.LBB436_29
.LBB436_16:                             # %if.end25
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	imull	$100000, -32(%rbp), %eax # imm = 0x186A0
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movslq	-40(%rbp), %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	-40(%rbp), %ecx
	addl	$34, %ecx
	movslq	%ecx, %rsi
	shlq	$2, %rsi
                                        # kill: def $esi killed $esi killed $rsi
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movl	$262148, %esi           # imm = 0x40004
	movl	$1, %edx
	callq	*%rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB436_19
# %bb.17:                               # %lor.lhs.false47
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB436_19
# %bb.18:                               # %lor.lhs.false51
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	.LBB436_28
.LBB436_19:                             # %if.then55
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB436_21
# %bb.20:                               # %if.then59
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rsi
	callq	*%rax
.LBB436_21:                             # %if.end63
	movq	-16(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB436_23
# %bb.22:                               # %if.then67
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rsi
	callq	*%rax
.LBB436_23:                             # %if.end71
	movq	-16(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB436_25
# %bb.24:                               # %if.then75
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rsi
	callq	*%rax
.LBB436_25:                             # %if.end79
	cmpq	$0, -16(%rbp)
	je	.LBB436_27
# %bb.26:                               # %if.then82
	movq	-24(%rbp), %rax
	movq	64(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	72(%rcx), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB436_27:                             # %if.end85
	movl	$-3, -28(%rbp)
	jmp	.LBB436_29
.LBB436_28:                             # %if.end86
	movq	-16(%rbp), %rax
	movl	$0, 660(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 12(%rax)
	movq	-16(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 652(%rax)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 664(%rcx)
	imull	$100000, -32(%rbp), %eax # imm = 0x186A0
	subl	$19, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 112(%rcx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 656(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 88(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-16(%rbp), %rdi
	callq	init_RL
	movq	-16(%rbp), %rdi
	callq	prepare_new_block
	movl	$0, -28(%rbp)
.LBB436_29:                             # %return
	movl	-28(%rbp), %ebx
	cmpl	$192124142, -48(%rbp)   # imm = 0xB7394EE
	jne	.LBB436_31
.LBB436_30:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB436_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB436_30
.Lfunc_end436:
	.size	BZ2_bzCompressInit.396, .Lfunc_end436-BZ2_bzCompressInit.396
	.cfi_endproc
                                        # -- End function
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"\n\nbzip2/libbzip2: internal error number %d.\nThis is a bug in bzip2/libbzip2, %s.\nPlease report it to me at: jseward@bzip.org.  If this happened\nwhen you were using some program which uses libbzip2 as a\ncomponent, you should also report this bug to the author(s)\nof that program.  Please make an effort to report this bug;\ntimely and accurate bug reports eventually lead to higher\nquality software.  Thanks.  Julian Seward, 15 February 2005.\n\n"
	.size	.L.str, 443

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"\n*** A special note about internal error number 1007 ***\n\nExperience suggests that a common cause of i.e. 1007\nis unreliable memory or other hardware.  The 1007 assertion\njust happens to cross-check the results of huge numbers of\nmemory reads/writes, and so acts (unintendedly) as a stress\ntest of your memory system.\n\nI suggest the following: try compressing the file again,\npossibly monitoring progress in detail with the -vv flag.\n\n* If the error cannot be reproduced, and/or happens at different\n  points in compression, you may have a flaky memory system.\n  Try a memory-test program.  I have used Memtest86\n  (www.memtest86.com).  At the time of writing it is free (GPLd).\n  Memtest86 tests memory much more thorougly than your BIOSs\n  power-on test, and may find failures that the BIOS doesn't.\n\n* If the error can be repeatably reproduced, this is a bug in\n  bzip2, and I would very much like to hear about it.  Please\n  let me know, and, ideally, save a copy of the file causing the\n  problem -- without which I will be unable to investigate it.\n\n"
	.size	.L.str.1, 1057

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	" {0x%08x, 0x%08x}"
	.size	.L.str.2, 18

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"]"
	.size	.L.str.3, 2

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"\n    combined CRCs: stored = 0x%08x, computed = 0x%08x"
	.size	.L.str.4, 55

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"1.0.3, 15-Feb-2005"
	.size	.L.str.5, 19

	.type	bzerrorstrings,@object  # @bzerrorstrings
	.data
	.p2align	4
bzerrorstrings:
	.quad	.L.str.10
	.quad	.L.str.11
	.quad	.L.str.12
	.quad	.L.str.13
	.quad	.L.str.14
	.quad	.L.str.15
	.quad	.L.str.16
	.quad	.L.str.17
	.quad	.L.str.18
	.quad	.L.str.19
	.quad	.L.str.20
	.quad	.L.str.20
	.quad	.L.str.20
	.quad	.L.str.20
	.quad	.L.str.20
	.quad	.L.str.20
	.size	bzerrorstrings, 128

	.type	.L.str.6,@object        # @.str.6
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.6:
	.asciz	"w"
	.size	.L.str.6, 2

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"r"
	.size	.L.str.7, 2

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"b"
	.size	.L.str.8, 2

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.zero	1
	.size	.L.str.9, 1

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"OK"
	.size	.L.str.10, 3

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"SEQUENCE_ERROR"
	.size	.L.str.11, 15

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"PARAM_ERROR"
	.size	.L.str.12, 12

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"MEM_ERROR"
	.size	.L.str.13, 10

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"DATA_ERROR"
	.size	.L.str.14, 11

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"DATA_ERROR_MAGIC"
	.size	.L.str.15, 17

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"IO_ERROR"
	.size	.L.str.16, 9

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"UNEXPECTED_EOF"
	.size	.L.str.17, 15

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"OUTBUFF_FULL"
	.size	.L.str.18, 13

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"CONFIG_ERROR"
	.size	.L.str.19, 13

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"???"
	.size	.L.str.20, 4


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
